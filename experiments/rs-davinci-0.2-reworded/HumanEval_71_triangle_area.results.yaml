name: HumanEval_71_triangle_area
language: rs
results:
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpr97zob5m.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p\
    \ - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n      \
    \  -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpz8uvj1af.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpxh9_e8ta.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpxkykaxcl.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpkvf4saew.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpgfy2v76r.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpiy5sqj_d.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpzg1aobuk.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpb_q44oja.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    if a + b > c {\n        let s = (a + b + c) as f64 / 2.0;\n        (s * (s\
    \ - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n      \
    \  -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpc87pqup7.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmps5ymvc57.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp1cknsx00.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpbs8mls7j.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpvuyot4qu.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpeq4qopff.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpsew42mng.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1]\
    \ as f64;\n    let c = sides[2] as f64;\n    if a + b > c {\n        let s = (a\
    \ + b + c) / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmple303hjy.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpaj_i9u6c.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1]\
    \ as f64;\n    let c = sides[2] as f64;\n    if a + b > c {\n        let s = (a\
    \ + b + c) / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpzfxjajxo.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpx14ke3ew.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpvfambj91.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp260zo97k.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp1yyfpwrb.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp3c4ad3px.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpiolfi7tk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    if a + b <= c {\n        return -1.0;\n    }\n    let p = (a + b + c) as\
    \ f64 / 2.0;\n    (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp504tyxel.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpmljey6bn.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpxqmsdby9.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpzvn8kyzs.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmploic3cp6.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpwto1nqha.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpxql03qom.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp8_49okf3.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmphun2p91z.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpmt0i5s9q.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp7mlm7no0.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmphzuzvn4_.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp6ysqrit2.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpw1s1mcpx.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpx1lpolzw.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp6dceazzr.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b\
    \ = sides[1] as f64;\n    let c = sides[2] as f64;\n    if a + b > c {\n     \
    \   let s = (a + b + c) / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n\
    \    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp8g0odxx3.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpco282b6y.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp1j2t1i1s.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpabu3wywo.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpsz9ejvxp.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpucxuq5w9.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpr3e_bjgo.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpxns6xflo.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp_pdcugb7.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpdat61ev4.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp5qxxgltl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp6rr58fnj.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpoqjewubl.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpch33r6v7.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = -1.0;\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a +\
    \ b + c) as f64 / 2.0;\n        area = (s * (s - a as f64) * (s - b as f64) *\
    \ (s - c as f64)).sqrt();\n    }\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpna40sdwi.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp4j8bh1sc.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpftlkyo5t.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpo5fgt1ep.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p\
    \ - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n      \
    \  -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp2ki7zxdd.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpk00q5d1o.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpz1gdsr7f.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpe5bmw8mk.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp808zti0c.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp4yairq64.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp4bl531t1.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpgqcpc9ee.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpb731vq9o.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp1lnxbh5m.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpnemidmhx.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpmn2_bsf6.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpzbr5zasf.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmptk5fy31_.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp3fxieoyh.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmptx5c7wnm.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpbs518ied.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpaaq2vscr.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp7aq776am.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpof1nwldu.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmprs190qrf.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpd49zgjqa.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpp9i1lhon.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpdkkv2blp.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpdud2l741.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp7q481fgo.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpkgaawdmw.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpdut08k6l.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpm8ip2769.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpqcm9mw6l.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b\
    \ = sides[1] as f64;\n    let c = sides[2] as f64;\n    if a + b > c {\n     \
    \   let p = (a + b + c) / 2.0;\n        (p * (p - a) * (p - b) * (p - c)).sqrt()\n\
    \    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmptnn17dk_.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp65v585ii.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmph3i44klu.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpwakrlp_6.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp2i4o8t9x.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp9qqnxb5k.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpl6ij6201.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpvjc137nr.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp09lqn7_z.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpidrhmvlb.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpu5evmv7d.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp80cqbk2n.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpch58oplx.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpgnq33z_v.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp1rlb9054.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp8wtxytcf.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpqseervfk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp8vypym3u.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpp68m16np.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    if a + b <= c {\n        return -1.0;\n    }\n    let s = (a + b + c) as\
    \ f64 / 2.0;\n    (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmppgacf39e.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpezvv_454.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpk4s4ij6c.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp1vcybmn5.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpl7d7g4mg.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpplog42p6.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpd4b8jya8.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmps80kak_1.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpkiivyu2t.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp_341sr4k.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp4lxgcl6h.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpo9h_kw4f.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpe33tr3xv.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpdj9m1jx5.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpxf8u7fb5.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpajuufflp.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp6jlxmopg.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp51wzzc41.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp1u1ms0u7.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpqkkbd3c9.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp740aj2h1.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpcbkzr2ko.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p\
    \ - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n      \
    \  -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp6gql4q_k.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpguff290g.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp61t5sa60.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp3qs93b8a.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmplrw3vn1t.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpj75ra20y.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmprs_vgwhh.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpt03xnk5f.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmplia2tzef.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmple7kv8f3.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp8agph8sn.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpntqhmp9h.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpdyaovcxy.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpmrs2ov3v.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp74yk648w.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpu8fqeojm.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmptt4r96hc.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpkxmjckk7.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp3vm5msv_.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp2xdthokw.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmppyojwwb4.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpxw4h7q_s.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp7dssxa1j.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b <= c {\n        return -1.0;\n    }\n    let p = (a\
    \ + b + c) as f64 / 2.0;\n    ((p * (p - a as f64) * (p - b as f64) * (p - c as\
    \ f64)).sqrt() * 100.0).round() / 100.0\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp98vdil72.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpjrvxxwmn.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1]\
    \ as f64;\n    let c = sides[2] as f64;\n    if a + b > c {\n        let s = (a\
    \ + b + c) / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpc171_exq.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp0u73y7dw.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpj0dod48n.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp6p0hkc5o.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmppvmhhsys.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpnen1iev_.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpkg2tzblh.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpw0sg5bgg.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp79p5on25.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpeprql941.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpz1crh020.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp18eyulu1.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpfy9rupew.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpg4z2gv34.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpv6pma5la.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp8caruwd0.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp4jobcdbc.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpsqss7gwc.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp7tz1mh3e.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p\
    \ - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n      \
    \  -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp92wl63zj.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpogvssa88.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p\
    \ - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n      \
    \  -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpqeozyvxd.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpb94_hevf.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpeockdb2s.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpru8mbndu.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpa0mcx414.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmptayei1jp.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b\
    \ = sides[1] as f64;\n    let c = sides[2] as f64;\n    if a + b > c {\n     \
    \   let s = (a + b + c) / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n\
    \    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp37o6xctq.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpid1e4m4p.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp9zmfwnyd.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpaow_ptg1.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp46rmhafz.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp44y7z8ej.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpg_o5rus0.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpmcp3q6zw.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpvqis7xt_.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpgkw7m51n.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp5c2ydnen.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp7zgrsgya.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpp8_o2ad3.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpa1kp9oxg.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpoa28aldd.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp3itrjc_h.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpy9a3oxt_.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
