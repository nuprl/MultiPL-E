name: HumanEval_73_smallest_change
language: rs
results:
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut min_changes =\
    \ 0;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left\
    \ < right {\n        if arr[left] != arr[right] {\n            min_changes +=\
    \ 1;\n        }\n        left += 1;\n        right -= 1;\n    }\n    min_changes\n\
    }\n\nfn main() {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2,\
    \ 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut left = 0;\n \
    \   let mut right = arr.len() - 1;\n    let mut changes = 0;\n\n    while left\
    \ < right {\n        if arr[left] == arr[right] {\n            left += 1;\n  \
    \          right -= 1;\n        } else {\n            if arr[left] < arr[right]\
    \ {\n                left += 1;\n            } else {\n                right -=\
    \ 1;\n            }\n            changes += 1;\n        }\n    }\n\n    changes\n\
    }\n\nfn main() {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2,\
    \ 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `4`', /tmp/tmpkmkz843u.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n\
    \    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n\
    \    while i < j {\n        if arr[i] != arr[j] {\n            count += 1;\n \
    \       }\n        i += 1;\n        j -= 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n\
    \    let mut changes = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n\
    \    while i < j {\n        if arr[i] != arr[j] {\n            if arr[i] > arr[j]\
    \ {\n                arr[j] = arr[i];\n            } else {\n                arr[i]\
    \ = arr[j];\n            }\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let len = arr.len();\n    for i in 0..len / 2 {\n        if arr[i] != arr[len\
    \ - i - 1] {\n            changes += 1;\n        }\n    }\n    changes\n}\n\n\
    fn main() {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2,\
    \ 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            count += 1;\n        }\n\
    \        left += 1;\n        right -= 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n\
    \    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            count += 1;\n        }\n\
    \        left += 1;\n        right -= 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n\
    \    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            count += 1;\n        }\n\
    \        left += 1;\n        right -= 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n\
    \    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            count += 1;\n        }\n\
    \        left += 1;\n        right -= 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n\
    \    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            count += 1;\n        }\n\
    \        left += 1;\n        right -= 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n\
    \    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    let\
    \ mut j = arr.len() - 1;\n    let mut count = 0;\n    while i < j {\n        if\
    \ arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n  \
    \      j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n\
    \    let mut changes = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n\
    \    while i < j {\n        if arr[i] != arr[j] {\n            changes += 1;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n\
    \    let mut changes = 0;\n    let mut start = 0;\n    let mut end = arr.len()\
    \ - 1;\n    while start < end {\n        if arr[start] != arr[end] {\n       \
    \     changes += 1;\n        }\n        start += 1;\n        end -= 1;\n    }\n\
    \    changes\n}\n\nfn main() {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2,\
    \ 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n\
    \    let mut changes = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n\
    \    while i < j {\n        if arr[i] != arr[j] {\n            changes += 1;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            count += 1;\n        }\n\
    \        left += 1;\n        right -= 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n\
    \    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut left = 0;\n \
    \   let mut right = arr.len() - 1;\n    let mut changes = 0;\n\n    while left\
    \ < right {\n        if arr[left] != arr[right] {\n            changes += 1;\n\
    \        }\n        left += 1;\n        right -= 1;\n    }\n\n    changes\n}\n\
    \nfn main() {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2,\
    \ 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let n = arr.len();\n\
    \    let mut dp = vec![vec![0; n]; n];\n    for i in 0..n {\n        dp[i][i]\
    \ = 0;\n    }\n    for i in 0..n - 1 {\n        dp[i][i + 1] = if arr[i] == arr[i\
    \ + 1] { 0 } else { 1 };\n    }\n    for l in 3..n + 1 {\n        for i in 0..n\
    \ - l + 1 {\n            let j = i + l - 1;\n            if arr[i] == arr[j] {\n\
    \                dp[i][j] = dp[i + 1][j - 1];\n            } else {\n        \
    \        dp[i][j] = 1 + std::cmp::min(dp[i + 1][j], dp[i][j - 1]);\n         \
    \   }\n        }\n    }\n    dp[0][n - 1]\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `4`', /tmp/tmp5d31hpbw.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut min_changes =\
    \ 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n\
    \        if arr[i] != arr[j] {\n            min_changes += 1;\n        }\n   \
    \     i += 1;\n        j -= 1;\n    }\n    min_changes\n}\n\nfn main() {\n   \
    \ let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5,\
    \ 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n\
    \    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            count += 1;\n        }\n\
    \        left += 1;\n        right -= 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n\
    \    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n\
    \    let mut changes = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n\
    \    while i < j {\n        if arr[i] != arr[j] {\n            changes += 1;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    let\
    \ mut j = arr.len() - 1;\n    let mut count = 0;\n    while i < j {\n        if\
    \ arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n  \
    \      j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut left = 0;\n \
    \   let mut right = arr.len() - 1;\n    let mut changes = 0;\n\n    while left\
    \ < right {\n        if arr[left] != arr[right] {\n            changes += 1;\n\
    \        }\n        left += 1;\n        right -= 1;\n    }\n\n    changes\n}\n\
    \nfn main() {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2,\
    \ 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            count += 1;\n        }\n\
    \        left += 1;\n        right -= 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n\
    \    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            count += 1;\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = smallest_change;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut arr = arr;\n\
    \    let mut changes = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n\
    \    while i < j {\n        if arr[i] != arr[j] {\n            changes += 1;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut left = 0;\n \
    \   let mut right = arr.len() - 1;\n    let mut changes = 0;\n\n    while left\
    \ < right {\n        if arr[left] != arr[right] {\n            changes += 1;\n\
    \        }\n        left += 1;\n        right -= 1;\n    }\n\n    changes\n}\n\
    \nfn main() {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2,\
    \ 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        if arr[left] != arr[right] {\n            changes += 1;\n       \
    \ }\n        left += 1;\n        right -= 1;\n    }\n    changes\n}\n\nfn main()\
    \ {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]),\
    \ 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3,\
    \ 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0,\
    \ 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector arr of integers, find the minimum number of elements\
    \ that\n/// need to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\n/// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n/// For example:\n/// >>>\
    \ smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1,\
    \ 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n///\
    \ 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n    let mut changes = 0;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   if arr[i] != arr[j] {\n            changes += 1;\n        }\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    changes\n}\n\nfn main() {\n    let candidate\
    \ = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]),\
    \ 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]),\
    \ 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
