name: HumanEval_140_fix_spaces
language: rs
results:
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    if spaces > 0 {\n        result.push('_');\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp6oczrkjw.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmppgk4bwc3.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpjmhdwgxl.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp2p8074o8.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpajrefjc0.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            spaces = 0;\n            result.push(c);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm60k8thu.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut prev_space = false;\n\
    \    let mut consecutive_space = 0;\n    for c in text.chars() {\n        if c\
    \ == ' ' {\n            if prev_space {\n                consecutive_space +=\
    \ 1;\n            } else {\n                prev_space = true;\n             \
    \   consecutive_space = 1;\n            }\n        } else {\n            if prev_space\
    \ {\n                if consecutive_space > 2 {\n                    result.push('-');\n\
    \                } else {\n                    result.push('_');\n           \
    \     }\n            }\n            prev_space = false;\n            consecutive_space\
    \ = 0;\n            result.push(c);\n        }\n    }\n    if prev_space {\n \
    \       if consecutive_space > 2 {\n            result.push('-');\n        } else\
    \ {\n            result.push('_');\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp5yzxkluy.rs:51:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpr_jq1qcw.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpe7fyrsdy.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp2r26i3xo.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpruy06sp4.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp664pzpv4.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d27_3ux.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpfa65av_b.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut prev_char = '\
    \ ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n     \
    \   if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                if prev_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        prev_char = c;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpo6ejvacg.rs:40:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpdmv2ko6r.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpn56csy02.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpt9eu1u_o.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut count = 0;\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            count += 1;\n\
    \            if count == 1 {\n                result.push('_');\n            }\
    \ else if count == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        count = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmppn72c6r2.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            spaces = 0;\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpex71j2ks.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpu2msvc6m.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmplhx2upk4.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    if spaces > 0 {\n        result.push('_');\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp9kh5h5zf.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp07z7h4yj.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut count = 0;\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            count += 1;\n\
    \            if count == 1 {\n                result.push('_');\n            }\
    \ else if count == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        result.push(c);\n            count = 0;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpbkrw0dlv.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8kwzmycq.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 1 {\n\
    \                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp54kjh91z.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp9qcgrajq.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpuhlspuh8.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmppllputu7.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpp47rvisd.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpplln91b1.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpnn3wy9dj.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp97plzdpf.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmppmcfddn1.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut count = 0;\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            count += 1;\n\
    \            if count == 1 {\n                result.push('_');\n            }\
    \ else if count == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        count = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpjn7_2hl4.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp8fgulcok.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpgaxvkiir.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpr48qiwy9.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpe_yovz2y.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    if spaces > 0 {\n        result.push('_');\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpgp_jbiyi.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut count = 0;\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            count += 1;\n\
    \            if count > 2 {\n                result.push('-');\n            }\
    \ else {\n                result.push('_');\n            }\n        } else {\n\
    \            count = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpg92uxvj1.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpnkhmikcz.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpr1_5eccy.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    if spaces > 0 {\n        result.push('_');\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmplkpxr7_f.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpvg7i916v.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            spaces = 0;\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpvyq2a2c4.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpsb2b50yw.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpb1mz8l7c.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp75bgwe3h.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp828d_tg6.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpwf6jec87.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpzq_6pfez.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    text.replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp5tgvicxh.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpi00mvvk9.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp6mz6s4se.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpqcqxj7lh.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpjoywhjgu.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmptu84rwlm.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkk2zspff.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            spaces = 0;\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpa78te0ry.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpxsg3d3t3.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpx5dsszy7.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp3yl6sawh.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpad3vxq_z.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpbn3gi_9e.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp_hycv3xd.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpmhqe1crs.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpotboim1b.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpcg75cn4y.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkygs3i1g.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpnqwbctat.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpgbp77pcl.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut count = 0;\n \
    \   for ch in text.chars() {\n        if ch == ' ' {\n            count += 1;\n\
    \            if count > 2 {\n                result.push('-');\n            }\
    \ else {\n                result.push('_');\n            }\n        } else {\n\
    \            count = 0;\n            result.push(ch);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmppjztde63.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpds7i5ibp.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpc05rbx1h.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpch8kkjty.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmppsqpp2qk.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces_count\
    \ += 1;\n            if spaces_count == 1 {\n                result.push('_');\n\
    \            } else if spaces_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            spaces_count = 0;\n            result.push(c);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpuxbaah46.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmphbmq5pz9.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    if spaces > 0 {\n        result.push('_');\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp0oxmr2d2.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpt0vuodae.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp5mane8eb.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpmrxz5hk5.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            spaces = 0;\n            result.push(c);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmphwx7zjon.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpvfk71tnj.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp07c1__z4.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzjh9bcnn.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for ch in text.chars() {\n        if ch == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(ch);\n            spaces = 0;\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpcmb3sinl.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut prev_space = false;\n\
    \    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n        if\
    \ c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                prev_space = true;\n          \
    \      consecutive_spaces = 1;\n            }\n        } else {\n            if\
    \ prev_space {\n                if consecutive_spaces > 2 {\n                \
    \    result.push('-');\n                } else {\n                    result.push('_');\n\
    \                }\n            }\n            prev_space = false;\n         \
    \   consecutive_spaces = 0;\n            result.push(c);\n        }\n    }\n \
    \   if prev_space {\n        if consecutive_spaces > 2 {\n            result.push('-');\n\
    \        } else {\n            result.push('_');\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp3o29bapf.rs:51:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpj_n5766f.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(ch);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpbk3zskuq.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmppkorot1t.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp4wl5w_fx.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpg8oiuusx.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp3ojxiihq.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp2oone5ni.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpeoe_vmx1.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpdymj68qi.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut last_char = '\
    \ ';\n    let mut count = 0;\n    for c in text.chars() {\n        if c == ' '\
    \ {\n            if last_char == ' ' {\n                count += 1;\n        \
    \    } else {\n                count = 1;\n            }\n            if count\
    \ <= 2 {\n                result.push('_');\n            } else {\n          \
    \      result.push('-');\n            }\n        } else {\n            result.push(c);\n\
    \            count = 0;\n        }\n        last_char = c;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpm_31iq76.rs:42:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            result.push(c);\n            space_count = 0;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp0zxwtocw.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpkwe70m9f.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp19u0u0eg.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp1gjipyr4.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpud0xwic2.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp3e43u3ap.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpgs8uz42k.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp36quyr_j.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp3974_ohe.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut count = 0;\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            count += 1;\n\
    \            if count == 1 {\n                result.push('_');\n            }\
    \ else if count == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        result.push(c);\n            count = 0;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp3ytrwhq7.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpq5rsa4b0.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp9qgeisgo.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut count = 0;\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            count += 1;\n\
    \            if count == 1 {\n                result.push('_');\n            }\
    \ else if count == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        count = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpkrhvl9oi.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpfkcu4glp.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpm0bqsxvv.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpypeh66x7.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzn3gwadt.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut count = 0;\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            count += 1;\n\
    \            if count == 2 {\n                result.push('_');\n            }\n\
    \        } else {\n            if count > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            count = 0;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8g218c_o.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpgjfgzbwo.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp0fr5q6ej.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut count = 0;\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            count += 1;\n\
    \            if count > 2 {\n                result.push('-');\n            }\
    \ else {\n                result.push('_');\n            }\n        } else {\n\
    \            count = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmplw8f6__2.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpx58kbpoa.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpfs_be3ro.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpf8jcq8fj.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpq8soceqh.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            spaces = 0;\n\
    \            result.push(c);\n        }\n    }\n    if spaces == 1 {\n       \
    \ result.push('_');\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_YellowDirtyFellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"`',\
    \ /tmp/tmpubumu0xk.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp2ibooa4s.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            spaces = 0;\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp0gzk82vm.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp0kdcrsad.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpx_24igwl.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpd80e_hcp.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmptlkprsfe.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp0x0xtqne.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp8hns372y.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut count = 0;\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            count += 1;\n\
    \            if count == 1 {\n                result.push('_');\n            }\
    \ else if count == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        count = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp3sffd2by.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmphtflqm_y.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpa6f_c0vv.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpx5l0znpl.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp7kj8zv7_.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmparzxn21v.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpy_22wjmv.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmph0jcvam2.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpthvaic7o.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp3g9dj6li.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpmqe2dq17.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp7qmxm4ze.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpz9t7_trw.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 2 {\n                result.push('_');\n\
    \            }\n        } else {\n            if space_count > 2 {\n         \
    \       result.push('-');\n            }\n            space_count = 0;\n     \
    \       result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkhhg6cbj.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpdkioqwxt.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 1 {\n\
    \                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmphb3t2zbu.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpsidoxxj4.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp25w96qh5.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces_count\
    \ += 1;\n            if spaces_count == 1 {\n                result.push('_');\n\
    \            } else if spaces_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            spaces_count = 0;\n            result.push(c);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpl34u51tt.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces_count\
    \ += 1;\n            if spaces_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            spaces_count = 0;\n            result.push(c);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmprpz_x78w.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp1q3psda2.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            spaces = 0;\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpq7_hm4iw.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpwgu9qycd.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut new_text = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                new_text.push('_');\n         \
    \   } else if spaces == 2 {\n                new_text.push('_');\n           \
    \ } else {\n                new_text.push('-');\n            }\n        } else\
    \ {\n            spaces = 0;\n            new_text.push(c);\n        }\n    }\n\
    \    new_text\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp7dfd9mx3.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpdo8vat4l.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpk3tztou1.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp85tbvhzu.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                result.push('_');\n           \
    \ } else if spaces == 2 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n        } else {\n    \
    \        spaces = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp9i8480h7.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpanccomrt.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            spaces = 0;\n\
    \            result.push(c);\n        }\n    }\n    if spaces == 1 {\n       \
    \ result.push('_');\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_YellowDirtyFellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"`',\
    \ /tmp/tmpt6sp38ms.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp09do1c1z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplybhz6g1.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            spaces = 0;\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8c3dhijt.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            result.push(c);\n            space_count = 0;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp4cnxx2k0.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp9j0khtqf.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpqxy1p1zn.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpd0y6xcz2.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp9e2pnq5_.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmphnz5j1xb.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp_h4yyl3n.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(c);\n        }\n    }\n    if spaces > 0 {\n        result.push('_');\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpl6mlqrf4.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp8s90_jud.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 2 {\n                result.push('_');\n\
    \            }\n        } else {\n            if space_count > 2 {\n         \
    \       result.push('-');\n            }\n            result.push(c);\n      \
    \      space_count = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpv7tq35ps.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpedgq4vzq.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp7g781i3n.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpg19iglys.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut count = 0;\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            count += 1;\n\
    \            if count > 2 {\n                result.push('-');\n            }\
    \ else {\n                result.push('_');\n            }\n        } else {\n\
    \            count = 0;\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpx50z0e7q.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp1dwucqct.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            result.push(c);\n            space_count = 0;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpr16kkok5.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpxfcgex9r.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp91s6qdw8.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpukemyy1r.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for ch in text.chars() {\n        if ch == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result.push('_');\n                spaces = 0;\n            }\n\
    \            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpk16ka9vl.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp_6eqqzow.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmptmp3f_xb.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpoa_3q173.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for ch in text.chars() {\n        if ch == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            spaces = 0;\n\
    \            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpx7i4nkj8.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces == 1\
    \ {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplcz1wfpn.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpbsyyppev.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            if spaces > 1 {\n\
    \                result.push('_');\n            }\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp7tabqk3g.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpax443tjz.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 2 {\n                result.push('_');\n           \
    \ }\n        } else {\n            if spaces > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpiv8gh9sg.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut count = 0;\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            count += 1;\n\
    \            if count == 2 {\n                result.push('_');\n            }\n\
    \        } else {\n            if count > 2 {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            count = 0;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplgo06i21.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpd4alv6vx.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           if c == ' ' {\n                result.push('_');\n            } else\
    \ {\n                result.push(c);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8_1nhut0.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp3zrhbwjb.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
