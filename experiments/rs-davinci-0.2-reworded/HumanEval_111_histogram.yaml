name: HumanEval_111_histogram
language: rs
prompt: "use std::collections::HashMap;\n\n/// Given a string representing a space\
  \ separated lowercase letters, return a HashMap\n/// of the letter with the most\
  \ repetition and containing the corresponding count.\n/// If several letters have\
  \ the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(String::from(\"\
  a b c\"))\n/// HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"), 1),\
  \ (String::from(\"c\"), 1)])\n/// >>> histogram(String::from(\"a b b a\"))\n///\
  \ HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)])\n/// >>> histogram(String::from(\"\
  a b c a b\"))\n/// HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"\
  ), 2)])\n/// >>> histogram(String::from(\"b b b b a\"))\n/// HashMap::from([(String::from(\"\
  b\"), 4)])\n/// >>> histogram(String::from(\"\"))\n/// HashMap::from([])\nfn histogram(test:\
  \ String) -> HashMap<String, isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
  a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
  \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
  a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
  a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"), 1),\
  \ (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"), 1)]));\n\
  \    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
  r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
  b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
  r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1), (String::from(\"\
  g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")), HashMap::from([]));\n\
  \    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
  a\"), 1)]));\n}\n"
completions: ["    let mut map = HashMap::new();\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let max = map.values().max().unwrap();\n    let mut result\
    \ = HashMap::new();\n    for (key, value) in map {\n        if value == *max {\n\
    \            result.insert(key, value);\n        }\n    }\n    result", "    let\
    \ mut map = HashMap::new();\n    let mut max = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n        }\n   \
    \ }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n   \
    \     if value == max {\n            result.insert(key, value);\n        }\n \
    \   }\n    result", "    let mut map = HashMap::new();\n    let mut max = 0;\n\
    \    for letter in test.split_whitespace() {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut histogram: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_count: isize = 0;\n    let mut max_letters:\
    \ Vec<String> = Vec::new();\n\n    for word in test.split_whitespace() {\n   \
    \     let count = histogram.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \          max_letters = vec![word.to_string()];\n        } else if *count ==\
    \ max_count {\n            max_letters.push(word.to_string());\n        }\n  \
    \  }\n\n    for letter in max_letters {\n        histogram.insert(letter, max_count);\n\
    \    }\n\n    histogram", "    let mut hist = HashMap::new();\n    for letter\
    \ in test.split_whitespace() {\n        let count = hist.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_count = hist.values().max().unwrap();\n\
    \    let mut result = HashMap::new();\n    for (key, value) in hist {\n      \
    \  if value == *max_count {\n            result.insert(key, value);\n        }\n\
    \    }\n    result", "    let mut map = HashMap::new();\n    let mut max = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut map = HashMap::new();\n    let mut\
    \ max_count = 0;\n    for word in test.split_whitespace() {\n        let count\
    \ = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n        if\
    \ *count > max_count {\n            max_count = *count;\n        }\n    }\n  \
    \  let mut result = HashMap::new();\n    for (key, value) in map {\n        if\
    \ value == max_count {\n            result.insert(key, value);\n        }\n  \
    \  }\n    result", "    let mut map = HashMap::new();\n    let mut max = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut result = HashMap::new();\n    let\
    \ mut max = 0;\n    for letter in test.split_whitespace() {\n        let count\
    \ = result.entry(letter.to_string()).or_insert(0);\n        *count += 1;\n   \
    \     if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result_max = HashMap::new();\n    for (key, value) in result {\n       \
    \ if value == max {\n            result_max.insert(key, value);\n        }\n \
    \   }\n    result_max", "    let mut result = HashMap::new();\n    let mut max_count\
    \ = 0;\n    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut final_result = HashMap::new();\n  \
    \  for (key, value) in result {\n        if value == max_count {\n           \
    \ final_result.insert(key, value);\n        }\n    }\n    final_result", "   \
    \ let mut map = HashMap::new();\n    let mut max = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n        }\n   \
    \ }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n   \
    \     if value == max {\n            result.insert(key, value);\n        }\n \
    \   }\n    result", "    let mut histogram = HashMap::new();\n    let mut max_count\
    \ = 0;\n    for word in test.split_whitespace() {\n        let count = histogram.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in histogram {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result", "    let mut result: HashMap<String,\
    \ isize> = HashMap::new();\n    for letter in test.split_whitespace() {\n    \
    \    let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, count) in &result {\n      \
    \  if *count > max {\n            max = *count;\n        }\n    }\n    let mut\
    \ final_result: HashMap<String, isize> = HashMap::new();\n    for (letter, count)\
    \ in &result {\n        if *count == max {\n            final_result.insert(letter.to_string(),\
    \ *count);\n        }\n    }\n    final_result", "    let mut histogram = HashMap::new();\n\
    \    let mut max_count = 0;\n    for word in test.split_whitespace() {\n     \
    \   let count = histogram.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result = HashMap::new();\n    for (key, value) in\
    \ histogram {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &map {\n        if *count > max_count {\n            max_count = *count;\n \
    \       }\n    }\n    let mut result = HashMap::new();\n    for (word, count)\
    \ in &map {\n        if *count == max_count {\n            result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut counts: HashMap<String,\
    \ isize> = HashMap::new();\n    for word in test.split_whitespace() {\n      \
    \  let count = counts.entry(word.to_string()).or_insert(0);\n        *count +=\
    \ 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in &counts {\n   \
    \     if *count > max_count {\n            max_count = *count;\n        }\n  \
    \  }\n    let mut result: HashMap<String, isize> = HashMap::new();\n    for (key,\
    \ count) in &counts {\n        if *count == max_count {\n            result.insert(key.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, value) in map.iter()\
    \ {\n        if *value > max {\n            max = *value;\n        }\n    }\n\
    \    let mut result = HashMap::new();\n    for (key, value) in map.iter() {\n\
    \        if *value == max {\n            result.insert(key.to_string(), *value);\n\
    \        }\n    }\n    result", "    let mut result: HashMap<String, isize> =\
    \ HashMap::new();\n    let mut max_count: isize = 0;\n    let mut max_letters:\
    \ Vec<String> = Vec::new();\n    for letter in test.split_whitespace() {\n   \
    \     let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \          max_letters = vec![letter.to_string()];\n        } else if *count ==\
    \ max_count {\n            max_letters.push(letter.to_string());\n        }\n\
    \    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n   \
    \ for letter in max_letters {\n        result_max.insert(letter, max_count);\n\
    \    }\n    result_max", "    let mut map = HashMap::new();\n    let mut max_count\
    \ = 0;\n    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result", "    let mut result = HashMap::new();\n\
    \    let mut max_count = 0;\n    for word in test.split_whitespace() {\n     \
    \   let count = result.entry(word.to_string()).or_insert(0);\n        *count +=\
    \ 1;\n        if *count > max_count {\n            max_count = *count;\n     \
    \   }\n    }\n    let mut final_result = HashMap::new();\n    for (key, value)\
    \ in result {\n        if value == max_count {\n            final_result.insert(key,\
    \ value);\n        }\n    }\n    final_result", "    let mut map = HashMap::new();\n\
    \    let mut max_count = 0;\n    for word in test.split(\" \") {\n        let\
    \ count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n  \
    \      if *count > max_count {\n            max_count = *count;\n        }\n \
    \   }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n \
    \       if value == max_count {\n            result.insert(key, value);\n    \
    \    }\n    }\n    result", "    let mut histogram = HashMap::new();\n    let\
    \ mut max_count = 0;\n    for word in test.split_whitespace() {\n        let count\
    \ = histogram.entry(word.to_string()).or_insert(0);\n        *count += 1;\n  \
    \      if *count > max_count {\n            max_count = *count;\n        }\n \
    \   }\n    let mut result = HashMap::new();\n    for (key, value) in histogram\
    \ {\n        if value == max_count {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut h = HashMap::new();\n    let mut\
    \ max = 0;\n    for c in test.split_whitespace() {\n        let count = h.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (k, v) in h {\n\
    \        if v == max {\n            result.insert(k, v);\n        }\n    }\n \
    \   result", "    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (letter, count) in result {\n        if count == max_count {\n            result_max.insert(letter,\
    \ count);\n        }\n    }\n    result_max", "    let mut map = HashMap::new();\n\
    \    for c in test.split_whitespace() {\n        let count = map.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n\
    \        if *v > max {\n            max = *v;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (k, v) in &map {\n        if *v == max {\n      \
    \      result.insert(k.to_string(), *v);\n        }\n    }\n    result", "   \
    \ let mut map = HashMap::new();\n    let mut max_count = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result = HashMap::new();\n    for (key, value) in\
    \ map {\n        if value == max_count {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut result: HashMap<String, isize> =\
    \ HashMap::new();\n    let mut max_count: isize = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = result.entry(word.to_string()).or_insert(0);\n      \
    \  *count += 1;\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut final_result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   final_result.insert(key, value);\n        }\n    }\n    final_result", " \
    \   let mut map = HashMap::new();\n    for c in test.split_whitespace() {\n  \
    \      let count = map.entry(c.to_string()).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v > max {\n\
    \            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n  \
    \  for c in test.split_whitespace() {\n        let count = map.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n\
    \        if *v > max {\n            max = *v;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (k, v) in &map {\n        if *v == max {\n      \
    \      result.insert(k.to_string(), *v);\n        }\n    }\n    result", "   \
    \ let mut map = HashMap::new();\n    for letter in test.split_whitespace() {\n\
    \        let count = map.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, count) in &map {\n        if\
    \ *count > max {\n            max = *count;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (letter, count) in &map {\n        if *count == max\
    \ {\n            result.insert(letter.to_string(), *count);\n        }\n    }\n\
    \    result", "    let mut histogram: HashMap<String, isize> = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &histogram {\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (letter, count) in &histogram {\n        if *count == max_count {\n \
    \           result.insert(letter.to_string(), *count);\n        }\n    }\n   \
    \ result", "    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for letter in max_letters {\n        result_max.insert(letter, max_count);\n\
    \    }\n    result_max", "    let mut result = HashMap::new();\n    let mut max\
    \ = 0;\n    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result_max = HashMap::new();\n    for (key, value)\
    \ in result {\n        if value == max {\n            result_max.insert(key, value);\n\
    \        }\n    }\n    result_max", "    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_count: isize = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = result.entry(word.to_string()).or_insert(0);\n      \
    \  *count += 1;\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut final_result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   final_result.insert(key, value);\n        }\n    }\n    final_result", " \
    \   let mut map = HashMap::new();\n    let mut max_count = 0;\n    for word in\
    \ test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result", "    let mut result = HashMap::new();\n\
    \    let mut max_count = 0;\n    for word in test.split_whitespace() {\n     \
    \   let count = result.entry(word.to_string()).or_insert(0);\n        *count +=\
    \ 1;\n        if *count > max_count {\n            max_count = *count;\n     \
    \   }\n    }\n    let mut result_max = HashMap::new();\n    for (key, value) in\
    \ result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max", "    let mut map = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    map", "    let mut map = HashMap::new();\n \
    \   for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n\
    \        if *v > max {\n            max = *v;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (k, v) in &map {\n        if *v == max {\n      \
    \      result.insert(k.to_string(), *v);\n        }\n    }\n    result", "   \
    \ let mut result: HashMap<String, isize> = HashMap::new();\n    let mut max_count:\
    \ isize = 0;\n    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max: HashMap<String, isize>\
    \ = HashMap::new();\n    for (key, value) in result {\n        if value == max_count\
    \ {\n            result_max.insert(key, value);\n        }\n    }\n    result_max",
  "    let mut map = HashMap::new();\n    let mut max = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n        }\n   \
    \ }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n   \
    \     if value == max {\n            result.insert(key, value);\n        }\n \
    \   }\n    result", "    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n\
    \        let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_filtered: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_filtered.insert(key, value);\n        }\n    }\n    result_filtered",
  "    let mut result = HashMap::new();\n    for c in test.split_whitespace() {\n\
    \        let count = result.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &result {\n        if\
    \ *v > max {\n            max = *v;\n        }\n    }\n    let mut final = HashMap::new();\n\
    \    for (k, v) in &result {\n        if *v == max {\n            final.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    final", "    let mut map = HashMap::new();\n   \
    \ for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &map {\n        if *count > max_count {\n            max_count = *count;\n \
    \       }\n    }\n    let mut result = HashMap::new();\n    for (key, count) in\
    \ &map {\n        if *count == max_count {\n            result.insert(key.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut result: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut max_count: isize = 0;\n    for word in\
    \ test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max: HashMap<String, isize>\
    \ = HashMap::new();\n    for (key, value) in result {\n        if value == max_count\
    \ {\n            result_max.insert(key, value);\n        }\n    }\n    result_max",
  "    let mut map = HashMap::new();\n    for c in test.split_whitespace() {\n   \
    \     let count = map.entry(c.to_string()).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v > max {\n\
    \            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result", "    let mut result = HashMap::new();\n\
    \    let mut max_count = 0;\n    for letter in test.split_whitespace() {\n   \
    \     let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_max = HashMap::new();\n    for (letter, count)\
    \ in result {\n        if count == max_count {\n            result_max.insert(letter,\
    \ count);\n        }\n    }\n    result_max", "    let mut result = HashMap::new();\n\
    \    let mut max = 0;\n    for word in test.split_whitespace() {\n        let\
    \ count = result.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \        if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result_max = HashMap::new();\n    for (key, value) in result {\n       \
    \ if value == max {\n            result_max.insert(key, value);\n        }\n \
    \   }\n    result_max", "    let mut histogram: HashMap<String, isize> = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = histogram.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &histogram {\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (word, count) in &histogram {\n        if *count == max_count {\n   \
    \         result.insert(word.to_string(), *count);\n        }\n    }\n    result",
  "    let mut map = HashMap::new();\n    let mut max = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n        }\n   \
    \ }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n   \
    \     if value == max {\n            result.insert(key, value);\n        }\n \
    \   }\n    result", "    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n    for letter in test.split_whitespace()\
    \ {\n        let count = result.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result",
  "    let mut map = HashMap::new();\n    let mut max = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n        }\n   \
    \ }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n   \
    \     if value == max {\n            result.insert(key, value);\n        }\n \
    \   }\n    result", "    let mut map = HashMap::new();\n    let mut max_count\
    \ = 0;\n    for letter in test.split_whitespace() {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (letter,\
    \ count) in map {\n        if count == max_count {\n            result.insert(letter,\
    \ count);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    let mut max = 0;\n    for word in test.split_whitespace() {\n        let\
    \ count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n  \
    \      if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result = HashMap::new();\n    for (key, val) in map {\n        if val ==\
    \ max {\n            result.insert(key, val);\n        }\n    }\n    result",
  "    let mut result = HashMap::new();\n    let mut max = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = result.entry(word.to_string()).or_insert(0);\n      \
    \  *count += 1;\n        if *count > max {\n            max = *count;\n      \
    \  }\n    }\n    let mut result_max = HashMap::new();\n    for (key, value) in\
    \ result {\n        if value == max {\n            result_max.insert(key, value);\n\
    \        }\n    }\n    result_max", "    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_count: isize = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = result.entry(word.to_string()).or_insert(0);\n      \
    \  *count += 1;\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_max.insert(key, value);\n        }\n    }\n    result_max", "    let\
    \ mut result: HashMap<String, isize> = HashMap::new();\n    let mut max_count:\
    \ isize = 0;\n    for letter in test.split_whitespace() {\n        let count =\
    \ result.entry(letter.to_string()).or_insert(0);\n        *count += 1;\n     \
    \   if *count > max_count {\n            max_count = *count;\n        }\n    }\n\
    \    let mut result_max: HashMap<String, isize> = HashMap::new();\n    for (letter,\
    \ count) in result {\n        if count == max_count {\n            result_max.insert(letter,\
    \ count);\n        }\n    }\n    result_max", "    let mut map = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_count = map.values().max().unwrap();\n\
    \    map.retain(|_, &mut v| v == *max_count);\n    map", "    let mut map = HashMap::new();\n\
    \    let mut max = 0;\n    for word in test.split_whitespace() {\n        let\
    \ count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n  \
    \      if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result = HashMap::new();\n    for (key, value) in map {\n        if value\
    \ == max {\n            result.insert(key, value);\n        }\n    }\n    result",
  "    let mut result: HashMap<String, isize> = HashMap::new();\n    let mut max_count:\
    \ isize = 0;\n    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max: HashMap<String, isize>\
    \ = HashMap::new();\n    for (key, value) in result {\n        if value == max_count\
    \ {\n            result_max.insert(key, value);\n        }\n    }\n    result_max",
  "    let mut map = HashMap::new();\n    let mut max_count = 0;\n    for word in\
    \ test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result", "    let mut result: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut max_count: isize = 0;\n    for word in\
    \ test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max: HashMap<String, isize>\
    \ = HashMap::new();\n    for (key, value) in result {\n        if value == max_count\
    \ {\n            result_max.insert(key, value);\n        }\n    }\n    result_max",
  "    let mut map = HashMap::new();\n    for word in test.split_whitespace() {\n\
    \        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in &map {\n   \
    \     if *count > max_count {\n            max_count = *count;\n        }\n  \
    \  }\n    let mut result = HashMap::new();\n    for (word, count) in &map {\n\
    \        if *count == max_count {\n            result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_count = map.values().max().unwrap();\n\
    \    let mut result = HashMap::new();\n    for (key, value) in map {\n       \
    \ if value == *max_count {\n            result.insert(key, value);\n        }\n\
    \    }\n    result", "    let mut map = HashMap::new();\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, value) in map.iter() {\n   \
    \     if *value > max {\n            max = *value;\n        }\n    }\n    let\
    \ mut result = HashMap::new();\n    for (key, value) in map.iter() {\n       \
    \ if *value == max {\n            result.insert(key.to_string(), *value);\n  \
    \      }\n    }\n    result", "    let mut histogram = HashMap::new();\n    for\
    \ word in test.split_whitespace() {\n        let count = histogram.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_count = histogram.values().max().unwrap();\n\
    \    let mut result = HashMap::new();\n    for (key, value) in histogram {\n \
    \       if value == *max_count {\n            result.insert(key, value);\n   \
    \     }\n    }\n    result", "    let mut map = HashMap::new();\n    let mut max_count\
    \ = 0;\n    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    for c in test.split_whitespace() {\n        let count = map.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n\
    \        if *v > max {\n            max = *v;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (k, v) in &map {\n        if *v == max {\n      \
    \      result.insert(k.to_string(), *v);\n        }\n    }\n    result", "   \
    \ let mut result = HashMap::new();\n    for word in test.split_whitespace() {\n\
    \        let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in &result {\n\
    \        if *count > max_count {\n            max_count = *count;\n        }\n\
    \    }\n    let mut max_words = HashMap::new();\n    for (word, count) in &result\
    \ {\n        if *count == max_count {\n            max_words.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    max_words", "    let mut result = HashMap::new();\n\
    \    let mut max = 0;\n    for word in test.split_whitespace() {\n        let\
    \ count = result.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \        if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result_max = HashMap::new();\n    for (key, value) in result {\n       \
    \ if value == max {\n            result_max.insert(key, value);\n        }\n \
    \   }\n    result_max", "    let mut histogram = HashMap::new();\n    for letter\
    \ in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_count = histogram.values().max().unwrap();\n\
    \    let mut result = HashMap::new();\n    for (key, value) in histogram {\n \
    \       if value == *max_count {\n            result.insert(key, value);\n   \
    \     }\n    }\n    result", "    let mut map = HashMap::new();\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, count) in &map\
    \ {\n        if *count > max {\n            max = *count;\n        }\n    }\n\
    \    let mut result = HashMap::new();\n    for (word, count) in &map {\n     \
    \   if *count == max {\n            result.insert(word.to_string(), *count);\n\
    \        }\n    }\n    result", "    let mut map = HashMap::new();\n    let mut\
    \ max = 0;\n    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut result: HashMap<String, isize> =\
    \ HashMap::new();\n    let mut max_count: isize = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = result.entry(word.to_string()).or_insert(0);\n      \
    \  *count += 1;\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result",
  "    let mut map = HashMap::new();\n    for letter in test.split_whitespace() {\n\
    \        let count = map.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, count) in &map {\n        if\
    \ *count > max {\n            max = *count;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (letter, count) in &map {\n        if *count == max\
    \ {\n            result.insert(letter.to_string(), *count);\n        }\n    }\n\
    \    result", "    let mut map = HashMap::new();\n    for letter in test.split_whitespace()\
    \ {\n        let count = map.entry(letter.to_string()).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in &map\
    \ {\n        if *count > max_count {\n            max_count = *count;\n      \
    \  }\n    }\n    let mut result = HashMap::new();\n    for (letter, count) in\
    \ &map {\n        if *count == max_count {\n            result.insert(letter.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut histogram = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, count) in &histogram\
    \ {\n        if *count > max {\n            max = *count;\n        }\n    }\n\
    \    let mut result = HashMap::new();\n    for (letter, count) in &histogram {\n\
    \        if *count == max {\n            result.insert(letter.to_string(), *count);\n\
    \        }\n    }\n    result", "    let mut result = HashMap::new();\n    let\
    \ mut max_count = 0;\n    let mut max_letters = Vec::new();\n    for letter in\
    \ test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n    let mut result_max = HashMap::new();\n    for letter in\
    \ max_letters {\n        result_max.insert(letter, max_count);\n    }\n    result_max",
  "    let mut hm: HashMap<String, isize> = HashMap::new();\n    let mut max_count:\
    \ isize = 0;\n    for c in test.split_whitespace() {\n        let count = hm.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (k, v) in hm {\n        if v == max_count {\n            result.insert(k,\
    \ v);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n   \
    \ let mut max = 0;\n    for word in test.split_whitespace() {\n        let count\
    \ = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n        if\
    \ *count > max {\n            max = *count;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (key, value) in map {\n        if value == max {\n\
    \            result.insert(key, value);\n        }\n    }\n    result", "    let\
    \ mut map = HashMap::new();\n    for word in test.split_whitespace() {\n     \
    \   let count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \    }\n    let max_value = map.values().max().unwrap();\n    map.retain(|_, v|\
    \ v == max_value);\n    map", "    let mut histogram: HashMap<String, isize> =\
    \ HashMap::new();\n    for word in test.split_whitespace() {\n        let count\
    \ = histogram.entry(word.to_string()).or_insert(0);\n        *count += 1;\n  \
    \  }\n    let mut max_count = 0;\n    for (_, count) in &histogram {\n       \
    \ if *count > max_count {\n            max_count = *count;\n        }\n    }\n\
    \    let mut result: HashMap<String, isize> = HashMap::new();\n    for (word,\
    \ count) in &histogram {\n        if *count == max_count {\n            result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, count) in &map\
    \ {\n        if *count > max {\n            max = *count;\n        }\n    }\n\
    \    let mut result = HashMap::new();\n    for (letter, count) in &map {\n   \
    \     if *count == max {\n            result.insert(letter.to_string(), *count);\n\
    \        }\n    }\n    result", "    let mut result = HashMap::new();\n    for\
    \ word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    result", "    let mut result = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &result {\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut final_result = HashMap::new();\n    for (word,\
    \ count) in &result {\n        if *count == max_count {\n            final_result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    final_result", "    let mut result: HashMap<String,\
    \ isize> = HashMap::new();\n    for letter in test.split_whitespace() {\n    \
    \    let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let max_count = result.values().max().unwrap();\n    result.retain(|_,\
    \ &v| v == *max_count);\n    result", "    let mut map = HashMap::new();\n   \
    \ let mut max = 0;\n    for word in test.split_whitespace() {\n        let count\
    \ = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n        if\
    \ *count > max {\n            max = *count;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (key, value) in map {\n        if value == max {\n\
    \            result.insert(key, value);\n        }\n    }\n    result", "    let\
    \ mut histogram: HashMap<String, isize> = HashMap::new();\n    for letter in test.split_whitespace()\
    \ {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n \
    \       *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &histogram {\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (letter, count) in &histogram {\n        if *count == max_count {\n \
    \           result.insert(letter.to_string(), *count);\n        }\n    }\n   \
    \ result", "    let mut hist = HashMap::new();\n    let mut max_count = 0;\n \
    \   let mut max_letters = Vec::new();\n    for word in test.split_whitespace()\
    \ {\n        let count = hist.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \          max_letters = vec![word.to_string()];\n        } else if *count ==\
    \ max_count {\n            max_letters.push(word.to_string());\n        }\n  \
    \  }\n    let mut result = HashMap::new();\n    for letter in max_letters {\n\
    \        result.insert(letter, max_count);\n    }\n    result", "    let mut map\
    \ = HashMap::new();\n    let mut max = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n        }\n   \
    \ }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n   \
    \     if value == max {\n            result.insert(key, value);\n        }\n \
    \   }\n    result", "    let mut map = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v\
    \ > max {\n            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n  \
    \  for letter in test.split_whitespace() {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &map {\n        if *count > max_count {\n            max_count = *count;\n \
    \       }\n    }\n    let mut result = HashMap::new();\n    for (letter, count)\
    \ in &map {\n        if *count == max_count {\n            result.insert(letter.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut histogram = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_value = histogram.values().max().unwrap();\n\
    \    let mut result = HashMap::new();\n    for (key, value) in histogram {\n \
    \       if value == *max_value {\n            result.insert(key, value);\n   \
    \     }\n    }\n    result", "    let mut result = HashMap::new();\n    for word\
    \ in test.split(\" \") {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &map {\n        if *count > max_count {\n            max_count = *count;\n \
    \       }\n    }\n    let mut result = HashMap::new();\n    for (word, count)\
    \ in &map {\n        if *count == max_count {\n            result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    let mut max_count = 0;\n    for word in test.split_whitespace() {\n     \
    \   let count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \        if *count > max_count {\n            max_count = *count;\n        }\n\
    \    }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n\
    \        if value == max_count {\n            result.insert(key, value);\n   \
    \     }\n    }\n    result", "    let mut map = HashMap::new();\n    let mut max\
    \ = 0;\n    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut map = HashMap::new();\n    for c\
    \ in test.split_whitespace() {\n        let count = map.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n\
    \        if *v > max {\n            max = *v;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (k, v) in &map {\n        if *v == max {\n      \
    \      result.insert(k.to_string(), *v);\n        }\n    }\n    result", "   \
    \ let mut map = HashMap::new();\n    let mut max = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n        }\n   \
    \ }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n   \
    \     if value == max {\n            result.insert(key, value);\n        }\n \
    \   }\n    result", "    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n\
    \        let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_max.insert(key, value);\n        }\n    }\n    result_max", "    let\
    \ mut map = HashMap::new();\n    for word in test.split_whitespace() {\n     \
    \   let count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = 0;\n    for (_, count) in &map {\n        if *count\
    \ > max {\n            max = *count;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (key, count) in &map {\n        if *count == max {\n            result.insert(key.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut histogram: HashMap<String,\
    \ isize> = HashMap::new();\n    for letter in test.split_whitespace() {\n    \
    \    let count = histogram.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in &histogram {\n\
    \        if *count > max_count {\n            max_count = *count;\n        }\n\
    \    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n    for\
    \ (letter, count) in &histogram {\n        if *count == max_count {\n        \
    \    result.insert(letter.to_string(), *count);\n        }\n    }\n    result",
  "    let mut map = HashMap::new();\n    let mut max_count = 0;\n    for word in\
    \ test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result", "    let mut result = HashMap::new();\n\
    \    let mut max = 0;\n    for c in test.split_whitespace() {\n        let count\
    \ = result.entry(c.to_string()).or_insert(0);\n        *count += 1;\n        if\
    \ *count > max {\n            max = *count;\n        }\n    }\n    let mut result_max\
    \ = HashMap::new();\n    for (key, value) in result {\n        if value == max\
    \ {\n            result_max.insert(key, value);\n        }\n    }\n    result_max",
  "    let mut map = HashMap::new();\n    for word in test.split_whitespace() {\n\
    \        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    map", "    let mut map = HashMap::new();\n    let mut max\
    \ = 0;\n    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut map = HashMap::new();\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &map {\n        if *count > max_count {\n            max_count = *count;\n \
    \       }\n    }\n    let mut result = HashMap::new();\n    for (word, count)\
    \ in &map {\n        if *count == max_count {\n            result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut histogram = HashMap::new();\n\
    \    let mut max_count = 0;\n    for word in test.split_whitespace() {\n     \
    \   let count = histogram.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result = HashMap::new();\n    for (key, value) in\
    \ histogram {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_count = map.values().max().unwrap();\n\
    \    let mut result = HashMap::new();\n    for (key, value) in map {\n       \
    \ if value == *max_count {\n            result.insert(key, value);\n        }\n\
    \    }\n    result", "    let mut map = HashMap::new();\n    let mut max = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut res = HashMap::new();\n    for (key, value) in\
    \ map {\n        if value == max {\n            res.insert(key, value);\n    \
    \    }\n    }\n    res", "    let mut result = HashMap::new();\n    for letter\
    \ in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_count = result.values().max().unwrap();\n\
    \    let mut max_letters = HashMap::new();\n    for (letter, count) in result\
    \ {\n        if count == *max_count {\n            max_letters.insert(letter,\
    \ count);\n        }\n    }\n    max_letters", "    let mut result: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut max: isize = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = result.entry(word.to_string()).or_insert(0);\n      \
    \  *count += 1;\n        if *count > max {\n            max = *count;\n      \
    \  }\n    }\n    let mut final_result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max {\n            final_result.insert(key,\
    \ value);\n        }\n    }\n    final_result", "    let mut map = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, value) in map.iter()\
    \ {\n        if *value > max {\n            max = *value;\n        }\n    }\n\
    \    let mut result = HashMap::new();\n    for (key, value) in map.iter() {\n\
    \        if *value == max {\n            result.insert(key.to_string(), *value);\n\
    \        }\n    }\n    result", "    let mut histogram = HashMap::new();\n   \
    \ let mut max_count = 0;\n    for letter in test.split_whitespace() {\n      \
    \  let count = histogram.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result = HashMap::new();\n    for (letter, count)\
    \ in histogram {\n        if count == max_count {\n            result.insert(letter,\
    \ count);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &map {\n        if *count > max_count {\n            max_count = *count;\n \
    \       }\n    }\n    let mut result = HashMap::new();\n    for (word, count)\
    \ in &map {\n        if *count == max_count {\n            result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut histogram: HashMap<String,\
    \ isize> = HashMap::new();\n    for letter in test.split_whitespace() {\n    \
    \    let count = histogram.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in &histogram {\n\
    \        if *count > max_count {\n            max_count = *count;\n        }\n\
    \    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n    for\
    \ (letter, count) in &histogram {\n        if *count == max_count {\n        \
    \    result.insert(letter.to_string(), *count);\n        }\n    }\n    result",
  "    let mut map = HashMap::new();\n    for c in test.split_whitespace() {\n   \
    \     let count = map.entry(c.to_string()).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v > max {\n\
    \            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result", "    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_count: isize = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = result.entry(word.to_string()).or_insert(0);\n      \
    \  *count += 1;\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_max.insert(key, value);\n        }\n    }\n    result_max", "    let\
    \ mut map = HashMap::new();\n    for c in test.split_whitespace() {\n        let\
    \ count = map.entry(c.to_string()).or_insert(0);\n        *count += 1;\n    }\n\
    \    let max = map.values().max().unwrap();\n    map.retain(|_, v| v == max);\n\
    \    map", "    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ for c in test.split_whitespace() {\n        let count = result.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_count = result.values().max().unwrap();\n\
    \    result.retain(|_, &mut v| v == *max_count);\n    result", "    let mut letters\
    \ = HashMap::new();\n    for letter in test.split_whitespace() {\n        let\
    \ count = letters.entry(letter.to_string()).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max_count = 0;\n    for (_, count) in letters.iter() {\n \
    \       if *count > max_count {\n            max_count = *count;\n        }\n\
    \    }\n    let mut max_letters = HashMap::new();\n    for (letter, count) in\
    \ letters.iter() {\n        if *count == max_count {\n            max_letters.insert(letter.to_string(),\
    \ *count);\n        }\n    }\n    max_letters", "    let mut map = HashMap::new();\n\
    \    for c in test.split_whitespace() {\n        let counter = map.entry(c.to_string()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n\
    \        if *v > max {\n            max = *v;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (k, v) in &map {\n        if *v == max {\n      \
    \      result.insert(k.to_string(), *v);\n        }\n    }\n    result", "   \
    \ let mut map = HashMap::new();\n    let mut max = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n        }\n   \
    \ }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n   \
    \     if value == max {\n            result.insert(key, value);\n        }\n \
    \   }\n    result", "    let mut map = HashMap::new();\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let max = map.values().max().unwrap_or(&0);\n    map.retain(|_,\
    \ v| v == max);\n    map", "    let mut map = HashMap::new();\n    for word in\
    \ test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &map {\n        if *count > max_count {\n            max_count = *count;\n \
    \       }\n    }\n    let mut result = HashMap::new();\n    for (word, count)\
    \ in &map {\n        if *count == max_count {\n            result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut result: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut max_count: isize = 0;\n    for word in\
    \ test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max: HashMap<String, isize>\
    \ = HashMap::new();\n    for (key, value) in result {\n        if value == max_count\
    \ {\n            result_max.insert(key, value);\n        }\n    }\n    result_max",
  "    let mut map = HashMap::new();\n    for letter in test.split_whitespace() {\n\
    \        let count = map.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, count) in &map {\n        if\
    \ *count > max {\n            max = *count;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (letter, count) in &map {\n        if *count == max\
    \ {\n            result.insert(letter.to_string(), *count);\n        }\n    }\n\
    \    result", "    let mut map = HashMap::new();\n    let mut max = 0;\n    for\
    \ letter in test.split_whitespace() {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut map = HashMap::new();\n    let mut\
    \ max_count = 0;\n    for word in test.split_whitespace() {\n        let count\
    \ = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n        if\
    \ *count > max_count {\n            max_count = *count;\n        }\n    }\n  \
    \  let mut result = HashMap::new();\n    for (key, value) in map {\n        if\
    \ value == max_count {\n            result.insert(key, value);\n        }\n  \
    \  }\n    result", "    let mut map = HashMap::new();\n    for s in test.split_whitespace()\
    \ {\n        let count = map.entry(s.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in &map {\n   \
    \     if *count > max_count {\n            max_count = *count;\n        }\n  \
    \  }\n    let mut result = HashMap::new();\n    for (key, count) in &map {\n \
    \       if *count == max_count {\n            result.insert(key.to_string(), *count);\n\
    \        }\n    }\n    result", "    let mut result: HashMap<String, isize> =\
    \ HashMap::new();\n    let mut max: isize = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = result.entry(word.to_string()).or_insert(0);\n      \
    \  *count += 1;\n        if *count > max {\n            max = *count;\n      \
    \  }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max", "    let mut map = HashMap::new();\n\
    \    let mut max_count = 0;\n    for word in test.split_whitespace() {\n     \
    \   let count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \        if *count > max_count {\n            max_count = *count;\n        }\n\
    \    }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n\
    \        if value == max_count {\n            result.insert(key, value);\n   \
    \     }\n    }\n    result", "    let mut histogram = HashMap::new();\n    for\
    \ letter in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    histogram", "    let mut map = HashMap::new();\n\
    \    let mut max_count = 0;\n    for word in test.split_whitespace() {\n     \
    \   let count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \        if *count > max_count {\n            max_count = *count;\n        }\n\
    \    }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n\
    \        if value == max_count {\n            result.insert(key, value);\n   \
    \     }\n    }\n    result", "    let mut map = HashMap::new();\n    let mut max_count\
    \ = 0;\n    for word in test.split(\" \") {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    let mut max = 0;\n    for word in test.split_whitespace() {\n        let\
    \ count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n  \
    \      if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result = HashMap::new();\n    for (key, value) in map {\n        if value\
    \ == max {\n            result.insert(key, value);\n        }\n    }\n    result",
  "    let mut result = HashMap::new();\n    let mut max_count = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max", "    let mut map = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &map {\n        if *count > max_count {\n            max_count = *count;\n \
    \       }\n    }\n    let mut result = HashMap::new();\n    for (key, count) in\
    \ &map {\n        if *count == max_count {\n            result.insert(key.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut result: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut max_count: isize = 0;\n    for word in\
    \ test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max: HashMap<String, isize>\
    \ = HashMap::new();\n    for (key, value) in result {\n        if value == max_count\
    \ {\n            result_max.insert(key, value);\n        }\n    }\n    result_max",
  "    let mut result = HashMap::new();\n    let mut max = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = result.entry(word.to_string()).or_insert(0);\n      \
    \  *count += 1;\n        if *count > max {\n            max = *count;\n      \
    \  }\n    }\n    let mut result_max = HashMap::new();\n    for (key, value) in\
    \ result {\n        if value == max {\n            result_max.insert(key, value);\n\
    \        }\n    }\n    result_max", "    let mut map = HashMap::new();\n    let\
    \ mut max = 0;\n    for word in test.split_whitespace() {\n        let count =\
    \ map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n        if\
    \ *count > max {\n            max = *count;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (key, value) in map {\n        if value == max {\n\
    \            result.insert(key, value);\n        }\n    }\n    result", "    let\
    \ mut map = HashMap::new();\n    for word in test.split_whitespace() {\n     \
    \   let count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = 0;\n    for (_, value) in map.iter() {\n        if *value\
    \ > max {\n            max = *value;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (key, value) in map.iter() {\n        if *value == max {\n          \
    \  result.insert(key.to_string(), *value);\n        }\n    }\n    result", " \
    \   let mut histogram: HashMap<String, isize> = HashMap::new();\n    for letter\
    \ in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_count = histogram.values().max().unwrap();\n\
    \    let mut result: HashMap<String, isize> = HashMap::new();\n    for (key, value)\
    \ in histogram {\n        if value == *max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n\
    \        if *v > max {\n            max = *v;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (k, v) in &map {\n        if *v == max {\n      \
    \      result.insert(k.to_string(), *v);\n        }\n    }\n    result", "   \
    \ let mut map = HashMap::new();\n    for word in test.split_whitespace() {\n \
    \       let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    map", "    let mut result = HashMap::new();\n    let mut max\
    \ = 0;\n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result_max = HashMap::new();\n    for (letter,\
    \ count) in result {\n        if count == max {\n            result_max.insert(letter,\
    \ count);\n        }\n    }\n    result_max", "    let mut map = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_count = map.values().max().unwrap();\n\
    \    let mut result = HashMap::new();\n    for (letter, count) in map {\n    \
    \    if count == *max_count {\n            result.insert(letter, count);\n   \
    \     }\n    }\n    result", "    let mut map = HashMap::new();\n    let mut max\
    \ = 0;\n    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut result = HashMap::new();\n    let\
    \ mut max_count = 0;\n    for word in test.split_whitespace() {\n        let count\
    \ = result.entry(word.to_string()).or_insert(0);\n        *count += 1;\n     \
    \   if *count > max_count {\n            max_count = *count;\n        }\n    }\n\
    \    let mut result_max = HashMap::new();\n    for (key, value) in result {\n\
    \        if value == max_count {\n            result_max.insert(key, value);\n\
    \        }\n    }\n    result_max", "    let mut map = HashMap::new();\n    for\
    \ word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &map {\n        if *count > max_count {\n            max_count = *count;\n \
    \       }\n    }\n    let mut result = HashMap::new();\n    for (word, count)\
    \ in &map {\n        if *count == max_count {\n            result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    let mut max = 0;\n    for word in test.split_whitespace() {\n        let\
    \ count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n  \
    \      if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result = HashMap::new();\n    for (key, value) in map {\n        if value\
    \ == max {\n            result.insert(key, value);\n        }\n    }\n    result",
  "    let mut result: HashMap<String, isize> = HashMap::new();\n    for word in test.split(\"\
    \ \") {\n        let count = result.entry(word.to_string()).or_insert(0);\n  \
    \      *count += 1;\n    }\n    result", "    let mut result = HashMap::new();\n\
    \    let mut max = 0;\n    for word in test.split_whitespace() {\n        let\
    \ count = result.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \        if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result_max = HashMap::new();\n    for (key, value) in result {\n       \
    \ if value == max {\n            result_max.insert(key, value);\n        }\n \
    \   }\n    result_max", "    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n\
    \        let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_max.insert(key, value);\n        }\n    }\n    result_max", "    let\
    \ mut map = HashMap::new();\n    for letter in test.split_whitespace() {\n   \
    \     let count = map.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let max = map.values().max().unwrap();\n    let mut result\
    \ = HashMap::new();\n    for (key, value) in map {\n        if value == *max {\n\
    \            result.insert(key, value);\n        }\n    }\n    result", "    let\
    \ mut map = HashMap::new();\n    let mut max = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n        }\n   \
    \ }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n   \
    \     if value == max {\n            result.insert(key, value);\n        }\n \
    \   }\n    result", "    let mut map = HashMap::new();\n    let mut max = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut histogram: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_count: isize = 0;\n    let mut max_letters:\
    \ Vec<String> = Vec::new();\n\n    for letter in test.split_whitespace() {\n \
    \       let count = histogram.entry(letter.to_string()).or_insert(0);\n      \
    \  *count += 1;\n\n        if *count > max_count {\n            max_count = *count;\n\
    \            max_letters = vec![letter.to_string()];\n        } else if *count\
    \ == max_count {\n            max_letters.push(letter.to_string());\n        }\n\
    \    }\n\n    for letter in max_letters {\n        histogram.insert(letter, max_count);\n\
    \    }\n\n    histogram", "    let mut map = HashMap::new();\n    for letter in\
    \ test.split_whitespace() {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_count = map.values().max().unwrap();\n\
    \    map.retain(|_, &mut v| v == *max_count);\n    map", "    let mut result =\
    \ HashMap::new();\n    let mut max_count = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = result.entry(word.to_string()).or_insert(0);\n      \
    \  *count += 1;\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut result_max = HashMap::new();\n    for (key, value)\
    \ in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max", "    let mut histogram: HashMap<String,\
    \ isize> = HashMap::new();\n    for word in test.split_whitespace() {\n      \
    \  let count = histogram.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in &histogram {\n\
    \        if *count > max_count {\n            max_count = *count;\n        }\n\
    \    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n    for\
    \ (word, count) in &histogram {\n        if *count == max_count {\n          \
    \  result.insert(word.to_string(), *count);\n        }\n    }\n    result", " \
    \   let mut hm: HashMap<String, isize> = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let count = hm.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max_count = 0;\n    for (_, v) in &hm {\n        if\
    \ *v > max_count {\n            max_count = *v;\n        }\n    }\n    let mut\
    \ result: HashMap<String, isize> = HashMap::new();\n    for (k, v) in &hm {\n\
    \        if *v == max_count {\n            result.insert(k.to_string(), *v);\n\
    \        }\n    }\n    result", "    let mut histogram = HashMap::new();\n   \
    \ let mut max_count = 0;\n    for word in test.split_whitespace() {\n        let\
    \ count = histogram.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \        if *count > max_count {\n            max_count = *count;\n        }\n\
    \    }\n    let mut result = HashMap::new();\n    for (key, value) in histogram\
    \ {\n        if value == max_count {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut map = HashMap::new();\n    let mut\
    \ max = 0;\n    let mut max_keys = Vec::new();\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n            max_keys.clear();\n\
    \            max_keys.push(word.to_string());\n        } else if *count == max\
    \ {\n            max_keys.push(word.to_string());\n        }\n    }\n    let mut\
    \ result = HashMap::new();\n    for key in max_keys {\n        result.insert(key,\
    \ max);\n    }\n    result", "    let mut histogram = HashMap::new();\n    for\
    \ letter in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &histogram {\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (letter, count)\
    \ in &histogram {\n        if *count == max_count {\n            result.insert(letter.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut result = HashMap::new();\n\
    \    let mut max_count = 0;\n    for word in test.split_whitespace() {\n     \
    \   let count = result.entry(word.to_string()).or_insert(0);\n        *count +=\
    \ 1;\n        if *count > max_count {\n            max_count = *count;\n     \
    \   }\n    }\n    let mut final_result = HashMap::new();\n    for (key, value)\
    \ in result {\n        if value == max_count {\n            final_result.insert(key,\
    \ value);\n        }\n    }\n    final_result", "    let mut map = HashMap::new();\n\
    \    let mut max = 0;\n    for word in test.split_whitespace() {\n        let\
    \ count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n  \
    \      if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result = HashMap::new();\n    for (key, value) in map {\n        if value\
    \ == max {\n            result.insert(key, value);\n        }\n    }\n    result",
  "    let mut result = HashMap::new();\n    for word in test.split_whitespace() {\n\
    \        let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in &result {\n\
    \        if *count > max_count {\n            max_count = *count;\n        }\n\
    \    }\n    let mut max_words = HashMap::new();\n    for (word, count) in &result\
    \ {\n        if *count == max_count {\n            max_words.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    max_words", "    let mut map = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &map {\n        if *count > max_count {\n            max_count = *count;\n \
    \       }\n    }\n    let mut result = HashMap::new();\n    for (word, count)\
    \ in &map {\n        if *count == max_count {\n            result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut result: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut max_count: isize = 0;\n    for word in\
    \ test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut final_result: HashMap<String, isize>\
    \ = HashMap::new();\n    for (key, value) in result {\n        if value == max_count\
    \ {\n            final_result.insert(key, value);\n        }\n    }\n    final_result",
  "    let mut map = HashMap::new();\n    for word in test.split_whitespace() {\n\
    \        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v\
    \ > max {\n            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result", "    let mut histogram: HashMap<String,\
    \ isize> = HashMap::new();\n    for letter in test.split_whitespace() {\n    \
    \    let count = histogram.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let max_count = histogram.values().max().unwrap();\n    histogram.retain(|_,\
    \ &mut v| v == *max_count);\n    histogram", "    let mut map = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, count) in &map\
    \ {\n        if *count > max {\n            max = *count;\n        }\n    }\n\
    \    let mut result = HashMap::new();\n    for (word, count) in &map {\n     \
    \   if *count == max {\n            result.insert(word.to_string(), *count);\n\
    \        }\n    }\n    result", "    let mut result: HashMap<String, isize> =\
    \ HashMap::new();\n    let mut max_count: isize = 0;\n    for letter in test.split_whitespace()\
    \ {\n        let count = result.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut final_result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   final_result.insert(key, value);\n        }\n    }\n    final_result", " \
    \   let mut map = HashMap::new();\n    let mut max = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n        }\n   \
    \ }\n    let mut result = HashMap::new();\n    for (key, value) in map {\n   \
    \     if value == max {\n            result.insert(key, value);\n        }\n \
    \   }\n    result", "    let mut map = HashMap::new();\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in &map {\n   \
    \     if *count > max_count {\n            max_count = *count;\n        }\n  \
    \  }\n    let mut result = HashMap::new();\n    for (word, count) in &map {\n\
    \        if *count == max_count {\n            result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut result = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &result {\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut result_max = HashMap::new();\n    for (word, count)\
    \ in &result {\n        if *count == max_count {\n            result_max.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result_max", "    let mut map = HashMap::new();\n\
    \    let mut max = 0;\n    for word in test.split_whitespace() {\n        let\
    \ count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n  \
    \      if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result = HashMap::new();\n    for (key, value) in map {\n        if value\
    \ == max {\n            result.insert(key, value);\n        }\n    }\n    result",
  "    let mut result: HashMap<String, isize> = HashMap::new();\n    for letter in\
    \ test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max_count = result.values().max().unwrap();\n\
    \    let mut max_letters: HashMap<String, isize> = HashMap::new();\n    for (letter,\
    \ count) in result {\n        if count == *max_count {\n            max_letters.insert(letter,\
    \ count);\n        }\n    }\n    max_letters", "    let mut map = HashMap::new();\n\
    \    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, value) in map.iter()\
    \ {\n        if *value > max {\n            max = *value;\n        }\n    }\n\
    \    let mut result = HashMap::new();\n    for (key, value) in map.iter() {\n\
    \        if *value == max {\n            result.insert(key.to_string(), *value);\n\
    \        }\n    }\n    result", "    let mut map = HashMap::new();\n    for c\
    \ in test.split_whitespace() {\n        let count = map.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n\
    \        if *v > max {\n            max = *v;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (k, v) in &map {\n        if *v == max {\n      \
    \      result.insert(k.to_string(), *v);\n        }\n    }\n    result", "   \
    \ let mut map = HashMap::new();\n    let mut max_count = 0;\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result = HashMap::new();\n    for (key, value) in\
    \ map {\n        if value == max_count {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut map = HashMap::new();\n    for c\
    \ in test.split_whitespace() {\n        let count = map.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n\
    \        if *v > max {\n            max = *v;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (k, v) in &map {\n        if *v == max {\n      \
    \      result.insert(k.to_string(), *v);\n        }\n    }\n    result", "   \
    \ let mut map = HashMap::new();\n    for word in test.split_whitespace() {\n \
    \       let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, count) in &map {\n        if\
    \ *count > max {\n            max = *count;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (key, count) in &map {\n        if *count == max\
    \ {\n            result.insert(key.to_string(), *count);\n        }\n    }\n \
    \   result", "    let mut histogram = HashMap::new();\n    for word in test.split_whitespace()\
    \ {\n        let count = histogram.entry(word.to_string()).or_insert(0);\n   \
    \     *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in &histogram\
    \ {\n        if *count > max_count {\n            max_count = *count;\n      \
    \  }\n    }\n    let mut result = HashMap::new();\n    for (word, count) in &histogram\
    \ {\n        if *count == max_count {\n            result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut result: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut max_count: isize = 0;\n    for word in\
    \ test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max: HashMap<String, isize>\
    \ = HashMap::new();\n    for (key, value) in result {\n        if value == max_count\
    \ {\n            result_max.insert(key, value);\n        }\n    }\n    result_max",
  "    let mut result = HashMap::new();\n    let mut max_count = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    result.retain(|_, &mut v| v == max_count);\n\
    \    result", "    let mut map = HashMap::new();\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    map", "    let mut map = HashMap::new();\n    let mut max\
    \ = 0;\n    for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result", "    let mut histogram = HashMap::new();\n   \
    \ for letter in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &histogram {\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (letter, count)\
    \ in &histogram {\n        if *count == max_count {\n            result.insert(letter.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    for c in test.split_whitespace() {\n        let counter = map.entry(c.to_string()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    let mut max_count = 0;\n    for (_, count)\
    \ in &map {\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, count)\
    \ in &map {\n        if *count == max_count {\n            result.insert(key.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut result = HashMap::new();\n\
    \    let mut max_count = 0;\n    for word in test.split_whitespace() {\n     \
    \   let count = result.entry(word.to_string()).or_insert(0);\n        *count +=\
    \ 1;\n        if *count > max_count {\n            max_count = *count;\n     \
    \   }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result", " \
    \   let mut histogram = HashMap::new();\n    let mut max_count = 0;\n    for letter\
    \ in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (letter,\
    \ count) in histogram {\n        if count == max_count {\n            result.insert(letter,\
    \ count);\n        }\n    }\n    result", "    let mut result = HashMap::new();\n\
    \    let mut max = 0;\n    for word in test.split_whitespace() {\n        let\
    \ count = result.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \        if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result_max = HashMap::new();\n    for (key, value) in result {\n       \
    \ if value == max {\n            result_max.insert(key, value);\n        }\n \
    \   }\n    result_max", "    let mut histogram: HashMap<String, isize> = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in\
    \ &histogram {\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (letter, count) in &histogram {\n        if *count == max_count {\n \
    \           result.insert(letter.to_string(), *count);\n        }\n    }\n   \
    \ result", "    let mut map = HashMap::new();\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, count) in &map {\n        if\
    \ *count > max {\n            max = *count;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (word, count) in &map {\n        if *count == max\
    \ {\n            result.insert(word.to_string(), *count);\n        }\n    }\n\
    \    result", "    let mut map = HashMap::new();\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in &map {\n   \
    \     if *count > max_count {\n            max_count = *count;\n        }\n  \
    \  }\n    let mut result = HashMap::new();\n    for (word, count) in &map {\n\
    \        if *count == max_count {\n            result.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    result", "    let mut map = HashMap::new();\n\
    \    let mut max = 0;\n    for word in test.split_whitespace() {\n        let\
    \ count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n  \
    \      if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result = HashMap::new();\n    for (key, value) in map {\n        if value\
    \ == max {\n            result.insert(key, value);\n        }\n    }\n    result",
  "    let mut map = HashMap::new();\n    for word in test.split_whitespace() {\n\
    \        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, value) in map.iter() {\n   \
    \     if *value > max {\n            max = *value;\n        }\n    }\n    let\
    \ mut result = HashMap::new();\n    for (key, value) in map.iter() {\n       \
    \ if *value == max {\n            result.insert(key.to_string(), *value);\n  \
    \      }\n    }\n    result", "    let mut result = HashMap::new();\n    let mut\
    \ max_count = 0;\n    let mut max_letters = Vec::new();\n    for letter in test.split_whitespace()\
    \ {\n        let count = result.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n        if *count > max_count {\n            max_count = *count;\n\
    \            max_letters = vec![letter.to_string()];\n        } else if *count\
    \ == max_count {\n            max_letters.push(letter.to_string());\n        }\n\
    \    }\n    let mut final_result = HashMap::new();\n    for letter in max_letters\
    \ {\n        final_result.insert(letter, max_count);\n    }\n    final_result",
  "    let mut map = HashMap::new();\n    for c in test.split_whitespace() {\n   \
    \     let count = map.entry(c.to_string()).or_insert(0);\n        *count += 1;\n\
    \    }\n    let max = map.values().max().unwrap_or(&0);\n    map.retain(|_, &v|\
    \ v == *max);\n    map"]
stop_tokens:
- "\n}"
