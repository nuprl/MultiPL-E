language: rs
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpyq9kojuc.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpfle9srjw.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmprgznrt73.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp795a5ald.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpzqqmgrz6.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpdeceqmu3.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp8zctl0ei.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpmyqxhl5y.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpgzmlmlud.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp7w2utv7q.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmplnrc2evu.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp78ucn0l2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpvbtc4azb.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmptacb6xpd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpo9czlb51.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpc3_8duze.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp0me3j4hs.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe9c2ydeh.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpdghz5xbs.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749661
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        match *grade\
    \ {\n            4.0 => \"A+\",\n            x if x > 3.7 => \"A\",\n        \
    \    x if x > 3.3 => \"A-\",\n            x if x > 3.0 => \"B+\",\n          \
    \  x if x > 2.7 => \"B\",\n            x if x > 2.3 => \"B-\",\n            x\
    \ if x > 2.0 => \"C+\",\n            x if x > 1.7 => \"C\",\n            x if\
    \ x > 1.3 => \"C-\",\n            x if x > 1.0 => \"D+\",\n            x if x\
    \ > 0.7 => \"D\",\n            x if x > 0.0 => \"D-\",\n            _ => \"E\"\
    ,\n        }\n    }).map(|grade| String::from(grade)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749661
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            String::from(\"A+\")\n        } else if *grade >= 3.7\
    \ {\n            String::from(\"A\")\n        } else if *grade >= 3.3 {\n    \
    \        String::from(\"A-\")\n        } else if *grade >= 3.0 {\n           \
    \ String::from(\"B+\")\n        } else if *grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade >= 2.3 {\n            String::from(\"B-\")\n  \
    \      } else if *grade >= 2.0 {\n            String::from(\"C+\")\n        }\
    \ else if *grade >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *grade >= 1.3 {\n            String::from(\"C-\")\n        } else if *grade\
    \ >= 1.0 {\n            String::from(\"D+\")\n        } else if *grade >= 0.7\
    \ {\n            String::from(\"D\")\n        } else if *grade >= 0.0 {\n    \
    \        String::from(\"D-\")\n        } else {\n            String::from(\"E\"\
    )\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_dr8qyjj.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749661
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            String::from(\"A+\")\n        } else if *grade >= 3.7\
    \ {\n            String::from(\"A\")\n        } else if *grade >= 3.3 {\n    \
    \        String::from(\"A-\")\n        } else if *grade >= 3.0 {\n           \
    \ String::from(\"B+\")\n        } else if *grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade >= 2.3 {\n            String::from(\"B-\")\n  \
    \      } else if *grade >= 2.0 {\n            String::from(\"C+\")\n        }\
    \ else if *grade >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *grade >= 1.3 {\n            String::from(\"C-\")\n        } else if *grade\
    \ >= 1.0 {\n            String::from(\"D+\")\n        } else if *grade >= 0.7\
    \ {\n            String::from(\"D\")\n        } else if *grade >= 0.0 {\n    \
    \        String::from(\"D-\")\n        } else {\n            String::from(\"E\"\
    )\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_dr8qyjj.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749661
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            String::from(\"A+\")\n        } else if *grade >= 3.7\
    \ {\n            String::from(\"A\")\n        } else if *grade >= 3.3 {\n    \
    \        String::from(\"A-\")\n        } else if *grade >= 3.0 {\n           \
    \ String::from(\"B+\")\n        } else if *grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade >= 2.3 {\n            String::from(\"B-\")\n  \
    \      } else if *grade >= 2.0 {\n            String::from(\"C+\")\n        }\
    \ else if *grade >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *grade >= 1.3 {\n            String::from(\"C-\")\n        } else if *grade\
    \ >= 1.0 {\n            String::from(\"D+\")\n        } else if *grade >= 0.7\
    \ {\n            String::from(\"D\")\n        } else if *grade >= 0.0 {\n    \
    \        String::from(\"D-\")\n        } else {\n            String::from(\"E\"\
    )\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_dr8qyjj.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749661
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        let letter_grade = match grade {\n            4.0\
    \ => \"A+\",\n            3.7...4.0 => \"A\",\n            3.3...3.7 => \"A-\"\
    ,\n            3.0...3.3 => \"B+\",\n            2.7...3.0 => \"B\",\n       \
    \     2.3...2.7 => \"B-\",\n            2.0...2.3 => \"C+\",\n            1.7...2.0\
    \ => \"C\",\n            1.3...1.7 => \"C-\",\n            1.0...1.3 => \"D+\"\
    ,\n            0.7...1.0 => \"D\",\n            0.0...0.7 => \"D-\",\n       \
    \     0.0 => \"E\",\n            _ => \"Invalid grade\",\n        };\n       \
    \ letter_grades.push(String::from(letter_grade));\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_ne8244g.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749661
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut output: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade == 4.0 {\n            output.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            output.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            output.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            output.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            output.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            output.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            output.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            output.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            output.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            output.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            output.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            output.push(String::from(\"\
    D-\"));\n        } else {\n            output.push(String::from(\"E\"));\n   \
    \     }\n    }\n    output\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpf4xbax_a.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749661
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmps8j8kxvp.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749661
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|&g| {\n        if g >= 4.0\
    \ {\n            \"A+\".to_string()\n        } else if g >= 3.7 {\n          \
    \  \"A\".to_string()\n        } else if g >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if g >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if g >= 2.7 {\n            \"B\".to_string()\n        } else if g >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if g >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if g >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if g >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if g >= 1.0 {\n            \"D+\".to_string()\n        } else if g >= 0.7 {\n\
    \            \"D\".to_string()\n        } else if g >= 0.0 {\n            \"D-\"\
    .to_string()\n        } else {\n            \"E\".to_string()\n        }\n   \
    \ }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpzfoxozgi.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749661
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        match *grade\
    \ {\n            4.0 => \"A+\",\n            g if g > 3.7 => \"A\",\n        \
    \    g if g > 3.3 => \"A-\",\n            g if g > 3.0 => \"B+\",\n          \
    \  g if g > 2.7 => \"B\",\n            g if g > 2.3 => \"B-\",\n            g\
    \ if g > 2.0 => \"C+\",\n            g if g > 1.7 => \"C\",\n            g if\
    \ g > 1.3 => \"C-\",\n            g if g > 1.0 => \"D+\",\n            g if g\
    \ > 0.7 => \"D\",\n            g if g > 0.0 => \"D-\",\n            _ => \"E\"\
    ,\n        }\n    }).map(|s| String::from(s)).collect()\n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749662
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            String::from(\"A+\")\n        } else if *grade >= 3.7\
    \ {\n            String::from(\"A\")\n        } else if *grade >= 3.3 {\n    \
    \        String::from(\"A-\")\n        } else if *grade >= 3.0 {\n           \
    \ String::from(\"B+\")\n        } else if *grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade >= 2.3 {\n            String::from(\"B-\")\n  \
    \      } else if *grade >= 2.0 {\n            String::from(\"C+\")\n        }\
    \ else if *grade >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *grade >= 1.3 {\n            String::from(\"C-\")\n        } else if *grade\
    \ >= 1.0 {\n            String::from(\"D+\")\n        } else if *grade >= 0.7\
    \ {\n            String::from(\"D\")\n        } else if *grade >= 0.0 {\n    \
    \        String::from(\"D-\")\n        } else {\n            String::from(\"E\"\
    )\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_dr8qyjj.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749661
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        match *grade\
    \ {\n            4.0 => String::from(\"A+\"),\n            g if g > 3.7 => String::from(\"\
    A\"),\n            g if g > 3.3 => String::from(\"A-\"),\n            g if g >\
    \ 3.0 => String::from(\"B+\"),\n            g if g > 2.7 => String::from(\"B\"\
    ),\n            g if g > 2.3 => String::from(\"B-\"),\n            g if g > 2.0\
    \ => String::from(\"C+\"),\n            g if g > 1.7 => String::from(\"C\"),\n\
    \            g if g > 1.3 => String::from(\"C-\"),\n            g if g > 1.0 =>\
    \ String::from(\"D+\"),\n            g if g > 0.7 => String::from(\"D\"),\n  \
    \          g if g > 0.0 => String::from(\"D-\"),\n            _ => String::from(\"\
    E\"),\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749662
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5fz5dar2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
