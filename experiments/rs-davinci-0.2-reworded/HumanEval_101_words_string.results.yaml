name: HumanEval_101_words_string
language: rs
results:
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpuxu4d034.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp59cb4hso.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpuyo2x0ys.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp3dz3jk2c.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpe68r663v.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpmixl4ev8.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpo4me459n.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpzodt5t0d.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmps4stboqw.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpzrlgnxos.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpa45cwxhl.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpnzkc_0my.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp5rebj2ev.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcfb5l8km.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_cr0vwo3.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpx7lhqcyt.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_vkkvy_n.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp1y4ogrgz.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpyrnwz1tz.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmph1xk8sju.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmppye4ekvz.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp0s7yr_cu.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpl8mqwct_.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp40w6ovav.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmptcjltu54.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp83eahx1u.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpdtudmq7f.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpdjdsbugg.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpa64wr9c0.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpnh6zgvga.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpcmd8v5h5.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpzoqjtm3l.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp2janujj0.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp2f05f4mu.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmprvki6wh7.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp0fmw236e.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp524rsdov.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpgjfmpfr6.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpappsuhqx.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp54kdb_dl.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmplt77plxl.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpb1t17z8o.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpm2kahf01.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpwoysnolj.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpg30_bpiy.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1lcxz86k.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpoj7gaakf.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp9ov9l9g3.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp8htz4fdq.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpcc3quhrr.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpgg5lbhy4.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpe_khjkax.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpmyrehakg.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpo02ouln4.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpo7x5q8jh.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp335739sc.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp4503x0ws.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpt3vp9ytv.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpf35e55sx.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpm1dchd5a.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp16nga5lq.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpe8mpuujf.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmput30_c1f.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmptjc196eu.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpu2_0ud0n.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp40nlqajp.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpf223c6ez.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp8f5ayacz.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmprffb7pc_.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp17yp_p3w.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpnfyc00iu.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp9p8pur4c.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpzcrbnwhk.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpqdqst_a8.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpsgsmdsbs.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpo4r6x54o.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmplu0ru6nz.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpte2lepyv.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpbap0qev1.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpgdry1i7a.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp5ce5ledq.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp2vop9opg.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpbecvr3le.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp0pnqkg_q.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp709c0yt2.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_8_024yk.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|w| w.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpa_umunv8.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpxijhd7cr.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp6fjb45q4.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpleaq1wkk.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpa5cmm9jl.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_afd1ke0.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmprbo9gvh4.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpmb_f5q9c.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp6vo7oov7.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpkqvhfpa5.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpyy6sfts0.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmppi_e2pqp.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpg7ku7lkh.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpvirr1u7u.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpnj_59o73.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmppdgitmlr.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpx8i2mvf2.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpv6uxwrhp.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp1dznrnr6.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpcmuwcir0.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpj1n6cebg.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpojw56jf4.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpz6pk1ku9.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp9twib6bi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp3w80ky8i.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpfvo5t18v.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmptafry3gm.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpvdsn9kms.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpsdis74ul.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp0f1fsfmh.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp7gtbpji_.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_3385iky.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmppsuziqta.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpbi7fz7b0.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpe4cc447u.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp2akehcc6.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpnba6ufeb.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpxvck2up1.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpj9g7fvij.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmptho3gsib.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmptflj_b0k.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpzux2cmp9.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmprqdbtc6u.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp3pfs3uee.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpott4jvt4.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpvxc74nk5.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpbf59x199.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp51g5v8cw.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpy6_uv9va.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_q_a62kv.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpegmn5kp5.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpr0z93rc_.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpax70nixp.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp7calj0sr.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpq5h177kz.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpxwii5m8h.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpodjudnwu.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpmpp_b0mv.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmplhck_slo.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpn9lg9l40.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp12fwvbmx.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpyzgsn_l9.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_kql7rbq.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp50yjow1q.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp4yacxbmu.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp5o1olm88.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp7ang_4vm.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmprnwe1wi7.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp79nbcx56.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpqfpiikdl.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp5ft62qmz.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpm8kfiha7.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp5hneu9qw.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpw1bp_63r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpjdwiezoe.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp90i60_18.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpgzlfh9n3.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp4r24qo3k.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp88v2av5l.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp2i6porj_.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp7u1nyhfm.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpykc3en8s.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpcy8k_9pt.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpdwmg9aag.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpsk3xtr1o.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_00s9n4g.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpt6vr9rv5.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp4b7ityel.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpt4f03xpj.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp8sc48jy8.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_rl5q50m.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpcvr5m_xs.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpvqr0jtb7.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpw95lj_z0.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpy6nf1raj.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp6annh6vl.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp2t3ejlvf.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpg3e5_kv1.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpat3disfy.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpy1y5uv6u.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphj7q2gca.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp4b81o4qf.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp1k87oag0.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp03otlhy8.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp2u5q148k.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_m8lh0_l.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_lxyl797.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpvqet8o2p.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpakbsbpu5.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp94go41np.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpp5lc4zcn.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpdx4sxzi1.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpxah_s1wp.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp0szxi2_9.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
