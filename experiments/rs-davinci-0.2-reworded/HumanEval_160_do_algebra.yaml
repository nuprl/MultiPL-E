name: HumanEval_160_do_algebra
language: rs
prompt: "/// Given two vectors operator, and operand. The first vector has basic algebra\
  \ operations, and \n/// the second vector is a vector of integers. Use the two given\
  \ vectors to build the algebric \n/// expression and return the evaluation of this\
  \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
  \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
  \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n\
  /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
  \ vector is equal to the length of operand vector minus one.\n/// Operand is a vector\
  \ of of non-negative integers.\n/// Operator vector has at least one operator, and\
  \ operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>,\
  \ operand: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
  **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
  +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
  //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
completions: ["    let mut result = operand[0];\n    for i in 0..operator.len() {\n\
    \        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        let op = &operator[i];\n        let num = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += num,\n  \
    \          \"-\" => result -= num,\n            \"*\" => result *= num,\n    \
    \        \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Unsupported operator: {}\", op),\n     \
    \   }\n    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let op2 = operand[i + 1];\n  \
    \      match op.as_str() {\n            \"+\" => result += op2,\n            \"\
    -\" => result -= op2,\n            \"*\" => result *= op2,\n            \"//\"\
    \ => result /= op2,\n            \"**\" => result = result.pow(op2 as u32),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => (),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = &operator[i];\n        let op1 = operand[i];\n        let\
    \ op2 = operand[i + 1];\n        match op.as_str() {\n            \"+\" => result\
    \ = op1 + op2,\n            \"-\" => result = op1 - op2,\n            \"*\" =>\
    \ result = op1 * op2,\n            \"//\" => result = op1 / op2,\n           \
    \ \"**\" => result = op1.pow(op2 as u32),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator!\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = &operator[i];\n        let op1 = operand[i];\n        let\
    \ op2 = operand[i + 1];\n        match op.as_str() {\n            \"+\" => result\
    \ = op1 + op2,\n            \"-\" => result = op1 - op2,\n            \"*\" =>\
    \ result = op1 * op2,\n            \"//\" => result = op1 / op2,\n           \
    \ \"**\" => result = op1.pow(op2 as u32),\n            _ => panic!(\"Unknown operator\"\
    ),\n        }\n    }\n    result", "    let mut result = operand[0];\n    for\
    \ i in 0..operator.len() {\n        match operator[i].as_str() {\n           \
    \ \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        let op = &operator[i];\n        let\
    \ opd = operand[i + 1];\n        match op.as_str() {\n            \"+\" => result\
    \ += opd,\n            \"-\" => result -= opd,\n            \"*\" => result *=\
    \ opd,\n            \"//\" => result /= opd,\n            \"**\" => result = result.pow(opd\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator: {}\", operator[i]),\n        }\n    }\n  \
    \  result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator!\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator: {}\", operator[i]),\n        }\n    }\n  \
    \  result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let op1 = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += op1,\n            \"-\" => result -= op1,\n\
    \            \"*\" => result *= op1,\n            \"//\" => result /= op1,\n \
    \           \"**\" => result = result.pow(op1 as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator!\"),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = &operator[i];\n        let num = operand[i + 1];\n     \
    \   match op.as_str() {\n            \"+\" => result += num,\n            \"-\"\
    \ => result -= num,\n            \"*\" => result *= num,\n            \"//\" =>\
    \ result /= num,\n            \"**\" => result = result.pow(num as u32),\n   \
    \         _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", " \
    \   let mut result = operand[0];\n    for i in 0..operator.len() {\n        match\
    \ operator[i].as_str() {\n            \"+\" => result += operand[i + 1],\n   \
    \         \"-\" => result -= operand[i + 1],\n            \"*\" => result *= operand[i\
    \ + 1],\n            \"//\" => result /= operand[i + 1],\n            \"**\" =>\
    \ result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"Unknown\
    \ operator: {}\", operator[i]),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        let op1 = operand[i];\n        let op2 = operand[i + 1];\n      \
    \  match op.as_str() {\n            \"+\" => result = op1 + op2,\n           \
    \ \"-\" => result = op1 - op2,\n            \"*\" => result = op1 * op2,\n   \
    \         \"//\" => result = op1 / op2,\n            \"**\" => result = op1.pow(op2\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        let op2 = operand[i + 1];\n        match op.as_str() {\n        \
    \    \"+\" => result += op2,\n            \"-\" => result -= op2,\n          \
    \  \"*\" => result *= op2,\n            \"//\" => result /= op2,\n           \
    \ \"**\" => result = result.pow(op2 as u32),\n            _ => panic!(\"Unknown\
    \ operator: {}\", op),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        let op_result = match op.as_str() {\n            \"+\" => result\
    \ + operand[i + 1],\n            \"-\" => result - operand[i + 1],\n         \
    \   \"*\" => result * operand[i + 1],\n            \"//\" => result / operand[i\
    \ + 1],\n            \"**\" => result.pow(operand[i + 1] as u32),\n          \
    \  _ => panic!(\"Unknown operator\"),\n        };\n        result = op_result;\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator: {}\", operator[i]),\n        }\n    }\n  \
    \  result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = operator[i].as_str();\n        match op {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator: {}\", op),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = operator[i].as_str();\n        let operand = operand[i +\
    \ 1];\n        match op {\n            \"+\" => result += operand,\n         \
    \   \"-\" => result -= operand,\n            \"*\" => result *= operand,\n   \
    \         \"//\" => result /= operand,\n            \"**\" => result = result.pow(operand\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator: {}\", operator[i]),\n        }\n    }\n  \
    \  result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = &operator[i];\n        let num = operand[i + 1];\n     \
    \   match op.as_str() {\n            \"+\" => result += num,\n            \"-\"\
    \ => result -= num,\n            \"*\" => result *= num,\n            \"//\" =>\
    \ result /= num,\n            \"**\" => result = result.pow(num as u32),\n   \
    \         _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", " \
    \   let mut result = operand[0];\n    for i in 0..operator.len() {\n        if\
    \ operator[i] == \"+\" {\n            result += operand[i + 1];\n        } else\
    \ if operator[i] == \"-\" {\n            result -= operand[i + 1];\n        }\
    \ else if operator[i] == \"*\" {\n            result *= operand[i + 1];\n    \
    \    } else if operator[i] == \"//\" {\n            result /= operand[i + 1];\n\
    \        } else if operator[i] == \"**\" {\n            result = result.pow(operand[i\
    \ + 1] as u32);\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let operand = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += operand,\n            \"-\" => result -= operand,\n\
    \            \"*\" => result *= operand,\n            \"//\" => result /= operand,\n\
    \            \"**\" => result = result.pow(operand as u32),\n            _ =>\
    \ panic!(\"Unknown operator {}\", op),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result += op2,\n            \"-\" => result -= op2,\n            \"*\"\
    \ => result *= op2,\n            \"//\" => result /= op2,\n            \"**\"\
    \ => result = result.pow(op2 as u32),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ operator[i].as_str();\n        let op2 = operand[i + 1];\n        match op {\n\
    \            \"+\" => result += op2,\n            \"-\" => result -= op2,\n  \
    \          \"*\" => result *= op2,\n            \"//\" => result /= op2,\n   \
    \         \"**\" => result = result.pow(op2 as u32),\n            _ => panic!(\"\
    Unknown operator {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op1 = operand[i];\n        let op2 = operand[i + 1];\n        match\
    \ op.as_str() {\n            \"+\" => result = op1 + op2,\n            \"-\" =>\
    \ result = op1 - op2,\n            \"*\" => result = op1 * op2,\n            \"\
    //\" => result = op1 / op2,\n            \"**\" => result = op1.pow(op2 as u32),\n\
    \            _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result",
  "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        let op1 = operand[i];\n        let op2 = operand[i + 1];\n      \
    \  match op.as_str() {\n            \"+\" => result = op1 + op2,\n           \
    \ \"-\" => result = op1 - op2,\n            \"*\" => result = op1 * op2,\n   \
    \         \"//\" => result = op1 / op2,\n            \"**\" => result = op1.pow(op2\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator!\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => println!(\"Invalid operator\"),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator: {}\", operator[i]),\n        }\n    }\n  \
    \  result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator!\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator!\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let op1 = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += op1,\n            \"-\" => result -= op1,\n\
    \            \"*\" => result *= op1,\n            \"//\" => result /= op1,\n \
    \           \"**\" => result = result.pow(op1 as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = &operator[i];\n        let num = operand[i + 1];\n     \
    \   match op.as_str() {\n            \"+\" => result += num,\n            \"-\"\
    \ => result -= num,\n            \"*\" => result *= num,\n            \"//\" =>\
    \ result /= num,\n            \"**\" => result = result.pow(num as u32),\n   \
    \         _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", " \
    \   let mut result = operand[0];\n    for i in 0..operator.len() {\n        let\
    \ op = &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator!\"),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = &operator[i];\n        let operand = operand[i + 1];\n \
    \       match op.as_str() {\n            \"+\" => result += operand,\n       \
    \     \"-\" => result -= operand,\n            \"*\" => result *= operand,\n \
    \           \"//\" => result /= operand,\n            \"**\" => result = result.pow(operand\
    \ as u32),\n            _ => panic!(\"Unknown operator {}\", op),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unsupported operator\"),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result"]
stop_tokens:
- "\n}"
