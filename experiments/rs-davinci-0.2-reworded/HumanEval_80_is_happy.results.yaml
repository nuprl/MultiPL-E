name: HumanEval_80_is_happy
language: rs
results:
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpofq3kyla.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9ye248k6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc5okegmh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpv_wwze4p.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev_chars = Vec::new();\n    while let Some(c) = chars.next() {\n\
    \        if prev_chars.len() == 3 {\n            if prev_chars[0] == prev_chars[1]\
    \ || prev_chars[1] == prev_chars[2] || prev_chars[0] == prev_chars[2] {\n    \
    \            return false;\n            }\n            prev_chars.remove(0);\n\
    \        }\n        prev_chars.push(c);\n    }\n    prev_chars.len() >= 3\n}\n\
    \nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpb40jwaf0.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut first = chars.next();\n    let mut second = chars.next();\n    let\
    \ mut third = chars.next();\n    while let Some(f) = first {\n        if let Some(s)\
    \ = second {\n            if let Some(t) = third {\n                if f == s\
    \ || s == t || f == t {\n                    return false;\n                }\n\
    \            } else {\n                return true;\n            }\n        }\
    \ else {\n            return false;\n        }\n        first = second;\n    \
    \    second = third;\n        third = chars.next();\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpboew9n1m.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_inhfblf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut first = chars.next().unwrap();\n\
    \    let mut second = chars.next().unwrap();\n    let mut third = chars.next().unwrap();\n\
    \    for c in chars {\n        if first == second || second == third || first\
    \ == third {\n            return false;\n        }\n        first = second;\n\
    \        second = third;\n        third = c;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfqpy7mhc.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx9zd4anj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvm4lpflx.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt9v1l9w0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ let mut prev_prev_prev = chars.next();\n    for c in chars {\n        if prev_prev_prev\
    \ == Some(c) {\n            return false;\n        }\n        prev_prev_prev =\
    \ prev_prev;\n        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfof_pdd_.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let s = s.as_str();\n    let\
    \ len = s.len();\n    if len < 3 {\n        return false;\n    }\n    for i in\
    \ 0..len - 2 {\n        if s[i..i + 3].chars().collect::<HashSet<char>>().len()\
    \ != 3 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpdozbg2y2.rs:24:42\n\
    \   |\n24 |         if s[i..i + 3].chars().collect::<HashSet<char>>().len() !=\
    \ 3 {\n   |                                          ^^^^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpo906j99w.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjijhdjc5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut first = chars.next();\n    let mut second = chars.next();\n    let\
    \ mut third = chars.next();\n    while let Some(c) = third {\n        if first\
    \ == second || second == third || first == third {\n            return false;\n\
    \        }\n        first = second;\n        second = third;\n        third =\
    \ chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_07xoy7u.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut first = chars.next();\n    let mut second = chars.next();\n    let\
    \ mut third = chars.next();\n    while let Some(c) = third {\n        if first\
    \ == second || second == third || first == third {\n            return false;\n\
    \        }\n        first = second;\n        second = third;\n        third =\
    \ chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx239qnqi.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8demevlw.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut next = chars.next();\n    let mut\
    \ next_next = chars.next();\n    while let (Some(p), Some(n), Some(nn)) = (prev,\
    \ next, next_next) {\n        if p == n || n == nn || p == nn {\n            return\
    \ false;\n        }\n        prev = next;\n        next = next_next;\n       \
    \ next_next = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbvba6jyt.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut last = chars.next();\n    let mut last_last = chars.next();\n   \
    \ for c in chars {\n        if last == last_last && last == Some(c) {\n      \
    \      return false;\n        }\n        last_last = last;\n        last = Some(c);\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppotej6l_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplzi5i6dp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut first = chars.next();\n    let mut second = chars.next();\n    let\
    \ mut third = chars.next();\n    while let Some(c) = third {\n        if first\
    \ == second || second == third || first == third {\n            return false;\n\
    \        }\n        first = second;\n        second = third;\n        third =\
    \ chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7thp686z.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    for c in chars {\n        if prev\
    \ == curr && curr == c {\n            return false;\n        }\n        prev =\
    \ curr;\n        curr = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbw93z8vs.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbouxsbaa.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut next = chars.next();\n    let mut\
    \ next_next = chars.next();\n    while next_next.is_some() {\n        if prev\
    \ == next || next == next_next || prev == next_next {\n            return false;\n\
    \        }\n        prev = next;\n        next = next_next;\n        next_next\
    \ = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu9abbra4.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while chars.next().is_some() {\n        if prev == curr || curr == next ||\
    \ prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpqnl47e2d.rs:31:29\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev_prev == Some(c) {\n            return false;\n\
    \        }\n        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8s3o2kaf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4zpe6jfu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev_chars = vec![];\n    let mut is_happy = true;\n    for c in\
    \ chars {\n        if prev_chars.len() == 3 {\n            prev_chars.remove(0);\n\
    \        }\n        prev_chars.push(c);\n        if prev_chars.len() == 3 {\n\
    \            if prev_chars[0] == prev_chars[1] || prev_chars[1] == prev_chars[2]\
    \ || prev_chars[0] == prev_chars[2] {\n                is_happy = false;\n   \
    \             break;\n            }\n        }\n    }\n    is_happy\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1lkrjpht.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwb_o6_4g.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm322dwtf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut first = chars.next();\n    let mut second = chars.next();\n    let\
    \ mut third = chars.next();\n    while let Some(c) = third {\n        if first\
    \ == second || second == third || first == third {\n            return false;\n\
    \        }\n        first = second;\n        second = third;\n        third =\
    \ chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3aomntzr.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ let mut prev_prev_prev = chars.next();\n    while let Some(c) = chars.next()\
    \ {\n        if prev_prev_prev == Some(c) {\n            return false;\n     \
    \   }\n        prev_prev_prev = prev_prev;\n        prev_prev = prev;\n      \
    \  prev = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprpp5uxpp.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut last_char = chars.next();\n    let mut last_last_char = chars.next();\n\
    \    let mut last_last_last_char = chars.next();\n    while let Some(c) = last_last_last_char\
    \ {\n        if last_char == last_last_char || last_char == last_last_last_char\
    \ || last_last_char == last_last_last_char {\n            return false;\n    \
    \    }\n        last_last_last_char = last_last_char;\n        last_last_char\
    \ = last_char;\n        last_char = Some(c);\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap_or('\\\
    0');\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdbjscx0f.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut\
    \ next = chars.next();\n    while let (Some(p), Some(c), Some(n)) = (prev, curr,\
    \ next) {\n        if p == c || c == n || p == n {\n            return false;\n\
    \        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4sk_ggq8.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while chars.next().is_some() {\n        if prev == curr || curr == next ||\
    \ prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp4mubc_o6.rs:31:29\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut last_char = chars.next();\n    let mut last_last_char = chars.next();\n\
    \    let mut last_last_last_char = chars.next();\n    while let Some(c) = last_last_last_char\
    \ {\n        if c == last_char.unwrap() || c == last_last_char.unwrap() {\n  \
    \          return false;\n        }\n        last_last_last_char = last_last_char;\n\
    \        last_last_char = last_char;\n        last_char = Some(c);\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6f79xml0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev2 = chars.next();\n    for\
    \ c in chars {\n        if prev == Some(c) || prev2 == Some(c) {\n           \
    \ return false;\n        }\n        prev = prev2;\n        prev2 = Some(c);\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpha_w5du2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut first = chars.next();\n    let mut second = chars.next();\n    let\
    \ mut third = chars.next();\n    while let Some(c) = third {\n        if first\
    \ == second || second == third || first == third {\n            return false;\n\
    \        }\n        first = second;\n        second = third;\n        third =\
    \ chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprw04qrlc.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ let mut prev_prev_prev = chars.next();\n    while let Some(c) = chars.next()\
    \ {\n        if prev_prev_prev == Some(c) {\n            return false;\n     \
    \   }\n        prev_prev_prev = prev_prev;\n        prev_prev = prev;\n      \
    \  prev = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_uz8zurp.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let s = s.as_str();\n    let\
    \ len = s.len();\n    if len < 3 {\n        return false;\n    }\n    for i in\
    \ 0..len - 2 {\n        if s[i..i + 3].chars().collect::<HashSet<char>>().len()\
    \ != 3 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpxubkuesi.rs:24:42\n\
    \   |\n24 |         if s[i..i + 3].chars().collect::<HashSet<char>>().len() !=\
    \ 3 {\n   |                                          ^^^^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut\
    \ next = chars.next();\n    while next.is_some() {\n        if prev == curr ||\
    \ curr == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next();\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpv978uuf3.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7t2ib6xl.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3ncs9g6j.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut next = chars.next();\n    let mut\
    \ next_next = chars.next();\n    while next_next.is_some() {\n        if prev\
    \ == next || next == next_next || prev == next_next {\n            return false;\n\
    \        }\n        prev = next;\n        next = next_next;\n        next_next\
    \ = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp08wr0e17.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let s = s.as_str();\n    if s.len()\
    \ < 3 {\n        return false;\n    }\n    for i in 0..s.len() - 2 {\n       \
    \ if s.chars().nth(i) == s.chars().nth(i + 1) || s.chars().nth(i) == s.chars().nth(i\
    \ + 2) || s.chars().nth(i + 1) == s.chars().nth(i + 2) {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut next = chars.next();\n    let mut\
    \ next_next = chars.next();\n    while next_next.is_some() {\n        if prev\
    \ == next || next == next_next || prev == next_next {\n            return false;\n\
    \        }\n        prev = next;\n        next = next_next;\n        next_next\
    \ = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcszgy81x.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_jyvoa84.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut happy = true;\n    let\
    \ mut i = 0;\n    let mut j = 1;\n    let mut k = 2;\n    let mut l = 3;\n   \
    \ while l < s.len() {\n        if s.chars().nth(i) == s.chars().nth(j) || s.chars().nth(i)\
    \ == s.chars().nth(k) || s.chars().nth(i) == s.chars().nth(l) || s.chars().nth(j)\
    \ == s.chars().nth(k) || s.chars().nth(j) == s.chars().nth(l) || s.chars().nth(k)\
    \ == s.chars().nth(l) {\n            happy = false;\n            break;\n    \
    \    }\n        i += 1;\n        j += 1;\n        k += 1;\n        l += 1;\n \
    \   }\n    happy\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd_z7frzp.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpioag7nfr.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7wggfjwh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkzqz2i46.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp41dukqg7.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnp3nj8ph.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut last_char = chars.next();\n    let mut last_last_char = chars.next();\n\
    \    let mut last_last_last_char = chars.next();\n    while let Some(c) = last_last_last_char\
    \ {\n        if last_char == last_last_char || last_char == last_last_last_char\
    \ || last_last_char == last_last_last_char {\n            return false;\n    \
    \    }\n        last_last_last_char = last_last_char;\n        last_last_char\
    \ = last_char;\n        last_char = Some(c);\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_a2h2t_5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp70iy024l.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsnmmut9x.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut next = chars.next();\n    let mut\
    \ next_next = chars.next();\n    while next_next.is_some() {\n        if prev\
    \ == next || next == next_next || prev == next_next {\n            return false;\n\
    \        }\n        prev = next;\n        next = next_next;\n        next_next\
    \ = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt7hq6ia8.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut last = chars.next();\n    let mut last_last = chars.next();\n   \
    \ let mut last_last_last = chars.next();\n    while let Some(c) = last_last_last\
    \ {\n        if last == last_last || last == Some(c) || last_last == Some(c) {\n\
    \            return false;\n        }\n        last = last_last;\n        last_last\
    \ = last_last_last;\n        last_last_last = chars.next();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgda_daa2.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut happy = true;\n    let\
    \ mut i = 0;\n    while happy && i < s.len() - 2 {\n        if s.chars().nth(i)\
    \ == s.chars().nth(i + 1) {\n            happy = false;\n        } else if s.chars().nth(i)\
    \ == s.chars().nth(i + 2) {\n            happy = false;\n        } else if s.chars().nth(i\
    \ + 1) == s.chars().nth(i + 2) {\n            happy = false;\n        }\n    \
    \    i += 1;\n    }\n    happy\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp98cs2ym1.rs:20:24\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if c == prev || c == prev_prev {\n            return\
    \ false;\n        }\n        prev_prev = prev;\n        prev = Some(c);\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprfg1jiuc.rs:22:17\n   |\n\
    22 |         if c == prev || c == prev_prev {\n   |                 ^^^^ expected\
    \ `char`, found enum `Option`\n   |\n   = note: expected type `char`\n       \
    \       found enum `Option<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprfg1jiuc.rs:22:30\n\
    \   |\n22 |         if c == prev || c == prev_prev {\n   |                   \
    \           ^^^^^^^^^ expected `char`, found enum `Option`\n   |\n   = note: expected\
    \ type `char`\n              found enum `Option<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0j0xrwma.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while chars.next().is_some() {\n        if prev == curr || curr == next ||\
    \ prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpd14bvp_j.rs:31:29\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev_prev = chars.next().unwrap();\n\
    \    let mut prev = chars.next().unwrap();\n    for c in chars {\n        if c\
    \ == prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvtvktvzi.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsmpr28ph.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut iter = s.chars();\n    let mut prev = iter.next().unwrap();\n\
    \    let mut prev_prev = iter.next().unwrap();\n    for c in iter {\n        if\
    \ c == prev || c == prev_prev {\n            return false;\n        }\n      \
    \  prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n \
    \   let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == prev_prev && prev == Some(c) {\n      \
    \      return false;\n        }\n        prev_prev = prev;\n        prev = Some(c);\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpn3jcd1pt.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ let mut prev_prev_prev = chars.next();\n    while let Some(c) = chars.next()\
    \ {\n        if prev == prev_prev && prev == prev_prev_prev {\n            return\
    \ false;\n        }\n        prev_prev_prev = prev_prev;\n        prev_prev =\
    \ prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp23fo6pt.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4cdggtx8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ let mut prev_prev_prev = chars.next();\n    while let Some(c) = chars.next()\
    \ {\n        if prev == prev_prev && prev == prev_prev_prev {\n            return\
    \ false;\n        }\n        prev_prev_prev = prev_prev;\n        prev_prev =\
    \ prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpltatjeoh.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5j24msae.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqscci6a9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplfmzqze0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut\
    \ next = chars.next();\n    while next.is_some() {\n        if prev == curr ||\
    \ curr == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next();\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4udnfmo0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut last_three = s.chars().take(3).collect::<Vec<char>>();\n\
    \    for c in s.chars().skip(3) {\n        if last_three[0] == last_three[1] ||\
    \ last_three[0] == last_three[2] || last_three[1] == last_three[2] {\n       \
    \     return false;\n        }\n        last_three[0] = last_three[1];\n     \
    \   last_three[1] = last_three[2];\n        last_three[2] = c;\n    }\n    last_three[0]\
    \ != last_three[1] && last_three[0] != last_three[2] && last_three[1] != last_three[2]\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_eggwkkj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut next = chars.next();\n    let mut\
    \ next_next = chars.next();\n    while next_next.is_some() {\n        if prev\
    \ == next || next == next_next || prev == next_next {\n            return false;\n\
    \        }\n        prev = next;\n        next = next_next;\n        next_next\
    \ = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpugue4165.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ let mut prev_prev_prev = chars.next();\n    while let Some(c) = chars.next()\
    \ {\n        if prev_prev_prev == Some(c) {\n            return false;\n     \
    \   }\n        prev_prev_prev = prev_prev;\n        prev_prev = prev;\n      \
    \  prev = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgs0rcsvd.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpo8oybeey.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvjwfgh0q.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut s = s.chars().collect::<Vec<char>>();\n\
    \    s.sort();\n    s.dedup();\n    s.len() >= 3\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpiit0gqau.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxw2qen7w.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppf2nh32h.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev_prev == Some(c) {\n            return false;\n\
    \        }\n        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9_xbjufp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvsrt0q3e.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_vwdyaj2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp14vo44h_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7dp4eriv.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut\
    \ next = chars.next();\n    while let (Some(p), Some(c), Some(n)) = (prev, curr,\
    \ next) {\n        if p == c || c == n || p == n {\n            return false;\n\
    \        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_zd_8g0c.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let first = chars.next().unwrap();\n\
    \    let second = chars.next().unwrap();\n    let third = chars.next().unwrap();\n\
    \    if first == second || second == third || first == third {\n        return\
    \ false;\n    }\n    for c in chars {\n        if c == first || c == second ||\
    \ c == third {\n            return false;\n        }\n        first = second;\n\
    \        second = third;\n        third = c;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `first`\n  -->\
    \ /tmp/tmpnkr92lrp.rs:32:9\n   |\n22 |     let first = chars.next().unwrap();\n\
    \   |         -----\n   |         |\n   |         first assignment to `first`\n\
    \   |         help: consider making this binding mutable: `mut first`\n...\n32\
    \ |         first = second;\n   |         ^^^^^^^^^^^^^^ cannot assign twice to\
    \ immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable\
    \ `second`\n  --> /tmp/tmpnkr92lrp.rs:33:9\n   |\n23 |     let second = chars.next().unwrap();\n\
    \   |         ------\n   |         |\n   |         first assignment to `second`\n\
    \   |         help: consider making this binding mutable: `mut second`\n...\n\
    33 |         second = third;\n   |         ^^^^^^^^^^^^^^ cannot assign twice\
    \ to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable\
    \ `third`\n  --> /tmp/tmpnkr92lrp.rs:34:9\n   |\n24 |     let third = chars.next().unwrap();\n\
    \   |         -----\n   |         |\n   |         first assignment to `third`\n\
    \   |         help: consider making this binding mutable: `mut third`\n...\n34\
    \ |         third = c;\n   |         ^^^^^^^^^ cannot assign twice to immutable\
    \ variable\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg27kgpcn.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let s = s.as_str();\n    if s.len()\
    \ < 3 {\n        return false;\n    }\n    let mut i = 0;\n    while i < s.len()\
    \ - 2 {\n        if s.chars().nth(i) == s.chars().nth(i + 1) || s.chars().nth(i)\
    \ == s.chars().nth(i + 2)\n            || s.chars().nth(i + 1) == s.chars().nth(i\
    \ + 2)\n        {\n            return false;\n        }\n        i += 1;\n   \
    \ }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut first = chars.next().unwrap();\n\
    \    let mut second = chars.next().unwrap();\n    let mut third = chars.next().unwrap();\n\
    \    for c in chars {\n        if first == second || second == third || first\
    \ == third {\n            return false;\n        }\n        first = second;\n\
    \        second = third;\n        third = c;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp07dhdhwu.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpksj8hxvv.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzjnvf7yg.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk6e48u15.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpo4pbb2i1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfkra8y4l.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut a = chars.next();\n    let mut b = chars.next();\n    let mut c =\
    \ chars.next();\n    while c.is_some() {\n        if a == b || b == c || a ==\
    \ c {\n            return false;\n        }\n        a = b;\n        b = c;\n\
    \        c = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6o52ahds.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if c == prev.unwrap() || c == prev_prev.unwrap() {\n\
    \            return false;\n        }\n        prev_prev = prev;\n        prev\
    \ = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc_5grlfa.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdqjjb2uu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ let mut prev_prev_prev = chars.next();\n    while let Some(c) = chars.next()\
    \ {\n        if prev == prev_prev && prev == prev_prev_prev {\n            return\
    \ false;\n        }\n        prev_prev_prev = prev_prev;\n        prev_prev =\
    \ prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcecyo4tg.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvac7irqo.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_ro1f9ro.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut\
    \ next = chars.next();\n    while let (Some(p), Some(c), Some(n)) = (prev, curr,\
    \ next) {\n        if p == c || c == n || p == n {\n            return false;\n\
    \        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptdznf_3l.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut first = chars.next().unwrap();\n\
    \    let mut second = chars.next().unwrap();\n    let mut third = chars.next().unwrap();\n\
    \    while let Some(c) = chars.next() {\n        if first == second || second\
    \ == third || first == third {\n            return false;\n        }\n       \
    \ first = second;\n        second = third;\n        third = c;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl91wfflc.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut first = chars.next().unwrap();\n\
    \    let mut second = chars.next().unwrap();\n    let mut third = chars.next().unwrap();\n\
    \    for c in chars {\n        if first == second || second == third || first\
    \ == third {\n            return false;\n        }\n        first = second;\n\
    \        second = third;\n        third = c;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu8_gigi3.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3t8swow2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut first = chars.next();\n    let mut second = chars.next();\n    let\
    \ mut third = chars.next();\n    while let Some(c) = third {\n        if first\
    \ == second || second == third || first == third {\n            return false;\n\
    \        }\n        first = second;\n        second = third;\n        third =\
    \ chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1ubqw0vx.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut\
    \ next = chars.next();\n    while let (Some(p), Some(c), Some(n)) = (prev, curr,\
    \ next) {\n        if p == c || c == n || p == n {\n            return false;\n\
    \        }\n        prev = curr;\n        curr = next;\n        next = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxx39iaxg.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkub3wa61.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8x97t3g0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3ezf50ss.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ let mut prev_prev_prev = chars.next();\n    while let Some(c) = chars.next()\
    \ {\n        if prev_prev_prev == Some(c) {\n            return false;\n     \
    \   }\n        prev_prev_prev = prev_prev;\n        prev_prev = prev;\n      \
    \  prev = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd1qts0hz.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev_char = chars.next();\n    let mut prev_prev_char = chars.next();\n\
    \    let mut prev_prev_prev_char = chars.next();\n    while let Some(c) = prev_prev_prev_char\
    \ {\n        if c == prev_char.unwrap() || c == prev_prev_char.unwrap() {\n  \
    \          return false;\n        }\n        prev_prev_prev_char = prev_prev_char;\n\
    \        prev_prev_char = prev_char;\n        prev_char = Some(c);\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvglk6sxr.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut\
    \ next = chars.next();\n    while next.is_some() {\n        if prev == curr ||\
    \ curr == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next();\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2mqmz8my.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpugy1oadh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvx7t43di.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkkfl4rx5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if c == prev.unwrap() || c == prev_prev.unwrap() {\n\
    \            return false;\n        }\n        prev_prev = prev;\n        prev\
    \ = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7wtr_7e9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev_prev = chars.next().unwrap();\n\
    \    let mut prev = chars.next().unwrap();\n    for c in chars {\n        if c\
    \ == prev || c == prev_prev {\n            return false;\n        }\n        prev_prev\
    \ = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprqec7sjp.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut\
    \ next = chars.next();\n    while next.is_some() {\n        if prev == curr ||\
    \ curr == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next();\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk_bnugl7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp52igzg8o.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_n1ftd5p.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjcj1m2rc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmple2txbyu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyxr38esi.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if c == prev || c == prev_prev {\n            return\
    \ false;\n        }\n        prev_prev = prev;\n        prev = Some(c);\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd8zk746p.rs:22:17\n   |\n\
    22 |         if c == prev || c == prev_prev {\n   |                 ^^^^ expected\
    \ `char`, found enum `Option`\n   |\n   = note: expected type `char`\n       \
    \       found enum `Option<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd8zk746p.rs:22:30\n\
    \   |\n22 |         if c == prev || c == prev_prev {\n   |                   \
    \           ^^^^^^^^^ expected `char`, found enum `Option`\n   |\n   = note: expected\
    \ type `char`\n              found enum `Option<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpoxuyf35p.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpujcjecbx.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev_char = chars.next().unwrap();\n\
    \    let mut prev_prev_char = chars.next().unwrap();\n    for c in chars {\n \
    \       if c == prev_char || c == prev_prev_char {\n            return false;\n\
    \        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut happy = true;\n    let\
    \ mut i = 0;\n    let mut j = 1;\n    let mut k = 2;\n    while happy && k < s.len()\
    \ {\n        let a = s.chars().nth(i).unwrap();\n        let b = s.chars().nth(j).unwrap();\n\
    \        let c = s.chars().nth(k).unwrap();\n        if a == b || b == c || a\
    \ == c {\n            happy = false;\n        }\n        i += 1;\n        j +=\
    \ 1;\n        k += 1;\n    }\n    happy\n}\n\nfn main() {\n    let candidate =\
    \ is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc5wj8gp5.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut next = chars.next();\n    let mut\
    \ next_next = chars.next();\n    while let (Some(p), Some(n), Some(nn)) = (prev,\
    \ next, next_next) {\n        if p == n || n == nn || p == nn {\n            return\
    \ false;\n        }\n        prev = next;\n        next = next_next;\n       \
    \ next_next = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp65c1f_g2.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm9gq3ti4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut iter = s.chars();\n    let mut prev = iter.next().unwrap();\n\
    \    let mut curr = iter.next().unwrap();\n    let mut next = iter.next().unwrap();\n\
    \    while iter.next().is_some() {\n        if prev == curr || curr == next ||\
    \ prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = iter.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp09ius_nh.rs:31:28\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev_prev == Some(c) {\n            return false;\n\
    \        }\n        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptm0_o9f5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ let mut prev_prev_prev = chars.next();\n    while let Some(c) = chars.next()\
    \ {\n        if prev_prev_prev == Some(c) {\n            return false;\n     \
    \   }\n        prev_prev_prev = prev_prev;\n        prev_prev = prev;\n      \
    \  prev = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp475xqs6h.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut a = chars.next();\n    let mut b = chars.next();\n    let mut c =\
    \ chars.next();\n    while let (Some(x), Some(y), Some(z)) = (a, b, c) {\n   \
    \     if x == y || y == z || x == z {\n            return false;\n        }\n\
    \        a = b;\n        b = c;\n        c = chars.next();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0iyhbmpd.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpq_ij7g1f.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut next = chars.next();\n    let mut\
    \ next_next = chars.next();\n    while next_next.is_some() {\n        if prev\
    \ == next || next == next_next || prev == next_next {\n            return false;\n\
    \        }\n        prev = next;\n        next = next_next;\n        next_next\
    \ = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd44nxkhb.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc85j2fyr.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ let mut curr = chars.next();\n    while curr.is_some() {\n        if prev.is_some()\
    \ && prev_prev.is_some() {\n            if prev.unwrap() == curr.unwrap() || prev_prev.unwrap()\
    \ == curr.unwrap() {\n                return false;\n            }\n        }\n\
    \        prev_prev = prev;\n        prev = curr;\n        curr = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9_snym1_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps4g881v3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps3hmmhbg.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    if chars.clone().count() < 3 {\n        return false;\n    }\n    let mut\
    \ prev = chars.next().unwrap();\n    let mut curr = chars.next().unwrap();\n \
    \   let mut next = chars.next().unwrap();\n    while chars.clone().count() > 0\
    \ {\n        if prev == curr || curr == next || prev == next {\n            return\
    \ false;\n        }\n        prev = curr;\n        curr = next;\n        next\
    \ = chars.next().unwrap();\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzlnsyf33.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpofydu5hm.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6dfxxns3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8nrzebix.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if c == prev.unwrap() || c == prev_prev.unwrap() {\n\
    \            return false;\n        }\n        prev_prev = prev;\n        prev\
    \ = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw50c60l4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsy7vwee2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ let mut curr = chars.next();\n    while curr.is_some() {\n        if prev.is_some()\
    \ && prev_prev.is_some() && prev == curr {\n            return false;\n      \
    \  }\n        prev_prev = prev;\n        prev = curr;\n        curr = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi2dj3lan.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut happy = true;\n    let\
    \ mut chars = s.chars();\n    let mut prev = chars.next();\n    let mut curr =\
    \ chars.next();\n    let mut next = chars.next();\n    while happy && next.is_some()\
    \ {\n        happy = prev != curr && curr != next && prev != next;\n        prev\
    \ = curr;\n        curr = next;\n        next = chars.next();\n    }\n    happy\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpj15abavj.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphfe4jn2e.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4kz835vk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpawbdq5fj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpiud9lh1d.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpb8hbnvs3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph9rhavwk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut s = s.chars().collect::<Vec<char>>();\n\
    \    if s.len() < 3 {\n        return false;\n    }\n    s.sort();\n    s.dedup();\n\
    \    s.len() == 3\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5vm12xb4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut last = chars.next();\n    let mut last_last = chars.next();\n   \
    \ let mut last_last_last = chars.next();\n    while let Some(c) = last_last_last\
    \ {\n        if last == last_last || last == Some(c) || last_last == Some(c) {\n\
    \            return false;\n        }\n        last = last_last;\n        last_last\
    \ = last_last_last;\n        last_last_last = chars.next();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplluy98jg.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut c1 = chars.next();\n    let mut c2 = chars.next();\n    let mut c3\
    \ = chars.next();\n    while c3.is_some() {\n        if c1 == c2 || c2 == c3 ||\
    \ c1 == c3 {\n            return false;\n        }\n        c1 = c2;\n       \
    \ c2 = c3;\n        c3 = chars.next();\n    }\n    true\n}\n\nfn main() {\n  \
    \  let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4_6xj7rq.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu582fhqd.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkpqpzful.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4rg985cb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvby0s7xk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while chars.next().is_some() {\n        if prev == curr || curr == next ||\
    \ prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmplofanjbc.rs:31:29\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl97i2lq9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxm2fmr3j.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi8_te5r2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl6gnr6g1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut last_char = chars.next();\n    let mut last_last_char = chars.next();\n\
    \    let mut last_last_last_char = chars.next();\n    while let Some(c) = last_last_last_char\
    \ {\n        if c == last_char.unwrap() || c == last_last_char.unwrap() {\n  \
    \          return false;\n        }\n        last_last_last_char = last_last_char;\n\
    \        last_last_char = last_char;\n        last_char = Some(c);\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmnff2806.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while chars.len() > 0 {\n        if prev == curr || curr == next || prev\
    \ == next {\n            return false;\n        }\n        prev = curr;\n    \
    \    curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmp4n_m2bez.rs:25:17\n   |\n25 |     while chars.len() > 0\
    \ {\n   |                 ^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
