name: HumanEval_76_is_simple_power
language: r
prompt: "# Your task is to write a function that returns true if a number x is a simple\n\
  # power of n and false in other cases.\n# x is a simple power of n if n**int=x\n\
  # For example:\n# >>> is_simple_power(1, 4)\n# true\n# >>> is_simple_power(2, 2)\n\
  # true\n# >>> is_simple_power(8, 2)\n# true\n# >>> is_simple_power(3, 2)\n# false\n\
  # >>> is_simple_power(3, 1)\n# false\n# >>> is_simple_power(5, 3)\n# false\nis_simple_power\
  \ <- function(x, n) {"
tests: "test_humaneval <- function() {\ncandidate <- is_simple_power\n    if(!identical(candidate(16,\
  \ 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(143214, 16), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(4, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(9,\
  \ 3), TRUE)){quit('no', 1)}\n    if(!identical(candidate(16, 4), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(24, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(128,\
  \ 4), FALSE)){quit('no', 1)}\n    if(!identical(candidate(12, 6), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
  \ 12), TRUE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if(n != as.integer(n)) {\n    stop(\"Your function must take integer\
    \ arguments\")\n  }\n  if(n == 1) {\n    return(TRUE)\n  }\n  return(as.integer(x)\
    \ == n * as.integer(x)^(n - 1))\n}\n", "\n  # your code here\n  # Don't change\
    \ this\n  x == n || n%int==x || n%%int==x\n}\n</code>\nTest\n<code>\n> is_simple_power(8,\
    \ 2)\n[1] TRUE\n> is_simple_power(3, 2)\n[1] FALSE\n</code>\n<|/ a |>\n<| c |>\n\
    Nice one - I like that. Just one thing: `n%%int==x` should be `n%%int==0` :)\n\
    <|/ c |>\n<| c |>\nThanks for the suggestion. I edited my answer. I missed that\
    \ possibility at first glance :)\n<|/ c |>\n<| a |>\nI suggest you to use lubridate::is_date\
    \ for that task:\n<code>\nlibrary(lubridate)\nis_date_power <- function(x, n)\
    \ {\n  x %in% c(as.Date(Sys.Date()) - n, as.Date(Sys.Date()) + n)\n}\nis_date_power(as.Date(\"\
    2019-12-16\"), 8)", "\n  # TODO: Your code here\n}\n</cell>\n<cell>", "\n  n^int\
    \ == x\n}\n</cell>\n<cell>\nis_simple_power(1, 4)\n</cell>\n<cell>\nis_simple_power(2,\
    \ 2)\n</cell>\n<cell>\nis_simple_power(8, 2)\n</cell>\n<cell>\nis_simple_power(3,\
    \ 2)\n</cell>\n<cell>\nis_simple_power(3, 1)\n</cell>\n<cell>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nProblem 9 (10 points) \n\n</text>\n<text>\nYour task is\
    \ to create a function that calculates the nth number of the Fibonacci sequence\
    \ (the first two numbers of the sequence).\nIt should work with the following\
    \ arguments:\n n: the number of the Fibonacci sequence to return\n n: the starting\
    \ number of the Fibonacci sequence (by default 0) as an integer\n n: the starting\
    \ number of the Fibonacci sequence (by default 1) as an integer\n\nIf n is negative,\
    \ the function should return \"Fibonacci number not found\".\nThe nth number of\
    \ the Fibonacci sequence is given by the following recurrence relation:\n\n$$F_n={\\\
    begin{cases}F{n-2}+F{n-1} & n\\geq 2\\\\F{n-1}+F{n-2} & n=2\\\\ 0 & n=0\\end{cases}}$$\n\
    \n(where $F_n$ is the nth number of the Fibonacci sequence).\n\nFor this task,\
    \ you should use a vectorized function (i.e.: avoiding for loops).\n\n\n</text>\n\
    <cell>", "\n  return(TRUE %in% c(rep(TRUE, n), x^rep(1, n)))\n}\n", "\n  for(i\
    \ in seq(n, 2, -1) {\n    if (n^i == x) {\n      return TRUE;\n    } else {\n\
    \      return FALSE;\n    }\n  }\n}\n</cell>\n<text>\nNow, it's your turn to write\
    \ the function that takes a sequence of numbers and returns True if all elements\
    \ are simple powers of n. Otherwise, it returns False.\n\n\n</text>\n<cell>",
  "\n  # write your code here\n}\n", "\n  return(x %% n == 0)\n}\n</cell>\n<cell>\n\
    is_simple_power(16, 4)\n</cell>\n<cell>\nis_simple_power(16, 4)\n</cell>\n<cell>\n\
    is_simple_power(16, 4)\n</cell>\n<cell>\nis_simple_power(16, 4)\n</cell>\n<cell>\n\
    is_simple_power(16, 4)\n</cell>\n<text>\nStep 2 - Test your function\n\n</text>\n\
    <cell>", "\n  return (x ^ n) == x\n}\n\n", "\n  \n}\n</cell>\n<cell>\nis_simple_power(3,\
    \ 2)\n</cell>\n<text>\nTests\nTest your function using the cell below:\n\n\n</text>\n\
    <cell>", "\n  if (n == 0) return FALSE\n  if (n %% x == 0) return TRUE\n  \n \
    \ # Recursive base case\n  if (x == 1) return TRUE\n  \n  # Calculate the first\
    \ factor of n\n  factor <- floor(n / x)\n  \n  # If the first factor of n is greater\
    \ than x, then x is not a simple power\n  if (factor > x) return FALSE\n  \n \
    \ # Recursive case\n  return is_simple_power(x * factor, n - x * factor)\n}\n\n",
  "\n    # You need to return true if x is a simple power of n\n    if (n == 1) {\n\
    \        return(TRUE)\n    } else {\n        powers <- 1:(log(n) + 1)\n      \
    \  # find exponent\n        exponent <- which(powers == floor(log(exp(x)) - log(2)\
    \ %/% log(2)))\n        if (length(exponent) != 1) {\n            return(FALSE)\n\
    \        }\n        # x is a power of n if x^exponent = x\n        # x is not\
    \ a power of n if otherwise\n        return(x != round(exp(x)^exponent))\n   \
    \ }\n}\n\nis_simple_power(1, 4)\nis_simple_power(2, 2)\nis_simple_power(8, 2)\n\
    is_simple_power(3, 2)\nis_simple_power(3, 1)\nis_simple_power(5, 3)\nis_simple_power(8,\
    \ 3)\nis_simple_power(8, 4)\nis_simple_power(5, 5)\nis_simple_power(9, 3)\nis_simple_power(9,\
    \ 4)\nis_simple_power(10, 4)\nis_simple_power(10, 5)\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI don't understand your comment\n<|/ c |>\n<| c |>\nSorry for not\
    \ being clear. You're saying that if I simply want to check if the power of the\
    \ number, x^n, is equal to x, I would have to use, say, `is_simple_power(8, 3)`,\
    \ but if n is greater than or equal to 5, then I would have to use, say, `is_simple_power(9,\
    \ 3)`, etc.?\n<|/ c |>\n<| c |>\nIn other words, I need the power of the number\
    \ `x^n` which is not equal to `x`. `is_simple_power(8, 3)` is equal to `x^(1/2)`\
    \ which is equal to `8`, but `is_simple_power(8, 4)` is equal to `x^(3/2)` which\
    \ is equal to `8`. This would all be solved by your solution.\n<|/ c |>\n<| c\
    \ |>\nSorry, I thought you knew what you meant by simple power of `n`, I should\
    \ have explained better. I meant `is_simple_power`, not `is_simple_power(n)`.\
    \ If you want to check if `8` is a power of any number, then you would use `is_simple_power(8)`.\n\
    <|/ c |>\n<| c |>\nYes, this is what I was looking for. Thank you so much.\n<|/\
    \ c |>\n<| a dscore=0 tags=r |>\nThe solutions posted thus far are very elegant,\
    \ but they don't take into account the case where the exponents are fractional.\
    \ For example if you had x^.99 and x^.9 then is_simple_power(x,.99) would return\
    \ TRUE while is_simple_power(x,.9) would ", "\n  # TODO: Your code here\n}\n",
  "\n    p <- n^(floor((x+1)/2))\n    return(p==x)\n}\n</code>\nI hope that helps\
    \ a little bit.\n<|/ a tags=r |>\n<| c |>\nThank you so much. Your code works\
    \ and it does so much better than mine in the case of my test case above. However\
    \ my code is still too slow for my test case above and my purpose is to find a\
    \ simpler solution.\n<|/ c |>\n<| a tags=r |>\nHere is an approach using RcppAlgos\
    \ (I am a committer):\n<code>\nlibrary(RcppAlgos)\n\nis_power <- cppFunction('\n\
    bool is_power(int n, int p) {\n  if ( p == 0 ) {\n    return n == 1;\n  } else\
    \ if ( p == 1 ) {\n    return n == 0;\n  } else {\n    return n == p % 2 ? is_power(n\
    \ / 2, p - 1) : is_power(n / 2, p);\n  }\n}')\n\nis_power(5, 3)\nis_power(5, 2)\n\
    is_power(5, 1)\nis_power(5, 0)\n</code>\nOutput:\n<code>\nR> is_power(5, 3)\n\
    [1] TRUE\n\nR> is_power(5, 2)\n[1] TRUE\n\nR> is_power(5, 1)\n[1] FALSE\n\nR>\
    \ is_power(5, 0)\n[1] FALSE\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI do\
    \ not have a solution based on R or base R, but I can provide you with some ideas\
    \ in R packages other than just R.\nI used this website to come up with my ideas.\n\
    The website offers the following R package called dplyr:\n<code>\nlibrary(dplyr)\n\
    \ndf %>%\n  filter(!is_simple_power(x, y)) %>%\n  select(x, y) %>%\n  distinct()\
    \ %>%\n  arrange(desc(x)) %>%\n  arrange(desc(y)) %>%\n  head(10)\n</code>\nThis\
    \ code uses dplyr package. The filter function uses is_simple_power function.\n\
    The is_simple_power function checks if the value is a simple power of the number\
    \ given as an input.\nThe select function then takes only x and y columns from\
    \ the data frame. The distinct function removes duplicates. Finally, arrange and\
    \ sort order them descending.\nThe last part is just to see 10 rows with top ten\
    \ results ordered by y and x.\nYou can find the whole code on that website. Here\
    \ is the link:\nhttps://dplyr.tidyverse.org/reference/filter.html\nI hope this\
    \ helps you get started.\n<|/ a tags=r |>\n<| c |>\nThank you for the suggestion.\
    \ I do have a ", "\n  return (n %in% 1:4) == (x %in% 1:4)\n}\n", "\n  # Fill in\
    \ the body of the function here\n}\n", "\n  if (n >= 1 && x >= n^(1/n)) return\
    \ TRUE\n  else return FALSE\n}", "\n  if (n^int(x) == x) {\n    return TRUE\n\
    \  } else {\n    return FALSE\n  }\n}\n", "\n  return(is.numeric(x) && is.numeric(n)\
    \ && n%%x == 0)\n}\n", "\n    stopifnot(length(x) == length(n))\n    x <- as.numeric(x)\n\
    \    n <- as.numeric(n)\n    n <- n^(1:length(x))\n    x == n\n}\n</cell>\n<cell>\n\
    is_simple_power(10, 2)\n</cell>\n<cell>\nis_simple_power(10, 3)\n</cell>\n<cell>\n\
    is_simple_power(10, 4)\n</cell>\n<cell>\nis_simple_power(10, 5)\n</cell>\n<cell>\n\
    is_simple_power(10, 6)\n</cell>\n<cell>\nis_simple_power(10, 7)\n</cell>\n<cell>\n\
    is_simple_power(10, 8)\n</cell>\n<cell>\nis_simple_power(10, 9)\n</cell>\n<cell>\n\
    is_simple_power(10, 10)\n</cell>\n<cell>\nis_simple_power(10, 11)\n</cell>\n<cell>\n\
    is_simple_power(10, 12)\n</cell>\n<cell>\nis_simple_power(10, 13)\n</cell>\n<cell>\n\
    is_simple_power(10, 14)\n</cell>\n<cell>\nis_simple_power(10, 15)\n</cell>\n<cell>\n\
    is_simple_power(10, 16)\n</cell>\n<cell>\nis_simple_power(10, 17)\n</cell>\n<cell>\n\
    is_simple_power(10, 18)\n</cell>\n<cell>\nis_simple_power(10, 19)\n</cell>\n<cell>\n\
    is_simple_power(10, 20)\n</cell>\n<cell>\nis_simple_power(10, 21)\n</cell>\n<cell>\n\
    is_simple_power(10, 22)\n</cell>\n<cell>\nis_simple_power(10, 23)\n</cell>\n<cell>\n\
    is_simple_power(10, 24)\n</cell>\n<cell>\nis_simple_power(10, 25)\n</cell>\n<cell>\n\
    is_simple_power(10, 26)\n</cell>\n<cell>\nis_simple_power(10, 27)\n</cell>\n<cell>\n\
    is_simple_power(10, 28)\n</cell>\n<cell>\nis_simple_power(10, 29)\n</cell>\n<cell>\n\
    is_simple_power(10, 30)\n</cell>\n<cell>\nis_simple_power(10, 31)\n</cell>\n<cell>\n\
    is_simple_power(10, 32)\n</cell>\n<cell>\nis_simple_power(10, 33)\n</cell>\n<cell>\n\
    is_simple_power(10, 34)\n", "\n  if (x == 0) {\n    return(FALSE)\n  } else if\
    \ (x == 1) {\n    return(TRUE)\n  } else if (n%%x == 0) {\n    return(FALSE)\n\
    \  } else {\n    return(TRUE)\n  }\n}\n", "\n  pow(x, n, exact = FALSE)==x\n}\n",
  "\n    n <- n\n    while (x > 1) {\n        x <- x / n\n        n <- n + 1\n   \
    \ }\n    return (n %in% 1:n)\n}\n\n", "\n    # YOUR CODE HERE\n    n <- n\n  \
    \  x <- x\n    if (n%%1==0){\n        if (n%%2==1){\n            if (n%%4==0){\n\
    \                if (n%%8==0){\n                    if (n%%16==0){\n         \
    \               if (n%%32==0){\n                            if (n%%64==0){\n \
    \                               if (n%%128==0){\n                            \
    \        if (n%%256==0){\n                                        if (n%%512==0){\n\
    \                                            if (n%%1024==0){\n              \
    \                                  if (n%%2048==0){\n                        \
    \                            if (n%%4096==0){\n                              \
    \                          if (n%%8192==0){\n                                \
    \                            if (n%%16384==0){\n                             \
    \                                   if (n%%32768==0){\n                      \
    \                                              if (n%%65536==0){\n           \
    \                                                             if (n%%131072==0){\n\
    \                                                                            if\
    \ (n%%262144==0){\n                                                          \
    \                      if (n%%524288==0){\n                                  \
    \                                                  if (n%%1048576==0){\n     \
    \                                                                            \
    \       if (n%%2097152==0){\n                                                \
    \                                            if (n%%4194304==0){\n           \
    \                                                                            \
    \         if (n%%8388608==0){\n                                              \
    \                                                      if (n%%16777216==0){\n\
    \                                                                            \
    \                            if (n%%33554432==0){\n                          \
    \                                                                            \
    \      if (n%%67108864==0){\n                                                \
    \                                                                return(TRUE)\n\
    \                                                                            \
    \                                } else {\n                                  \
    \                                                                            \
    \  return(FALSE)\n                                                           \
    \                                                 }\n                        \
    \                                                                            \
    \    } else {\n                                                              \
    \                                              return(FALSE)\n               \
    \                                                                            \
    \             }\n                                                            \
    \                                        } else {\n                          \
    \                                                                            \
    \  return(FALSE)\n                                                           \
    \                                         }\n                                \
    \                                                                } else {\n  \
    \                                                                            \
    \                      return(FALSE)\n                                       \
    \                                                         }\n                \
    \                                                                            }\
    \ else {\n                                                                   \
    \                             return(FALSE)\n                                \
    \                                                            }\n             \
    \                                                                           }\
    \ else {\n                                                                   \
    \                         return(FALSE)\n                                    \
    \                                                    }\n                     \
    \                                                               } else {\n   \
    \                                                                            \
    \         return(FALSE)\n                                                    \
    \                                }\n                                         \
    \                                       } else {\n                           \
    \                                                         return(FALSE)\n    \
    \                                                                            }\n\
    \                                                                            }\
    \ else {\n                                                                   \
    \             return(FALSE)\n                                                \
    \                            }\n                                             \
    \                           } else {\n                                       \
    \                                     return(FALSE)\n                        \
    \                                                }\n                         \
    \                                           } else {\n                       \
    \                                                 return(FALSE)\n            \
    \                                                        }\n                 \
    \                                               } else {\n                   \
    \                                                 return(FALSE)\n            \
    \                                                    }\n                     \
    \                                       } else {\n                           \
    \                                     return(FALSE)\n                        \
    \                                    }\n                                     \
    \                   } else {\n                                               \
    \             return(FALSE)\n                                                \
    \        }\n                                                    } else {\n   \
    \                                                     return(FALSE)\n        \
    \                                            }\n                             \
    \                   } else {\n                                               \
    \     return(FALSE)\n                                                }\n", "\n\
    \  # x should be positive integer\n  # n should be a positive integer\n  stopifnot(x\
    \ <- as.integer(x),\n            n <- as.integer(n))\n\n  return(\n    (x == 1)\
    \ ||\n    (x != 0 & n == 0 & x == n^x) ||\n    (x != 0 & n != 0 & n == n^x))\n\
    }\n", "\n    x <- as.numeric(x)\n    n <- as.numeric(n)\n    if (length(x) ==\
    \ 1) {\n        return (n == 1)\n    }\n    if (length(x) == 2) {\n        return\
    \ (x != 0)\n    }\n    if (length(x) == 3) {\n        if (n==1) {\n          \
    \  return (x != 0)\n        }\n        if (n==2) {\n            return (x != 0)\n\
    \        }\n        if (n==3) {\n            return (x != 0)\n        }\n    }\n\
    }\n</cell>\n<cell>\nis_simple_power(1, 1)\nis_simple_power(1, 1)\n</cell>\n<cell>\n\
    is_simple_power(1, 1)\nis_simple_power(3, 3)\n</cell>\n<cell>\nis_simple_power(9,\
    \ 1)\n</cell>\n<cell>\nis_simple_power(1, 1)\nis_simple_power(1, 3)\n</cell>\n\
    <cell>\nis_simple_power(1, 4)\n</cell>\n<text>\nExercise 3.2: Write a function\
    \ to compute nth fibonacci number using recursion\n\n</text>\n<cell>", "\n   \
    \ any(n %% (n-1) == 0)\n}\n</cell>\n<text>\nWe can use it to validate our hypothesis\
    \ that all numbers are powers of two. Let's see what we got for different inputs:\n\
    \n\n</text>\n<cell>", "\n  # Your code here\n}\n</cell>\n<text>\nFor testing your\
    \ function, we'll use some hand-made examples. Write some cases that you think\
    \ should give you the correct result and some that you think should give you the\
    \ wrong result.\n\n(The next cell doesn't have anything to do, just shows you\
    \ the test cases. Don't worry about running this cell, it just checks if your\
    \ function works correctly. If it doesn't, please look at the solutions sheet\
    \ to learn how to solve the assignment!)\n\n\n</text>\n<cell>", "\n  is_odd <-\
    \ function(x) {\n    x %% 2 == 0\n  }\n  if (n == 1)\n    return(TRUE)\n  if (x\
    \ == 0)\n    return(TRUE)\n  if (x == 1)\n    return(TRUE)\n  if (is_odd(x))\n\
    \    return(FALSE)\n  if (n == 2)\n    return(TRUE)\n  if (x %% n != 0)\n    return(FALSE)\n\
    \  return(TRUE)\n}\n", "\n  x %in% seq(1, n) &\n  (x %% n) == 0\n}\n", "\n   \
    \ x %% n==0 & x %% n==0\n}\n", "\n    # YOUR CODE HERE\n}\n", "\n  x ^ n == x\n\
    }\n</code>\nNow that you know what a boolean function looks like, you're ready\
    \ to create one:\n<code>\nis_power_of_one <- function(x) {\n  is_simple_power(x,\
    \ 1)\n}\n</code>\nYou can test it with:\n<code>\nis_power_of_one(25)", "\n  if(x==1){\n\
    \    return(TRUE)\n  }\n  if(x==0){\n    return(FALSE)\n  }\n  if(n==0){\n   \
    \ return(FALSE)\n  }\n  if(n==1){\n    return(TRUE)\n  }\n  if(x%%n==0){\n   \
    \ return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n  return(ifelse(x == n*n, TRUE,\
    \ FALSE))\n}\n", "\n    n <- n\n    x <- x\n    n <- n\n    if (n == 1) TRUE\n\
    \    else if (n %in% c(2, 3)) TRUE\n    else FALSE\n}\n\n", "\n  # ...\n}\n",
  "\n  x %in% c(1, n) &\n    (x == n ^ (n %% x) & n %% x == 0)\n}\n</cell>\n<cell>",
  "\n  return(\n    ifelse(\n      n == x |\n        (n == x & n != 0) &\n       \
    \ ((n+1) %% n == 0),\n      TRUE,\n      FALSE\n    )\n  )\n}\n", "\n  return(\n\
    \    n != 0 &&\n    x != 0 &&\n    x == n^(integer(ceiling(log10(x)))) &&\n  \
    \  x %in% c(2, n^integer(ceiling(log10(x))))\n  )\n}\n</cell>\n<text>\nNow the\
    \ function is_simple_power works only for positive integers and n=0, but for larger\
    \ n it returns true even if it's not the right solution. For example:\n>>> is_simple_power(1,\
    \ 4)\nTrue\n>>> is_simple_power(1, 3)\nFalse\n>>> is_simple_power(1, 5)\nFalse\n\
    \n</text>\n<text>\nTask 9: Find the first power of n which works as exponent\n\
    In this task, you will need to use the is_simple_power function we wrote in the\
    \ previous task to find the first power of n which works as exponent. Here is\
    \ an example:\n>>> n = 2 # integer exponent\n>>> find_first_power_of_n_works(n)\
    \ # returns 2\n2\n>>> n = 3 # non-integer exponent\n>>> find_first_power_of_n_works(n)\
    \ # returns 2\n2\n>>> n = 4 # non-integer exponent\n>>> find_first_power_of_n_works(n)\
    \ # returns 1\n1\n>>> n = 5 # integer exponent\n>>> find_first_power_of_n_works(n)\
    \ # returns 2\n2\n\n</text>\n<cell>\nfind_first_power_of_n_works <- function(n)\
    \ {\n  # Your code here\n  \n}\n</cell>\n<text>\nNow the function find_first_power_of_n_works\
    \ works only for integer exponents and n=0, but for larger n it returns n = 0.\
    \ For example:\n>>> find_first_power_of_n_works(2)\n2\n>>> find_first_power_of_n_works(3)\n\
    0\n>>> find_first_power_of_n_works(4)\n0\n>>> find_first_power_of_n_works(5)\n\
    0\n\n</text>\n<text>\nTask 10: Represent numbers as binary digits\nIn this task,\
    \ you will need to use the is_simple_power function we wrote in the previous task\
    \ to find the first power of n which works as exponent. Here is an example:\n\
    >>> n = 2 # integer exponent\n>>> bin_represent(n) # returns \"1010\"\n\"1010\"\
    \n>>> n = 3 # non-integer exponent\n>>> bin_represent(n) # returns \"0011\"\n\"\
    0011\"\n>>> n = 4 # non-integer exponent\n>>> bin_represent(n) # returns \"1000\"\
    \n\"1000\"\n>>> n = 5 # integer exponent\n>>> bin_represent(n) # returns \"1010\"\
    \n\"1010\"\n\n</text>\n<cell>\nbin_represent <- function(n) {\n  # Your code here\n\
    \  \n}\n</cell>", "\n  \n}\n</cell>\n<text>\nApart from is_simple_power, there\
    \ is another function is_power_of_two that we can use.  You will have to write\
    \ your function based on is_power_of_two.  You can see it in the file power.R.\
    \  Write your function based on the body of the function is_power_of_two.  You\
    \ will have to call is_power_of_two on line 71 of power.R file.  You can see it\
    \ in the file power.R.\n\n\n</text>\n<cell>", "\n  stopifnot( is.numeric(n) &\
    \ length(n)==1 & n >= 0 )\n  return( n^int(x)==x )\n}\n</cell>\n<cell>", "\n \
    \ # your code here\n  \n}\n</cell>\n<cell>", "\n  return(x ^ n == x)\n}\n</cell>\n\
    <cell>", "\n  if (x == 0) return(TRUE)\n  return(FALSE)\n}\n", "\n  return(x ==\
    \ n^x)\n}\n</cell>\n<cell>\nis_simple_power(1, 4)\n</cell>\n<cell>\nis_simple_power(2,\
    \ 2)\n</cell>\n<cell>\nis_simple_power(8, 2)\n</cell>\n<cell>\nis_simple_power(3,\
    \ 2)\n</cell>\n<cell>\nis_simple_power(3, 1)\n</cell>\n<cell>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nPart 3: Power numbers\nNow that you've learned some simple\
    \ numbers, let's start learning more complicated numbers. Start with powers of\
    \ 2. For example, the number 8 is 2^2. How would you write a function that checks\
    \ if a number is a power of 2?\n\nHint: Try looking up the modulo operator to\
    \ help you find the remainder of division.\n\n\n</text>\n<cell>\nis_power_of_2\
    \ <- function(x) {\n  return(x %% 1 == 0)\n}\n</cell>\n<cell>\nis_power_of_2(2)\n\
    </cell>\n<cell>\nis_power_of_2(1)\n</cell>\n<cell>\nis_power_of_2(4)\n</cell>\n\
    <text>\nPart 4: Factorials\nNow let's get into something more practical. Let's\
    \ continue with our is_power_of_2 function that checks if a number is a power\
    \ of 2. For each number from 1 to 10, we want to compute how many times it needs\
    \ to be raised to reach 1. Let's write some code to help us do this.\n\nHINT:\
    \ For this function, you may find it helpful to use the seq function to generate\
    \ numbers in a range.\n\n\n</text>\n<cell>\nfactorial <- function(n) {\n  return(if\
    \ (is_power_of_2(n)) return(n * factorial(n-1)) else 0)\n}\n</cell>\n<cell>\n\
    factorial(10)\n</cell>\n<cell>\nfactorial(5)\n</cell>\n<cell>\nfactorial(20)\n\
    </cell>\n<text>\nConclusion\nLike you might have guessed, the factorial function\
    \ is quite useful! It can be used to compute any number that you need to compute.\
    \ For example, it can be used to compute the factorial of any number in any range\
    \ you want!\n\n\n</text>\n<text>\nHomework\nIf you finish early, try and learn\
    \ some things that might not have been apparent from the textbook. Here are three\
    \ things that you might want to try:\n\nFind a way to display a bar chart of the\
    \ top ten most frequently occurring words in a given file.\nFind a way to sort\
    \ a vector of words (and their frequencies), highest to lowest, ", "\n    n <-\
    \ as.integer(n)\n    x <- as.integer(x)\n    if (n<1) return (FALSE)\n    if (n==1)\
    \ return (TRUE)\n    if (x==1) return (TRUE)\n    \n    k <- 1\n    repeat {\n\
    \        if (k > n) return (FALSE)\n        k<- k+1\n        if (k > n) return\
    \ (FALSE)\n    }\n    return (TRUE)\n}\n</cell>\n<cell>", "\n  # Your code here!\n\
    \  return(TRUE)\n}\n", "\n  # Fill in the code here\n  return(TRUE)\n}\n", "\n\
    \  return((x ^ n) == x)\n}\n", "\n  if (n != floor(n)) {\n    return (FALSE)\n\
    \  }\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x *\
    \ x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n\
    \  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n \
    \ xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx\
    \ <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <-\
    \ x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x\
    \ * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x *\
    \ x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n\
    \  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n \
    \ xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx\
    \ <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <-\
    \ x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x\
    \ * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x *\
    \ x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  xx <- x * x\n  ", "\n    n\
    \ <- n\n    if (n <= 0) {\n        return(FALSE)\n    }\n    if (x == n^1) {\n\
    \        return(TRUE)\n    }\n    else if (x %% n == 0) {\n        return(is_simple_power(x/n,\
    \ n))\n    }\n    else {\n        return(FALSE)\n    }\n}\n", "\n  if (n == 1)\
    \ return(TRUE)\n  if (n > 1 & x < n) return(FALSE)\n  if (n < 1 & x >= n) return(FALSE)\n\
    \  return(TRUE)\n}\n", "\n  if (n %%% x==0) {\n    return TRUE\n  } else {\n \
    \   return FALSE\n  }\n}\n", "\n  # your code here\n}\n</cell>\n<text>\nis_simple_power\
    \ can be tested in the next cell:\n\n\n</text>\n<cell>\nis_simple_power(3, 2)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the first n prime numbers.\
    \ \nThe function should run in O(n) time: it needs to go through the entire list\
    \ without stopping early.\nThe output should be a list of integers.\n\n\n</text>\n\
    <cell>", "\n    if (x %% n != 0) return FALSE\n    if (n == 1) return TRUE\n \
    \   if (n %% 2 == 0) return FALSE\n    if (n %% 3 == 0) return FALSE\n    if (n\
    \ %% 5 == 0) return FALSE\n    if (n %% 7 == 0) return FALSE\n    if (n %% 11\
    \ == 0) return FALSE\n    if (n %% 13 == 0) return FALSE\n    if (n %% 17 == 0)\
    \ return FALSE\n    if (n %% 19 == 0) return FALSE\n    if (n %% 23 == 0) return\
    \ FALSE\n    if (n %% 29 == 0) return FALSE\n    if (n %% 37 == 0) return FALSE\n\
    \    if (n %% 43 == 0) return FALSE\n    if (n %% 59 == 0) return FALSE\n    if\
    \ (n %% 67 == 0) return FALSE\n    if (n %% 83 == 0) return FALSE\n    if (n %%\
    \ 103 == 0) return FALSE\n    if (n %% 127 == 0) return FALSE\n    if (n %% 153\
    \ == 0) return FALSE\n    if (n %% 201 == 0) return FALSE\n    if (n %% 247 ==\
    \ 0) return FALSE\n    if (n %% 289 == 0) return FALSE\n    if (n %% 335 == 0)\
    \ return FALSE\n    if (n %% 377 == 0) return FALSE\n    if (n %% 423 == 0) return\
    \ FALSE\n    if (n %% 479 == 0) return FALSE\n    if (n %% 533 == 0) return FALSE\n\
    \    if (n %% 587 == 0) return FALSE\n    if (n %% 643 == 0) return FALSE\n  \
    \  if (n %% 699 == 0) return FALSE\n    if (n %% 755 == 0) return FALSE\n    if\
    \ (n %% 811 == 0) return FALSE\n    if (n %% 863 == 0) return FALSE\n    if (n\
    \ %% 919 == 0) return FALSE\n    if (n %% 971 == 0) return FALSE\n    if (n %%\
    \ 1025 == 0) return FALSE\n    if (n %% 1089 == 0) return FALSE\n    if (n %%\
    \ 1155 == 0) return FALSE\n    if (n %% 1211 == 0) return FALSE\n    if (n %%\
    \ 1267 == 0) return FALSE\n    if (n %% 1313 == 0) return FALSE\n    if (n %%\
    \ 1369 == 0) return FALSE\n    if (n %% 1425 == 0) return FALSE\n    if (n %%\
    \ 1483 == 0) return FALSE\n    if (n %% 1539 == 0) return FALSE\n    if (n %%\
    \ 1597 == 0) return FALSE\n    if (n %% 1659 == 0) return FALSE\n    if (n %%\
    \ 1715 == 0) return FALSE\n    if (n %% 1777 == 0) return FALSE\n    if (n %%\
    \ 1825 == 0) return FALSE\n    if (n %% 1883 == 0) return FALSE\n    if (n %%\
    \ 1939 == 0) return FALSE\n    if (n %% 1997 == 0) return FALSE\n    if (n %%\
    \ 2053", "\n  # Your code here\n}\n</cell>\n<text>\nNow you can call your function\
    \ and check if x is a power of n. Use the function is_simple_power that you wrote\
    \ to complete the following task.\n\n\n</text>\n<cell>", "\n    if(n == 0) return(TRUE)\n\
    \    if(n == 1) return(TRUE)\n    if(x == 0) return(TRUE)\n    if(x == 1) return(TRUE)\n\
    \    if(n%%1L == 0L) return(FALSE)\n    if(n %/% 1L == 0L) return(FALSE)\n   \
    \ if(x %% n == 0L) return(FALSE)\n    return(TRUE)\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThanks. Can you give an example of a number that returns this test\
    \ as incorrect?\n<|/ c |>\n<| c |>\nI added an example to the answer.\n<|/ c |>\n\
    <| a tags=math,integer,algorithm,discrete-mathematics,r |>\n<code>\nis_power_of_two<-function(x){\n\
    \  return(!is.finite(x) | x & -x==0)\n}\n\nis_power_of_three<-function(x){\n \
    \ return(!is.finite(x) | x & -x==0 |x & x==0)\n}\n</code>\n<|/ a dscore=4 |>\n\
    <| a dscore=4 |>\nIf you want a function that gives you a TRUE or FALSE answer,\
    \ then you don't need the modulus. Just the negation of your test will do.\n<code>\n\
    is_power_of_two <- function(x) {\n    return(!is.finite(x)| x & -x ==0 )\n}\n\
    </code>\n<|/ a tags=math,integer,algorithm,discrete-mathematics,r |>\n<| c |>\n\
    This is not correct. The OP asked for a function that returns TRUE or FALSE, not\
    \ a number that returns TRUE.\n<|/ c |>\n<| a tags=math,integer,algorithm,discrete-mathematics,r\
    \ dscore=3 |>\nIn R you can use mod:\n<code>\nmod <- function (x,n) ifelse(x ==\
    \ 0 | x == 1, n, x %% n)\n</code>\nThis returns the remainder when you divide\
    \ x by n. For example,\n<code>\n> mod(6,3) \n[1] 0\n> mod(6,4)\n[1] 3\n> mod(6,5)\n\
    [1] 1\n</code>\n<|/ a |>\n<| c |>\nThank you, this is very helpful to my problem,\
    \ and I believe a more straightforward solution!\n<|/ c |>\n<| a dscore=3 tags=math,integer,algorithm,discrete-mathematics,r\
    \ |>\nA simple modification of the answer by Rudolph will work:", "\n  x ^ n ==\
    \ x & n^0 == n\n}\n\n", "\n  # Write the code here\n  return(\n    x == n\n  )\n\
    }\n", "\n    x %% n == 0\n}\n", "\n  return(grepl(\"^[0-9]*$\", n) && as.numeric(n)%==0\
    \ && x %% as.numeric(n)==0)\n}\n", "\n  n == 1 || x == 0 || x %% n\n}\n", "\n\
    \  return(grepl(\"^\\\\d+$\", x)&& grepl(\"^\\\\d+$\", n) & n^int==x)\n}\n", "\n\
    \  ifelse(length(x) == 0 | n==0 | n%length(x) == 0, FALSE, TRUE)\n}\n", "\n  return(is_power_of_n(n,\
    \ x) && is_power_of_n(n, x)) \n}", "\n  # YOUR CODE HERE\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n", "\n  return (x %% n == 0)\n}\n", "\n}\n", "\n  is.numeric(x)\
    \ && is.numeric(n) && x >= 1\n}\n", "\n    for(i in seq_along(x)) {\n        if(x[i]^n\
    \ == x[i]) {\n            return(TRUE)\n        } else {\n            return(FALSE)\n\
    \        }\n    }\n}\n", "\n    n <- n\n    x <- x\n    out <- FALSE\n    if (length(n)\
    \ == 0) {\n        out <- TRUE\n    } else if (n == 0) {\n        out <- TRUE\n\
    \    } else if (n == 1) {\n        out <- x == 1\n    } else {\n        out <-\
    \ x == n * x\n    }\n    out\n}\n", "\n  \n}\n", "\n  # Write your code here\n\
    }\n", "\n  if (x^n == x)\n  {\n    print(\"True\")\n  }\n  else\n  {\n    print(\"\
    False\")\n  }\n}\n", "\n    x ^ n == x\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    `is_simple_power <- function(x, n) any(n^x == x)`\n<|/ c |>\n<| c |>\nHow do you\
    \ know `n^x` is the same as `x * n`? If `n` is a power of `x`, then `x * n` is\
    \ an exact power of `x`, but `n^x` is not (since it's not the same number).\n\
    <|/ c |>\n<| c |>\n`n^x` does not equal `x^n`, not least because `n^x` involves\
    \ exponentiation.\n<|/ c |>\n<| c |>\nI agree with you about `n^x` not equaling\
    \ `x^n`, but in the context of this question it works because `x` was a power\
    \ of `n`. The OP didn't specify what `n` was or what `x` was, so I assumed `n`\
    \ was a power of `x`. As for `x`, I see your point (although I may have been assuming\
    \ too much), but `x` is an exact power of `n` in many contexts, such as `2^4`.\n\
    <|/ c |>\n<| c |>\n, my comment was more about `x` being an exact power of `n`\
    \ than being an exact power of `x` with `n` not being a power of `x`. Your solution\
    \ is perfectly fine for that scenario.\n<|/ c |>\n<| a tags=r dscore=0 |>\n<code>\n\
    is_simple_power <- function(x, n){\n    sum(x ^ seq(0, n)) %% n == 0\n}\n</code>\n\
    <|/ a |>\n<| a tags=r dscore=0 |>\n<code>\nis_simple_power <- function(x, n)\n\
    {\n  if(x %% n != 0) return FALSE\n  x %/% n == 0\n}\n\nis_simple_power(2,2)",
  "\n  return(TRUE if((n^int(x)) == x) else FALSE)\n}\n</cell>\n<code language=R [r]>",
  "\n  # Fill in the code below to solve this problem!\n}\n\nis_simple_power(8, 1)\n\
    is_simple_power(10, 1)\nis_simple_power(10, 2)\nis_simple_power(10, 4)\nis_simple_power(10,\
    \ 6)\nis_simple_power(10, 10)\nis_simple_power(10, 20)\nis_simple_power(10, 30)\n\
    is_simple_power(100, 100)\nis_simple_power(100, 200)\nis_simple_power(200, 100)\n\
    is_simple_power(200, 200)\nis_simple_power(20, 200)\nis_simple_power(50, 100)\n\
    is_simple_power(100, 100)\nis_simple_power(100, 200)\nis_simple_power(200, 200)\n\
    is_simple_power(10, 2000)\nis_simple_power(10, 2000)\nis_simple_power(5, 50)\n\
    is_simple_power(5, 100)\nis_simple_power(1, 2)\nis_simple_power(1, 3)\nis_simple_power(2,\
    \ 3)\nis_simple_power(10, 3)\nis_simple_power(5, 3)\nis_simple_power(5, 10)\n\
    is_simple_power(2, 2)\nis_simple_power(1, 2)\nis_simple_power(1, 4)\nis_simple_power(4,\
    \ 3)\nis_simple_power(1, 4)\nis_simple_power(5, 4)\nis_simple_power(2, 4)\nis_simple_power(3,\
    \ 4)\nis_simple_power(4, 5)\nis_simple_power(5, 5)\nis_simple_power(5, 5)\nis_simple_power(6,\
    \ 5)\nis_simple_power(10, 5)\nis_simple_power(100, 5)\nis_simple_power(1000, 5)\n\
    is_simple_power(10000, 5)\nis_simple_power(100000, 5)\nis_simple_power(1000000,\
    \ 5)\nis_simple_power(10000000, 5)\nis_simple_power(100000000, 5)\nis_simple_power(1000000000,\
    \ 5)\nis_simple_power(10000000000, 5)\nis_simple_power(100000000000, 5)\nis_simple_power(1000000000000,\
    \ 5)\nis_simple_power(10000000000000, 5)\nis_simple_power(100000000000000, 5)\n\
    is_simple_power(1000000000000000, 5)\nis_simple_power(10000000000000000, 5)\n\
    is_simple_power(100000000000000000, 5)\nis_simple_power(1000000000000000000, 5)\n\
    is_simple_power(10000000000000000000, 5)\nis_simple_power(100000000000000000000,\
    \ 5)\nis_simple_power(10000000000000000000000, 5)\nis_simple_power(100000000000000000000000,\
    \ 5)\nis_simple_power(1000000000000000000000000, 5)\nis_simple_power(10000000000000000000000000,\
    \ 5)\nis_simple_power(100000000000000000000000000, 5)\nis_simple_power(1000000000000000000000000000,\
    \ 5)\nis_simple_power(10000000000000000000000000000, 5)\nis_simple_power(1000000000000000000000000000000,\
    \ 5)\nis_simple_power(10000000000000000000000000000000, 5)\nis_simple_power(100000000000000000000000000000000,\
    \ 5)\nis_simple_power(1000000000000000000000000000000000, 5)\nis_simple_power(100",
  "\n  # Write code here\n}\n", "\n  if (x == 1) return(TRUE)\n  if (n == 1) return(TRUE)\n\
    \  if (n >= x) return(FALSE)\n  if (x < 0) return(FALSE)\n  n <- n^2\n  return(FALSE)\n\
    }\n</cell>\n<text>\nYour Task\nWrite a function called is_even(x) that returns\
    \ true if x is an even number and false otherwise.\n\nWrite a function called\
    \ is_multiple_of_3(x) that returns true if x is a multiple of 3 and false otherwise.\n\
    \nWrite a function called is_divisible_by(x,y) that returns true if y is a multiple\
    \ of x and false otherwise.\n\n\n</text>\n<cell>", "\n  # The number `1` cannot\
    \ be raised to a power greater than or equal to\n  # `n`.\n  return(x >= n ||\
    \ (x %% n) == 0)\n}\n", "\n  return (x %% n) == 0 & n > 1\n}\n</cell>\n<cell>",
  "\n  if(n <- is_integer(n)) && n != 0) return(floor(log2(n)) == x)\n  return(FALSE)\n\
    }\n", "\n    n <- n\n    n * x == x\n}\n", "\n  is_integer(x)\n  is_integer(n)\n\
    \  is_integer(n)\n  is_greater(x, n)\n  is_greater(x, n)\n  x == n * floor(x)\
    \ # check base case\n}\n", "\n  # Return the number of digits of n that are less\
    \ than or equal to\n  # x. Hint: use as.integer and nchar.\n  nchar(n*as.integer(x))\
    \ == x\n}\n", "\n  return(is.integer(n) & is.integer(x) & n%%x == 0)\n}\n</cell>\n\
    <cell>", "\n  y <- floor(x^n)\n  x == y & n == floor(x^n)\n}\n</cell>\n<cell>\n\
    is_simple_power(4,8)\n</cell>\n<cell>\nis_simple_power(4,2)\n</cell>\n<cell>\n\
    is_simple_power(5,3)\n</cell>\n<text>\nNow you can write your function using is_simple_power:\n\
    \n\n</text>\n<cell>", "\n  \n  stopifnot(is.numeric(x), is.numeric(n))\n  \n \
    \ \n}\n", "\n  if (x %% n == 0) {\n    return (x %% n == 0)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  \n}\n</cell>\n<cell>", "\n  return(exp(n)%%x == 0)\n}\n</cell>\n\
    <cell>\nis_simple_power(3, 1)\n</cell>\n<text>\nLet's test it\n\n</text>\n<cell>\n\
    is_simple_power(2, 2)\n</cell>\n<cell>\nis_simple_power(1, 4)\n</cell>\n<cell>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise: What are the results of these\
    \ two comparisons?\n\n\n</text>\n<cell>\nis_simple_power(2, 2) | is_simple_power(1,\
    \ 4)\n</cell>\n<cell>\nis_simple_power(5, 3) | is_simple_power(3, 1)\n</cell>\n\
    <text>\nSolution\n\n</text>\n<cell>", "\n  # if n is a multiple of n then n**int\
    \ = x -> n is a simple power\n  return(n %% n == 0)\n}\n", "\n    x != 0 & n ==\
    \ x & n != 1 & n != 0\n}\n</cell>\n<cell>\nis_simple_power(4, 2)\n</cell>\n<cell>\n\
    is_simple_power(6, 2)\n</cell>\n<cell>\nis_simple_power(6, 5)\n</cell>\n<cell>\n\
    is_simple_power(10, 3)\n</cell>\n<cell>\nis_simple_power(10, 10)\n</cell>\n<cell>\n\
    is_simple_power(10, 15)\n</cell>\n<cell>\nis_simple_power(15, 15)\n</cell>\n<cell>\n\
    is_simple_power(10, 15)\n</cell>\n<cell>\nis_simple_power(10, 3)\n</cell>\n<cell>\n\
    is_simple_power(6, 2)\n</cell>\n<cell>\nis_simple_power(6, 4)\n</cell>\n<cell>\n\
    is_simple_power(6, 6)\n</cell>\n<cell>\nis_simple_power(4, 2)\n</cell>\n<cell>\n\
    is_simple_power(2, 2)\n</cell>\n<cell>\nis_simple_power(3, 3)\n</cell>\n<cell>\n\
    is_simple_power(1, 3)\n</cell>\n<cell>\nis_simple_power(3, 5)\n</cell>\n<cell>\n\
    is_simple_power(3, 7)\n</cell>\n<cell>\nis_simple_power(4, 3)\n</cell>\n<cell>\n\
    is_simple_power(4, 6)\n</cell>\n<cell>\nis_simple_power(5, 6)\n</cell>\n<cell>\n\
    is_simple_power(5, 9)\n</cell>\n<cell>\nis_simple_power(8, 3)\n</cell>\n<cell>\n\
    is_simple_power(10, 4)\n</cell>\n<cell>\nis_simple_power(10, 10)\n</cell>\n<cell>\n\
    is_simple_power(15, 7)\n</cell>\n<cell>\nis_simple_power(15, 14)\n</cell>\n<cell>\n\
    is_simple_power(16, 14)\n</cell>\n<cell>\nis_simple_power(9, 7)\n</cell>\n<cell>\n\
    is_simple_power(9, 9)\n</cell>\n<cell>\nis_simple_power(16, 7)\n</cell>\n<cell>\n\
    is_simple_power(16, 9)\n</cell>\n<cell>\nis_simple_power(10, 15)\n</cell>\n<cell>\n\
    is_simple_power(10, 16)\n</cell>\n<cell>\nis_simple_power(16, 15)\n</cell>", "\n\
    \  # Hint:\n  # To determine if an integer is a power of n, check if its mod n\
    \ is 0\n  # To determine if a number is square, check if it is an integer\n  return(x\
    \ %% n == 0)\n}\n", "\n  # Your code here\n  return(TRUE)\n}\n", "\n    \n}\n\
    </cell>\n<text>\nProblem 2b\nLet x be a positive integer and n be an integer,\
    \ to\ncompute the value of x^n. Write a recursive function\nthat computes this\
    \ value.\n\n\n</text>\n<cell>", "\n  return(x == trunc(x) & x == n * trunc(x))\n\
    }\n", "\n  n == int(x) && n%%1 == 0\n}\n</cell>\n<cell>", "\n  # Your code here\n\
    }\n\n</cell>\n<text>\nNow that you have written the function is_simple_power,\
    \ use it to verify your solution.\n\n\n</text>\n<cell>", "\n   return(as.integer(trunc(log(x))\
    \ %% n) == 0)\n}\n</code>\nThe last task is to write a function check_simple_power\
    \ to check if a number is a power of 2.\n<code>", "\n  return(\n    x != 1 &&\n\
    \    (x >= 3 || x == n*n || is_simple_power(floor(x/n)*n, n) ||\n     (x == n*n*n\
    \ && is_simple_power(floor(x/n)*n, n)))\n  )\n}\n", "\n  return(x == n^int)\n\
    }\n</cell>\n<text>\nCheckpoint. For a more in-depth look at the Python language,\
    \ see .\n\n\n</text>\n<cell>", "\n  # base case\n  if(n <= 1) return TRUE\n  \n\
    \  # recursion\n  return(\n    (n %% x == 0) &\n    (is_simple_power(x, n-1) |\
    \ is_simple_power(x, n-2)) &\n    (is_simple_power(x, n-3) | is_simple_power(x,\
    \ n-4))\n  )\n}\n", "\n  n <- n\n  x <- x\n  return(x %/% n == x)\n}\n</cell>\n\
    <cell>", "\n  if (n == 0) return(TRUE)\n  if (x == 1) return(TRUE)\n  n_squared\
    \ = n * n\n  return(abs(x - n_squared) <= 0.01) # if |x - n_squared| < 0.01 then\
    \ x is a simple power of n\n}\n", "\n  # your code\n}\n</cell>\n<text>\nTests\n\
    \n</text>\n<text>\nis_simple_power(1, 4)\ntrue\nis_simple_power(2, 2)\ntrue\n\
    is_simple_power(8, 2)\ntrue\nis_simple_power(3, 2)\nfalse\nis_simple_power(3,\
    \ 1)\nfalse\nis_simple_power(5, 3)\nfalse\n\n\n</text>\n<cell>", "\n  return(n\
    \ != 1)\n}\n", "\n  if (n == 1) return(TRUE)\n  if (n %%% 3 == 0) return(TRUE)\n\
    \  return(FALSE)\n}\n", "\n  if(n == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  if(n <= 1) {\n    stop(\"n must be greater than 1\")\n  }\n \
    \ if(x > 1) {\n    stop(\"x must be greater than 1\")\n  }\n  if(n %in% c(0,3)\
    \ == TRUE) {\n    # x^0 = 1\n    # x^1 = x\n    # x^3 = x^2 * x\n    if(n == 1)\
    \ return (TRUE)\n    if(n == 2) return (TRUE)\n    if(n == 3) return (TRUE)\n\
    \  }\n  if(n == 1) {\n    # 1^0 = 1\n    # 1^1 = 1\n    # 1^3 = x\n    if(x ==\
    \ 1) return(TRUE)\n    if(x == 0) return(TRUE)\n    if(x == -1) return (TRUE)\n\
    \  }\n  if(n == 2) {\n    # 2^0 = 1\n    # 2^1 = 1\n    # 2^2 = 1\n    # 2^3 =\
    \ x\n    if(x == 1) return(TRUE)\n    if(x == 0) return(TRUE)\n    if(x == -1)\
    \ return (TRUE)\n  }\n  if(n == 3) {\n    # 3^0 = 1\n    # 3^1 = x\n    # 3^2\
    \ = x^2\n    # 3^3 = x^3\n    if(x == 1) return(TRUE)\n    if(x == 0) return(TRUE)\n\
    \    if(x == -1) return (TRUE)\n    if(x == -2) return (TRUE)\n  }\n  if(n ==\
    \ 4) {\n    # 4^0 = 1\n    # 4^1 = x\n    # 4^2 = x^2\n    # 4^3 = x^3\n    #\
    \ 4^4 = x^4\n    if(x == 1) return(TRUE)\n    if(x == 0) return(TRUE)\n    if(x\
    \ == -1) return (TRUE)\n    if(x == -2) return (TRUE)\n    if(x == -3) return\
    \ (TRUE)\n  }\n  return(FALSE)\n}\n</cell>\n<text>\nQ3. Write a function to test\
    \ whether a number is a perfect power of 3.\n\n</text>\n<code language=conda-env-cheycomp-py>",
  "\n  if(n == 1) return (x != 0)\n  if(n %% 2 == 0) return (x != 0) && ((x %% n)\
    \ == 0)\n  x %/% n == 1\n}\n", "\n    \n    # Your code here\n    \n}\n</cell>\n\
    <cell>\nis_simple_power(1, 4)\n</cell>\n<cell>\nis_simple_power(2, 2)\n</cell>\n\
    <cell>\nis_simple_power(8, 2)\n</cell>\n<cell>\nis_simple_power(3, 2)\n</cell>\n\
    <cell>\nis_simple_power(3, 1)\n</cell>\n<cell>\nis_simple_power(5, 3)\n</cell>\n\
    <text>\nProblem 3b: Simple powers of powers are powers of two.\nWrite a function\
    \ that returns true if a number x is a simple power of two.\nx is a simple power\
    \ of two if 2**int=x\nFor example:\n>>> is_simple_two(8)\ntrue\n>>> is_simple_two(4)\n\
    true\n>>> is_simple_two(3)\nfalse\n>>> is_simple_two(2)\nfalse\n>>> is_simple_two(1)\n\
    false\n>>> is_simple_two(0)\nfalse\n\n</text>\n<cell>\nis_simple_two <- function(x)\
    \ {\n    \n    # Your code here\n    \n}\n</cell>\n<cell>\nis_simple_two(8)\n\
    </cell>\n<cell>\nis_simple_two(4)\n</cell>\n<cell>\nis_simple_two(3)\n</cell>\n\
    <cell>\nis_simple_two(2)\n</cell>\n<cell>\nis_simple_two(1)\n</cell>\n<cell>\n\
    is_simple_two(0)\n</cell>\n<text>\nProblem 3c: Is x even or odd?\nWrite a function\
    \ that returns true if a number x is an even number and false otherwise.\nx is\
    \ an even number if even(x)\nx is an odd number if odd(x)\nFor example:\n>>> is_even(8)\n\
    true\n>>> is_even(4)\ntrue\n>>> is_even(6)\nfalse\n>>> is_even(2)\nfalse\n>>>\
    \ is_even(1)\nfalse\n>>> is_even(0)\nfalse\n>>> is_even(3.1)\nfalse\n\n</text>\n\
    <cell>\nis_even <- function(x) {\n    \n    # Your code here\n    \n}\n</cell>\n\
    <cell>\nis_even(8)\n</cell>\n<cell>\nis_even(4)\n</cell>\n<cell>\nis_even(6)\n\
    </cell>\n<cell>\nis_even(2)\n</cell>\n<cell>\nis_even(1)\n</cell>\n<cell>\nis_even(0)\n\
    </cell>\n<cell>\n", "\n  return(as.integer(n) == as.integer(x)*as.integer(n) ==\
    \ x)\n}\n", "\n  if (is.na(n) || n <= 0 || !is.numeric(n)) return(NA)\n  if (x\
    \ == 1) return(TRUE)\n  if (x == 2) return(TRUE)\n  if (x%in% c(0,1)) return(FALSE)\n\
    \  # We first check that x is a power of n\n  if (n%in% c(1,3)) return(FALSE)\n\
    \  # We then check that x is a power of n-1\n  # The last condition allows us\
    \ to find power of odd numbers such as 9\n  if (n%in% c(0,3) && x%%2 == 0) return(FALSE)\n\
    \  # Then we check that the next power of n is larger than x\n  next_n <- n+1\n\
    \  if (next_n%in% c(1,3)) return(FALSE)\n  # Finally we check that the next power\
    \ of n is larger than the previous power of n-1\n  # The last condition allows\
    \ us to find power of even numbers such as 11\n  if (n%in% c(0,3) && next_n%%2\
    \ == 0 & next_n > x) return(FALSE)\n  # We are done\n  return(TRUE)\n}\n</cell>\n\
    <text>\nExercise:\nWrite a function that returns true if the number x is a power\
    \ of 2 between 0 and n.\n\n\n</text>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <cell>", "\n  # TODO: your code here\n}\n", "\n  n == x | (x == 0 & n == 1)\n\
    }\n</cell>\n<cell>", "\n  if(n <= 1) return(TRUE)\n  if(x %% n == 0) return(TRUE)\n\
    \  return(FALSE)\n}\n", "\n  \n}", "\n    if (n == 1) return(TRUE)\n    if (n\
    \ == 2) return(TRUE)\n    if (n % 1 == 0) return(TRUE)\n    if (n%%1 == 0) return(FALSE)\n\
    \    if (n < 0) return(FALSE)\n    if (n %% 2 == 0) return(TRUE)\n    if (n%%2\
    \ == 0) return(FALSE)\n    return(FALSE)\n}\n", "\n    if(x == 1) return (TRUE)\n\
    \    if (n == 0) return (TRUE)\n    if (n == 1) return (TRUE)\n    if (n == 2)\
    \ return (TRUE)\n    if (n %% 2 != 0) return (FALSE)\n\n    sqrt_n <- sqrt(n)\n\
    \    next_n_square <- round(sqrt_n * sqrt_n)\n\n    if (x %% sqrt_n == 0) {\n\
    \        x <- x ^ sqrt_n\n        return(TRUE)\n    }\n\n    if (x %% next_n_square\
    \ == 0) {\n        x <- x ^ next_n_square\n        return(TRUE)\n    }\n\n   \
    \ return(FALSE)\n}\n", "\n  if (n == 0) {\n    # n==0 will evaluate to FALSE so\
    \ no tests are needed\n    return(TRUE)\n  }\n  if (n == 1) {\n    # n==1 will\
    \ evaluate to TRUE so no tests are needed\n    return(TRUE)\n  }\n  if (n == 2)\
    \ {\n    # n==2 will evaluate to TRUE so no tests are needed\n    return(TRUE)\n\
    \  }\n  if (n % 2 == 0) {\n    # n is a power of 2 (n==2^k) or even (n&1)\n  \
    \  # so check if n is a power of 2\n    if (n %% 1 == 0) {\n      # n is a power\
    \ of 2\n      return(TRUE)\n    }\n  }\n  # else it must be odd so check if n\
    \ is a power of 3\n  # n is a power of 3 if n==3^k\n  # n is even if n&1\n  return(FALSE)\n\
    }\n", "\n  # TODO: Your code here\n  # Write code here\n  return(TRUE)\n}\n",
  "\n    x %% n == 0\n}\n", "\n  a <- n^x\n  if (isTRUE(n==1)) return(TRUE)\n  if\
    \ (x==1) return(TRUE)\n  if (x==0) return(FALSE)\n  if (a==x) return(TRUE)\n \
    \ if (a==1) return(TRUE)\n  if (a==2) return(TRUE)\n  if (a==3) return(TRUE)\n\
    \  if (a==4) return(TRUE)\n  if (a==5) return(TRUE)\n  if (a==6) return(TRUE)\n\
    \  if (a==7) return(TRUE)\n  if (a==8) return(TRUE)\n  if (a==9) return(TRUE)\n\
    \  if (a==10) return(TRUE)\n  if (a==11) return(TRUE)\n  if (a==12) return(TRUE)\n\
    \  if (a==13) return(TRUE)\n  if (a==14) return(TRUE)\n  if (a==15) return(TRUE)\n\
    \  if (a==16) return(TRUE)\n  if (a==17) return(TRUE)\n  if (a==18) return(TRUE)\n\
    \  if (a==19) return(TRUE)\n  if (a==20) return(TRUE)\n  if (a==21) return(TRUE)\n\
    \  if (a==22) return(TRUE)\n  if (a==23) return(TRUE)\n  if (a==24) return(TRUE)\n\
    \  if (a==25) return(TRUE)\n  if (a==26) return(TRUE)\n  if (a==27) return(TRUE)\n\
    \  if (a==28) return(TRUE)\n  if (a==29) return(TRUE)\n  if (a==30) return(TRUE)\n\
    \  if (a==31) return(TRUE)\n  if (a==32) return(TRUE)\n  if (a==33) return(TRUE)\n\
    \  if (a==34) return(TRUE)\n  if (a==35) return(TRUE)\n  if (a==36) return(TRUE)\n\
    \  if (a==37) return(TRUE)\n  if (a==38) return(TRUE)\n  if (a==39) return(TRUE)\n\
    \  if (a==40) return(TRUE)\n  if (a==41) return(TRUE)\n  if (a==42) return(TRUE)\n\
    \  if (a==43) return(TRUE)\n  if (a==44) return(TRUE)\n  if (a==45) return(TRUE)\n\
    \  if (a==46) return(TRUE)\n  if (a==47) return(TRUE)\n  if (a==48) ", "\n  return(TRUE)\n\
    }\n", "\n  return(x == x^n)\n}\n", "\n  x ^ (n ^ integer(n)) %% 1\n}\n</cell>\n\
    <cell>\nis_simple_power(9, 2)\n</cell>\n<cell>\nis_simple_power(9, 3)\n</cell>\n\
    <cell>\nis_simple_power(9, 4)\n</cell>\n<cell>\nis_simple_power(9, 5)\n</cell>\n\
    <cell>\nis_simple_power(9, 6)\n</cell>\n<cell>\nis_simple_power(9, 7)\n</cell>\n\
    <cell>\nis_simple_power(9, 8)\n</cell>\n<cell>\nis_simple_power(10, 1)\n</cell>\n\
    <cell>\nis_simple_power(10, 2)\n</cell>\n<cell>\nis_simple_power(10, 3)\n</cell>\n\
    <cell>\nis_simple_power(10, 4)\n</cell>\n<cell>\nis_simple_power(10, 5)\n</cell>\n\
    <cell>\nis_simple_power(10, 6)\n</cell>\n<cell>\nis_simple_power(10, 7)\n</cell>\n\
    <cell>\nis_simple_power(10, 8)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the number n is a power of 2, false otherwise.\nExample:\
    \ \n>>> is_power_of_two(2)\nTrue\n>>> is_power_of_two(3)\nTrue\n>>> is_power_of_two(7)\n\
    False\n>>> is_power_of_two(8)\nTrue\n>>> is_power_of_two(11)\nFalse\n>>> is_power_of_two(17)\n\
    False\n>>> is_power_of_two(20)\nFalse\n\n\n</text>\n<cell>", "\n  # TODO: Your\
    \ code here!\n  return(\"Your code here\")\n}\n\n", "\n  is_power_of_n <- function(x)\
    \ x == x^n\n  is_power_of_n(x)\n}\n", "\n  # Your code here\n}\n", "\n    if (n\
    \ <= 1) {\n        return(FALSE)\n    }\n    if (n == 1) {\n        return(TRUE)\n\
    \    }\n    if (x%n == 0) {\n        return(FALSE)\n    }\n    return(TRUE)\n\
    }\n\n", "\n  # if n is odd then n**int = x is a simple power\n  if(n%%2==1) {\n\
    \    # if n is even, x must be a power of (n-1)\n    if(x%%n==0) {\n      return(TRUE)\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    # n is even, x ** (int/n)\
    \ = x\n    if(x%%n==0) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n\
    \    }\n  }\n}\n", "\n  n <- as.integer(n)\n  x <- as.integer(x)\n  if(x == 0\
    \ | n == 0 | x%%n == 0) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n \
    \ }\n}\n", "\n  n == 1 || (n == x && x%1==0)\n}\n", "\n  return( (n^int(x)) ==\
    \ x )\n}\n", "\n  return(\n    n != 1\n    ||\n    x != x\n    ||\n    !(\n  \
    \    (n %% x == 0) || (n % x == 0) ||\n      all(x %% n == 0)\n    )\n  )\n}\n",
  "\n  # Write your code here\n}\n</cell>\n<text>\nYour solution\n\n</text>\n<cell>",
  "\n  return(n ^ x == x)\n}\n</cell>\n<cell>", "\n  return (x ^ n) %% n == 0\n}\n\
    </cell>\n<cell>\nis_simple_power(3, 4)\n</cell>\n<cell>\nis_simple_power(1, 4)\n\
    </cell>\n<cell>\nis_simple_power(2, 2)\n</cell>\n<cell>\nis_simple_power(8, 2)\n\
    </cell>\n<cell>\nis_simple_power(3, 2)\n</cell>\n<cell>\nis_simple_power(3, 1)\n\
    </cell>\n<cell>\nis_simple_power(5, 3)\n</cell>\n<text>\n2.5.3 Verify your is_power\n\
    \n</text>\n<cell>", "\n  return(length(x)==length(n) && all(x==x^(seq_along(n)%%n)))\n\
    }", "\n    n <- n\n    if (n == 1) return(TRUE)\n    else if((x %% n) == 0) return(TRUE)\n\
    \    else return(FALSE)\n}\n", "\n  x == n ^ x\n}\n", "\n  return(n == floor(n))\
    \ * n == x\n}\n</cell>\n<text>\nTask 2 - Solve Problem 4\n\n</text>\n<cell>",
  "\n  return(n != x && n %/% x == 0)\n}\nis_simple_power(2, 3)", "\n  # Your code\
    \ here\n}\n</cell>\n<cell>", "\n  x ^= n ^ 1\n  x ^= n ^ 2\n  x ^= n ^ 4\n  x\
    \ ^= n ^ 8\n  x ^= n ^ 16\n  x ^= n ^ 32\n  x ^= n ^ 64\n  x ^= n ^ 128\n  x ^=\
    \ n ^ 256\n  x ^= n ^ 512\n  x ^= n ^ 1024\n  x ^= n ^ 2048\n  return(x ^ (x ^\
    \ x))\n}\n", "\n\tifelse(n %in% c(2, 3), x==(x^n), x==(x*n));\n}\n", "\n  return(\n\
    \    !(is.null(which(x == n^int(x)))))\n}\n", "\n  return(n != 0 && x %% n ==\
    \ 0)\n}\n", "\n    # Your code here\n}\n</cell>\n<cell>", "\n  stopifnot(n >=\
    \ 0)\n  \n  # if x is evenly divisible by n then it is simple power\n  is_odd\
    \ <- function(x){\n    if (x %% 2 == 0) return(TRUE)\n    else return(FALSE)\n\
    \  }\n  \n  if (is_odd(x)) {\n    if (n %% 2 == 0) return(TRUE)\n    else return(FALSE)\n\
    \  } \n  \n  # if n is even then only x is a power of n \n  is_even <- function(x){\n\
    \    if (x %% 2 == 0) return(TRUE)\n    else return(FALSE)\n  }\n  \n  if (is_even(n))\
    \ {\n    if (x %% n == 0) return(TRUE)\n    else return(FALSE)\n  } \n  \n  #\
    \ If n is not even, then it is impossible for x to be a power of n\n  # but we\
    \ can still check if it is a simple power of n\n  return(TRUE)\n}\n\n</cell>\n\
    <cell>", "\n    if( x != 0)\n    {\n        for(i in 1:n)\n        {\n       \
    \     if(x %% i == 0)\n            {\n                return (i %% n == 0);\n\
    \            }\n        }\n    }\n    else\n    {\n        return (n != 1);\n\
    \    }\n}\n\nprint(is_simple_power(2, 2));\nprint(is_simple_power(4, 2));\nprint(is_simple_power(8,\
    \ 2));\nprint(is_simple_power(3, 2));\nprint(is_simple_power(3, 1));\nprint(is_simple_power(5,\
    \ 3));\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI think you have not read carefully\
    \ my question, I am not asking about how to check if a number is power of, I am\
    \ asking about how to check if a number is a simple power of a number, thanks\
    \ for your effort\n<|/ c |>\n<| c |>\nYou're right, I misunderstood the question.\
    \ I have corrected the answer.\n<|/ c |>\n<| a |>\nHere is an R solution:\n<code>\n\
    is_simple <- function(x,n){\n if(x < n){\n  return FALSE\n }\n for(j in 1:n){\n\
    \  if(x %% j == 0){\n   return (j %% n == 0)\n  }\n }\n return(TRUE)\n}\n\nis_simple(5,5)\n\
    is_simple(9,3)\nis_simple(16,4)\nis_simple(8,2)\n</code>\nOutput:\n<code>\n> is_simple(5,5)\n\
    [1] TRUE\n> is_simple(9,3)\n[1] TRUE\n> is_simple(16,4)\n[1] TRUE\n> is_simple(8,2)\n\
    [1] FALSE\n</code>\n<|/ a dscore=2 tags=r,pow,algorithm |>\n<| a |>\nIn R this\
    \ is fairly straightforward.\n<code>\nx <- 5\ny <- 10\n\nx^2^y == 5^10 == 5^10\n\
    </code>\n<|/ a dscore=1 tags=r,pow,algorithm |>\n<| a dscore=1 |>\nWe can use\
    \ mathematical induction to solve this problem, where base case is when X=n, then\
    \ Y=1\n<code>\nis_simple <- function(X,n){\n  if(X==n){\n    return TRUE\n  }\n\
    \  if(X<n){\n    return FALSE\n  }\n  X<-n\n  Y<-floor(sqrt(X))\n  if(Y==1){\n\
    \    return FALSE\n  }\n  Y<-Y+1\n  if(Y==X){\n    return TRUE\n  }\n  is_simple(X,Y)\n\
    }\nis_simple(5,5)\n</code>\n", "\n  # Your code here\n  x %*% n == x\n}\n", "\n\
    \  mod <- as.numeric(x %% n)\n  mod < 0 || mod > n\n}\n", "\n  return(ifelse(is.infinite(x)\
    \ | is.na(x) | is.nan(x), FALSE, \n                ifelse(n == 1, TRUE, \n   \
    \             ifelse(x == 1, TRUE, FALSE))))\n}\n", "\n  log(x) / log(10) == (n\
    \ - 1) * (floor(log(x) / log(10)) + 1)\n}\n</cell>\n<cell>", "\n  return(n <=\
    \ 1 || n != x^n)\n}\n</cell>\n<text>\nExercise\nHow does this function work? Discuss\
    \ with the neighbors.\n\n\n</text>\n<cell>", "\n  # your code here\n}\n\n</cell>\n\
    <cell>", "\n    x %% n == 0\n}\n", "\n  # You need to write your code here\n \
    \ return(TRUE)\n}\n", "\n  if (n%%1==0) {\n    if (x==1) return(TRUE)\n    if\
    \ (x%%n==0) return(TRUE)\n    return(FALSE)\n  } else {\n    if (x==1) return(FALSE)\n\
    \    if (x%%n==0) return(FALSE)\n    return(TRUE)\n  }\n}\n</cell>\n<cell>\nis_simple_power(3,\
    \ 2)\n</cell>\n<cell>\nis_simple_power(7, 3)\n</cell>\n<cell>\nis_simple_power(7,\
    \ 4)\n</cell>\n<text>\nWe can also define a function that returns True if the\
    \ number of the digits of a number are the same and False if they are not:\n\n\
    \n</text>\n<cell>\nis_same_digits <- function(x) {\n  y <- as.integer(x)\n  y\
    \ <- formatC(y, width = 10, format = \"d\", flag = \"0\")\n  is_same_length(y,\
    \ str_split(y, \".\")[[1]])\n}\n</cell>\n<cell>\nis_same_digits(72)\n</cell>\n\
    <cell>\nis_same_digits(180)\n</cell>\n<cell>\nis_same_digits(19)\n</cell>\n<cell>\n\
    is_same_digits(191)\n</cell>\n<cell>\nis_same_digits(100)\n</cell>\n<cell>\nis_same_digits(10000)\n\
    </cell>\n<cell>\nis_same_digits(99)\n</cell>\n<cell>\nis_same_digits(999)\n</cell>\n\
    <cell>\nis_same_digits(99999)\n</cell>\n<cell>\nis_same_digits(9999)\n</cell>\n\
    <cell>\nis_same_digits(99999999)\n</cell>\n<text>\nWe can also define a function\
    \ that returns True if the number of digits in a number is the same as the number\
    \ of digits of the smallest number in the number:\n\n\n</text>\n<cell>\nis_same_length\
    \ <- function(x) {\n  y <- as.integer(x)\n  y <- formatC(y, width = 10, format\
    \ = \"d\", flag = \"0\")\n  is_same_length(y, str_split(y, \".\")[[1]])\n}\n</cell>\n\
    <cell>\nis_same_length(7)\n</cell>\n<cell>\nis_same_length(6)\n</cell>\n<cell>\n\
    is_same_length(7)\n</cell>\n<cell>\nis_same_length(18)\n</cell>\n<cell>\nis_same_length(7)\n\
    </cell>\n<text>\nThe function is_power_of_2 can be defined recursively as follow",
  "\n  # your code here\n}\n", "\n  return(n ^ x == x)\n}\n", "\n    if (n %% x ==\
    \ 0) {\n        true\n    } else {\n        false\n    }\n}", "\n    !is.null(n^int(x)\
    \ & n^int(x)%n==0)\n}\n</cell>\n<cell>\nis_simple_power(1, 4)\n</cell>\n<cell>\n\
    is_simple_power(2, 2)\n</cell>\n<cell>\nis_simple_power(8, 2)\n</cell>\n<cell>\n\
    is_simple_power(3, 2)\n</cell>\n<cell>\nis_simple_power(3, 1)\n</cell>\n<cell>\n\
    is_simple_power(5, 3)\n</cell>\n<cell>", "\n  if (n <= 1) return(FALSE)\n  return(x\
    \ == x^(n - 1))\n}\n", "\n  x^n==x\n}\n</cell>\n<cell>\nis_simple_power(1, 4)\n\
    </cell>\n<cell>\nis_simple_power(2, 2)\n</cell>\n<cell>\nis_simple_power(8, 2)\n\
    </cell>\n<cell>\nis_simple_power(3, 2)\n</cell>\n<cell>\nis_simple_power(3, 1)\n\
    </cell>\n<cell>\nis_simple_power(5, 3)\n</cell>\n<text>\n3. Factorial Function\n\
    Factorial function is often denoted with a \"$n!$\" expression. The expression\
    \ $n!$ means \"factorial of n\", and $n! = 1 * 2 * ... * n$.\n\nThe factorial\
    \ is defined as:\n\n$$n! = n \\times 1 \\times 2 \\times 3 \\times 4 \\times ...\
    \ \\times n$$\n\nThe most commonly used definition of factorial is $n! = \u2211\
    n=1n$.\n\nThe factorial of a number $n$ is defined to be the product of all integers\
    \ less than or equal to $n$, including the number itself.\n\nFor example, the\
    \ factorial of 0 is $1$, the factorial of 1 is $2$, 2! is $4$, 3! is $6$, and\
    \ so on.\n\n\n</text>\n<cell>\nfactorial <- function(n) {\n  return(if(n==0) 1\
    \ else n * factorial(n-1))\n}\n</cell>\n<cell>\nfactorial(10)\n</cell>\n<text>\n\
    4. Fibonacci Number\nA fibonacci number is a number that is the sum of the two\
    \ preceding numbers, where the two preceding numbers are called the \"previous\"\
    \ number and the number before them is called the \"current\" number.\n\nAn example\
    \ of a fibonacci number is $5$. The first two numbers are $0$ and $1$, so the\
    \ fibonacci number is $5+1 = 6$. The next two numbers are $5$ and $6$, so the\
    \ fibonacci number is $5+6 = 11$, and so on.\n\n\n</text>\n<cell>\nfibonacci <-\
    \ function(n) {\n  return(if(n==0) 0 else ((if(n==1) 1 else 0) + fibonacci(n-2)))\n\
    }\n</cell>\n<cell>\nfibonacci(10)\n</cell>\n<text>\n5. Fibonacci Series Function\n\
    The fibonacci series is another common way to calculate the sum of a geometric\
    \ series; for example, ", "\n  if(x == 1) return(TRUE)\n  if(x %% 1 ==0) return(FALSE)\n\
    \  if(x < n) return(FALSE)\n  return(TRUE)\n}\n</cell>\n<cell>\nis_simple_power(2,2)\n\
    </cell>\n<cell>\nis_simple_power(3,2)\n</cell>\n<cell>\nis_simple_power(3, 1)\n\
    </cell>\n<cell>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a number is even or odd\nWrite a function that checks if a number\
    \ is prime (up to 10)\nWrite a function that checks if a number is a perfect square\n\
    Write a function that checks if a number is a perfect cube\nWrite a function that\
    \ checks if a number is a perfect cube root\n\n\n</text>\n<cell>", "\n    if(n\
    \ == 1) return(TRUE)\n    x %*% n == x && is_simple_power(x, n-1)\n}\n", "\n \
    \   if(n==0) return(TRUE)\n    if(n==1) return(FALSE)\n    if(n==2) return(FALSE)\n\
    \    if(n==3) return(FALSE)\n    if(n==4) return(FALSE)\n    if(x %% n!=0) return(FALSE)\n\
    \    return(TRUE)\n}\n", "\n  if (n == 0) return(TRUE)\n  if (n != int(x)) {\n\
    \      return(FALSE)\n  }\n  if (n==1) return(TRUE)\n  return(is_simple_power(x,\
    \ n-1))\n}\n", "\n  return(n^int==x)\n}\n", "\n  # Your code here\n}\n", "\n \
    \ # Your code here!\n}\n\n", "\n  # TODO: Your code here\n}\n", "\n  return(\n\
    \    all(x^(-1) == floor(log(x, n)) / log(n, n)))\n}\n</cell>\n<cell>", "\n  #\
    \ Your code here\n}\nis_simple_power(1, 4)\nis_simple_power(2, 2)\nis_simple_power(8,\
    \ 2)\nis_simple_power(3, 2)\nis_simple_power(3, 1)\nis_simple_power(5, 3)\n</cell>\n\
    <cell>", "\n    return (x %% n) == 0\n}\n\n", "\n  if (n<1) stop(\"n must be >=\
    \ 1\")\n  ifelse(\n    (n%1==0) & (x%%n==0),\n    (n%1==0),\n    (return(FALSE))\n\
    \  )\n}\n\n", "\n  return(as.integer(n^x) == x)\n}\n", "\n  # TODO:\n}\n</cell>\n\
    <cell>", "\n  # TODO: Your code here\n}\n</cell>\n<cell>", "\n  # Write your code\
    \ here.\n  x %% n == 0\n}\n</cell>\n<text>\nNow let us find out how many digits\
    \ are there in power of 2.\n\n\n</text>\n<cell>", "\n  if (is.na(n)) {\n    return(FALSE)\n\
    \  } else {\n    f <- function(v) {\n      if (v > 1) {\n        return(FALSE)\n\
    \      } else {\n        return(v == n)\n      }\n    }\n    result <- sapply(x,\
    \ f)\n    return(all(result))\n  }\n}\n", "\n  \n}\n</cell>\n<cell>", "\n  n ^\
    \ x == x\n}\n</cell>\n<cell>", "\n  return(all(x%%n == 0))\n}\n</cell>\n<cell>\n\
    is_simple_power(6, 4)\n</cell>\n<cell>\nis_simple_power(7, 2)\n</cell>\n<cell>\n\
    is_simple_power(4, 8)\n</cell>\n<cell>\nis_simple_power(4, 7)\n</cell>\n<cell>\n\
    is_simple_power(4, 15)\n</cell>\n<cell>\nis_simple_power(16, 10)\n</cell>\n<cell>\n\
    is_simple_power(16, 15)\n</cell>\n<cell>\nis_simple_power(1, 15)\n</cell>\n<cell>\n\
    is_simple_power(2, 15)\n</cell>\n<cell>\nis_simple_power(3, 15)\n</cell>\n<cell>\n\
    is_simple_power(4, 15)\n</cell>\n<cell>\nis_simple_power(5, 15)\n</cell>\n<cell>\n\
    is_simple_power(6, 15)\n</cell>\n<cell>\nis_simple_power(7, 15)\n</cell>\n<cell>\n\
    is_simple_power(8, 15)\n</cell>\n<cell>\nis_simple_power(16, 10)\n</cell>\n<cell>\n\
    is_simple_power(1, 10)\n</cell>\n<cell>\nis_simple_power(2, 10)\n</cell>\n<cell>\n\
    is_simple_power(4, 10)\n</cell>\n<cell>\nis_simple_power(5, 10)\n</cell>\n<cell>\n\
    is_simple_power(6, 10)\n</cell>\n<cell>\nis_simple_power(7, 10)\n</cell>\n<cell>\n\
    is_simple_power(8, 10)\n</cell>\n<cell>\nis_simple_power(16, 10)\n</cell>\n<cell>\n\
    is_simple_power(16, 15)\n</cell>\n<cell>\nis_simple_power(2, 15)\n</cell>\n<cell>\n\
    is_simple_power(2, 10)\n</cell>\n<cell>\nis_simple_power(3, 10)\n</cell>\n<cell>\n\
    is_simple_power(4, 10)\n</cell>\n<cell>\nis_simple_power(5, 10)\n</cell>\n<cell>\n\
    is_simple_power(6, 10)\n</cell>\n<cell>\nis_simple_power(7, 10)\n</cell>\n<cell>\n\
    is_simple_power(8, 10)\n</cell>\n<cell>\nis_simple_power(16, 10)\n</cell>\n<cell>\n\
    is_simple_power(16, 15)\n</cell>\n<cell>\nis_simple_", "\n    x %% n == 0\n}\n\
    \n", "\n  require(math)\n  return(log(x) * log(n) %in% c(0, log(n) + 1))\n}\n",
  "\n  return(x != 0 && (n^(1+log(1,x))) %in% 0:n)\n}\n</cell>\n<cell>\nis_simple_power(2,\
    \ 2)\n</cell>\n<cell>\nis_simple_power(3, 2)\n</cell>\n<cell>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nThe sum of powers of two is equal to the number:\n\n$$\
    \ x^{\\lceil n/2 \\rceil} = 2 \\cdot 2^1 + 2 \\cdot 2^2 + 2 \\cdot 2^3 = 4 $$\n\
    \nThe sum of powers of two is equal to the number:\n\n$$ x^{\\lceil n/2 \\rceil}\
    \ = 2 \\cdot 2^1 + 2 \\cdot 2^2 + 2 \\cdot 2^3 + 2 \\cdot 2^4 + 2 \\cdot 2^5 +\
    \ 2 \\cdot 2^6 = 16 $$\n\nThe sum of powers of two is equal to the number:\n\n\
    $$ x^{\\lceil n/2 \\rceil} = 2 \\cdot 2^1 + 2 \\cdot 2^2 + 2 \\cdot 2^3 + 2 \\\
    cdot 2^4 + 2 \\cdot 2^5 + 2 \\cdot 2^6 + 2 \\cdot 2^7 + 2 \\cdot 2^8 = 256 $$\n\
    \n\n</text>\n<cell>\nis_simple_power(1, 2)\n</cell>\n<cell>\nis_simple_power(1,\
    \ 3)\n</cell>\n<cell>\nis_simple_power(1, 4)\n</cell>\n<cell>\nis_simple_power(2,\
    \ 3)\n</cell>\n<cell>\nis_simple_power(3, 3)\n</cell>\n<cell>\nis_simple_power(4,\
    \ 3)\n</cell>\n<cell>\nis_simple_power(5, 3)\n</cell>\n<cell>\nis_simple_power(6,\
    \ 3)\n</cell>\n<cell>\nis_simple_power(7, 3)\n</cell>\n<cell>\nis_simple_power(8,\
    \ 3)\n</cell>\n<text>\nExercise 3\nWrite a function that takes as input a vector\
    \ x and a number n and that outputs a vector that contains all the elements of\
    \ the vector x to the power n. Example:\n$$ x^{n} = \\left(x^{n-1}, x^{n-2}, ...,\
    \ x^{2}\\right)^n $$\n\n$$ x^{n} = \\left(x^{n-1}, x^{n-2}, ..., x^{2}\\right)^n\
    \ $$\n\n$$ x^{n} = \\left(x^{n-1}, x^{n-2}, ..., x^{2}\\right)", "\n    # Your\
    \ code here\n}\n", "\n   return( ((n-1)^int(x)) == x )\n}\n", "\n  return(n %\
    \ x == 0)\n}\n", "\n    x %% n == 0\n}\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that returns true if a number is a power of 2 or false otherwise.\n\n\n</text>\n\
    <cell>", "\n  if (n == 1) return (x %%1 == 0)\n  x %% n == 0\n}\n</cell>\n<cell>\n\
    is_simple_power(3, 8)\n</cell>\n<cell>\nis_simple_power(5, 3)\n</cell>\n<cell>\n\
    is_simple_power(10, 10)\n</cell>\n<cell>\nis_simple_power(4, 8)\n</cell>\n<cell>\n\
    is_simple_power(8, 2)\n</cell>\n<cell>\nis_simple_power(10, 5)\n</cell>\n<cell>\n\
    is_simple_power(4, 4)\n</cell>\n<cell>\nis_simple_power(4, 5)\n</cell>\n<cell>\n\
    is_simple_power(8, 3)\n</cell>\n<cell>\nis_simple_power(4, 8)\n</cell>\n<cell>\n\
    is_simple_power(4, 4)\n</cell>\n<cell>\nis_simple_power(8, 4)\n</cell>\n<text>\n\
    Exercise 8\nWrite a function that returns the value of x raised to the power of\
    \ n. Your function should use %^ to do the exponentiation.\n\n\n</text>\n<cell>",
  "\n  return(n %% x == 0)\n}\n</cell>\n<text>\nExercise 6: Experiment with the is_simple_power\
    \ function\n\n\n</text>\n<cell>\nis_simple_power(1, 4)\nis_simple_power(2, 2)\n\
    is_simple_power(8, 2)\nis_simple_power(3, 2)\nis_simple_power(3, 1)\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 7: Write a function that takes in a number (x)\
    \ and two powers (n).\nIt should return true if the given number is equal to the\
    \ sum of the squares of the first n\npowers of x\n\n\n</text>\n<cell>", "\n  is_simple(x\
    \ ^ (x %oo n ^ n))\n}\n</code>\n<|/ a dscore=0 tags=r |>\n<| a dscore=0 |>\n<code>\n\
    n <- 3\nf <- function(n) {\n  return((n%%1) != 0)\n}\n\nf(1)"]
stop_tokens:
- "\n#"
- "\n```"
