name: HumanEval_101_words_string
language: r
prompt: "# You will be given a string of words separated by commas or spaces. Your\
  \ task is\n# to split the string into words and return a vector of the words.\n\
  # For example:\n# >>> words_string('Hi, my name is John')\n# c('Hi', 'my', 'name',\
  \ 'is', 'John')\n# >>> words_string('One, two, three, four, five, six')\n# c('One',\
  \ 'two', 'three', 'four', 'five', 'six')\nwords_string <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- words_string\n    if(!identical(candidate('Hi,\
  \ my name is John'), c('Hi', 'my', 'name', 'is', 'John'))){quit('no', 1)}\n    if(!identical(candidate('One,\
  \ two, three, four, five, six'), c('One', 'two', 'three', 'four', 'five', 'six'))){quit('no',\
  \ 1)}\n    if(!identical(candidate('Hi, my name'), c('Hi', 'my', 'name'))){quit('no',\
  \ 1)}\n    if(!identical(candidate('One,, two, three, four, five, six,'), c('One',\
  \ 'two', 'three', 'four', 'five', 'six'))){quit('no', 1)}\n    if(!identical(candidate(''),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate('ahmed     , gamal'), c('ahmed',\
  \ 'gamal'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  x <- unlist(strsplit(s, \" \"))\n  return(x)\n}\n", "\n  # This\
    \ code takes the string 's' as the argument for the function\n  # and converts\
    \ it to a vector of strings each word in the string\n  # separated by a comma\
    \ (',') which can then be turned into a vector of\n  # strings by using the function\
    \ c()\n  return(c(s))\n}\n", "\n  # Your code here\n}\n</cell>\n<text>\nTests\n\
    Run the cell below to test your function. If it returns an error, then you've\
    \ correctly implemented the function and have ignored the error and can proceed\
    \ with the hints. If your function returns \"1\", then you've implemented the\
    \ function correctly and can proceed with the hints.\n\n\n</text>\n<cell>", "\n\
    \  # Split your string into words.\n  s <- unlist(strsplit(s, ','))\n  # Return\
    \ vector\n  s\n}\n", "\n    s <- strsplit(s, \",|(?<= )\")\n    c(unlist(s))\n\
    }\n</cell>\n<cell>\nwords_string(str_c('Hi, my name is John', ', and I like cats.'))\n\
    </cell>\n<text>\nNow we get to the important bit. In the next cell, you are going\
    \ to create a function that will be the one that processes all the texts.\n\n\
    The function will take a vector of strings as input and returns another vector\
    \ of strings as output. The function will take the vector of text as input and\
    \ print to the console the vector with the most common words. The input vector\
    \ is called texts which is passed by value to the function and stored inside the\
    \ variable texts.\n\nNote that this function should print all the text that is\
    \ passed in. If you run multiple iterations of this cell with the same input vector,\
    \ only one iteration will show you the output.\n\nIf you prefer to output the\
    \ results to a file, you can use the write command.\n\nFinally, if the function\
    \ doesn't work and you get an error, you might have forgotten to include a library\
    \ with a function like words_string. Go to the menu Help --> Install package -->\
    \ search for 'words_string' and install the package with install.packages('words_string').\n\
    \n\n</text>\n<cell>", "\n  strsplit(s,' ')[[1]]\n}\n", "\n  stopifnot(!is.character(s))\n\
    \  stopifnot(length(s) == 1)\n  s <- strsplit(s, ', |, ')\n  lapply(s, function(x)\
    \ strsplit(x, ' '))\n}\n</code>\n<|/ a tags=r dscore=1 |>\n<| c |>\nI believe\
    \ that `c` is not the right function. I think you need `unlist`\n<|/ c |>\n<|\
    \ c |>\nYou're right, I edited my answer to replace `c` with `unlist`. Thanks.\n\
    <|/ c |>\n<| a |>\nYou could use strsplit (base R), or strsplit (package stringr)\
    \ for example, which gives you a list with each element the words separated by\
    \ a comma. Then just unlist the result:\n<code>\nx <- 'Hi, my name is John'\n\
    lapply(strsplit(x, ', '), unlist)", "\n    str_split(s, ',| ') %>% unlist %>%\
    \ return\n}\n</cell>\n<cell>", "\n  # Write your code here\n  \n  # Use strsplit()\
    \ to split your string into words\n  # Use c() to combine each word back into\
    \ a vector\n\n  # Don't forget to return the result\n  return(NULL)\n}\n</code>\n\
    As a side note, your words_string function will fail every time you use more than\
    \ one space in a row (e.g., 'Hi, my name is John'). Try typing the following into\
    \ R to see:\n<code>\n> words_string('Hi, my name is John')\nc('Hi', 'my', 'name',\
    \ 'is', 'John')\n> words_string('One, two, three, four, five, six')\nc('One',\
    \ 'two', 'three', 'four', 'five', 'six')\n</code>\nIf you want to fix this, you'll\
    \ need to change your regular expression to something like this:\n<code>", "\n\
    \    s <- gsub(',','',s)\n    s <- gsub(', ','', s)\n    s <- gsub(', ', ' ',\
    \ s)\n    s <- gsub('. ', ' ', s)\n    s <- gsub(',', '.', s)\n    s <- gsub('\\\
    \\s', '', s)\n    s <- gsub('^\\\\s+|\\\\s+$', '', s)\n    s <- gsub('\\\\s+',\
    \ ' ', s)\n    s\n}\n</code>\nNow that we have our function, we can go ahead and\
    \ use lapply to do what we want.\n<code>\nwords_string <- function(s) {\n    s\
    \ <- gsub(',','',s)\n    s <- gsub(', ','', s)\n    s <- gsub(', ', ' ', s)\n\
    \    s <- gsub('. ', ' ', s)\n    s <- gsub(',', '.', s)\n    s <- gsub('\\\\\
    s', '', s)\n    s <- gsub('^\\\\s+|\\\\s+$', '', s)\n    s <- gsub('\\\\s+', '\
    \ ', s)\n    s\n}\n\nwords_string <- function(s) {\n    s <- gsub(',','',s)\n\
    \    s <- gsub(', ','', s)\n    s <- gsub(', ', ' ', s)\n    s <- gsub('. ', '\
    \ ', s)\n    s <- gsub(',', '.', s)\n    s <- gsub('\\\\s', '', s)\n    s <- gsub('^\\\
    \\s+|\\\\s+$', '', s)\n    s <- gsub('\\\\s+', ' ', s)\n    s\n}\n\n> words_string(\"\
    Hi, my name is John\")\n[1] \"Hi\"   \"my\"   \"name\" \"is\"   \"John\"\n> words_string(\"\
    One, two, three, four, five, six\")\n[1] \"One\" \"two\" \"three\" \"four\" \"\
    five\" \"six\"\n</code>\nSince our task is to extract only the words within a\
    \ string that have spaces before and after them we can use str_extract_all() from\
    \ stringr.\n<code>\n> library(stringr)\n> str <- \"Hi, my name is John\"\n> str_extract_all(str,\
    \ \"\\\\w+\")\n[[1]]\n[1] \"Hi\"   \"my\"   \"name\" \"is\"   \"John\"\n</code>\n\
    The result is a list but we only want the vector, so we can use unlist().\n<code>\n\
    > unlist(str_extract_all(str, \"\\\\w+\"))\n[1] \"Hi\"   \"my\"   \"name\" \"\
    is\"   \"John\"\n</code>\nAnd now for the fun part.  ", "\n  s <- unlist(strsplit(s,\
    \ ', '))\n  return(s)\n}\nwords_string(sample_string)\n</cell>\n<cell>", "\n \
    \ gsub(\", \", \" \", s)\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n", "\n\
    \  strsplit(s, ' ')[[1]]\n}\n</cell>\n<cell>", "\n  s <- strsplit(s, ', |\\\\\
    s')[[1]]\n  c(s)\n}\n", "\n  return(unlist(strsplit(s, ',')))\n}\n</cell>\n<cell>\n\
    words_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One, two,\
    \ three, four, five, six')\n</cell>\n<text>\nThe vector c('One', 'two', 'three',\
    \ 'four', 'five', 'six') is returned because a vector is a list of ordered items.\
    \ However, if we had only returned the list [one, two, three, four, five, six],\
    \ it would be incorrect because the order of the list items is not guaranteed.\n\
    \nIt is important to know that R will recycle values from the earlier values in\
    \ the list. For example, if we have the following list:\n\na <- 1:10\nb <- letters[1:10]\n\
    c <- c(a,b)\nIf we check c again:\n\n\n</text>\n<cell>\nc\n</cell>\n<text>\nWe\
    \ see that the recycling has occurred. Recycling occurs when the length of the\
    \ vector in a is equal to the number of items in b. This recycling occurs because\
    \ a and b are not of equal length. Recycling can be disabled by using the vector\
    \ recycle:\n\n\n</text>\n<cell>\nrecycle(c,2)\n</cell>\n<text>\nWe can also use\
    \ the repeat function to repeat vectors:\n\n\n</text>\n<cell>\nx <- 1:10\nrepeat(x,\
    \ 2)\n</cell>\n<cell>\nrepeat(x, rep(2,10))\n</cell>\n<text>\nWe also have the\
    \ repeat function, which will repeat vectors of any length.\n\n\n</text>\n<cell>\n\
    repeat <- function(x, n) {\n  return(rep(x,n))\n}\n</cell>\n<cell>\nrepeat(c(1,2,3),\
    \ 2)\n</cell>\n<text>\nIf we want to use the repeat function, we have to pass\
    \ in the number of repetitions we want to repeat it for.\n\n\n</text>\n<cell>\n\
    repeat(c(1,2,3), 10)\n</cell>\n<text>\nWe can also use recycling to repeat a list\
    \ within a list. For example, to repeat each element in a list 4 times:\n\n\n\
    </text>\n<cell>\nlist(rep(list(1:10), 4))\n</cell>\n<text>\nSimilarly, we can\
    \ repeat vectors within a list:\n\n\n</text>\n<cell>\nrep(1:10, each=4)\n</cell>\n\
    <text>\nThe same will happen if the list elements are vectors:\n\n\n</text>\n\
    <cell>\nrep(list(1:10), 4)\n</cell>\n<text>\nWe can use the transpose function\
    \ to transpose a matrix:\n\n\n</text>\n<cell>\nmatrix(1:12, ncol=2)\n</cell>\n\
    <cell", "\n    words_string <- unlist(strsplit(as.character(s), \" \"))\n    words_string\n\
    }\n", "\n  # Write your code here.\n}\n</cell>\n<cell>\nwords_string('Hi, my name\
    \ is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n\
    </cell>\n<text>\nc() returns an object of the class c(). Let's inspect this object.\n\
    \n\n</text>\n<cell>\nclass(words_string)\n</cell>\n<text>\nWe can extract components\
    \ of an R list using the functional operators $ and [[. Below we use the $ function\
    \ to extract the components of a list in the following code.\n\n\n</text>\n<cell>\n\
    words_string$`Hi`\n</cell>\n<text>\nWe can also extract components of a list using\
    \ another list in a similar manner. For example, the following code extracts the\
    \ word \"John\" from the list returned by words_string.\n\n\n</text>\n<cell>\n\
    words_string[[2]]\n</cell>\n<text>\nExercise 2\nWrite a function that extracts\
    \ all of the words between the commas and spaces in a string.  For example, given\
    \ this string:\n\n\"Hi, my name is John\"\n\nyour function should return this\
    \ vector:\n\nc('Hi', 'my', 'name', 'is', 'John')\n\n\n</text>\n<cell>", "\n  \
    \  str_split_fixed(s, ' ', simplify = TRUE)\n}\n</cell>\n<cell>", "\n  strsplit(s,\
    \ ' ')[[1]]\n}\n</cell>\n<text>\nRun the cell below to test your words_string\
    \ function on your sample string.\n\n\n</text>\n<cell>", "\n  x <- str_split(s,\
    \ ', | ')[[1]]\n  return(x)\n}\n", "\n  strsplit(s, \", | \", fixed=T)\n}\n",
  "\n    str_split(s, pattern = ',| ')\n}\n</cell>\n<text>\nTask 4.3. Define a function\
    \ named \"words_line\" that takes a string as input\nand returns the same string\
    \ with all of the words separated into lines. For example:\n>>> words_line('Hi,\
    \ my name is John')\n'Hi my name is John'\n>>> words_line('One, two, three, four,\
    \ five, six')\n'One two three four five six'\n\n</text>\n<cell>", "\n\tstrsplit(s,\
    \ ' ')[[1]]\n}\n", "\n  strsplit(s, \",\\\\s*\")[[1]]\n}\n", "\n    str_split(s,\
    \ \", | \")\n}\n", "\n  str_split(s, \" \")\n}\n</cell>\n<cell>", "\n  words <-\
    \ unlist(strsplit(s, ', ?'))\n  c(words)\n}\nwords_string('Hi, my name is John')",
  "\n  words <- strsplit(s, '[, ]+')[[1]]\n  return(words)\n}\n", "\n  gsub(\" \"\
    , \"\", s, fixed = TRUE)\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n</cell>\n<cell>",
  "\n  strsplit(s, \", \")\n}\n", "\n    # Write your code here\n}\n", "\n  strsplit(s,\
    \ ',|\\\\s+')\n}\n", "\n  strsplit(s, '[^, ]+')\n}\n", "\n    words <- unlist(strsplit(s,\
    \ ', '))\n    words\n}\nwords_string(words)\n</cell>\n<cell>", "\n  unlist(strsplit(as.character(s),\
    \ '[, ]'))\n}\n", "\n    \n    \n    str_split_all(s, split = \", \")[[1]]\n}\n\
    </cell>\n<cell>\nwords_string(s)\n</cell>\n<text>\nExpected Result:\n\nc('Hi',\
    \ 'my', 'name', 'is', 'John')\n\n\n</text>\n<text>\nd) Complete the function `words`\
    \ that takes as input a string and returns a vector containing the non-overlapping\
    \ words that are common to all the strings.\nFor example:\n\n>>> words('Hi, my\
    \ name is John')\nc('hi', 'my', 'name', 'is', 'John')\n\n\n</text>\n<cell>\nwords\
    \ <- function(s) {\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "\n    x <- str_split(s, \",|\\\\s+\"\
    )\n    x <- unlist(x)\n    return(x)\n}\n</cell>\n<text>\nQuestion 4\nConvert\
    \ the words_string function into a function that takes a string as input and returns\
    \ a vector of words.\n\n\n</text>\n<cell>", "\n    l <- strsplit(s, ',|\\\\s')\n\
    \    return(l)\n}\n", "\n  str_trim(strsplit(s, ' ')[[1]])\n}\n", "\n  strsplit(s,\
    \ \", \")\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<cell>", "\n\
    \  # Remove spaces and punctuation\n  gsub(\"[[:punct:]]\", \" \", s)\n}\n", "\n\
    \    require(stringr)\n    strsplit(s, ',') %>% unlist\n}\n", "\n    str_split(s,\
    \ \",\\\\s*\") %>% unlist %>% as.character\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nPart Two: Counting the words\nNext you will write a\
    \ function that takes in a word and returns the number of times it appears in\
    \ the given string.\n\nStep 1: Convert strings to lower case\nUse tolower() to\
    \ convert everything to lowercase\n\n\n</text>\n<cell>", "\n  sapply(str_split(s,\
    \ ',?'), function(x) unlist(strsplit(x, ' ')))\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<cell>", "\n  strsplit(s, split = \",\\\\s*\")\n}\n</cell>\n\
    <cell>\nwords_string(data)\n</cell>\n<cell>\nwords_string(data)[5]\n</cell>\n\
    <cell>\nwords_string(data)[c(6, 8, 12)]\n</cell>\n<cell>\nwords_string(data)[c(2,\
    \ 4, 9)]\n</cell>\n<text>\nChallenge\nUse sapply to create a vector that contains\
    \ the number of words from each string in data\n\n\n</text>\n<cell>", "\n  words\
    \ <- strsplit(s, split = ', '| ')[[1]]\n  return(words)\n}\n", "\n    x <- unlist(strsplit(s,',\\\
    \\s*'))\n    paste(x, collapse = ', ')\n}\n", "\n    cat(sprintf('c(\"%s\")',\
    \ paste(str_split(s, ',')[[1]], collapse = ',')), sep = ',\\n')\n}\n", "\n  words\
    \ <- strsplit(s, \",| \")\n  c(words)\n}\n", "\n    # YOUR CODE HERE\n    words\
    \ = str_split(s, ', |\\\\b')\n    # YOUR CODE HERE\n}\n", "\n  unlist(strsplit(s,','))\n\
    }\n", "\n    s <- strsplit(s, ' ')[[1]]\n    unique(sapply(s, trimws))\n}\n</cell>\n\
    <cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<text>\nTask 6 (2 points)\nThe function\
    \ c() in the code below returns a vector of all the arguments passed to it. The\
    \ function c() takes the arguments in order and concatenates them into a vector.\
    \ For example, if you call c('Hello', 'world') the output is c('Hello', 'world').\n\
    \n\n</text>\n<cell>\nc <- function(...) paste(..., collapse = ' ')\n</cell>\n\
    <text>\nLet's now test the function by running it on our example strings:\n\n\n\
    </text>\n<cell>\nc(words_string('Hi, my name is John'), words_string('One, two,\
    \ three, four, five, six'))\n</cell>\n<text>\nTask 7 (2 points)\nThe function\
    \ c() in the code below returns a vector of all the arguments passed to it. The\
    \ function c() takes the arguments in order and concatenates them into a vector.\
    \ For example, if you call c('Hello', 'world') the output is c('Hello', 'world').\n\
    \n\n</text>\n<cell>\nc <- function(...) paste(..., collapse = ' ')\n</cell>\n\
    <text>\nLet's now test the function by running it on our example strings:\n\n\n\
    </text>\n<cell>\nc(words_string('Hi, my name is John'), words_string('One, two,\
    \ three, four, five, six'))\n</cell>\n<text>\nTask 8 (2 points)\nThe function\
    \ c() in the code below returns a vector of all the arguments passed to it. The\
    \ function c() takes the arguments in order and concatenates them into a vector.\
    \ For example, if you call c('Hello', 'world') the output is c('Hello', 'world').\n\
    \n\n</text>\n<cell>\nc <- function(...) paste(..., collapse = ' ')\n</cell>\n\
    <text>\nLet's now test the function by running it on our example strings:\n\n\n\
    </text>\n<cell>\nc(words_string('Hi, my name is John'), words_string('One, two,\
    \ three, four, five, six'))\n</cell>\n<text>\nTask 9 (2 points)\nThe function\
    \ c() in the code below returns a vector of all the arguments passed to it. The\
    \ function c() takes the arguments in order and concatenates them into a vector.\
    \ For example, if you call c('Hello', 'world') the output is c('Hello', 'world').\n\
    \n\n</text>\n<cell>\n", "\n  unlist(strsplit(s, \",\"))\n}\n", "\n    str_split(s,\
    \ ', ') # commas as separators\n}\n", "\n  words <- unlist(strsplit(s, ' ', fixed\
    \ = TRUE))\n  return(words)\n}\n</cell>\n<cell>\nwords_string('Hi, my name is\
    \ John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n\
    </cell>\n<cell>\nwords_string('Hi, my name isJohn')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six, seven')\n</cell>\n<text>\nProblem 3\nYou will be\
    \ given a list of words and a vector of corresponding frequencies.\nYour task\
    \ is to find the most common words and to return a vector of corresponding frequencies.\
    \ \nYou can assume that your list of words is much longer than your vector of\
    \ corresponding frequencies.\nYou are only allowed to return one element of your\
    \ vector of corresponding frequencies for each word.\n\n</text>\n<cell>", "\n\
    \  words <- unlist(strsplit(s, ', '))\n  c(words)\n}\nwords_string('Hi, my name\
    \ is John')", "\n    stopifnot(length(s) >= 1)\n    stopifnot(!grepl(',|\\\\s|\\\
    \\.', s))\n    words <- strsplit(s, ', | \\\\s')[[1]]\n    return(words)\n}\n",
  "\n    # Your code here\n    gregexpr('[^A-Za-z]+', s)\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nVectorize the word list\nA word list is a vector containing\
    \ all of the words in the data set that you are working with. Although there are\
    \ other word lists that are much more common than you might think, you can also\
    \ get word lists by using the functions from above. Try using the function you\
    \ wrote to get a word list.\n\n\n</text>\n<cell>", "\n  require(stringr)\n  str_split(s,\
    \ ',\\\\s*')[[1]]\n}\n</cell>\n<cell>", "\n    l <- strsplit(s, ' ')[[1]]\n  \
    \  c(l)\n}\nwords_string('Hi, my name is John')\nwords_string('One, two, three,\
    \ four, five, six')\n</cell>\n<cell>", "\n  s <- strsplit(s, \" \")[[1]]\n  sapply(s,\
    \ as.character)\n}\n</cell>\n<cell>", "\n  x <- strsplit(s, ', | ,')[[1]]\n  c(x,\
    \ \"\\n\")\n}\nwords_string('Hi, my name is John')", "\n    words <- unlist(strsplit(s,\
    \ ',\\\\s*|\\\\s*'))\n    words <- words[-which(words %in% c('', 'and', 'or'))]\n\
    \    words\n}\n</cell>\n<cell>", "\n  words <- unlist(strsplit(gsub(',','',s),\
    \ ' '))\n  return(words)\n}\n", "\n  stopifnot(length(nchar(s)) == 1)\n  tokens\
    \ <- strsplit(s, ' ')[[1]]\n  sapply(tokens, function(x) paste(unlist(strsplit(x,\
    \ '')), collapse = ' '))\n}\n</cell>\n<text>\nThe next function we will write\
    \ is called words_vector. It takes as input a string and a word and returns an\
    \ index which specifies the input string's word vector where the word appears.\n\
    \nThe output is an integer which specifies a location in an input string's word\
    \ vector. For example, words_vector(\"hi my name is\", \"name\") should output\
    \ 2 because that's the third word in the input string that appears in position\
    \ 1 of the input word vector.\n\nWe have provided a skeleton for you. Good luck!\n\
    \n\n</text>\n<cell>", "\n  splits <- strsplit(s, \", | \")\n  c(splits[[1]], splits[[2]],\
    \ splits[[3]], splits[[4]], splits[[5]])\n}\n", "\n  # Split the string into words\n\
    \  word_list <- strsplit(s, split = ' ')[[1]]\n  # Return a vector\n  c(word_list)\n\
    }\n\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<cell>", "\n  # Write the code here.\n\
    \  words <- unlist(strsplit(s, split = ',')) # Split into words seperated by commas\n\
    \  words <- unlist(strsplit(words, split = ' ')) # Split into words seperated\
    \ by space\n  words <- c('One', 'two', 'three', 'four', 'five', 'six')\n  words\
    \ <- words[!is.na(words)]\n  words\n}\n\nwords_string(str_x)", "\n  words <- str_split(s,\
    \ '\\\\W+') %>% unlist() %>% str_to_lower() %>% paste(collapse=' ')\n  words <-\
    \ c(words, ' ')\n  return(words)\n}\n", "\n  # Write your code here\n  strsplit(s,\
    \ ',\\\\s*')\n}\n", "\n  strsplit(s, ',\\\\s*', fixed = TRUE)\n}\n</cell>\n<cell>",
  "\n  x <- strsplit(s, ', |\\\\s+')\n  do.call(c, x)\n}\n", "\n  # Write your function\
    \ here\n  words <- unlist(strsplit(s, ','))\n  words\n}", "\n  # Split up the\
    \ input string s into one word per element. Use\n  # strsplit() to do this.\n\
    \  words <- strsplit(s, ',\\\\s*')\n  # Convert each element into a vector of\
    \ characters, \n  # but don't return any element if the element is empty.\n  c(unlist(words),\
    \ unlist(words[sapply(words, length)==0]))\n}\n</code>\nThe next step is to define\
    \ a function word_vector() that takes a vector of words and returns its vocabulary\
    \ as a character vector.\n<code>\nword_vector <- function(words) {\n  # Your code\
    \ goes here! Use `words_string()`\n  # to convert the words to a character vector.\
    \ \n  # The vector should contain the word itself, \n  # but not the punctuation\
    \ marks or spaces.\n  words <- words_string(words)\n  sort(unique(words))\n}\n\
    </code>\nThe above function will work fine with your example, but it will not\
    \ do so with punctuation marks like quotation marks (the quotation marks in the\
    \ example above would be considered a separate word). In order to deal with this,\
    \ we can use the function strsplit() to split up the input string into words and\
    \ then remove punctuation marks from the returned vector of words:\n<code>\nword_vector\
    \ <- function(words) {\n  # Your code goes here! Use `words_string()`\n  # to\
    \ convert the words to a character vector. \n  # The vector should contain the\
    \ word itself, \n  # but not the punctuation marks or spaces.\n  words <- words_string(words)\n\
    \  sort(unique(words))\n  words <- unlist(strsplit(words, \",\\\\s*\"))\n  words\
    \ <- words[!is.na(words)]\n  sort(unique(words))\n}\n</code>\nThe function word_vector()\
    \ now returns the same output as your example, but it will not return punctuation\
    \ marks. To do this, we can use str_split():\n<code>\nword_vector <- function(words)\
    \ {\n  # Your code goes here! Use `words_string()`\n  # to convert the words to\
    \ a character vector. \n  # The vector should contain the word itself, \n  # but\
    \ not the punctuation marks or spaces.\n  words <- words_string(words)\n  sort(unique(words))\n\
    \  words <- unlist(str_split(words, \",\\\\s*\"))\n  words <- words[!is.na(words)]\n\
    \  sort(unique(words))\n}\n</code>\nThe function word_vector() now returns the\
    \ same output as your example, but it will not return punctuation marks. To do\
    \ this, we can use str_split():\n<code>\nwords_string <- function(s) {\n  # Split\
    \ up the input string s into one word per element. Use\n  # strsplit() to do this.\n\
    \  words <- strsplit(s, ',\\\\s*')", "\n  # YOUR CODE HERE\n}\n", "\n  # Remove\
    \ leading and trailing spaces, split on comma\n  split(gsub('(\\\\s+)|(,+)', '',\
    \ s), ' ')[[1]]\n}\n", "\n  x = strsplit(s, \" \")\n  return(x)\n}\n</cell>\n\
    <cell>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\nNow that you have\
    \ used the words_string function in the code cell above, run the cell below to\
    \ test it.\n\n\n</text>\n<cell>", "\n  str_split(s, ', | ')\n}\n", "\n  str_split(s,\
    \ '[,|\\\\s]')[[1]]\n}\n", "\n    s <- unlist(strsplit(s, ','))\n    s <- sapply(s,\
    \ function(x) gsub('\\\\s+', ' ', x))\n    s[!is.na(s)]\n}\n", "\n  unlist(strsplit(s,\
    \ ','))\n}\nwords_string(text1)\nwords_string(text2)\nwords_string(text3)\nwords_string(text4)\n\
    words_string(text5)\nwords_string(text6)\n", "\n  return(str_split(s, ','))\n\
    }\n</cell>\n<code language=conda-root-py>\nwords_string('Hi, my name is John')\n\
    </cell>\n<code language=conda-root-py>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nThe code below loads a file into the global environment\
    \ with dplyr's read_csv. The file path below points to a file called words.csv\
    \ that is stored in the same directory as the notebook.\n\n\n</text>\n<code language=conda-root-py>",
  "\n  words <- strsplit(as.character(s), ' ')\n  return(words)\n}\n</cell>\n<code\
    \ language=conda-env-Anaconda3-py>\nwords_string('Hi, my name is John')\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<text>\nThe above functions return a\
    \ list of vectors containing the words. But why a list of vectors and not just\
    \ a list of words? To turn words into vectors, we need to use a function (vectorize)\
    \ that converts each word into a vector. After that, we can unlist the vectors.\
    \ As a reminder, the vectorized version of words is vectorized(words).\n\n\n</text>\n\
    <code language=conda-env-Anaconda3-py>", "\n  strsplit(s, ',\\\\s*', fixed = TRUE)\n\
    }\n</code>\nYou can then use your function to split the string into words and\
    \ return a character vector:\n<code>\nlibrary(stringi)\nstri_split_fixed('Hi,\
    \ my name is John', ',')", "\n  strsplit(s, \",\\\\s*\")[[1]]\n}\n", "\n  strsplit(s,\
    \ \",\\\\s*|\\\\s+\") %>% unlist\n}\n", "\n  words <- unlist(strsplit(as.character(s),\
    \ ','))\n  return(words)\n}\n", "\n  strsplit(s, ', ')\n}\n", "\n    words <-\
    \ unlist(strsplit(s, ','))\n    c(words) # return the words\n}\n</cell>\n<text>\n\
    Q5\nNext, write a function that takes a vector of words (the output of your words_string\n\
    function) and returns the most frequent word. Using the count_words function\n\
    in Module 1, this should work like this:\n\n\n</text>\n<cell>\nmost_frequent_word\
    \ <- function(words_string) {\n    count_words(words_string)[which.max(count_words(words_string))]\n\
    }\n</cell>\n<text>\nQ6\nFinally, write a function that takes a vector of words\
    \ (the output of your words_string\nfunction) and returns the most frequent word.\
    \ Using the count_words function\nin Module 1, this should work like this:\n\n\
    \n</text>\n<cell>\nmost_frequent_word <- function(words_string) {\n    count_words(words_string)[which.max(count_words(words_string))]\n\
    }\n</cell>\n<text>\nQ7\nNext, write a function that takes a vector of words (the\
    \ output of your words_string\nfunction) and returns a boolean indicating whether\
    \ a given word is present in\nthe given vector. Using the count_words function\
    \ in Module 1, this should work like this:\n\n\n</text>\n<cell>\nis_present <-\
    \ function(words_string, word) {\n    is_present_in_list(word, words_string)\n\
    }\n</cell>\n<text>\nQ8\nFinally, write a function that takes a vector of words\
    \ (the output of your words_string\nfunction) and returns a boolean indicating\
    \ whether a given word is present in\nthe given vector. Using the count_words\
    \ function in Module 1, this should work like this:\n\n\n</text>\n<cell>\nis_present\
    \ <- function(words_string, word) {\n    is_present_in_list(word, words_string)\n\
    }\n</cell>\n<text>\nQuestion 9\nWrite a function called unique_words that, given\
    \ a list of words, removes\nduplicate words in the list.\n\nUsing the words_string\
    \ function from Module 1, this should work like this:\n\n\n</text>\n<cell>\nunique_words\
    \ <- function(words_string) {\n    unique(words_string)\n}\n</cell>\n<text>\n\
    Question 10\nWrite a function called unique_words that, given a list of words,\
    \ removes\nduplicate words in the list.\n\nUsing the words_string function from\
    \ Module 1, this should work like this:\n\n\n</text>\n<cell>\nunique_words <-\
    \ function(words_string) {\n    unique(words_string)\n}\n</cell>\n<text>\nQuestion\
    \ 11\nWrite a function called unique_words that, given a list of words, removes\n\
    duplicate words in the list.\n\nUsing the words_string function from Module 1,\
    \ this should work like this:\n\n\n</text>\n<cell>\nunique_words <- function(words_string)\
    \ {\n    unique(words_string)\n}\n</cell", "\n    c <- strsplit(s, ', | ')\n \
    \   apply(c, 2, paste, collapse = ',')\n}\n</cell>\n<cell>", "\n  strsplit(gsub(',\
    \ ','|,',s), split = ',')\n}\n", "\n  # This code assumes input is a string, rather\
    \ than a vector. Strings\n  # should be separated with a comma (',') or space\
    \ (' ').\n  s <- unlist(strsplit(s, ','))\n  s\n}\n</code>\nI hope this helps.\n\
    <|/ a dscore=1 tags=list,r,stringr,split |>\n<| a tags=list,r,stringr,split dscore=0\
    \ |>\nI am not sure I completely understand what you are asking for. Perhaps this\
    \ will help. I defined a function, which will split a sentence into a list of\
    \ words by a comma. Then, I defined a function which can take that list of words\
    \ and split it into a list of sentences, by spaces. Finally, I defined a function,\
    \ that takes the list of sentences and a list of words and returns a list of sentences.\
    \ I put all this together into a single function that will split a sentence into\
    \ a list of words, by comma, and also a list of sentences, by spaces.\n<code>\n\
    sentence <- 'Hi, my name is John'\n\nsplit_sentence <- function(sentence) {\n\
    \  words <- strsplit(sentence, \" \")\n  words <- unlist(words)\n  sentence <-\
    \ c()\n  for (i in 1:length(words)){\n    if (i == 1) {\n      sentence <- c(sentence,\
    \ words[i])\n    } else {\n      sentence <- c(sentence, \", \", words[i])\n \
    \   }\n  }\n  words <- gsub(\",\",\" \", sentence)\n  words <- strsplit(words,\
    \ \" \")\n  sentences <- c()\n  for (i in 1:length(words)){\n    if (i == 1) {\n\
    \      sentences <- c(sentences, words[i])\n    } else {\n      sentences <- c(sentences,\
    \ \", \", words[i])\n    }\n  }\n  sentences <- gsub(\",\",\" \", sentences)\n\
    \  return(list(words = words, sentences = sentences))\n}\nsplit_sentence(sentence)\n\
    </code>\n<|/ a |>\n<| a |>\nI figured out a way in R using regex and lapply functions.\
    \ I made a function that splits sentence into words and then splits each word\
    \ into its component parts using regex expression. I then combined the two lists\
    \ using the lapply function.\n<code>\nsplit_sentence_words <- function(sentence)\
    \ {\n  words <- unlist(strsplit(sentence, ' '))\n  words <- lapply(words, function(word)\
    \ {\n    word <- unlist(strsplit(word, ','))\n    word <- paste0(word, collapse\
    \ = ' ')\n  })\n  words <- sapply(words, function(word) {\n    word <- unlist(strsplit(word,\
    \ ' '))\n    word <- paste0(word, collapse = ' ')\n  })\n  return(", "\n    words_list\
    \ <- strsplit(s, ' ')[[1]]\n    c(words_list,\n      words_list[length(words_list)])\n\
    }\n", "\n  words <- strsplit(s, \", | \")[[1]]\n  words[[1]]\n}\n", "\n  words\
    \ <- strsplit(s, ',\\\\s*|[[:space:]]')[[1]]\n  return(words)\n}\n</cell>\n<code\
    \ language=conda-env-Anaconda3-py>\nwords_string('Hi, my name is John')\n</cell>\n\
    <code language=conda-env-Anaconda3-py>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<code language=conda-env-Anaconda3-py>", "\n  strsplit(s, split\
    \ = ',|\\\\s+')\n}\n</cell>\n<code language=conda-env-R_igraph-r>", "\n  require(stringr)\n\
    \  s %>%\n    strsplit(., \",\") %>%\n    unlist() %>%\n    trimws()\n}\n", "\n\
    \  words <- strsplit(s, ' ')\n  c(words)\n}\n", "\n  stringr::str_split(s, ',\
    \ | ')\n}\n", "\n  strsplit(s, ' ')\n}\n</cell>\n<code language=julia-1.5>", "\n\
    \  strsplit(s, \", ?\")\n}", "\n  # Make sure you use nchar, not length\n  # (it\
    \ has a different meaning!)\n  # Make sure you use grep, not strsplit\n  # (it\
    \ has a different meaning!)\n  strsplit(s, ' ', fixed = TRUE)\n}\nwords_string(words_string)\n",
  "\n\tstr_split(s, ', |\\\\s+')\n}\n", "\n    s <- strsplit(s, ',\\\\s*')[[1]]\n\
    \    paste(sapply(s, function(x) paste(sapply(strsplit(x, ' ')), collapse = '\
    \ ')), collapse = ' ')\n}\n</code>\nUsing these functions, your task is quite\
    \ simple:\n<code>\nlibrary(tidyverse)\n", "\n  # Remove spaces\n  s_stripped <-\
    \ gsub(\" \", \"\", s)\n  # Remove punctuation\n  s_punct <- gsub(\"[[:punct:]]\"\
    , \"\", s_stripped)\n  # Split using commas\n  s_split <- strsplit(s_punct, \"\
    [[:space:]]+\")\n  # Remove empty strings\n  s_split2 <- Filter(function(x) !is.null(x),\
    \ s_split)\n  # Restore spaces\n  s_split <- unlist(s_split2)\n  # Create vector\
    \ c()\n  c(s_split)\n}\n</cell>\n<cell>", "\n  # Write your function here\n}",
  "\n  strsplit(s, \",|\\\\s|\")\n}\n</code>\nThe second step now is to create a vector\
    \ of word vectors:\n<code>", "\n  strsplit(s, \", | , \", fixed = TRUE)\n}\n</cell>\n\
    <text>\nReturn to task 1.3 of the Exercises.\n\n\n</text>\n<text>\nTask 1.4 :\
    \ R-Type\nWrite a function that returns a vector with all the elements of x sorted\
    \ in ascending order.\nThe vector returned should have as many elements as there\
    \ are unique elements in x. \nFor example, if the vector x is c('a', 'a', 'b'),\
    \ the function should return a vector c('a', 'b', 'a').\n\n\n</text>\n<cell>",
  "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  # TODO: Your code here\n  return(s)\n}\n\
    </cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<cell>",
  "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  s <- gsub(\" \", \"\", s)\n  strsplit(s,\
    \ \", \")\n}\n", "\n  x <- strsplit(s, ' ')\n  out <- NULL\n  for (i in 1:length(x))\
    \ {\n    out <- c(out, c(x[i]))\n  }\n  out\n}\n</cell>\n<text>\nNow we can try\
    \ it out!\n\n\n</text>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nAlright\
    \ now that we know what to do we need a way to count the frequency of words in\
    \ our text. Luckily there is a handy function that does just that!\n\n\n</text>\n\
    <cell>", "\n  strsplit(s, split = ', | ')\n}", "\n  strsplit(s, \" \")\n}\n</cell>\n\
    <cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<text>\nExercise: Write a function that\
    \ takes as an argument a vector of strings and returns only those strings whose\
    \ lengths equal 5.\n\n\n</text>\n<cell>", "\n  words <- strsplit(s, ',')[[1]]\n\
    \  c(words)\n}\n", "\n  x <- str_split(s, '\\\\s{2,}')\n  unlist(x)\n}\n\nwords_string(\n\
    'I am a happy camper! Please enjoy!'\n)", "\n  strsplit(s, \", | \")\n}\n", "\n\
    \  s <- gsub('\\\\s+', ',', s, perl = TRUE)\n  unlist(strsplit(s, ','))\n}\n",
  "\n    words <- strsplit(s, \", \")\n    words <- unlist(words)\n    words <- gsub(\"\
    \ \", \"\", words)\n    return(words)\n}\n", "\n    # Remove whitespace characters\n\
    \    s = gsub('\\\\s+', '', s)\n    # Split on commas or spaces\n    words = strsplit(s,\
    \ ',|\\\\s+')\n    # Remove unwanted characters\n    words = lapply(words, function(x)\
    \ gsub('[[:punct:]]', '', x))\n    # Return vector\n    words[[1]]\n}\n</cell>\n\
    <cell>\nwords_string(\"Hi, my name is John\")\n</cell>\n<cell>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nAnd now for a function that\
    \ returns true if the input is a palindrome:\n\n\n</text>\n<cell>", "\n  strsplit(s,\
    \ \", |, \", fixed=TRUE)\n}\n</cell>\n<text>\nExercise 6\nDefine a function that\
    \ takes a string as a parameter and returns the number of characters in the string.\
    \ For example, words_string('Hi, my name is John') would return c(8, 0, 5, 9).\n\
    \n\n</text>\n<cell>", "\n  strsplit(s, split = ', ') | strsplit(s, split = ' ')\n\
    }\n", "\n  words <- unlist(strsplit(s, ',| '))\n  return(words)\n}\n", "\n\tstr_split(s,\
    \ '[, ]+')\n}\n", "\n  # YOUR CODE HERE\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nProblem 4\n\n</text>\n<text>\nYou will be given a vector\
    \ of the words ['Hi', 'my', 'name', 'is', 'John']. Your task is to\ndetermine\
    \ if the vector contains the words one, two, three, four, and five in the exact\
    \ order.\n\nNote that there is a slight inconsistency with how these words are\
    \ written in the vector: two, three, four are written twice and five is written\
    \ three times. Your task is to check whether they occur in the exact same order\
    \ as they appear in the given vector.\n\n\n</text>\n<cell>", "\n    stopifnot(nchar(s)\
    \ > 0)\n    words <- unlist(strsplit(s, ','))\n    stopifnot(length(words) ==\
    \ length(unique(words)))\n    words\n}\n", "\n  s <- gsub(\"[,\\\\s]\", \"\",\
    \ s)\n  c(unlist(strsplit(s, \" \")))\n}\n</cell>\n<cell>\nwords_string(\"Hello,\
    \ my name is Bob\")\n</cell>\n<text>\nExercise: Use the words_string function\
    \ to create an index object containing the unique words from every strings in\
    \ the text_data column of the text_data_train dataframe. Do NOT store the index\
    \ as a separate column of the dataframe. Print the index.\n\n\n</text>\n<cell>\n\
    text_data_train$index <- ... # Your code here\ntext_data_train\n</cell>\n<text>\n\
    Exercise: Use the words_string function to create an index object containing the\
    \ unique words from every strings in the text_data column of the text_data_train\
    \ dataframe. Do NOT store the index as a separate column of the dataframe. Print\
    \ the index.\n\n\n</text>\n<cell>\ntext_data_train$index <- ... # Your code here\n\
    text_data_train\n</cell>\n<text>\nExercise: Use the words_string function to create\
    \ an index object containing the unique words from every strings in the text_data\
    \ column of the text_data_train dataframe. Do NOT store the index as a separate\
    \ column of the dataframe. Print the index.\n\n\n</text>\n<cell>\ntext_data_train$index\
    \ <- ... # Your code here\ntext_data_train\n</cell>\n<text>\nExercise: Use the\
    \ words_string function to create an index object containing the unique words\
    \ from every strings in the text_data column of the text_data_train dataframe.\
    \ Do NOT store the index as a separate column of the dataframe. Print the index.\n\
    \n\n</text>\n<cell>\ntext_data_train$index <- ... # Your code here\ntext_data_train\n\
    </cell>\n<text>\nExercise: Use the words_string function to create an index object\
    \ containing the unique words from every strings in the text_data column of the\
    \ text_data_train dataframe. Do NOT store the index as a separate column of the\
    \ dataframe. Print the index.\n\n\n</text>\n<cell>\ntext_data_train$index <- ...\
    \ # Your code here\ntext_data_train\n</cell>\n<text>\nExercise: Use the words_string\
    \ function to create an index object containing the unique words from every strings\
    \ in the text_data column of the text_data_train dataframe. Do NOT store the index\
    \ as a separate column of the dataframe. Print the index.\n\n\n</text>\n<cell>\n\
    text_data_train$index <- ... # Your code here\ntext_data_train\n</cell>\n<text>\n\
    Exercise: Use the words_string function to create an index object containing the\
    \ unique words from every strings in the text_data column of the text_data_train\
    \ dataframe. Do NOT store the index as a separate column of the dataframe. Print\
    \ the index.\n\n\n</text>\n<cell>\ntext_data_train$index <- ... # ", "\n  # Write\
    \ your code here\n  str_split(s,' ')\n}\n</cell>\n<cell>\nwords_string('Hi, my\
    \ name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<cell>", "\n  unlist(strsplit(s, \", |(?<=\\\\w)\", perl=TRUE))\n\
    }\nwords_string('Hi, my name is John')", "\n  unlist(strsplit(s, \",|\\\\s+\"\
    ))\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  unlist(strsplit(s, ','))\n\
    }\n", "\n    l <- strsplit(s, split = ',')\n    l <- unlist(l)\n    l <- trimws(l)\n\
    \    l <- gsub(' ', '', l)\n    c(l)\n}\n</cell>\n<cell>\nwords_string('Hi, my\
    \ name is John')\nwords_string('One, two, three, four, five, six')\n</cell>\n\
    <text>\nExercise 9: String splitting with regexes\n\n</text>\n<text>\nRegex to\
    \ extract numbers from strings\n\n</text>\n<text>\nRegex to extract numbers from\
    \ strings\n\n</text>\n<cell>", "\n  # Your code here!\n  words <- strsplit(s,\
    \ \" \")[[1]]\n  return(words)\n}\n</cell>\n<text>\nQuestion 4\nWrite a function\
    \ that converts numbers between 0 and 1 to a binary string with n bits, where\
    \ n = 8.  The returned string will have n characters, and the characters will\
    \ represent numbers between 0 and 1.  Only use base R packages, i.e. no packages\
    \ other than base R, etc.  Use the following test cases:\n\nbin_string(0, 8) should\
    \ return '0000000'\nbin_string(0.5, 8) should return '0110000'\nbin_string(1,\
    \ 8) should return '10000000'\n\nThe function should return a string containing\
    \ the binary representation of numbers between 0 and 1. If the number is outside\
    \ the range 0 to 1, then it should return an empty string.\n\n\n</text>\n<cell>",
  "\n  str_split(s, \", |\\\\s\")\n}\n", "\n  str_split(s, ' ')\n}\n", "\n  s <- unlist(strsplit(s,\
    \ split = \",| \"))\n  return(s)\n}\n", "\n  # Split s by comma into a list of\
    \ words.\n  words <- strsplit(s, ',\\\\s*')\n\n  # Create a vector of words and\
    \ return.\n  c(words) \n}\n", "\n  sapply(strsplit(s, \", \", fixed = TRUE), c)\n\
    }\n", "\n    s <- strsplit(s, ', | ')\n    lapply(s, function(x) unlist(strsplit(x,\
    \ ' ')))\n}\n", "\n    stopifnot(grepl('[^A-Za-z,]', s))\n\n    s <- gsub(',|\\\
    \\s|^\\\\s*|\\\\s*$', '', s)\n    words <- strsplit(s, ' ')[[1]]\n    vec <- unique(words)\n\
    \    vec[!is.na(vec)]\n}\n</cell>\n<cell>", "\n  s <- strsplit(s, ',| ')\n  return(as.vector(s))\n\
    }\n", "\n  strsplit(s, ',\\\\s*') %>% \n    set_names(strsplit(s, '\\\\s+'))\n\
    }\n</cell>\n<cell>", "\n  # split on space, or comma\n  str_split(s, \", | \"\
    )\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\n\
    words_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise: Create\
    \ vectors words$a, words$b, words$c, words$d, words$e of the words in string.\
    \ words$a is c('Hi', 'my', 'name', 'is', 'John').\n\n</text>\n<cell>", "\n  words\
    \ <- unlist(strsplit(s, split = ','))\n  return(words)\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nGreat! You are done with the words() function. Let's\
    \ try something more challenging: extracting emotion lexicon from Google News\
    \ headlines.\n\n\n</text>\n<text>\nPart 3: Build a frequency table\nThe objective\
    \ of this part of the assignment is to build a frequency table using the counts\
    \ obtained from the word counts function you created in the previous part. The\
    \ function word_count returns a named vector where the keys are the words and\
    \ the values are the counts of the words. This function should return a named\
    \ vector that looks like:\n\n$$\n\\text{freqs} = \\begin{bmatrix}\n\\text{You}&584\\\
    \n\\text{are}&128\\\n\\text{happy}&615\n\\end{bmatrix}\n$$\n\nwhere $freqs$ is\
    \ a frequency table of the words $you$, ${are}$, ${happy}$ in the text $text$.\n\
    \nThe second cell shows how you can explore the structure of the word_count output\
    \ using a combination of the str and head functions:\n\n\n</text>\n<cell>\nword_count(words_string('Hi,\
    \ my name is John'))\n</cell>\n<cell>\nstr(word_count(words_string('Hi, my name\
    \ is John')))\n</cell>\n<cell>\nhead(word_count(words_string('Hi, my name is John')))\n\
    </cell>\n<text>\nThe structure of the word_count output above is what is called\
    \ a list. The str function converts the list into a vector by concatenating the\
    \ unnamed list elements into a string. We can do this with str and head:\n\n\n\
    </text>\n<cell>\nstr(head(word_count(words_string('Hi, my name is John'))))\n\
    </cell>\n<text>\nWe see that the first list element consists of the vector ['Hi',\
    \ 584]. The str and head functions give us more information if we provide the\
    \ index of the list element:\n\n\n</text>\n<cell>\nstr(head(word_count(words_string('Hi,\
    \ my name is John')), 2))\n</cell>\n<text>\nWe can see that the first list element\
    \ consists of the vector ['Hi', 584], the second list element consists of the\
    \ vector ['my', 128], and the third list element consists of the vector ['name',\
    \ 615]. Let's now create a frequency table:\n\n\n</text>\n<cell>\nfreqs <- word_count(words_string('Hi,\
    \ my name is John'))\n\nfreqs\n</cell", "\n  s <- tolower(s)\n  words <- str_split(s,\
    \ '[:[:space:]]')\n  words <- sort(words)\n  return(words)\n}\n</cell>\n<text>\n\
    Let's try our function\n\n\n</text>\n<cell>\nwords_string('One, two, three, four,\
    \ five, six')\n</cell>\n<text>\nTo convert a string into a vector using our function\
    \ we just need to run it on the string and extract the output as follows:\n\n\n\
    </text>\n<cell>\nc(words_string('One, two, three, four, five, six'))\n</cell>\n\
    <text>\nYour turn: Write a function that will remove all punctuation from a string.\
    \ Then, apply it to your strings. Be sure to convert the output to a lower case\
    \ before returning the output. See if you can do this in one line.\n\nNOTE: This\
    \ code removes everything from punctuation. To remove punctuation from a string,\
    \ see this stack overflow post\n\n\n</text>\n<cell>", "\n  # Convert the string\
    \ to upper case\n  s <- toupper(s)\n\n  # Split the string into its words\n  split(s,\
    \ trimws(strsplit(s, ', ?[, ]+')[[1]]))\n}\n</cell>\n<code language=conda-root-py>",
  "\n  sapply(unlist(strsplit(s, \",\")), function(x) unlist(strsplit(x, \" \")))\n\
    }\nwords_string(text)\n</cell>\n<text>\nQuestion 6\nAfter implementing the function\
    \ words_string, run your function by submitting it to the submit file in the next\
    \ cell. Note that the function will take quite awhile to run and will use a lot\
    \ of memory (about 5 MB).\n\nAfter you submit the function, click the 'Submit\
    \ Answers' button below. This will trigger the grading process. Once you are finished\
    \ and happy with your function, click the 'Save and Checkpoint' buttons above\
    \ the output cell. This will save your function and checkpoint. Running your function\
    \ step by step will give you a better understanding of whats happening behind\
    \ the scenes.\n\nThe output of your function should give you a set of words separated\
    \ by spaces that looks like this:\nc(\"hi\",\"my\",\"name\",\"is\",\"john\")\n\
    \nHINT: You will not be able to test your function on the grading buttons.\n\n\
    \n</text>\n<cell>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\nQuestion\
    \ 7\nWe have provided a function that can convert a sentiment (a number from 0\
    \ to 1) to a word. Fill in the code below to convert it to a word.\n\n\n</text>\n\
    <cell>\nword_sentiment <- function(s) {\n  ifelse(s == 0,\n         \"negative\"\
    ,\n         ifelse(s == 1,\n                \"positive\",\n                \"\
    neutral\"))\n}\nword_sentiment(0)\n</cell>\n<text>\nQuestion 8\nNow that you have\
    \ written a function that converts a sentiment (a number from 0 to 1) to a word,\
    \ you can use it on the sentence \"I hated you!\" to get the word \"hated\". Fill\
    \ in the code below to call your function word_sentiment on the input string and\
    \ store the result in a variable named word_sentiment.\n\n\n</text>\n<cell>\n\
    word_sentiment(\"I hated you!\")\n</cell>\n<text>\nQuestion 9\nFinally, use the\
    \ word_sentiment function to run the following cell, which should return the sentence\
    \ \"I hated you!\".\n\n\n</text>\n<cell>\nwords <- words_string(text) # Replace\
    \ 'text' with your text\nwords[[1]]\n</cell>\n<text>\n\nPart 2:  Stemming\n\n\
    </text>\n<text>\nQuestion 10\nYou will be using \"lemmatization\" techniques to\
    \ simplify the words in your corpus. You will then use these techniques to remove\
    \ common suffixes and prefixes. You will do this to create a stemmer, which you\
    \ will later use to remove common root words from your tokenized corpus.\n\n\n\
    </text>", "\n  x <- strsplit(s, ', | ')\n  unlist(x)\n}\n", "\n  words <- unlist(strsplit(s,\
    \ ','))\n  c(words)\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n\
    </cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\n\
    Exercise: Word counts\nLet's write a function that takes a list of words and returns\
    \ a list containing the word counts. For example:\n>>> word_counts(['Hi my name\
    \ is John', 'How are you today?'])\nc('Hi' = 1, 'my' = 1, 'name' = 1, 'is' = 1,\
    \ 'John' = 1, 'today' = 1, 'are' = 1, 'you' = 1, '?')\nWrite a function that takes\
    \ a list of words and returns a vector of the word counts, where each element\
    \ is the number of times that word appears in the list.\n\n</text>\n<cell>\nword_counts\
    \ <- function(s) {\n  c(unlist(strsplit(s, ','))) %>% # Unlist to make it a vector\n\
    \    unique() %>% # Remove duplicates\n    length() %>% # Get length\n}\n</cell>\n\
    <cell>\nword_counts(['Hi my name is John', 'How are you today?'])\n</cell>\n<cell>\n\
    word_counts(words_string('Hi, my name is John'))\n</cell>\n<cell>\nword_counts(words_string('One,\
    \ two, three, four, five, six'))\n</cell>\n<text>\nExercise: Write a function\
    \ to return a vector containing all the words that appear at least once in the\
    \ provided string.\nWrite a function that returns a vector that is the same length\
    \ as the input vector and contains all the words that appear at least once in\
    \ the input vector.\n\n</text>\n<cell>", "\n  strsplit(s, \", \")\n}\n</cell>\n\
    <code language=conda-env-R7.2-noAMI-py>", "\n  s <- unlist(strsplit(s, ','))\n\
    \  c(s)\n}\n</cell>\n<text>\nAs a reminder, use ?words_string to view the documentation\
    \ for the function words_string.\n\n\n</text>\n<text>\nExercise 9\nInstructions:\
    \ Implement words_vector which takes in a corpus of documents, and returns the\
    \ vectors $X$ and $Y$ where $X \\in \\mathbb{R}^D$ and $Y \\in \\mathbb{R}`.\n\
    \n\n</text>\n<text>\nThe function word_count from earlier has been implemented\
    \ for you.\n\n\n</text>\n<cell>", "\n  \n  s <- unlist(strsplit(s, ','))\n  \n\
    \  return(s)\n  \n}\n\n", "\n  strsplit(s, ',')\n}\n", "\n  # Split the string\
    \ into words separated by spaces or commas\n  strsplit(s, ' ')[[1]]\n}\n", "\n\
    \    s <- strsplit(s, ', |, ')\n    c(unlist(s), sapply(s, toString))\n}\n</cell>\n\
    <cell>", "\n  # Remove spaces and commas from string\n  s <- gsub(' ', '', s)\n\
    \  s <- gsub(',', '', s)\n\n  # Split string into words\n  w <- strsplit(s, '\
    \ ')\n\n  # Return words vector\n  c(w)\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<cell>\nwords_string('One,two,three,four,five,six')\n</cell>\n\
    <text>\nThe above function was written to be used with strings. If you use it\
    \ with other objects, you'll get an error. You can read more about R's string\
    \ processing functions and their differences from the other languages here.\n\n\
    \n</text>\n<text>\nExercise 3\nWrite a function that returns the number of words\
    \ in a string:\n\n\n</text>\n<cell>", "\n  strsplit(s, split = ', |\\\\s|\\\\\
    ,')\n}\n", "\n  # Write your code here\n  strsplit(s, \" \")\n}\n", "\n  stopifnot(length(s)\
    \ == 0)\n  stopifnot(grepl(\",\\\\s*|\\\\s*,\", s))\n  words = strsplit(s, \"\
    , ?\\\\s*\")[[1]]\n  words[which.max(strsplit(s, \", ?\\\\s*\")[[1]] == \"One\"\
    )]\n}\n</cell>\n<code language=R [r]>\nwords_string(\"\")\n</cell>\n<code language=R\
    \ [r]>\nwords_string(\" \")\n</cell>\n<code language=R [r]>\nwords_string(\"One,\
    \ two, three, four, five, six, seven\")\n</cell>\n<code language=R [r]>\nwords_string(\"\
    One, two, three, four, five, six, seven, eight, nine\")\n</cell>\n<code language=R\
    \ [r]>\nwords_string(\"One, two, three, four, five, six, seven, eight, nine, ten\"\
    )\n</cell>\n<text>\nFinally use these functions to write a function that can take\
    \ a vector and return another vector with the word counts that match with those\
    \ terms.\n\n\n</text>\n<code language=R [r]>", "\n  strsplit(s, ',\\\\s*')\n}\n",
  "\n  split_string <- strsplit(s,\"\\\\,|\\\\s\")\n  return(split_string)\n}\n",
  "\n  # Write your code here\n  x <- strsplit(s, \", \")[[1]]\n  y <- unlist(strsplit(s,\
    \ \", \")[[1]])\n  return(y)\n}\n", "\n  # TODO\n  return(list(s))\n}", "\n  strsplit(s,\
    \ ' ')[[1]]\n}\n</cell>\n<cell>", "\n  strsplit(s, \",\\\\s*\")\n}\n</cell>\n\
    <cell>\nwords_string(\"Hi, my name is John\")\n</cell>\n<cell>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nProblem 3b\nThe function\
    \ words converts all the words in the given sentence to lowercase. Words are separated\
    \ by spaces. You'll need to use an apply-family function to do the conversion.\n\
    \nYour function should look like:\n\nmy_function <- function(s) {\n  strsplit(s,\
    \ \",\\\\s*\")\n}\n\n</text>\n<cell>\nmy_function <- function(s) {\n  strsplit(s,\
    \ \",\\\\s*\")\n}\n</cell>\n<cell>\nhead(words_string(\"Hi, my name is John\"\
    ), 10)\n</cell>\n<cell>\nhead(my_function(\"Hi, my name is John\"), 10)\n</cell>\n\
    <text>\nProblem 3c\nApply your function to the list below to see how it works.\n\
    \n[\"one\", \" two\", \" three\"]\n\n\n</text>\n<cell>\nmy_function <- function(s)\
    \ {\n  strsplit(s, \",\\\\s*\")\n}\n\nmy_function(\"one, two three\")\n</cell>\n\
    <text>\nProblem 3d\nWrite a function to return the number of words in a string.\
    \ You may want to use strsplit as you did before.\n\n\n</text>\n<cell>\nmy_function\
    \ <- function(s) {\n  strsplit(s, \",\\\\s*\")\n  \n  length(s)\n}\n\nmy_function(\"\
    one, two three\")\n</cell>\n<text>\nProblem 3e\nCreate a function my_function\
    \ which takes in a vector of words and counts how many times each word occurs.\
    \ Your function should return a vector with each element containing the number\
    \ of times that word occurs in the input vector.\n\nYour function should look\
    \ like:\n\nmy_function <- function(x) {\n  x <- c(\"one\", \" two\", \" three\"\
    )\n  strsplit(x, \",\\\\s*\")\n}\n\n</text>\n<cell>\nmy_function <- function(x)\
    \ {\n  strsplit(x, \",\\\\s*\")\n  length(x)\n}\n\nmy_function(c(\"one\", \" two\"\
    , \" three\"))\n</cell>\n<text>\nProblem 3f\nUsing the vector you created above,\
    \ create a function which returns a vector. The function should have the form:\n\
    \nnew_vector <- function(x) {\n  new_vector <- c()\n  new_vector <- append(new_vector,\
    \ x)\n  new_vector\n}\n\n</text>\n<cell>\nmy_function <- function(x) {\n  new_vector\
    \ <- c()\n  new_vector <- append(new_vector, x)", "\n    words_ <- str_split(s,\
    \ ' ')\n    words_ <- words_[[1]]\n    for(i in seq_along(words_) - 1) {\n   \
    \     words_[i] <- paste(words_[i], collapse=' ')\n    }\n    return(words_)\n\
    }\n", "\n  words <- strsplit(s, ',\\\\s*')\n  words[[1]]\n}\n</code>\nStep 4:\
    \ Implement a function that splits words into a vector by punctuation (comma and\
    \ space)\n<code>", "\n    require(stringr)\n    str_split(s, ',') # Use str_split\
    \ to split with comma into words\n}\n</cell>\n<code language=conda-env-udacity-py>\n\
    words_string('Hi, my name is John')\n</cell>\n<text>\nTest your words_string function\
    \ below. Make sure you call the words_string function above on every element in\
    \ the vector of strings you plan on analyzing.\n\n\n</text>\n<code language=conda-env-udacity-py>",
  "\n  s <- strsplit(s, ', | ,')[[1]]\n  s <- strsplit(s, '\\\\s')[[1]]\n  return(s)\n\
    }\n</cell>\n<text>\nOnce you have defined words_string, your task here is to define\
    \ bag_of_words, and then run your test cases below.\n\n\n</text>\n<cell>", "\n\
    \  words <- unlist(strsplit(s, \",| \"))\n  return(words)\n}\n", "\n  # Separate\
    \ by spaces or commas\n  words <- strsplit(s, ' ')[[1]]\n  # Split into individual\
    \ words and return the list\n  c(words)\n}\n</cell>\n<cell>", "\n    require(stringr)\n\
    \    str_split(s, \", \")[[1]]\n}\n", "\n  strsplit(s, ',') # Split on commas\n\
    }\n", "\n  strsplit(s, split = \", | \")[[1]]\n}\n</cell>\n<cell>", "\n  x <-\
    \ unlist(strsplit(s, split = ','))\n  c(x)\n}\n", "\n  strsplit(s, ',| ')[[1]]\n\
    }\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n    s <- strsplit(s, split = ',|\\\
    \\s')[[1]]\n    c(s)\n}\n", "\n  s <- strsplit(s, \", | , | \\t\", fixed = TRUE)\n\
    \  c(unlist(s), length(s))\n}\n", "\n  strsplit(s, \", | \")\n}\n\nwords_string('Hi,\
    \ my name is John')", "\n  sapply(strsplit(s, ' '), c)\n}\n", "\n  strsplit(s,\
    \ ' ')[[1]]\n}\n</cell>\n<text>\nGreat! Your words_string function seems to work.\
    \ Now it's time to write a test that verifies that your function works correctly.\
    \ Let's create a string that has a couple of typos:\n\n\n</text>\n<cell>\nincorrectly_formatted_string\
    \ <- 'Hi, my name isJohn'\n</cell>\n<cell>\nwords_string(incorrectly_formatted_string)\n\
    </cell>\n<text>\nHmm. That doesn't seem right. How about this one?\n\n\n</text>\n\
    <cell>\nincorrectly_formatted_string2 <- 'Hi, my name isJohn'\nwords_string(incorrectly_formatted_string2)\n\
    </cell>\n<text>\nThat appears to be just as wrong as the first one. Can you think\
    \ of any reason why?\n\nRemember that in Python (and in general), strings are\
    \ just collections of characters. In particular, string slicing works the same\
    \ as it does in R.\n\n\n</text>\n<cell>\n\"Hi, my name is John\"[1:10]\n</cell>\n\
    <text>\nLet's test our function against a few cases:\n\n\n</text>\n<cell>\nwords_string('One\
    \ fish, two fish, red fish, blue fish, green fish, yellow fish, purple fish, orange\
    \ fish, white fish, citrus fish, black fish, raccoon fish')\n</cell>\n<cell>\n\
    words_string('One fish, two fish, red fish, blue fish, green fish, yellow fish,\
    \ purple fish, orange fish, white fish, citrus fish, black fish, raccoon fish')[1:10]\n\
    </cell>\n<text>\nIt appears we have the right idea; we simply need to split up\
    \ the comma-separated string into a list of strings.\n\nLet's make sure our function\
    \ works as expected:\n\n\n</text>\n<cell>\nword_list('One fish, two fish, red\
    \ fish, blue fish, green fish, yellow fish, purple fish, orange fish, white fish,\
    \ citrus fish, black fish, raccoon fish')[1:10]\n</cell>\n<text>\nWe did it! But\
    \ we have a problem: the result is a list of strings, not a single string. Can\
    \ you guess why?\n\nThe function str_split() from the stringr package splits a\
    \ string into a list of strings, according to a delimiter (by default, the whitespace\
    \ character is a delimiter). Let's try this with the default delimiter set to\
    \ ',':\n\n\n</text>\n<cell>\nstr_split('One fish, two fish, red fish, blue fish, ",
  "\n    x <- strsplit(s, '[, ]+')\n    c <- sapply(x, c)\n}\n</code>\nThe strsplit()\
    \ function splits a string up into words and returns a list with the words. Then\
    \ sapply() will take a list and return a character vector (c()) of those values.\
    \ c() will concatenate them all together.\n<code>", "\n  s <- unlist(strsplit(s,\
    \ split = ', | '))\n  c(s)\n}\n", "\n  \n  sapply(strsplit(s, \", \"), '[', 1)\n\
    }\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<text>\n2.1.1 Count words\nNext, you'll\
    \ write a function to count the number of words in a given string.\n\nThe variable\
    \ s is a vector of strings. For each string in the vector, you want to count the\
    \ number of words in it.\n\nThe function word_count takes in a list of words and\
    \ a vector of strings and outputs a vector of the same length as the number of\
    \ rows in your word count vector.\n\nSo if the word count vector is:\n\nc(1, 2,\
    \ 3, 4, 5)\n\nand the input vector is:\n\nc(\"Hello\", \"Hello, my name is John\"\
    , \"Yo\", \"Hello, John, how are you?\")\n\nthe output should be:\n\nc(1, 2, 3,\
    \ 5, 4)\n\nInstructions\nWrite a for loop that iterates through the word count\
    \ vector and increments count[i] by 1 for each word in the string at position\
    \ i in the word count vector. Finally, return the output from your function.\n\
    \nThe function should look like:\n\n\n</text>\n<cell>\nword_count <- function(word_count_vector,\
    \ input_vector) {\n  \n  # Initialize output vector\n  output <- c()\n  \n  #\
    \ Loop through word count vector\n  for (i in 1:length(word_count_vector)) {\n\
    \    \n    # Increment count for each word in the input string\n    \n  }\n  \n\
    \  return(output)\n}\n</cell>\n<cell>\nword_count(word_count_vector, input_vector)\n\
    </cell>\n<text>\n2.1.2 Sum words in each string\nNext, you'll write a function\
    \ that calculates the number of occurrences of a word in a string.\n\nThe function\
    \ word_count takes in a list of words and a vector of strings and outputs a vector\
    \ of the same length as the number of rows in your word count vector.\n\nSo if\
    \ the word count vector is:\n\nc(1, 2, 3, 4, 5)\n\nand the input vector is:\n\n\
    c(\"Hello\", \"Hello, my name is John\", \"Yo\", \"Hello, John, how are you?\"\
    )\n\nthe output should be:\n\nc(1, 2, 3, 4, 5)\n\nInstructions\nWrite a for loop\
    \ that iterates through the word count vector and increments count[i] by 1 for\
    \ each word in the string at position i in the word count vector. Finally, return\
    \ the output from your function.\n\nThe function should look like:\n\n\n</text>\n\
    <cell>\nword_count <- function(word_count_vector, input_vector) {\n  \n  # Initialize\
    \ output vector\n  output <- c()\n  \n  # Loop through word count vector\n  for\
    \ (i in 1:length(", "\n  strsplit(s, ',') # split the string into a list of words\n\
    }\nwords_string('Hi, my name is John')", "\n  str_split(s, ',\\\\s*|\\\\s++')[[1]]\n\
    }", "\n    words <- strsplit(s, ',| ')\n    c(\"c(\", paste(words, collapse =\
    \ \", c(\"), \"), \"))\"\n}\nwords_string('Hi, my name is John')\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<text>\nExercise: Make another function\
    \ that returns the sum of the numbers in a vector using vectorized code\n\n\n\
    </text>\n<cell>", "\n  words <- strsplit(s, split=' ')\n  paste0(unlist(words),\
    \ collapse=' ')\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise\
    \ 2: Complete the function below.\n\n</text>\n<cell>", "\n  # Split string into\
    \ words\n  words <- strsplit(s, ' ')[[1]]\n  # Remove spaces preceeding or following\
    \ words\n  words <- gsub('^\\\\s*|\\\\s*$', '', words)\n  # Return vector of words\n\
    \  words\n}\n", "\n    read.csv(text = s) %>% \n        mutate(words = strsplit(words,\
    \ ',')) %>% \n        unnest()\n}\n", "\n  s <- unlist(strsplit(s, ',|;'))\n \
    \ sapply(s, function(x) strsplit(x, \" \"))\n}\n</cell>\n<text>\nExercise 2\n\
    Try out the code from exercise 1, but this time use a different test string\n\n\
    \n</text>\n<cell>", "\n  # The split() function splits a string by a given delimiter,\n\
    \  # and returns a list with each element of the list being\n  # a token of the\
    \ original string. The second argument is\n  # used to indicate to split should\
    \ return a list of words.\n  # So if you would like to split by commas, use this\n\
    \  # split(s, ',')\n  str_split(s, ' ')\n}\n", "\n    # Write your code here\n\
    \    words <- strsplit(s, ',\\\\s*')\n    lapply(words, function(x) c(x, rep(\"\
    \", nchar(words[[x]]) - nchar(x))))\n}\n", "\n  str_split(s, ',\\\\s*')\n}\n",
  "\n\tstr_split(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string(\"One, two,\
    \ three, four, five, six\")\n</cell>\n<cell>\nwords_string(\"Hi, my name is John\"\
    )\n</cell>\n<text>\nWrite a function get_words that takes a vector of strings\
    \ and returns a single string containing all the words from each string.\n\nThe\
    \ function should concatenate all the strings that you get back in a single string.\n\
    \nYour function should work with any vector of strings, even ones that don't have\
    \ any words in common. You may assume that each vector has at least one word.\n\
    \n\n</text>\n<cell>\nget_words <- function(strings) {\n\tpaste(sort(unlist(strings)),\
    \ collapse = \" \")\n}\n</cell>\n<cell>\nget_words(c(\"Hi, my name is John\",\
    \ \"One, two, three, four, five, six\"))\n</cell>\n<text>\nTest your function\
    \ by running the cells below.\n\n\n</text>\n<cell>"]
stop_tokens:
- "\n#"
- "\n```"
