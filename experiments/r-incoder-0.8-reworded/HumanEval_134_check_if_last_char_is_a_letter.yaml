name: HumanEval_134_check_if_last_char_is_a_letter
language: r
prompt: "# Create a function that returns TRUE if the last character\n# of a given\
  \ string is an alphabetical character and is not\n# a part of a word, and FALSE\
  \ otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n\
  # >>> check_if_last_char_is_a_letter('apple pie')\n# FALSE\n# >>> check_if_last_char_is_a_letter('apple\
  \ pi e')\n# TRUE\n# >>> check_if_last_char_is_a_letter('apple pi e ')\n# FALSE\n\
  # >>> check_if_last_char_is_a_letter('')\n# FALSE\ncheck_if_last_char_is_a_letter\
  \ <- function(txt) {"
tests: "test_humaneval <- function() {\ncandidate <- check_if_last_char_is_a_letter\n\
  \    if(!identical(candidate('apple'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('apple\
  \ pi e'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('eeeee'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('A'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('Pumpkin\
  \ pie '), FALSE)){quit('no', 1)}\n    if(!identical(candidate('Pumpkin pie 1'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(''), FALSE)){quit('no', 1)}\n\
  \    if(!identical(candidate('eeeee e '), FALSE)){quit('no', 1)}\n    if(!identical(candidate('apple\
  \ pie'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('apple pi e '), FALSE)){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  tmp <- str_split(txt, ' ')[[1]]\n  paste(substr(tmp, (nchar(tmp)\
    \ - 1L), nchar(tmp)), collapse = '') %in% letters()\n}\n</code>\n<|/ a tags=regex,r\
    \ |>\n<| a tags=regex,r dscore=0 |>\nYou can use a regex that looks for characters\
    \ after the second space:\n<code>\n> grepl(\"^\\\\S+\\\\s\\\\w+\\\\s[^\\\\s]+$\"\
    , text, perl=TRUE)\n[1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\
    \  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE\n</code>\n<|/ a |>\n<| a dscore=0\
    \ tags=regex,r |>\nI think you can also use gsub\n<code>\ndf <- data.frame(str=c(\"\
    This is a test. Nothing here but more here\",\n                      \"This is\
    \ another test\",\n                      \"The next test is here\",\n        \
    \              \"This test is not here\"))\n\ngsub(\"^([^ ]*\\\\s){2}[^ ]*$\"\
    , \"\\\\1\", df$str)", "\n  txt %in% unlist(strsplit(txt, ' ')[[1]][-1])\n}\n\
    </cell>\n<cell>", "\n  substr(txt,nchar(txt),nchar(txt))[-1] != \" \" &&\n   \
    \ substr(txt,nchar(txt),nchar(txt))[-1] !='\\\\w'\n}\n", "\n\t\n\tif(!is.character(txt))\
    \ return(FALSE)\n\t\n\tword <- str_split(txt, \" \")[[1]] #split by space\n\t\
    word <- word[length(word)] #get last word\n\tword <- word[!grepl(\"[^A-Za-z]\"\
    , word)] #remove non alphabetical char\n\t\n\tif(length(word) == 1) return(TRUE)\n\
    \treturn(FALSE)\n}\n", "\n  txt_length <- nchar(txt)\n  txt_is_letter <- TRUE\n\
    \  last_char <- txt[txt_length - 1]\n  txt_is_letter <- txt_is_letter &\n    (is_alpha(last_char))\n\
    \  txt_is_letter <- txt_is_letter &\n    (!is_word_start(last_char))\n  txt_is_letter\n\
    }\n", "\n  # Return a TRUE or FALSE. Based on whether the last character is\n\
    \  # an alphabet character or not and a word that is not at the last\n  # position.\n\
    \  txt <- gsub(\"[[:punct:]]\", \"\", txt)\n  if (nchar(txt) == 1 & nchar(txt)\
    \ != 1) {\n    # As the last character is a character, return TRUE or FALSE\n\
    \    return(FALSE)\n  } else if (nchar(txt) == 1) {\n    # As the last character\
    \ is not a character, return TRUE or FALSE\n    return(TRUE)\n  } else {\n   \
    \ # As the last character is a word character\n    # Examples: \n    # >>> check_if_last_char_is_a_letter('apple\
    \ pie apples')\n    # TRUE\n    # >>> check_if_last_char_is_a_letter('apple pie\
    \ apple')\n    # FALSE\n    # >>> check_if_last_char_is_a_letter('apple pies apple')\n\
    \    # TRUE\n    # >>> check_if_last_char_is_a_letter('apple pie apple')\n   \
    \ # TRUE\n    # >>> check_if_last_char_is_a_letter('apples')\n    # TRUE\n   \
    \ # >>> check_if_last_char_is_a_letter('apple')\n    # FALSE\n    return(grepl(\"\
    [a-z]+$\", txt))\n  }\n}\n", "\n  # Check whether the last character is a letter\n\
    \  last_char_of_txt <- substr(txt, length(txt), 1)\n  # Split txt into single\
    \ words\n  words_split <- strsplit(txt, \" \")[[1]]\n  # Loop through each word\n\
    \  is_last_char <- FALSE\n  for(word_elem in words_split){\n    # If the last\
    \ character of word is alphabet\n    if(grepl(\"[a-zA-Z]$\", word_elem)){\n  \
    \    is_last_char <- TRUE\n      break\n    }\n  }\n  # Return TRUE if last character\
    \ is not part of a word\n  return(!is_last_char)\n}\n</cell>\n<cell>", "\n  txt\
    \ <- gsub('[[:punct:]]','', txt)\n  txt <- gsub('[[:alnum:]]','', txt)\n  txt\
    \ <- gsub('[[:lower:]]','', txt)\n  txt <- gsub('[[:upper:]]','', txt)\n  txt\
    \ <- gsub('[[:word:]]','', txt)\n  txt <- gsub('[[:digit:]]','', txt)\n  txt <-\
    \ gsub('[[:blank:]]','', txt)\n  txt <- gsub('[[:punct:]]','', txt)\n  txt <-\
    \ gsub('[[:space:]]','', txt)\n  txt <- gsub(' +',' ', txt)\n  txt <- tolower(txt)\n\
    \  txt <- gsub('[^A-Za-z ]', '', txt)\n  txt <- nchar(txt) == 1\n  return(txt)\n\
    }\n", "\n  txt <- tolower(txt)\n  # Return TRUE if the last character is a letter\
    \ and\n  # not part of a word\n  grepl(\"[[:alpha:]]$\", txt) & !grepl(\"[[:alpha:]]\\\
    \\W$\", txt)\n}\n", "\n  txt <- tolower(txt)\n  x <- strsplit(txt, \" \")[[1]]\n\
    \  y <- unlist(strsplit(x, \"\")[[1]])\n  z <- strsplit(txt, \" \")[[2]]\n  y\
    \ <- y[-length(y)]\n  z <- z[-length(z)]\n  z <- strsplit(z, \"\")[[1]]\n  y <-\
    \ y[!x %in% z]\n  y <- paste0(y, collapse=' ')\n  z <- z[!x %in% y]\n  z <- paste0(z,\
    \ collapse=' ')\n  x <- x[!x %in% z]\n  x <- paste0(x, collapse=' ')\n  return(x\
    \ != \"\")\n}", "\n  str_1 <- gsub(\"[^A-Za-z]$\", \"\", txt)\n  str_2 <- gsub(\"\
    ^[^A-Za-z]\", \"\", str_1)\n  str_3 <- paste(str_1, str_2, sep = \"\")\n  str_4\
    \ <- str_sub(str_3, 1, str_nchar(str_3) - 1)\n  str_4 <- str_sub(str_4, 1, str_length(str_4)\
    \ - 1)\n  str_4 %in% \"aeiouy\" & (str_4 %in% \"a\" | str_4 %in% \"e\" | str_4\
    \ %in% \"i\" | str_4 %in% \"o\" | str_4 %in% \"u\")\n}\n", "\n  result <- nchar(txt)\
    \ == 1 && ! nchar(txt) %in% strsplit(tolower(txt), ' ')[[1]][3]\n  return(result)\n\
    }", "\n  lastchar <- nchar(txt)\n  ifelse(lastchar == 1 && nchar(txt) != 1 &&\
    \ nchar(txt) != 2,\n         FALSE, TRUE)\n}\n</cell>\n<cell>", "\n  txt %>% \n\
    \    substr(1, nchar(txt)) %>% \n    str_split() %>% \n    str_length() %>% \n\
    \    . %>% \n    which(. > 1) %>% \n    logical()\n}\n", "\n  # Your code here\n\
    \  # return (TRUE)\n  return (FALSE)\n}\n", "\n  txt2 <- gsub(pattern = \"\\\\\
    s+\", replacement = \" \", x = txt)\n  txt3 <- gsub(pattern = \"^.*[^[:alpha:]]$\"\
    , replacement = txt, x = txt2)\n  return(txt3 == txt)\n}\n", "\n  txt <- gsub(\"\
    \ $\", \"\", txt)\n  txt <- gsub(\"^ *\", \"\", txt)\n  txt <- gsub(\" *$\", \"\
    \", txt)\n  txt <- tolower(txt)\n  txt <- gsub(\"([a-z])([A-Z])\", \"\\\\1 \\\\\
    2\", txt)\n  txt <- gsub(\"([A-Z])([A-Z][a-z])\", \"\\\\1 \\\\2\", txt)\n  txt\
    \ <- gsub(\"([a-z])([a-z])\", \"\\\\1 \\\\2\", txt)\n  txt <- gsub(\"([a-z])(\\\
    \\d+)\", \"\\\\1 \\\\2\", txt)\n  txt <- gsub(\"(\\\\d+)(\\\\d+)\", \"\\\\1 \\\
    \\2\", txt)\n  return(grepl(\"^[a-z][a-z]+$\", txt))\n}\n</code>\nTesting:\n<code>\n\
    check_if_last_char_is_a_letter('apple pie')", "\n  nchar(txt) == 1 &&\n  !str_split(txt,\
    \ ' ')[[1]][nchar(str_split(txt, ' ')[[1]][-1])]\n}\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter('apple\
    \ pie')\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter('apple pi e')\n</cell>\n\
    <cell>\ncheck_if_last_char_is_a_letter('apple pi e ')\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter('')\n\
    </cell>\n<cell>", "\n  txt %in% unlist(strsplit(txt, ' ')[[1]][-1]) &\n    !str_detect(txt,\
    \ paste(unlist(strsplit(txt, ' ')), collapse = '|'))\n}\n</code>\n<|/ a dscore=2\
    \ tags=r |>\n<| a dscore=1 tags=r |>\n<code>\nlibrary(stringr)\n\nx <- 'apple\
    \ pi e '\nword1 <- str_split(x,' ')[[1]][length(strsplit(x,' ')[[1]])]\nword2\
    \ <- str_split(x,' ')[[1]][-1]\n\nword1\n\n[1] \"apple\" \"pie\"\nword2\n\n[1]\
    \ \"pie\"\n</code>\n<|/ a |>\n<| c |>\nThanks I like your answer, but I think\
    \ you might have misunderstood my question. I don't need word1 to be `apple pie`\
    \ but rather `apple pie e`.\n<|/ c |>\n<| c |>\nThe OP has `apple pie e` in the\
    \ example, so I assumed it to be the desired output.\n<|/ c |>\n<| c |>\nThanks,\
    \ I do apologize if it was unclear from the question.\n<|/ c |>\n<| a dscore=1\
    \ |>\nHere is an option using str_remove from stringr\n<code>\nlibrary(stringr)\n\
    str_remove(paste(str_split(x, '\\\\s+')[[1]][-1], collapse=\" \"), \"\\\\s\")",
  "\n    txt <- gsub(\" \", \"\", txt)\n    txt <- gsub(\"$\", \"\", txt)\n    txt\
    \ <- txt[!(endsWith(txt, \" \"))]\n    txt <- gsub(\"^.$\", \"\", txt)\n    txt\
    \ <- txt[!(startsWith(txt, \" \"))]\n    txt <- paste0(txt, \" \")\n    txt <-\
    \ paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n\
    \    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt,\
    \ txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt,\
    \ txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt,\
    \ txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt,\
    \ txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt,\
    \ txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt,\
    \ txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt,\
    \ txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt,\
    \ txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt,\
    \ txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt,\
    \ txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt,\
    \ txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt, txt)\n    txt <- paste0(txt,\
    \ txt)\n    txt <- paste0(", "\n  # Code starts here:\n  # Create a vector of\
    \ \"words\" from txt.\n  words <- unlist(strsplit(txt, ' '))\n  # Create a logical\
    \ vector, indicating whether each word in words\n  # ends with a letter or not.\
    \ \n  end_with_letter <- sapply(words, function(x) {\n    substr(x, nchar(x),\
    \ nchar(x)) == 1\n  })\n  # Return TRUE if all words in words ends with a letter,\
    \ and FALSE\n  # otherwise.\n  all(end_with_letter)\n}\n", "\n    txt <- tolower(txt)\n\
    \    last <- nchar(txt)\n    last <- last - 1\n    word <- substr(txt, 1, last)\n\
    \    word <- unlist(strsplit(word, \" \"))\n    letters <- c(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\",\n      \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\",\n      \"y\", \"z\")\n    word <- word %in% letters\n    return(word)\n}\n",
  "\n    txt <- as.character(txt)\n    word_start <- str_length(txt) - str_count(txt,\
    \ \" \")\n    word <- unlist(str_split(txt, \" \"))[word_start:length(txt)]\n\
    \    char_inside_word <- paste(word, collapse=\"\")\n    return(!grepl(\"^[A-Za-z]*$\"\
    , char_inside_word))\n}\n", "\n    txt <- as.character(txt)\n    txt <- txt[txt]\n\
    \    txt <- txt[!substr(txt,nchar(txt)-1, nchar(txt))] #drop the last character\n\
    \    txt <- gsub(\" \",\"\",txt)\n    return (any(grepl(\"[A-Za-z]+$\",txt)))\n\
    }\n</cell>\n<cell>", "\n  if(length(txt)==0) return(FALSE)\n  if(!is.character(txt))\
    \ return(FALSE)\n  if(!length(gregexpr('[a-zA-Z ]+',txt)[[1]][2])) return(FALSE)\n\
    \  return(TRUE)\n}\n", "\n  txt <- gsub(\"[^[:alpha:]]\", \"\", txt)\n  txt %in%\
    \ c(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"e\", \"e\")\n}\n", "\n  return(length(txt)>=1\
    \ && !(substr(txt, length(txt)-1, length(txt))==\" \")) \n}\n", "\n  txt %in%\
    \ unlist(strsplit(as.character(txt), split = ' '))[length(strsplit(as.character(txt),\
    \ split = ' '))]\n}\n", "\n  result <- strsplit(txt, \" \")[[1]]\n  result[nchar(result)\
    \ == 1 && result[nchar(result) == 1] == result[[nchar(result)]] & result[nchar(result)\
    \ > 1]]\n}\n", "\n  x <- unlist(strsplit(txt, \" \"))\n  if(length(x) > 0 & x[length(x)]\
    \ == \"\") {\n    x <- x[length(x)-1]\n  }\n  grepl(letter, x, ignore.case=TRUE)\n\
    }\n", "\n  if(!txt | nchar(txt) == 0) return(FALSE)\n  txt <- strsplit(txt, '\
    \ ')[[1]]\n  lastchar <- tail(txt, n = 1)\n  if(!is.character(lastchar)) return(FALSE)\n\
    \  if(nchar(lastchar) > 1) return(FALSE)\n  if(!grepl('[a-zA-Z]', lastchar)) return(FALSE)\n\
    \  return(TRUE)\n}\n</code>\n<|/ a tags=r |>\n<| a |>\nA variant on Andrew's answer.\
    \  It's a little more compact, and uses dplyr and stringr functions. \n<code>\n\
    library(dplyr)\nlibrary(stringr)\n\ncheck_if_last_char_is_a_letter <- function(x)\
    \ {\n  if (!x | nchar(x) == 0) return(FALSE)\n  x <- str_split(x, ' ') %>% unlist\
    \ %>% tail(1)\n  if(nchar(x) > 1) return(FALSE)\n  if(!str_detect(x, '\\\\p{L}'))\
    \ return(FALSE)\n  return(TRUE)\n}\n", "\n  txt <- strsplit(txt, ' ')[[1]]\n \
    \ n <- nchar(txt)\n  n <- n[n >= 1]\n  txt <- substr(txt, 1, n - 1)\n  txt <-\
    \ paste0(txt, collapse = ' ')\n  txt <- unlist(str_split(txt, ' '))\n  txt <-\
    \ txt[nchar(sapply(txt, function(x) x)) == 1]\n  txt <- ifelse(length(nchar(gsub('[[:punct:]]',\
    \ '', txt))) == 0, '', txt)\n  txt <- ifelse(length(nchar(gsub('[[:upper:]]',\
    \ '', txt))) == 0, '', txt)\n  txt <- ifelse(length(nchar(gsub('[[:lower:]]',\
    \ '', txt))) == 0, '', txt)\n  return(as.logical(ifelse(length(txt) == 1, 'TRUE',\
    \ 'FALSE')))\n}\n</cell>\n<cell>", "\n  txt <- as.character(txt)\n  is.na(txt)\
    \ <- nchar(txt) == 1 && \n               !grepl('\\\\w+$', txt)\n  !is.na(txt)\n\
    }", "\n  txt <- str_trim(txt)\n  if (length(txt) == 0) {\n    return(FALSE)\n\
    \  }\n  return(\n    grepl(\"[A-Za-z]$\", txt)\n  )\n}\n", "\n  return(last(txt)\
    \ != tolower(last(txt)))\n}\n</cell>\n<text>\n3. Apply check_if_last_char_is_a_letter\
    \ to all columns in data_for_modeling\nRun the cell below to check your work.\n\
    \n\n</text>\n<cell>", "\n  # We assume that the last character is always a letter\n\
    \  # and that it is not a part of a word\n  txt <- substr(txt, -1)\n  pattern\
    \ <- '^[A-Za-z]+$'\n  return (grepl(pattern, txt))\n}\n</code>\nNow, we define\
    \ a list of patterns and a custom function for the replacement of strings:\n<code>",
  "\n  \n  if(length(txt)<1) return(FALSE)\n  \n  if(grepl('[A-Za-z ]+$',txt)) return(TRUE)\n\
    \  \n  return(FALSE)\n}\n\n", "\n\tgsub(\"[^a-zA-z0-9\\s]\", \"\", txt)\n}\n",
  "\n  # If txt is empty then return FALSE.\n  # If txt length is 0 then return FALSE.\n\
    \  # If txt length is 1 then return TRUE.\n  if (length(txt) == 0 || length(txt)\
    \ == 1) {\n    return(FALSE)\n  }\n  \n  # Create a vector with all the last characters\
    \ in txt separated by space.\n  last_chars <- strsplit(txt, ' ')[[1]]\n  \n  #\
    \ Create a vector with all the characters of last_chars.\n  chars <- strsplit(last_chars,\
    \ \"\")[[1]]\n  \n  # Return TRUE if all the elements of chars are alphabetic.\n\
    \  all(chars == sort(chars))\n}\n", "\n  # Convert text to lower case\n  txt<-tolower(txt)\n\
    \  last_char <- txt[length(txt)]\n  \n  # If last char is not a letter\n  ifelse(\n\
    \    !(\n      grepl(\n        pattern = \"[^a-z]\",\n        x = txt\n      ),\n\
    \      x = TRUE\n    ),\n    # return TRUE\n    TRUE, FALSE\n  )\n}\n</cell>\n\
    <cell>", "\n    chars <- strsplit(txt, ' ')[[1]]\n    length(chars) == 1 & grepl('[A-Za-z]',\
    \ chars[length(chars)])\n}\n", "\n  txt <- strsplit(txt, \" \")[[1]]\n  txt[length(txt)]\
    \ <- \"\"\n  substr(txt, end = nchar(txt)-1, stopifnot(not(anyNA(txt))))\n}\n",
  "\n  # Initialize a counter\n  count_char <- 0\n  # Loop over each character in\
    \ the string\n  for (i in txt) {\n    count_char <- count_char + 1\n  }\n  # Return\
    \ TRUE if last character is a letter or is NOT a part of a word\n  return(count_char\
    \ > 0 & str_sub(txt, -1) != '\\\\s')\n}\n</code>\n<|/ a tags=r,regex |>\n<| a\
    \ tags=r,regex |>\nHere's a base R option:\n<code>\nx <- \"apple pie is fun\"\n\
    \ngrepl(\"\\\\b[^\\\\w]$\", x)", "\n  if (length(txt) == 0) return(FALSE)\n  if\
    \ (str_detect(txt, \"\\\\W$\") || str_detect(txt, \"\\\\W\") || str_detect(txt,\
    \ \"\\\\s\")) return(FALSE)\n  return(TRUE)\n}\n\n", "\n  # Only look at last\
    \ character\n  last_char <- txt[length(txt)]\n\n  # If last character is a space\n\
    \  # the txt has 1 or more characters, return TRUE or FALSE\n  if (last_char ==\
    \ ' ') {\n    if (length(txt) == 1) {\n      # If txt is empty, the txt has 1\
    \ or more spaces, return TRUE or FALSE\n      return (TRUE)\n    } else {\n  \
    \    # If txt has 1 or more spaces, return FALSE since last char not a letter\n\
    \      return (FALSE)\n    }\n  }\n\n  # If the last character is not a space,\
    \ it is NOT a letter\n  # so return FALSE\n  # Examples:\n  # >>> check_if_last_char_is_a_letter('a')\n\
    \  # FALSE\n  # >>> check_if_last_char_is_a_letter('aa')\n  # FALSE\n  # >>> check_if_last_char_is_a_letter('ab')\n\
    \  # FALSE\n  # >>> check_if_last_char_is_a_letter('abc')\n  # FALSE\n  # >>>\
    \ check_if_last_char_is_a_letter('ab c')\n  # FALSE\n  # >>> check_if_last_char_is_a_letter('ab\
    \ c ')\n  # TRUE\n  # >>> check_if_last_char_is_a_letter('')\n  # FALSE\n  return\
    \ (FALSE)\n}\n", "\n  txt <- unlist(strsplit(txt, split=' '))\n  last_char <-\
    \ tail(txt, 1)\n  return(ifelse(\n    grepl('^[A-Za-z]', last_char),\n    TRUE,\n\
    \    FALSE\n  ))\n}\n", "\n  n <- nchar(txt)\n  txt <- substr(txt, n - 1, 1)\n\
    \  txt <- tolower(txt)\n  txt <- toupper(txt)\n  txt <- txt[nchar(txt) == 0]\n\
    \  txt %in% c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"\
    J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"\
    U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n}\n", "\n  # Make sure the string is\
    \ non-empty\n  if (! nchar(txt)) return(FALSE)\n  # Make sure the last character\
    \ is a letter\n  if (txt[nchar(txt)] != ' ') return(FALSE)\n  # Check if any word\
    \ is present at the end\n  word <- unlist(strsplit(txt, ' '))\n  return(any(grepl('[a-zA-Z]+$',\
    \ word)))\n}\n", "\n  require(stringr)\n  txt <- tolower(txt)\n  txt <- str_replace_all(txt,\
    \ pattern = \"[^A-Za-z]\", \"\")\n  return(substr(txt, (nchar(txt)), nchar(txt))\
    \ == \"\")\n}\n", "\n  if(!txt || nchar(txt) < 1 || !str_detect(txt, fixed(\"\
    \ \")) || !str_detect(txt, fixed(\" \"))) return(FALSE)\n  x <- strsplit(txt,\
    \ ' ')[[1]]\n  x1 <- tolower(x[nchar(x)])\n  if(!x1 %in% c(\"a\",\"e\",\"i\",\"\
    o\",\"u\")) return(FALSE)\n  return(TRUE)\n}\n", "\n  txt <- gsub(' +', ' ', txt)\n\
    \  txt <- tolower(txt)\n  txt <- gsub(' [a-z]', '', txt)\n  return(length(txt)\
    \ == 1 && txt[length(txt)] == ' ')\n}\n", "\n  txt <- tolower(txt)\n  txt <- gsub('[[:punct:]]',\
    \ '', txt)\n  txt <- gsub('[[:upper:]]', '', txt)\n  txt <- gsub('[[:lower:]]',\
    \ '', txt)\n  txt <- paste0(txt, collapse = ' ')\n  substr(txt, length(txt), nchar(txt))[length(txt)]\
    \ == ' '\n}\n", "\n  txt <- tolower(txt)\n  return(grepl('[^a-zA-z]',txt) & !grepl('[^a-zA-z]',substr(txt,nchar(txt),nchar(txt))))\n\
    }\n", "\n  substr(txt, length(txt)-1, 1) %in% letters[1:26]\n}\n", "\n    txt\
    \ <- txt[!is.na(txt)]\n    txt <- txt[!nchar(txt) == 1]\n    txt <- txt[!nchar(txt)\
    \ == 0]\n    txt <- paste0(txt, collapse = ' ')\n    txt <- tolower(txt)\n   \
    \ txt <- unlist(strsplit(txt, ' '))\n    txt <- txt[nchar(txt) == 1]\n    txt\
    \ <- paste0(txt, collapse = ' ')\n    txt <- tolower(txt)\n    txt <- unlist(strsplit(txt,\
    \ ' '))\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n  \
    \  txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt)\
    \ == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n  \
    \  txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt)\
    \ == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n  \
    \  txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt)\
    \ == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n  \
    \  txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt)\
    \ == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n  \
    \  txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt)\
    \ == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n  \
    \  txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt)\
    \ == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n  \
    \  txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt)\
    \ == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n  \
    \  txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt) == 1]\n    txt <- txt[nchar(txt)\
    \ == 1]\n    ", "\n    txt <- gsub(\" \", \"\", txt)\n    txt <- tolower(txt)\n\
    \    txt <- txt[!is.na(toupper(txt))]\n    txt <- txt[!is.na(tolower(txt))]\n\
    \    return(!(substr(txt, length(txt), 1)) %in% c(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\"))\n}\n", "\n  strsplit(txt, ' ')[[1]][nchar(txt)] != ''\n}\n",
  "\n  last <- substr(txt, length(txt), nchar(txt))\n  last <- last[last != ' ']\n\
    \  last <- last[last != '-']\n  last <- last[last != '_']\n  last <- last[last\
    \ != '*']\n  last <- last[last != ' ']\n  last <- last[last != '-']\n  last <-\
    \ last[last != '_']\n  last <- last[last != '*']\n  last <- last[last != ' ']\n\
    \  last <- last[last != '-']\n  last <- last[last != '_']\n  last <- last[last\
    \ != '*']\n  last <- last[last != ' ']\n  last <- last[last != '-']\n  last <-\
    \ last[last != '_']\n  last <- last[last != '*']\n  last <- last[last != ' ']\n\
    \  last <- last[last != '-']\n  last <- last[last != '_']\n  last <- last[last\
    \ != '*']\n  last <- last[last != ' ']\n  last <- last[last != '-']\n  last <-\
    \ last[last != '_']\n  last <- last[last != '*']\n  last <- last[last != ' ']\n\
    \  last <- last[last != '-']\n  last <- last[last != '_']\n  last <- last[last\
    \ != '*']\n  last <- last[last != ' ']\n  last <- last[last != '-']\n  last <-\
    \ last[last != '_']\n  last <- last[last != '*']\n  last <- last[last != ' ']\n\
    \  last <- last[last != '-']\n  last <- last[last != '_']\n  last <- last[last\
    \ != '*']\n  last <- last[last != ' ']\n  last <- last[last != '-']\n  last <-\
    \ last[last != '_']\n  last <- last[last != '*']\n  last <- last[last != ' ']\n\
    \  last <- last[last != '-']\n  last <- last[last != '_']\n  last <- last[last\
    \ != '*']\n  last <- last[last != ' ']\n  last <- last[last != '-']\n  last <-\
    \ last[last != '_']\n  last <- last[last != '*']\n  last <- last[last != ' ']\n\
    \  last <- last[last != '", "\n  txt <- tolower(txt)\n  txt <- gsub(\"[[:punct:]]\"\
    , \"\", txt)\n  txt <- gsub(\"[[:blank:]]+\", \"\", txt)\n  txt <- gsub(\"[[:lower:]]\"\
    , \"\", txt)\n  txt <- gsub(\"[[:upper:]]\", \"\", txt)\n  txt <- gsub(\"[[:digit:]]\"\
    , \"\", txt)\n  txt <- gsub(\"[[:space:]]+\", \"\", txt)\n  txt <- gsub(\"^\\\\\
    S*$\", \"\", txt)\n  txt <- gsub(\"\\\\s+\", \" \", txt)\n  txt <- trimws(txt)\n\
    \  txt <- tolower(txt)\n  txt <- gsub(\" $\", \"\", txt)\n  txt <- gsub(\"^ \"\
    , \"\", txt)\n  txt <- gsub(\"$\", \"\", txt)\n  txt <- gsub(\"\\\\s+\", \" \"\
    , txt)\n  txt <- tolower(txt)\n  txt <- gsub(\"^\\\\S*$\", \"\", txt)\n  txt <-\
    \ gsub(\"\\\\s+\", \" \", txt)\n  txt <- tolower(txt)\n  txt <- gsub(\"^\\\\S*$\"\
    , \"\", txt)\n  txt <- gsub(\"\\\\s+\", \" \", txt)\n  txt <- tolower(txt)\n \
    \ txt <- gsub(\"^\\\\S*$\", \"\", txt)\n  txt <- gsub(\"\\\\s+\", \" \", txt)\n\
    \  txt <- tolower(txt)\n  txt <- gsub(\"^\\\\S*$\", \"\", txt)\n  txt <- gsub(\"\
    \\\\s+\", \" \", txt)\n  txt <- tolower(txt)\n  txt <- gsub(\"^\\\\S*$\", \"\"\
    , txt)\n  txt <- gsub(\"\\\\s+\", \" \", txt)\n  txt <- tolower(txt)\n  txt <-\
    \ gsub(\"^\\\\S*$\", \"\", txt)\n  txt <- gsub(\"\\\\s+\", \" \", txt)\n  txt\
    \ <- tolower(txt)\n  txt <- gsub(\"^\\\\S*$\", \"\", txt)\n  txt <- gsub(\"\\\\\
    s+\", \" \", txt)\n  txt <- tolower(txt)\n  txt <- gsub(\"^\\\\S*$\", \"\", txt)\n\
    \  txt <- gsub(\"\\\\s+\", \" \", txt)\n  txt <- ", "\n  # your code here\n  last_char\
    \ <- nchar(strsplit(txt, \" \")[[1]][1])\n  is_a_letter <- FALSE\n  if(last_char\
    \ > 1 && last_char <= 5 && txt != '') {\n    is_a_letter <- TRUE\n  }\n  is_a_letter\n\
    }\n", "\n  # Define the search pattern.\n  # Note: word is a group of characters\
    \ separated by space.\n  word <- '^[^a-z]*[a-z][^a-z]*$'\n  # Check if the string\
    \ matches the pattern.\n  result <- grepl(word, txt)\n  # If the string doesn't\
    \ match the pattern return FALSE.\n  return(!result)\n}\n", "\n  substr(txt, length(txt),\
    \ 1)[1] != '\\\\W'\n}\n", "\n    txt <- unlist(strsplit(txt, split=' '))\n   \
    \ \n    # Get the last char.\n    txt <- txt[length(txt)]\n    \n    # Check to\
    \ see if the last char is alphabetical\n    # and is not part of a word.\n   \
    \ is_letter <- str_detect(txt, '[[:alpha:]]')\n    is_word_letter <- str_detect(txt,\
    \ '[[:alpha:][:space:]]')\n    \n    return (!is_letter & !is_word_letter)\n}\n",
  "\n  txt %>% \n    str_replace_all('\\\\s(?=[a-z])', ',') %>% \n    str_replace_all('\\\
    \\s(?=[0-9])', ',') %>% \n    str_replace_all('\\\\s(?=[A-Z])', ',') %>% \n  \
    \  str_detect('[a-z,0-9,A-Z]')\n}\n</cell>\n<code language=conda-env-py3_base-py>\n\
    check_if_last_char_is_a_letter('apple pie !')\n</cell>\n<text>\nAnd now we define\
    \ a function that returns the nth letter of a given string. We will use it later\
    \ in the assignment.\n\n\n</text>\n<code language=conda-env-py3_base-py>", "\n\
    \  txt <- as.character(txt)\n  n <- nchar(txt)\n  return(\n    if(n == 0) TRUE\
    \ \n    else (((txt[n()] == ' ') & (!(txt[n()] %in% c(\"a\",\"e\",\"i\",\"o\"\
    ,\"u\")))) \n  )\n}\n</code>\nA simple function to check if a word is spelled\
    \ in the correct way:\n<code>", "\n  txt_as_list <- strsplit(txt, \" \")[[1]]\n\
    \  is_last_char <- !str_detect(txt_as_list, \"[[:alpha:]]$\")\n  \n  if (is_last_char)\
    \ {\n    !str_detect(txt_as_list, \"\\\\w+$\")\n  } else {\n    FALSE\n  }\n}\n",
  "\n  require(stringr)\n  str_split(txt, ' ')[[1]][nchar(str_split(txt, ' ')[[1]][nchar(str_split(txt,\
    \ ' ')[[1]])) != 0]\n}\n", "\n  n <- nchar(txt)\n  substr(txt,n-1,n)%in%LETTERS\n\
    }\n</code>\nThe function above checks the last character of a string and checks\
    \ if it is an alphabetical character. The string should be in capital letters,\
    \ otherwise the function will return FALSE. \nNow, you can use the function and\
    \ check if the last character is a letter or not.\n<code>", "\n  return(substr(txt,\
    \ nchar(txt)-1, nchar(txt)) != ' ' & grepl('[^a-z]$', txt))\n}\n", "\n  # Write\
    \ code here\n  # return TRUE\n}\n\ncheck_if_last_char_is_a_letter(str1)", "\n\
    \  txt <- gsub('\\\\s', '', txt)\n  last_char <- tail(txt, 1)\n  last_char <-\
    \ tail(last_char, -1)\n  if (is.na(last_char)) {\n    return(FALSE)\n  } else\
    \ {\n    if (last_char %in% c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ')) return(FALSE)\n    else\
    \ return(TRUE)\n  }\n}\n", "\n  return(substring(txt, nchar(txt)-1, nchar(txt))==(substring(txt,\
    \ nchar(txt)-1, nchar(txt))==' '))\n}\n", "\n  txt <- gsub(\"[[:punct:] ]\", \"\
    \", txt)\n  \n  # If there are letters in txt, we return TRUE otherwise FALSE\n\
    \  !grepl(\"^[A-Za-z]+$\", txt)\n}\n</cell>\n<cell>", "\n  txt <- tolower(txt)\n\
    \  txt <- txt[length(txt)]\n  txt <- paste0(txt, '$')\n  txt <- gsub(\" $\", \"\
    $\", txt)\n  txt_lower <- tolower(txt)\n  str_split(txt_lower, ' ')[[1]]\n}\n",
  "\n  grepl('^[A-Za-z]$', txt, ignore.case = TRUE)\n}\n", "\n  return(grepl('^[a-zA-Z]$',\
    \ substr(txt, nchar(txt), nchar(txt)), perl = T))\n}\n", "\n  txt <- tolower(txt)\n\
    \  txt_len <- length(txt)\n  if (txt_len == 0) return(FALSE)\n  last_char <- substr(txt,\
    \ txt_len - 1, 1)\n  word_end_char <- which(word_chars %in% last_char)\n  if (length(word_end_char)\
    \ == 0) return(FALSE)\n  word_start <- word_end_char - 1\n  word <- substr(word_chars,\
    \ word_start, word_end_char)\n  word_len <- length(word)\n  for (i in seq_along(word_chars))\
    \ {\n    char_found <- FALSE\n    for (j in seq_along(word_chars)) {\n      if\
    \ (i == j) {\n        char_found <- TRUE\n        break\n      }\n      char_found\
    \ <- char_found | is.na(word_chars[[i]] %in% word_chars[[j]])\n    }\n    if (!char_found)\
    \ {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n", "\n  grepl(\" [a-z]$\"\
    , txt, ignore.case = TRUE, perl = TRUE)\n}\n</cell>\n<cell>", "\n  return(grepl(\"\
    [A-Za-z]$\",txt,perl=T))\n}\n", "\n    txt <- tolower(txt)\n    word <- unlist(strsplit(txt,\
    \ \" \"))\n    \n    # if the string ends with a letter\n    # or contains only\
    \ one letter \n    # return TRUE\n    if(!grepl(\"[a-z]$\", txt)\n        || (length(word)\
    \ == 1 && !grepl(\"[a-z]$\", word[1]))) {\n        return(TRUE)\n    }\n    \n\
    \    # if the string contains only spaces\n    # return FALSE\n    if(grepl(\"\
    ^\\\\s*$\", txt)) {\n        return(FALSE)\n    }\n    \n    # if the string ends\
    \ with an alpha character\n    # and does not contain spaces or numbers\n    #\
    \ return TRUE\n    if(!grepl(\"[a-z]$\", txt)\n        && grepl(\"[^a-z]$\", txt))\
    \ {\n        return(TRUE)\n    }\n    \n    # if the string contains only spaces\n\
    \    # return FALSE\n    if(grepl(\"^\\\\s*$\", txt)) {\n        return(FALSE)\n\
    \    }\n}\n</cell>\n<text>\n4.4. Function to Clean Text\nThe function clean_text\
    \ takes in a text and returns a clean version of it by performing all of the steps\
    \ we have just described. It also removes any unwanted characters like punctuations\
    \ or numbers.\n", "\n  l <- strsplit(txt, \" \")[[1]]\n  l[length(l)]\n  grepl(\"\
    ^[a-zA-Z]+$\", tail(l))\n}\n", "\n  # Check if txt is empty\n  if(!txt) {\n  \
    \  return(FALSE)\n  }\n  # Check if txt is all spaces.\n  if(txt == ' ') {\n \
    \   return(FALSE)\n  }\n  # Check for alphabetical character\n  last_char <- substr(txt,\
    \ nchar(txt)-1, nchar(txt))\n  if(last_char %in% LETTERS) {\n    return(FALSE)\n\
    \  }\n  # If none of the above works, return TRUE\n  return(TRUE)\n}\n", "\n \
    \ # Function for last char filter\n  # If the last char is a letter and\n  # it\
    \ is not a part of a word, return TRUE\n  # else, return FALSE\n  # Examples:\n\
    \  # >>> check_if_last_char_is_a_letter('apple pie')\n  # FALSE\n  # >>> check_if_last_char_is_a_letter('apple\
    \ pi e')\n  # TRUE\n  # >>> check_if_last_char_is_a_letter('apple pi e ')\n  #\
    \ FALSE\n  # >>> check_if_last_char_is_a_letter('')\n  # FALSE\n  \n  # Create\
    \ a group of characters separated by space\n  txt <- unlist(strsplit(txt, ' '))\n\
    \  \n  # Return TRUE if last char is letter and it is not part of a word\n  return(grepl('[A-Za-z]',\
    \ txt) & !grepl('^\\\\w+$', txt))\n}\n", "\n  if(!length(txt)) return(FALSE)\n\
    \  return(grepl('[a-zA-Z]$', txt))\n}\n", "\n  txt <- txt\n  txt <- sub('(\\\\\
    s)$', '', txt)\n  txt <- gsub('[a-zA-Z]', '', txt)\n  txt <- (txt != \"\")\n \
    \ return(as.logical(txt))\n}\n", "\n  \n  ### START CODE HERE ###\n  \n  return(!grepl(\"\
    \\\\w+$\", txt))\n  \n  ### END CODE HERE ###\n}\n</cell>\n<code language=conda-root-py>\n\
    check_if_last_char_is_a_letter('apple pi e ')\n</cell>\n<text>\nTest Your Work\n\
    \n</text>\n<code language=conda-root-py>\ncheck_if_last_char_is_a_letter(letters[3])\n\
    </cell>\n<text>\nExpected Output\nFALSE\n\n</text>\n<text>\nNow that you have\
    \ learned how to detect and remove non-alphabetical characters, let's see how\
    \ we can use regular expressions to identify and extract specific parts of text.\n\
    \nWe'll do this by first defining a regular expression pattern, and then using\
    \ grep() to return any group of characters that matches that pattern. Let's start\
    \ with a simple pattern.\n\n\n</text>\n<code language=conda-root-py>", "\n  txt\
    \ <- gsub(\" \", \"\", txt)\n  txt <- gsub(\"$\", \"\", txt)\n  txt <- tolower(txt)\n\
    \  return(grepl(\"[a-z]$\", txt))\n}\n</cell>\n<text>\nLet's test this function\
    \ on a few examples:\n\n\n</text>\n<cell>\ncheck_if_last_char_is_a_letter('apple\
    \ pie')\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter('apple pi e')\n</cell>\n\
    <cell>\ncheck_if_last_char_is_a_letter('apple pi e ')\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"\
    \")\n</cell>\n<text>\nNow, let's create a function that will test if a string\
    \ is a word or not.\n\n\n</text>\n<cell>", "\n  return(\n    sapply(txt,\n   \
    \        function(x) { \n             return(\n               str_detect(x, '[a-z]')\n\
    \               & !str_detect(x, '\\\\w') \n             )\n           })\n  )\n\
    }\n\ncheck_if_last_char_is_a_letter(\"apple pi e \")", "\n    txt <- tolower(txt)\n\
    \    txt <- gsub(\" \", \"\", txt)\n    txt <- txt[!grepl(\"^[a-zA-Z]+$\", txt)]\n\
    \    length(txt) > 0\n}\n\ncheck_if_last_char_is_a_letter(word)\n</cell>\n<text>\n\
    We can now check our new function in the cells below:\n\n\n</text>\n<cell>", "\n\
    \  # Write your code here\n  words <- strsplit(txt, \" \")\n  lastword <- words[length(words)]\n\
    \  letters <- unlist(strsplit(lastword[length(lastword)], \"\"))\n  if(!is.na(lastword)){\n\
    \    if(grepl(letters, letters, ignore.case = TRUE) == FALSE){\n      return (FALSE)\n\
    \    }\n  }\n  return (TRUE)\n}\n", "\n  require(stringr)\n  is_last_char <- str_length(txt)\
    \ == 1 & \n                   str_sub(txt, -1, -1) != ' ' &\n                \
    \   str_sub(txt, -1, -1) != '.' &\n                   str_sub(txt, -1, -1) !=\
    \ '?' &\n                   str_sub(txt, -1, -1) != '!' &\n                  \
    \ str_sub(txt, -1, -1) != '$'\n  return(is_last_char)\n}\n", "\n  stopifnot(length(txt)\
    \ > 0)\n  # \"[\" returns character \"[\" as an object\n  char_ind <- txt[length(txt)]\n\
    \  \n  # If last character is alphabetical, return TRUE, else\n  # return FALSE\n\
    \  return(char_ind %in% c(\"a\", \"e\", \"i\", \"o\", \"u\")) \n}\n", "\n  txt\
    \ <- gsub(\"^ *\", \"\", txt)\n  txt <- gsub(\" *$\", \"\", txt)\n  txt <- gsub(\"\
    \ \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\",\
    \ txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt\
    \ <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\"\
    \ \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\",\
    \ txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt\
    \ <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\"\
    \ \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\",\
    \ txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt\
    \ <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\"\
    \ \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\",\
    \ txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt\
    \ <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\"\
    \ \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\",\
    \ txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt\
    \ <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\"\
    \ \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\",\
    \ txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt\
    \ <- gsub(\" \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\"\
    \ \", \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  ", "\n\tcheck_last_char <-\
    \ function(x) {\n\t\tlast_char_index <- nchar(x) - 1\n\t\tlast_char <- substr(x,\
    \ last_char_index, 1)\n\t\tis_last_letter <- toupper(last_char) %in% c('A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n\t\t!is_last_letter\n\t}\n\ttxts <-\
    \ str_split(txt, ' ')\n\t!sapply(txts, check_last_char)\n}\n", "\n  txt <- tolower(txt)\n\
    \  substr(txt, -1, nchar(txt))[\n    (substr(txt, -1, nchar(txt))) %in% letters\
    \ \n  ] <- FALSE\n  return(txt)\n}\n</cell>\n<cell>", "\n  return(grepl(paste0(\"\
    \ [[:alpha:]]$\"), \n               paste0(txt, collapse=\" \")))\n}\n", "\n \
    \ txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\"[[:alpha:]]\", \"\", txt)\n \
    \ txt <- gsub(\"^$\", \"\", txt)\n  return(any(nchar(txt) != 1))\n}\n", "\n  result\
    \ <- grepl('^[^ ]+$', txt, perl = TRUE)\n  result <- result & grepl('[a-z]', substr(txt,\
    \ -1, nchar(txt)))\n  return(result)\n}\n</cell>\n<text>\nChecking the above function\
    \ is easy, just pass it into the check_if_last_char_is_a_letter() function we\
    \ just created. To better visualize the output of the function, you can use the\
    \ check_if_last_char_is_a_letter() function we just created to filter a list of\
    \ strings by using a list comprehension. The list comprehension uses two functions,\
    \ check_if_last_char_is_a_letter() to create a boolean vector and a function called\
    \ filter() that uses this boolean vector to filter the list comprehension.\n\n\
    This process is more or less identical to how filter() works in base R.\n\n\n\
    </text>\n<cell>", "\n  char_to_check <- substring(txt, length(stringr::word(txt)),\
    \ 1)\n  return(!grepl('^[a-zA-Z]*$', char_to_check))\n}\n", "\n  if(length(txt)\
    \ == 0) return(FALSE)\n  if(!is_letter(txt[length(txt)])) return(FALSE)\n  if(!all(tail(txt,\
    \ -1) != ' '))\n  return(TRUE)\n}", "\n  last_char <- tail(txt, n=1)\n  !is_a_letter(last_char)\
    \ & !is_a_word(paste(txt, last_char))\n}\n</code>\n<|/ a tags=r,regex,string |>\n\
    <| c |>\nThanks for that. I'm having trouble implementing it though. I'm working\
    \ on `gsub()` as opposed to `grepl()`. I tried the following, but I'm not sure\
    \ if my code is correct: `gsub(\"(\\\\W)(?!.*\\\\W)\", \"\\\\1\", txt)`. Can you\
    \ please let me know if I am on the right track?\n<|/ c |>\n<| c |>\nI rewrote\
    \ my answer a bit.\n<|/ c |>\n<| a dscore=2 |>\nYou can do this without using\
    \ any regex. \n<code>\nlibrary(stringi)\n", "\n  # Create an empty variable to\
    \ hold our logic\n  is_last_char_a_letter <- NA\n\n  # Check to see if the last\
    \ character of the string is a letter\n  # and that it is not preceded by a digit.\n\
    \  is_last_char_a_letter <- grepl(\"[a-z]$\", txt, ignore.case = TRUE) & !grepl(\"\
    ^[0-9]\", txt, ignore.case = TRUE)\n\n  # Return the result\n  return(is_last_char_a_letter)\n\
    }\n", "\n  txt <- toupper(txt)\n  last_char <- tail(txt, 1)\n  # Check for space\
    \ at end of string\n  if (last_char == ' ' || last_char == '\\ ') {\n    return(FALSE)\n\
    \  }\n  all_chars_except_last <- txt[!(txt %in% last_char)]\n  # Check if word\
    \ only contains letters. Note that\n  # \"word\" is a group of characters separated\
    \ by space\n  # Examples:\n  # >>> check_if_word_only_contains_letters('apple\
    \ pie')\n  # FALSE\n  # >>> check_if_word_only_contains_letters('apple pi e')\n\
    \  # TRUE\n  # >>> check_if_word_only_contains_letters('apple pi e ')\n  # FALSE\n\
    \  # >>> check_if_word_only_contains_letters('')\n  # FALSE\n  is_word_only_letters\
    \ <- grepl('^[a-zA-Z]+$', all_chars_except_last)\n  return(is_word_only_letters)\n\
    }\n", "\n  txt[length(txt)] == ' ' &&\n  str_split(txt)[length(str_split(txt))]\
    \ == ' ' &&\n  !grepl('[^a-z ]',\n          str_split(txt)[length(str_split(txt))])\n\
    }\n", "\n    txt <- tolower(txt)\n    txt <- paste(txt, collapse=' ')\n    txt\
    \ <- gsub('[^[:alpha:]]', '', txt)\n    return(nchar(txt) == 1 && nchar(txt) ==\
    \ length(txt))\n}\n</cell>\n<cell>", "\n  # your code here\n  \n  word <- strsplit(txt,\"\
    \ \")[[1]]\n  word_length <- length(word)\n  \n  out <- FALSE\n  \n  if(word_length\
    \ >0) {\n    out <- FALSE\n    if(word_length == 1) {\n      out <- TRUE\n   \
    \ } else {\n      if(is_last_char_in_word(word[length(word)-1])) {\n        out\
    \ <- TRUE\n      }\n    }\n  }\n  \n  return(out)\n}\n", "\n  \n  # If txt is\
    \ an empty string\n  # return FALSE\n  if(!txt) {\n    return(FALSE)\n  }\n  \n\
    \  # Otherwise check if the last character is a letter\n  # and that it is not\
    \ the start of a word\n  tmp <- str_sub(txt, -1, 1)\n  \n  if(!all(\n    grepl(\"\
    ^[a-zA-Z]$\", tmp)\n  )) {\n    return(FALSE)\n  }\n  \n  if(!all(\n    grepl(\"\
    ^[a-zA-Z]+$\", tmp)\n  )) {\n    return(TRUE)\n  }\n  \n  # If we get to here,\
    \ it means that the last character is not a letter\n  # and that the last character\
    \ is part of a word.\n  # Return FALSE.\n  return(FALSE)\n}\n</cell>\n<cell>",
  "\n    txt %>%\n        stri_tail(-1) %>%\n        str_c %>%\n        anychar()\n\
    }\n", "\n    txt <- gsub(\" \", \"\", txt)\n    txt <- gsub(\"[^[:alpha:]]\",\
    \ \"\", txt)\n    txt <- ifelse(grepl(\"[a-z]$\", txt), TRUE, FALSE)\n    txt\
    \ <- ifelse(grepl(\"[A-Z]$\", txt), TRUE, FALSE)\n    txt <- ifelse(grepl(\"[0-9]$\"\
    , txt), TRUE, FALSE)\n    txt <- ifelse(grepl(\"[\\\\s,.-]$\", txt), TRUE, FALSE)\n\
    \    return(txt)\n}\n", "\n  if (is.na(txt) | nchar(txt) == 0) {\n    return(FALSE)\n\
    \  } else {\n    txt <- substring(txt, -1)\n    txt <- tolower(txt)\n    txt <-\
    \ toupper(txt)\n    if (txt == 'a' | txt == 'e' | txt == 'i' | txt == 'o' | txt\
    \ == 'u') {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n\
    }\n", "\n  str_length(txt) > 0 &&\n  str_substr(txt, -1, 1) == \"a\" &&\n  str_length(str_split(txt,\
    \ \" \")[[1]]) > 1\n}\n", "\n  if (txt[length(txt)] != ' ') return(FALSE)\n  words\
    \ <- unlist(strsplit(txt, split = ' '))\n  if (length(words) < 2) return(FALSE)\n\
    \  l <- length(words)\n  last_word_letter <- words[l]\n  if (last_word_letter\
    \ %in% LETTERS) return(FALSE)\n  return(TRUE)\n}\n", "\n  txt <- unlist(strsplit(txt,\
    \ ' '))\n  last_char <- txt[length(txt)]\n  \n  last_char %in% letters && !is.na(last_char)\n\
    }\n", "\n  # If the string is empty, return FALSE.\n  if(!txt) return(FALSE)\n\
    \  # If the last character is not a letter or a digit, return FALSE.\n  if(!is_letter(txt[length(txt)]\
    \ | txt[length(txt)+1])) return(FALSE)\n  # If the last character is a letter,\
    \ return TRUE.\n  return(TRUE)\n}\n", "\n  str_split(txt, ' ')[[1]][length(str_split(txt,\
    \ ' ')[[1]])] %>% \n    str_trim() %>% \n    str_length() %>% \n    is.na() %>%\
    \ \n    !. \n}\n", "\n  n <- nchar(txt)\n  txt <- gsub(\" \", \"\", txt)\n  txt\
    \ <- gsub(\"[^A-Z]\", \"\", txt)\n  nchar(gsub(\"[A-Z]\", \"\", txt))\n  n !=\
    \ n\n}\n", "\n  last_char <- tail(txt, 1)\n  letters <- str_split(last_char, \"\
    [[:alpha:]]\")\n  \n  if(!length(letters) == 0 & !any(is.na(letters))) {\n   \
    \ last_char_of_text <- str_split(txt, \" \")[[1]]\n    \n    letter_is_a_word\
    \ <- (any(last_char_of_text %in% letters))\n    \n    if(!letter_is_a_word) {\n\
    \      return(FALSE)\n    } else {\n      return(TRUE)\n    }\n  } else {\n  \
    \  return(FALSE)\n  }\n}\n</cell>\n<text>\n2.4. Implement the has_multiple_letters\
    \ function\nYour has_multiple_letters function should take in as its argument\
    \ any string of characters and return TRUE if the string has more than one alphabetical\
    \ character and FALSE otherwise. An example would be:\n\nhas_multiple_letters('abccc')\
    \ would return TRUE because there are two letters and at least one is also a letter.\n\
    has_multiple_letters('abcbc') would return FALSE because there are no letters.\n\
    has_multiple_letters('ab') would return FALSE because there is no letter in the\
    \ first position.\nhas_multiple_letters('abc') would return FALSE because there\
    \ are no letters in the first position.\n\nThe string could be empty (as in has_multiple_letters('')).\
    \ You could also assume that the string has only one character and that it is\
    \ a string of characters. What if the string has more than one character? The\
    \ function should also return FALSE when it has more than one character but no\
    \ letters in the string.\n\n\n</text>\n<cell>", "\n  # Create a regex pattern\
    \ that looks for the last character\n  # that is not part of a word character\n\
    \  last_char_not_part <- paste0('[^ ]', collapse = \"\")\n  pattern1 <- paste0(\"\
    ^.*$\", last_char_not_part)\n  # See if the regex pattern matches the text and\
    \ return the result\n  regmatches(txt, gregexpr(pattern1, txt, ignore.case = TRUE))\
    \ > 0L\n}\n", "\n  x <- gsub('[[:space:]]+', '', txt)\n  y <- x[length(x)]\n \
    \ y <- tolower(y)\n  y <- toupper(y)\n  y %in% c('a','e','i','o','u')\n}\n", "\n\
    \  if(!is.character(txt)) return(FALSE)\n  txt <- tolower(txt)\n  \n  last_char\
    \ <- txt[length(txt)]\n  \n  if(!is.na(last_char) & \n      !(grepl(\"^[a-z]+$\"\
    , paste(txt, collapse=\"\")) & \n        grepl(\"^[a-z]+$\", paste(txt, collapse=\"\
    \ \")) & \n        grepl(\"^[a-z]+$\", paste(txt, collapse=\" \")))) return(TRUE)\n\
    \  return(FALSE)\n}\n", "\n  if(!txt %in% c(\"\", \" \", \"\\t\", \"\\n\", \"\\\
    r\", \"\\f\")) \n    return(FALSE)\n  txt <- str_split(txt, \"[[:punct:]]\")[[1]]\n\
    \  txt <- txt[which(letters(txt) == txt[length(txt)])]\n  return(length(txt) >\
    \ 0 & !grepl(\"[[:alpha:]]\", txt))\n}\n", "\n  txt <- gsub(\"[[:punct:]]\", \"\
    \", txt)\n  txt <- gsub(\"[[:space:]]+\", \" \", txt)\n  txt <- gsub(\"[[:alpha:]]\"\
    , \"\", txt)\n  txt <- gsub(\"[[:punct:]]\", \"\", txt)\n  txt <- gsub(\"[^[:alpha:]\
    \ ]\", \"\", txt)\n  txt <- gsub(\"^[[:alpha:] ]\", \"\", txt)\n  return(length(txt)\
    \ == 1)\n}\n", "\n  last(txt) %in% letters && !str_detect(paste(last(txt), collapse\
    \ = ' '), paste(word, collapse = ' '))\n}\n", "\n  txt <- tolower(txt)\n  last_char\
    \ <- substr(txt, (nchar(txt) - 1), nchar(txt))\n  # Return TRUE if last char is\
    \ alphabetic, not part of a word and FALSE if not\n  grepl('^[[:alpha:]]$|[ ]+$',\
    \ last_char) == FALSE & grepl('^[[:alpha:]]$|[ ]+$', last_char) == TRUE\n}\n</cell>\n\
    <cell>", "\n  txt <- str_split(txt, ' ')[[1]]\n  if(!is.na(txt[length(txt)]) &\
    \ \n     is.na(grepl('\\\\w$', txt[length(txt)])))\n    return(TRUE)\n  return(FALSE)\n\
    }\n", "\n    # Check that txt is not empty.\n    if (length(txt) == 0) return(FALSE)\n\
    \    # If txt is empty, return TRUE\n    if (txt == '') return(TRUE)\n    # Check\
    \ that txt is a character.\n    if (!is.character(txt)) return(FALSE)\n    # If\
    \ txt is a character, then return TRUE unless\n    # the character is the last\
    \ character in the string.\n    # Otherwise, return FALSE.\n    if (txt[length(txt)]\
    \ == ' ') return(TRUE)\n    if (txt[length(txt)] != ' ') return(FALSE)\n    txt\
    \ <- unlist(strsplit(txt, split = ' '))\n    return(TRUE)\n}\n", "\n  # Remove\
    \ whitespace\n  txt <- gsub(\"\\\\s+\", \"\", txt)\n  \n  # If string is empty,\
    \ return FALSE\n  if (length(txt) == 0) return(FALSE)\n  \n  # If last character\
    \ is not a letter, return FALSE\n  if (substr(txt, length(txt), 1) %in% letters)\
    \ return(FALSE)\n  \n  # If last character is a letter, return TRUE\n  return(TRUE)\n\
    }\n", "\n  txt_last <- tail(txt, 1)\n  if(is.na(txt_last)) return(FALSE)\n  txt_last\
    \ <- toupper(txt_last)\n  txt_last <- substring(txt_last, 1, 1)\n  if(!is.na(grepl('[a-zA-Z]',\
    \ txt_last))) return(FALSE)\n  return(TRUE)\n}\n</cell>\n<cell>", "\n  if(!txt\
    \ || !nchar(txt)) return(FALSE)\n  txt <- gsub(\"[^A-Z ]\", \"\", txt) # delete\
    \ all non-alphabetical chars\n  txt <- gsub(\" \", \"\", txt) # delete all spaces\
    \ before and after\n  txt <- nchar(txt) # count the number of characters\n  txt\
    \ <- txt > 1 # check if the length of the string is > 1\n  txt <- txt & !str_detect(txt,\
    \ \" \\\\w+$\") # check if the last character is a word char\n  return(txt)\n\
    }\n", "\n    txt <- tolower(txt)\n    return (length(txt) > 1 & substr(txt, (nchar(txt)-1),\
    \ nchar(txt)) %in% letters)\n}\n", "\n  # Extract the last character of the string\n\
    \  last_char <- substr(txt, length(txt), 1)\n  # Check whether the last character\
    \ is alphabetical\n  is_letter <- is_alpha(last_char)\n  # Check whether not the\
    \ last character is a word\n  is_not_word <- !grepl(paste0('\\\\s', word, collapse\
    \ = '|'), txt)\n  # Return TRUE if all the checks are TRUE and FALSE if there\
    \ is an error.\n  return(!is_letter & is_not_word)\n}\n</cell>\n<text>\n2.2. Function\
    \ split_string_to_list - to split a string into a list of words\n\n</text>\n<cell>\n\
    split_string_to_list <- function(string) {\n  # Split the string into a list of\
    \ words\n  words <- unlist(strsplit(string, ' '))\n  # Return the list of words\n\
    \  return(words)\n}\n</cell>\n<text>\n2.3. Function count_words_in_string - to\
    \ count the occurrences of each word\n\n</text>\n<cell>\ncount_words_in_string\
    \ <- function(string) {\n  # Split the string into a list of words\n  words <-\
    \ split_string_to_list(string)\n  # Create a vector to store number of occurrences\
    \ of each word\n  num_occs <- numeric(length(words))\n  # Create a loop for counting\
    \ the number of occurrences\n  # Note: To avoid calculating the same occurrences\
    \ more than once,\n  # the loop starts from 1 when the current word is the first\
    \ word in\n  # the string.\n  for (i in seq_along(words)) {\n    if (i > 0) {\n\
    \      # Calculate the number of occurrences up to and including current word\n\
    \      num_occs <- c(num_occs, sum((words[seq_len(i)] %in% words))-1)\n    } else\
    \ {\n      # Calculate the number of occurrences for the current word\n      num_occs\
    \ <- c(num_occs, sum(words[i] %in% words))\n    }\n  }\n  # Return the number\
    \ of occurrences\n  return(num_occs)\n}\n</cell>\n<text>\n2.4. Function filter_word_list\
    \ - to keep only the words that are less than or equal to N words\n\n</text>\n\
    <cell>\nfilter_word_list <- function(word_list, N) {\n  # Create a vector to store\
    \ the words that are greater than or equal to N words\n  words_freq <- numeric(length(word_list))\n\
    \  # Create a loop for filtering words\n  # Note: To avoid calculating the same\
    \ words more than once,\n  # the loop starts from 1 when the current word is the\
    \ first word in\n  # the string.\n  for (i in seq_along(word_list)) {\n    if\
    \ (i > 1) {\n      # Calculate the number of occurrences up to and including current\
    \ word\n      words_freq <- c(words_freq, sum(word_list[seq_len(", "\n  # Write\
    \ your solution here\n  \n  # return (substr(txt,nchar(txt),1) %in% c('a','e','i','o','u','y'))\n\
    \  \n  return (grepl(\"[^[:alpha:]]$\",txt))\n}\n", "\n  \n  # Initialize a boolean\
    \ variable to false.\n  is_last_char_alphabetic_letter <- FALSE\n  \n  # Loop\
    \ through each character in the given string.\n  for(i in 1:length(txt)) {\n \
    \   \n    # Check if the last character of the string is alphabetic\n    # and\
    \ is not a part of a word.\n    if(txt[length(txt)] == ' ' & !is.na(match(txt[length(txt)],\
    \ words))){\n      \n      # If it is, then set the boolean variable to TRUE.\n\
    \      is_last_char_alphabetic_letter <- TRUE\n      \n      # Stop checking the\
    \ current character of the string\n      # and move to the next character of the\
    \ string.\n      break\n    }\n  }\n  \n  # Return the boolean variable\n  return(is_last_char_alphabetic_letter)\n\
    }\n</cell>\n<text>\nRun the cell below to check your implementation.\n\n\n</text>\n\
    <cell>", "\n  txt <- as.character(txt)\n  last_char <- nchar(txt[length(txt)])\n\
    \  return(last_char %in% LETTERS)\n}\n", "\n    str_length(txt) != str_length(word(txt))\n\
    }\n", "\n  lastchar <- txt[length(txt)]\n  word <- txt[-length(txt)]\n  return(lastchar\
    \ != ' ' && word != ' ')\n}\n", "\n  if(nchar(txt) > 1) {\n    lastchar <- strsplit(txt,\
    \ '')[[1]][nchar(txt)]\n    if(!(lastchar %in% c('a', 'e', 'i', 'o', 'u')))\n\
    \      return(FALSE)\n  }\n  return(TRUE)\n}\n", "\n  stopifnot(txt != \"\")\n\
    \  stopifnot(txt != \" \")\n  stopifnot(txt != NULL) # to ensure none of those\
    \ values are returned\n  # Get the length of string in characters\n  str_length\
    \ <- nchar(txt)\n  # If the last character is a letter\n  if (str_length <= 1)\
    \ {\n    stop(\"txt is empty\")\n  }\n  last_char <- txt[length(txt)]\n  all_word_end\
    \ <- str_length(txt) == str_length(word(txt))\n  if (last_char %in% letters(toupper(LETTERS)))\
    \ {\n    all_word_end <- FALSE\n  }\n  return(all_word_end)\n}\n", "\n  txt <-\
    \ toupper(txt)\n  str_split(txt, \" \")[[1]][nrow(str_split(txt, \" \")) == ncol(str_split(txt,\
    \ \" \")) - 1]\n}\n", "\n  txt <- tolower(txt)\n  n <- nchar(txt)\n  if(!is.na(n))\
    \ {\n    if (nchar(gsub(\"[^a-zA-Z]\", \"\", txt))==n) return false;\n  }\n  return\
    \ (TRUE)\n}\n", "\n  txt <- str_split(txt, \" \")[[1]]\n  sapply(txt, function(x)\
    \ grepl(x, last(txt), fixed = TRUE) & !grepl(\"[a-z]\", x))\n}\n", "\n  require(stringr)\n\
    \  \n  if(length(strsplit(txt, ' ')[[1]])>1) {\n    txt <- strsplit(txt, ' ')[[1]][length(strsplit(txt,\
    \ ' ')[[1]])]\n  } else {\n    txt <- strsplit(txt, ' ')[[1]][1]\n  }\n  \n  str_split(txt,\
    \ \"\")[[1]][str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])] == '\
    \ ' | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])] == '.' | str_split(txt,\
    \ \"\")[[1]][length(str_split(txt, \"\")[[1]])] == ',' | str_split(txt, \"\")[[1]][length(str_split(txt,\
    \ \"\")[[1]])] == ':' | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])]\
    \ == ';' | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])] == '.'\
    \ | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])] == '!' | str_split(txt,\
    \ \"\")[[1]][length(str_split(txt, \"\")[[1]])] == '?' | str_split(txt, \"\")[[1]][length(str_split(txt,\
    \ \"\")[[1]])] == '(' | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])]\
    \ == ')' | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])] == '['\
    \ | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])] == ']' | str_split(txt,\
    \ \"\")[[1]][length(str_split(txt, \"\")[[1]])] == '<' | str_split(txt, \"\")[[1]][length(str_split(txt,\
    \ \"\")[[1]])] == '>' | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])]\
    \ == '{' | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])] == '}'\
    \ | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])] == '|' | str_split(txt,\
    \ \"\")[[1]][length(str_split(txt, \"\")[[1]])] == '!' | str_split(txt, \"\")[[1]][length(str_split(txt,\
    \ \"\")[[1]])] == '?' | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])]\
    \ == '(' | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])] == ')'\
    \ | str_split(txt, \"\")[[1]][length(str_split(txt, \"\")[[1]])] == '[' | str_",
  "\n  txt <- tolower(txt)\n  n <- length(txt)\n  txt <- txt[n]\n  txt <- gsub(\"\
    [^a-z]\",\"\",txt)\n  txt <- txt[!txt %in% c(\" \",\"\\n\",\"\\t\",\"\\r\")]\n\
    \  return(TRUE == txt)\n}\n", "\n  txt <- gsub(\"[ ]+\", \" \", txt)\n  txt <-\
    \ gsub(\"^$\", \"\", txt)\n  txt <- txt[!grepl(\"[^[:alpha:][:space:][:digit:]]$\"\
    , txt)]\n  txt <- txt[!grepl(\"[^[:alpha:]]\", txt)]\n  return(length(txt) ==\
    \ 0)\n}\n", "\n  # Your code here\n  txt <- unlist(strsplit(txt))\n  return(!(grepl(\"\
    ^[A-z]$\", txt) & grepl(\"\\\\w+$\", txt)))\n}\n", "\n  substr(txt,nchar(txt)-1,nchar(txt))==''\n\
    }\n</code>\nThen the function can be used to filter the original data to create\
    \ a data set that contains only the rows you want:\n<code>\ndf_filtered <- df[which(check_if_last_char_is_a_letter(df$text)),]\n\
    </code>\n<|/ a |>\n<| a dscore=0 tags=regex,r |>\nI like your attempt at using\
    \ base R to avoid looping, but I don't think a base R solution is really going\
    \ to be any faster than a nested for loop. I'd go with something like this:\n\
    <code>", "\n  # Add your code here\n\n}\n</cell>\n<cell>", "\n  txt <- gsub(\"\
    \\\\w+$\", \"\", txt)\n  txt <- unlist(strsplit(txt, \"\"))[length(unlist(strsplit(txt,\
    \ \"\"))) + 1]\n  txt <- toupper(txt)\n  any(grepl(paste0(\"[[:alpha:]]$\", txt),\
    \ tolower(txt)))\n}\n", "\n  # Your code goes here:\n  txtLen <- nchar(txt)\n\
    \  txt[txtLen] <- ' '\n  txt_clean <- gsub(\"\\\\s\", \"\", txt)\n  txt_clean\
    \ <- gsub(\"\\\\W\", \"\", txt_clean)\n  txt_clean <- gsub(\"\\\\W\", \"\", txt_clean)\n\
    \  return(length(txt_clean) == 1)\n}\n", "\n  txt <- gsub(\"(^.)|( .+)$\", \"\"\
    , txt)\n  txt <- gsub(\" \", \"\",\n              gsub(\"[^[:alpha:]]\", \"\"\
    , txt))\n  txt <- tolower(txt)\n  txt <- gsub(\"^[[:alpha:]]\", \"\", txt)\n \
    \ txt <- txt == \"true\"\n  return(txt)\n}\n</code>\n<|/ a dscore=3 tags=r,replace,regex,string\
    \ |>\n<| a tags=r,replace,regex,string |>\nHere is a base R solution:\n<code>\n\
    > gsub(\".*([[:alpha:]]).*\", \"\\\\1\", x$string)\n[1] \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"    \"apple\"\
    \    \"apple\"", "\n  if (!txt || !length(txt)) return FALSE\n  last <- nchar(txt)\n\
    \  last <- last - 1\n  word <- str_split(txt, ' ')[[1]]\n  word <- word[last !=\
    \ 1]\n  word <- str_trim(word)\n  word <- str_split(word, '-') [[1]]\n  word <-\
    \ word[last != 1]\n  if (length(word) > 0) word[length(word)] == last else FALSE\n\
    }\n", "\n  str_count <- str_count(txt, \"[A-Za-z]\")\n  ifelse(str_count > 0,\
    \ FALSE, TRUE)\n}\n", "\n  txt %>% \n    stri_tail(-1) %>% \n    stri_split_fixed('\
    \ ', simplify = TRUE) %>% \n    map_lgl(~all(!grepl('[^[:alpha:]]', .x)) & !is.na(.x))\n\
    }\n", "\n  nchar(gsub('([[:alpha:]]$)', \"\", txt)) > 0\n}\n", "\n  txt <- txt[-1L]\n\
    \  str_count(txt, \"\\\\w$\")[1L] > 0L & !grepl(\"[^a-z]\", txt)\n}\n", "\n  txt\
    \ <- gsub(\" \", \"\", txt)\n  lastchar <- substr(txt, nchar(txt), nchar(txt))\n\
    \  lastchar <- lastchar[lastchar %in% LETTERS]\n  !is.na(lastchar) & !grepl('[^[:alpha:][:space:]]',\
    \ lastchar)\n}\n", "\n  is_first_letter <- function(txt) {\n    return(substring(txt,\
    \ 1L, 1L) %in% letters)\n  }\n\n  txt <- substring(txt, 1L, 1L)\n  if (txt !=\
    \ '') {\n    words <- unlist(strsplit(txt, ' '))\n    if (length(words) == 1)\
    \ {\n      return(FALSE)\n    }\n    return(is_first_letter(words[length(words)])\n\
    \           | is_first_letter(words[length(words) -1])\n           | is_first_letter(words[length(words)\
    \ -2])\n           | is_first_letter(words[length(words) -3])\n           | is_first_letter(words[length(words)\
    \ -4])\n           | is_first_letter(words[length(words) -5])\n           | is_first_letter(words[length(words)\
    \ -6])\n           | is_first_letter(words[length(words) -7])\n           | is_first_letter(words[length(words)\
    \ -8])\n           | is_first_letter(words[length(words) -9]))\n  }\n  return(FALSE)\n\
    }\n", "\n  txt1 <- strsplit(txt, ' ')[[1]]\n  last(txt1) %in% 'abcdefghijklmnopqrstuvwxyz'\n\
    }\n</cell>\n<cell>", "\n  txt <- unlist(strsplit(txt, split=\" \"))\n  n <- length(txt)\n\
    \  return(txt[n] %in% c(\"a\",\"e\",\"i\",\"o\",\"u\")[n])\n}\n</cell>\n<text>\n\
    Step 4: Re-create the dataset\nAs mentioned above, we're going to create our own\
    \ version of our dataset by re-running the above code. To do this, we're going\
    \ to first remove all rows from our dataset that have a missing value. Then we'll\
    \ re-order the dataset alphabetically by last name, followed by first name and\
    \ then create new data frames for each of the last names we've used.\n\n\n</text>\n\
    <cell>", "\n  txt <- gsub(\"[^[:alnum:][:space:]]\", \"\", txt)\n  txt <- gsub(\"\
    ([[:punct:]])\", \" \", txt)\n  txt <- gsub(\"([[:upper:]])\", \" \\\\1\", txt)\n\
    \  txt <- gsub(\"([[:lower:]])\", \" \\\\1\", txt)\n  txt <- paste(txt, collapse\
    \ = \" \")\n  txt <- gsub(\" $\", \"\", txt)\n  txt <- txt[txt!=\"\"]\n  return(length(txt)==1)\n\
    }\n", "\n  n <- nchar(txt)\n  txt <- txt[-n]\n  txt <- paste0(txt, '$') \n  txt\
    \ <- paste0(txt, '$')\n  txt <- grepl('[^[:alpha:]\\\\w]+$', txt)\n  return(sum(txt))\n\
    }\n</cell>\n<text>\nThe check_if_last_char_is_a_letter function returns TRUE if\
    \ the last character of the input string is an alphabetical character and is NOT\
    \ a part of a word, and FALSE otherwise. Let's test the function with some examples:\n\
    \n\n</text>\n<cell>\ncheck_if_last_char_is_a_letter('apple pie')", "\n\ttxt <-\
    \ tolower(txt)\n\ttxt <- substr(txt, -1, nchar(txt))\n\ttxt <- unlist(strsplit(txt,\
    \ ' '))\n\t\n\ttxt <- ifelse(\n\t\ttxt == 'apple',\n\t\tTRUE,\n\t\tFALSE\n\t)\n\
    \t\n\ttxt <- ifelse(\n\t\ttxt == 'pe',\n\t\tTRUE,\n\t\tFALSE\n\t)\n\t\n\ttxt <-\
    \ ifelse(\n\t\ttxt == 'pie',\n\t\tTRUE,\n\t\tFALSE\n\t)\n\t\n\ttxt <- ifelse(\n\
    \t\ttxt == 'e',\n\t\tTRUE,\n\t\tFALSE\n\t)\n\t\n\ttxt <- ifelse(\n\t\ttxt == '',\n\
    \t\tTRUE,\n\t\tFALSE\n\t)\n\t\n\ttxt <- ifelse(\n\t\ttxt == 'i',\n\t\tTRUE,\n\t\
    \tFALSE\n\t)\n\t\n\ttxt <- ifelse(\n\t\ttxt == 'pi',\n\t\tTRUE,\n\t\tFALSE\n\t\
    )\n\t\n\ttxt <- ifelse(\n\t\ttxt == 'ei',\n\t\tTRUE,\n\t\tFALSE\n\t)\n\t\n\ttxt\
    \ <- ifelse(\n\t\ttxt == 'pii',\n\t\tTRUE,\n\t\tFALSE\n\t)\n\t\n\ttxt <- ifelse(\n\
    \t\ttxt == 'eiy',\n\t\tTRUE,\n\t\tFALSE\n\t)\n\t\n\ttxt <- ifelse(\n\t\ttxt ==\
    \ 'pii y',\n\t\tTRUE,\n\t\tFALSE\n\t)\n\t\n\ttxt <- ifelse(\n\t\ttxt == 'eiy ',\n\
    \t\tTRUE,\n\t\tFALSE\n\t)\n\t\n\ttxt <- ifelse(\n\t\ttxt == 'pii y ',\n\t\tTRUE,\n\
    \t\tFALSE\n\t)\n\t\n\ttxt <- ifelse(\n\t\ttxt == 'eiy e',\n\t\tTRUE,\n\t\tFALSE\n\
    \t)\n\t\n\ttxt <- ifelse(\n\t\ttxt == 'pii y e',\n\t\tTRUE,\n\t\tFALSE\n\t)\n\t\
    \n\ttxt <- ifelse(\n\t\ttxt == 'eiy e',\n\t\tTRUE,\n\t\tFALSE\n\t)\n\t\n\ttxt\
    \ <- ifelse(\n\t\ttxt == 'pii y e',\n\t\tTRUE,\n\t\tFALSE\n\t)\n\t\n\ttxt <- ifelse(\n\
    \t\ttxt == 'eiy',\n\t\tTRUE,\n\t\tFALSE\n\t)\n\t\n\ttxt <- ifelse(\n\t\ttxt ==\
    \ 'pii',\n\t\tTRUE", "\n  txt <- str_to_lower(txt)\n  last_char <- tail(txt, 1)\
    \ # get the last character\n  return(!grepl('^\\\\w+$', txt) & !grepl(paste0('^\\\
    \\b', last_char, '\\\\b$'), txt))\n}\n", "\n  txt <- gsub(\" \", \"\", txt) #\
    \ remove spaces from string\n  txt <- gsub(\"$\", \"\", txt) # remove end of string\
    \ character\n  txt <- gsub(\"^\", \"\", txt) # remove start of string character\n\
    \  txt <- gsub(\"\\\\s\", \"\", txt) # remove spaces from string\n  txt <- gsub(\"\
    [A-Za-z]\", \"\", txt) # remove all characters that are not alphabetic\n  txt\
    \ <- gsub(\"[0-9]\", \"\", txt) # remove all characters that are not numbers\n\
    \  txt <- gsub(\"^[[:space:]]*\", \"\", txt) # remove leading spaces from string\n\
    \  txt <- gsub(\"[[:space:]]*$\", \"\", txt) # remove trailing spaces from string\n\
    \  txt <- gsub(\"$\", \"\", txt) # remove end of string character\n  txt <- gsub(\"\
    ^\", \"\", txt) # remove start of string character\n  txt <- gsub(\"\\\\s\", \"\
    \", txt) # remove spaces from string\n  txt <- gsub(\"[A-Za-z]\", \"\", txt) #\
    \ remove all characters that are not alphabetic\n  txt <- gsub(\"[0-9]\", \"\"\
    , txt) # remove all characters that are not numbers\n  txt <- gsub(\"^[[:space:]]*\"\
    , \"\", txt) # remove leading spaces from string\n  txt <- gsub(\"[[:space:]]*$\"\
    , \"\", txt) # remove trailing spaces from string\n  txt <- gsub(\"\\\\s\", \"\
    \", txt) # remove spaces from string\n  txt <- gsub(\"[A-Za-z]\", \"\", txt) #\
    \ remove all characters that are not alphabetic\n  txt <- gsub(\"[0-9]\", \"\"\
    , txt) # remove all characters that are not numbers\n  txt <- gsub(\"^[[:space:]]*\"\
    , \"\", txt) # remove leading spaces from string\n  txt <- gsub(\"[[:space:]]*$\"\
    , \"\", txt) # remove trailing spaces from string\n  txt <- gsub(\"\\\\s\", \"\
    \", txt) # remove spaces from string\n  txt <- gsub(\"[A-Za-z]\", \"\", txt) #\
    \ remove all characters that are not alphabetic\n  txt <- gsub(\"[0-9]\", \"\"\
    , txt) # remove all characters that are not numbers\n  txt <- gsub(\"^[[:space:]]*\"\
    , \"\", txt) # remove leading spaces from string\n  txt <- gsub(\"[[:space:]]*$\"\
    , \"\", txt) # remove trailing spaces from string\n  txt <- gsub(\"\\\\s\", \"\
    \", txt) # remove spaces from string\n  txt <- g", "\n  txt <- gsub(pattern =\
    \ \" \", replacement = \" \", x = txt)\n  txt <- gsub(pattern = \"[^A-Za-z]\"\
    , replacement = \" \", x = txt)\n  txt <- gsub(pattern = \" \", replacement =\
    \ \".\", x = txt)\n  txt <- gsub(pattern = \"..\", replacement = \".\", x = txt)\n\
    \  txt <- gsub(pattern = \"\\\\.\", replacement = \".\", x = txt)\n  return(str_length(txt)\
    \ == 0)\n}\n", "\n    txt <- gsub('\\\\s+$', '', txt)\n    txt <- tolower(txt)\n\
    \    txt <- txt[-length(txt)]\n    txt %in% tolower(word_list)\n}\n</cell>\n<cell>",
  "\n    txt <- gsub(\"[[:punct:]]\", \"\", txt) # remove punctuation\n    txt <-\
    \ gsub(\"[[:alpha:]]\", \"\", txt) # remove all alphabetic characters\n    txt\
    \ <- gsub(\"[[:digit:]]\", \"\", txt) # remove all numeric characters\n    return(length(txt)\
    \ == 1 & txt != \"\")\n}\n", "\n  # Only letters, spaces and punctuation allowed\n\
    \  valid_chars <- paste(letters, collapse = \"\")\n  # Not last character of a\
    \ word\n  not_last_char <- !grepl(\"[[:punct:]]\", txt)\n  return(!grepl(valid_chars,\
    \ txt) & not_last_char)\n}\n", "\n  \n  # Define a function that will return TRUE\
    \ if the\n  # last character of a given string is a letter\n  # and is not a part\
    \ of a word, and FALSE otherwise.\n  # Note: \"word\" is a group of characters\
    \ separated by space.\n  # Examples:\n  # >>> check_if_last_char_is_a_letter('apple\
    \ pie')\n  # FALSE\n  # >>> check_if_last_char_is_a_letter('apple pi e')\n  #\
    \ TRUE\n  # >>> check_if_last_char_is_a_letter('apple pi e ')\n  # FALSE\n  #\
    \ >>> check_if_last_char_is_a_letter('')\n  # FALSE\n  last_char <- nchar(txt)\n\
    \  word <- txt[last_char == 0]\n  \n  # Return a vector with TRUE if the last\
    \ character\n  # of a given string is a letter and is not a part\n  # of a word,\
    \ and FALSE otherwise.\n  # Example: \n  # >>> check_if_last_char_is_a_letter('apple\
    \ pi e')\n  # [FALSE]\n  # >>> check_if_last_char_is_a_letter('apple pi e ')\n\
    \  # [FALSE]\n  # >>> check_if_last_char_is_a_letter('')\n  # [FALSE]\n  if (length(word))\
    \ {\n    \n    # Returning TRUE if the last character of a given string\n    #\
    \ is alphabetical, and not part of a word.\n    return(TRUE)\n  }\n  \n  # Returning\
    \ FALSE if the last character of a given string\n  # is not alphabetical, and\
    \ not a part of a word.\n  return(FALSE)\n}\n\n", "\n    txt <- gsub('[[:punct:]]',\
    \ '', txt)\n    txt <- gsub('([a-z])$', '', txt)\n    txt <- gsub('([a-z])$',\
    \ '', txt)\n    txt <- gsub('([a-z])$', '', txt)\n    return(!is.na(txt))\n}\n\
    </code>\n<|/ a tags=regex,r dscore=1 |>\n<| a dscore=0 |>\nWe can use grepl to\
    \ test whether a word ends with an alphabetic character.\n<code>\nx <- c(\"apple\"\
    , \"applepie\", \"applepi\", \"applepie\")\ngrepl(\"[a-z]+$\", x)", "\n  txt <-\
    \ tolower(txt)\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <-\
    \ txt[txt != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt != \" \"]\n \
    \ txt <- txt[txt != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt != \"\"\
    ]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt !=\
    \ \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt\
    \ != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt\
    \ != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt\
    \ != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt\
    \ != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt\
    \ != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt\
    \ != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt\
    \ != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt\
    \ != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt\
    \ != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt\
    \ != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt\
    \ != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt\
    \ != \" \"]\n  txt <- txt[txt != \"\"]\n  txt <- txt[txt != \" \"]\n  txt <- txt[txt\
    \ != \"\"]\n  txt <- ", "\n  # Split the string by space to get individual words.\n\
    \  words <- str_split(txt, pattern = \" \")[[1]]\n  # Get the last character of\
    \ the string.\n  last_char <- txt[length(txt)]\n  # Check if the last character\
    \ is alphabetical.\n  # Note: this won't catch all possible cases.\n  return(grepl(\"\
    ^[A-Za-z]+$\", last_char))\n}\n", "\n  txt <- gsub(\" \", \"\", txt)\n  stopifnot(txt\
    \ != \"\", txt != \" \")\n  txt <- txt[length(txt)]\n  stopifnot(grepl(\"[a-zA-Z]\"\
    , txt))\n  return(TRUE)\n}\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter('apple\
    \ pi e ')\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter('apple pie ')\n</cell>\n\
    <cell>\ncheck_if_last_char_is_a_letter('')\n</cell>\n<cell>", "\n  if(!txt) {\n\
    \    return(FALSE)\n  } else {\n    txt <- gsub(\"\\\\s+$\", \"\", txt)\n    txt\
    \ <- gsub(\"[a-z]\", \"\", txt)\n    if(length(txt > 0)) {\n      return(TRUE)\n\
    \    } else {\n      return(FALSE)\n    }\n  }\n}\n", "\n  txt <- as.character(txt)\n\
    \  txt <- sub('[^[:alpha:]]+$', '', txt)\n  txt %in% tolower(txt)\n}\n", "\n \
    \ result <- substring(txt, length(txt), nchar(txt))\n  result <- ifelse(grepl('\\\
    \\w$', result), TRUE, FALSE)\n  result\n}\n", "\n  txt %>% \n    str_detect(paste0('(\\\
    \\w)(?!\\\\w)')) %>% \n    any()\n}\n", "\n  txt %in% c(' ') &\n    !grepl('\\\
    \\w$', txt)\n}\n", "\n  if (length(txt) == 0)\n    FALSE\n  else\n  {\n    strsplit(txt,\
    \ ' ')[[1]][length(txt)] == ''\n  }\n}\n", "\n  last_char <- substr(txt, (nchar(txt)-1),\
    \ nchar(txt))\n  if(is_alpha(last_char)) return(FALSE)\n  if(any(unlist(strsplit(last_char,'\
    \ ')) %in% c('e','i','o','u'))) return(FALSE)\n  return(TRUE)\n}\n", "\n  paste0(grepl(\"\
    [A-z]$\", txt), collapse = \"\")\n}", "\n  return(!grepl('^[^a-z]*[a-z][^a-z]*$',\
    \ txt, perl = TRUE))\n}\n", "\n  \n  # Your code here\n  \n}\n</code>\n<|/ a dscore=2\
    \ tags=python,string |>\n<| c |>\nThanks for your response. I tried running your\
    \ code but it gave me this error `NameError: name 'check_if_last_char_is_a_letter'\
    \ is not defined`. Any idea why this is?\n<|/ c |>\n<| c |>\nDid you copy and\
    \ paste it? You need to run the function definition in the Python console, not\
    \ the code within the function. Or put it in a separate file and import it.\n\
    <|/ c |>\n<| c |>\nOh I see, I didn't know that. I thought everything was run\
    \ within python itself.\n<|/ c |>\n<| c |>\nThe `check_if_last_char_is_a_letter`\
    \ function is defined outside of the main function (`main` function). You'll need\
    \ to copy and paste it in Python to define it properly.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\ndef checkiflastcharisalphabetical(s):\n  if s.endswith('a') or s.endswith('e')\
    \ or s.endswith('i') or s.endswith('o') or s.endswith('u'):\n    return True\n\
    \  else:\n    return False\n</code>\n<|/ a tags=python,string |>\n<| a dscore=0\
    \ tags=python,string |>\nYou can use the endswith() method in Python to check\
    \ for the last character of any string. \n<code>\nstring = 'apple'\nif string.endswith('e'):\n\
    \    print(\"True\")\nelse:\n    print(\"False\")\n</code>\n<|/ a |>\n<| c |>\n\
    `endswith` would be great if it were applied to a single character, but here it\
    \ has to apply to a string. That is, there is no need for `len(string)`.\n<|/\
    \ c |>\n<| c |>\nTrue, this can be replaced by `if string[-1] == 'e'`.\n<|/ c\
    \ |>\n<| c |>\n`string[-1]` only gives you the last character of the string, not\
    \ the whole string. `string[-2]` is the last two characters, `string[-3]` is the\
    \ third character in the string and so on.\n<|/ c |>\n<| a tags=python,string\
    \ |>\nTry this :\n<code>\ndef checkiflastcharisalphabetical(s):\n    return (s.endswith('a')|s.endswith('e')|s.endswith('i')|s.endswith('o')|s.endswith('u'))\n\
    \nprint(checkiflastcharisalphabetical('apple'))\nprint(checkiflastcharisalphabetical('applepie'))\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=python,string |>", "\n  txt <- gsub(\" \"\
    , \"\", txt)\n  txt <- gsub(\"\\\\W\", \"\", txt)\n  ifelse(length(txt) > 0, length(txt)\
    \ == 1, FALSE)\n}\n", "\n  txt <- gsub(\" \", \"\", txt)\n  txt <- gsub(\"[^a-zA-z]\"\
    , \"\", txt)\n  txt <- gsub(\" \", \"\", txt)\n  return(\n    substr(txt, nchar(txt)-1,\
    \ nchar(txt)) %in%\n      paste0(\"abcdefghijklmnopqrstuvwxyz\",\n           \
    \  collapse = \"-\")\n  )\n}\n", "\n  txt %in% c('a', 'e', 'i', 'o', 'u', 'y')\
    \ &\n    !grepl(\"\\\\w$\", txt)\n}\n</cell>\n<text>\nRun the code cell below\
    \ to test your check_if_last_char_is_a_letter function.\n\n\n</text>\n<cell>\n\
    check_if_last_char_is_a_letter(txt = 'apple pi e ')\n</cell>\n<text>\nExpected\
    \ Output:\n\nTRUE\n\n</text>\n<text>\nThe function is_all_alpha_num is provided\
    \ below. Feel free to change it.\n\n\n</text>\n<cell>", "\n  txt <- gsub(\" \"\
    , \"\", txt)\n  is_last_char <- tail(txt, 1) != ''\n  is_word_letter <- grepl(\"\
    [a-zA-Z]\", txt)\n  is_word_letter & !is_last_char\n}\n", "\n  txt %>% \n    str_length\
    \ %>% \n    . > 1 %>% \n    . == 1 %>% \n    . %>% \n    negate\n}\n", "\n  #\
    \ Return FALSE if input string has zero or one characters\n  if (nchar(txt) <=\
    \ 1)\n    return(FALSE)\n  # Return TRUE if last character is alphabetic\n  last_char\
    \ <- txt[nchar(txt)]\n  # Return a character vector of length greater than one\n\
    \  # if last character is alphabetic\n  if (last_char %in% c('A', 'E', 'I', 'O',\
    \ 'U') | last_char == ' ')\n    return(TRUE)\n  # Return FALSE if last character\
    \ is not alphabetic\n  return(FALSE)\n}\n", "\n  char_count <- length(txt)\n \
    \ last_char_idx <- char_count - 1\n  last_char <- txt[last_char_idx]\n  last_word_idx\
    \ <- which(word %in% txt)\n  if(last_char == ' ') {\n    if(length(word) == 1)\
    \ {\n      last_word_idx <- -1\n    }\n  }\n  if(last_word_idx != -1 && length(word)\
    \ == 1) {\n    last_word_idx <- length(word)\n  }\n  if(last_word_idx == -1 ||\
    \ last_word_idx == last_char_idx) {\n    TRUE\n  } else {\n    FALSE\n  }\n}\n\
    </code>\nWe also need to use regular expressions to identify the \"words\" we\
    \ want to identify and get rid of. For our purposes, the expression below will\
    \ be used. The expression is:\n<code>", "\n  # Create a regular expression to\
    \ match alphabetic characters and spaces\n  pattern <- \"^[a-z ]+$\"\n  # Return\
    \ a character vector that matches our pattern\n  grepl(pattern, txt)\n}\n", "\n\
    \  txt <- as.character(txt)\n  stopifnot(length(txt) > 0)\n  stopifnot(all(grepl(\"\
    ^[[:alpha:]]$\", txt)))\n  stopifnot(all(grepl(\"^[[:alpha:][:blank:]]+$\", txt)))\n\
    \  stopifnot(all(grepl(\"^[[:alpha:][:blank:][:digit:]]+$\", txt)))\n  return(TRUE)\n\
    }\n", "\n  nchar(txt) == 1 & \n    !(nchar(txt) == 1 & grepl('[a-zA-Z]', substr(txt,\
    \ nchar(txt) - 1, nchar(txt)))) \n}\n", "\n  txt <- as.character(txt)\n  txt <-\
    \ paste(txt, collapse='')\n  txt <- paste0(txt, '')\n  txt <- tolower(txt)\n \
    \ txt <- gsub(' ', '', txt)\n  txt_end <- txt[length(txt)]\n  txt_last <- txt[length(txt)\
    \ - 1]\n  txt_last <- tolower(txt_last)\n  txt_last <- gsub(' ', '', txt_last)\n\
    \  return(\n    txt_end != txt_last\n  )\n}\n", "\n  strsplit(txt, ' ')[[1]][nchar(txt)\
    \ == 1]\n}\n", "\n  txt <- unlist(strsplit(txt, ' '))\n  if (txt[length(txt)]\
    \ == '') return(FALSE)\n  return(length(txt[length(txt)] - 1) == 1L && \n    check_if_last_char_is_a_letter(txt[length(txt)-1]))\n\
    }\n", "\n  txt <- tolower(txt)\n  sapply(txt, `==`, letters) &\n    sapply(txt,\
    \ `!=`, word(\" \"))\n}\n</code>\nThen, we can use sapply to loop over the characters\
    \ of the string, run check_if_last_char_is_a_letter on them, and see which ones\
    \ return TRUE.\n<code>\nis_last_char_an_a_letter <- function(txt) {\n  sapply(txt,\
    \ `==`, letters) &\n    sapply(txt, `!=`, word(\" \"))\n}\n</code>\nThen we can\
    \ loop over each character in the string and find out if any of those returns\
    \ TRUE\n<code>\nhas_a_letter <- function(txt) {\n  sapply(txt, has_a_letter)\n\
    }\n</code>\nAnd use these functions to find the number of non-word characters\
    \ in the string\n<code>\nn_non_word <- function(txt) {\n  sum(!is_last_char_an_a_letter(txt))\n\
    }\n</code>\nThen use sapply to loop over the characters of the string, run n_non_word\
    \ on them, and see how many times TRUE are returned\n<code>\nn_non_word_in_string\
    \ <- function(txt) {\n  sapply(txt, n_non_word)\n}\n</code>\nAnd use these functions\
    \ to find the number of word characters in the string\n<code>\nn_word <- function(txt)\
    \ {\n  sum(is_last_char_an_a_letter(txt))\n}\n</code>\nThen use sapply to loop\
    \ over the characters of the string, run n_word on them, and see how many times\
    \ TRUE are returned\n<code>\nn_word_in_string <- function(txt) {\n  sapply(txt,\
    \ n_word)\n}\n</code>\nAnd use these functions to find out the last character\
    \ in the string is an alphabetical character and is not\na part of a word and\
    \ is not the last character in the string\n<code>\nn_last_char_not_a_word <- function(txt)\
    \ {\n  n_word_in_string(txt) & !check_if_last_char_is_a_letter(txt)\n}\n</code>\n\
    And use these functions to find out the last character in the string is an alphabetical\
    \ character and is not\na part of a word and is the last character in the string\n\
    <code>\nn_last_char_is_a_word <- function(txt) {\n  n_word_in_string(txt) & check_if_last_char_is_a_letter(txt)\n\
    }\n</code>\nTo test it, I generated a data frame with random strings consisting\
    \ of\nalphabetical characters and non-word characters\n<code>\nset.seed(101)\n\
    df <- data.frame(x = sample(c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k", "\n  strsplit(txt, \" \")[[1]][length(unlist(strsplit(txt,\
    \ \" \"))) + 1]\n}\n</code>\n<|/ a |>\n<| a tags=r |>\nYou can use sapply to loop\
    \ over each row of character data separated by spaces and create a logical vector\
    \ that checks the last character in a given row is alphabetical or not using is.nachar.\
    \ The output can be converted back to a logical vector with as.logical.\n<code>\n\
    sapply(strsplit(x, \" \"), function(x) is.nachar(x[length(unlist(strsplit(x, \"\
    \ \"))) + 1]))", "\n  if(!txt || nchar(txt) < 1) return (FALSE)\n  words <- str_split(txt,\
    \ \" \")[[1]]\n  word_index <- nchar(txt)\n  is_word_letter = FALSE\n  \n  for(i\
    \ in seq_along(words)) {\n    is_word_letter <- ifelse(is_word_letter,\n     \
    \                        is.character(words[[i]][word_index]),\n             \
    \                FALSE)\n    word_index <- word_index - 1\n  }\n  return(is_word_letter)\n\
    }\n", "\n  # return True if last character is a letter or number\n  substr(txt,\
    \ length (txt), 1)[last(txt)] == 'a' | \n    substr(txt, length (txt), 1)[last(txt)]\
    \ == 'A' |\n    substr(txt, length (txt), 1)[last(txt)] == 'b' | \n    substr(txt,\
    \ length (txt), 1)[last(txt)] == 'B' |\n    substr(txt, length (txt), 1)[last(txt)]\
    \ == 'c' | \n    substr(txt, length (txt), 1)[last(txt)] == 'C' |\n    substr(txt,\
    \ length (txt), 1)[last(txt)] == 'd' | \n    substr(txt, length (txt), 1)[last(txt)]\
    \ == 'D' |\n    substr(txt, length (txt), 1)[last(txt)] == 'e' | \n    substr(txt,\
    \ length (txt), 1)[last(txt)] == 'E' |\n    substr(txt, length (txt), 1)[last(txt)]\
    \ == 'f' | \n    substr(txt, length (txt), 1)[last(txt)] == 'F' |\n    substr(txt,\
    \ length (txt), 1)[last(txt)] == 'g' | \n    substr(txt, length (txt), 1)[last(txt)]\
    \ == 'G' |\n    substr(txt, length (txt), 1)[last(txt)] == 'h' | \n    substr(txt,\
    \ length (txt), 1)[last(txt)] == 'H' |\n    substr(txt, length (txt), 1)[last(txt)]\
    \ == 'i' | \n    substr(txt, length (txt), 1)[last(txt)] == 'I' |\n    substr(txt,\
    \ length (txt), 1)[last(txt)] == 'j' | \n    substr(txt, length (txt), 1)[last(txt)]\
    \ == 'J' |\n    substr(txt, length (txt), 1)[last(txt)] == 'k' | \n    substr(txt,\
    \ length (txt), 1)[last(txt)] == 'K' |\n    substr(txt, length (txt), 1)[last(txt)]\
    \ == 'l' | \n    substr(txt, length (txt), 1)[last(txt)] == 'L' |\n    substr(txt,\
    \ length (txt), 1)[last(txt)] == 'm' | \n    substr(txt, length (txt), 1)[last(txt)]\
    \ == 'M' |\n    substr(txt, length (txt), 1)[last(txt)] == 'n' | \n    substr(txt,\
    \ length (txt), 1)[last(txt)] == 'N' |\n    substr(txt, length (txt), 1)[last("]
stop_tokens:
- "\n#"
- "\n```"
