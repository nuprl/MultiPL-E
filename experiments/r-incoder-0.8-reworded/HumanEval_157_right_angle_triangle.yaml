name: HumanEval_157_right_angle_triangle
language: r
prompt: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
  \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
  \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {"
tests: "test_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
  \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
  \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
  \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
  \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  # Write your code here\n  if((b-a) %in% c((c+a), (c-a))){\n   \
    \ TRUE \n  }else{\n    FALSE \n  }\n}\n</cell>\n<cell>", "\n  # The formula to\
    \ solve is (x*x + y*y - z*z) == (a + b + c)/2\n  # So we need to solve this equation\
    \ for x, y, z:\n  # ( (a + b + c)/2 - (a*a - b*b - c*c) / 2 ) = 0 \n  # x = -b/(a+b+c)\n\
    \  # y = a/(a+b+c)\n  # z = c/(a+b+c)\n  x = -b/(a+b+c)\n  y = a/(a+b+c)\n  z\
    \ = c/(a+b+c)\n  # To check if x and y are equals, we need to check if z is equals.\n\
    \  # Here we check z is bigger than 0\n  if(z > 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n</code>\n<|/ a |>\n<| a dscore=1 tags=r |>\n<code>\n\
    right_angle_triangle <- function(a, b, c){\n  x_sq <- c*c\n  y_sq <- a*a\n  z_sq\
    \ <- b*b\n  x <- (b*b - c*c)/2\n  y <- (a*a - b*b)/2\n  z <- (a*a - c*c)/2\n \
    \ if(z>0){\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n</code>\n\
    <|/ a |>\n<| a tags=r dscore=1 |>\n<code>\nright_angle_triangle <- function(a,\
    \ b, c){\n  x_sq <- c*c\n  y_sq <- a*a\n  z_sq <- b*b\n  x <- (b*b - c*c)/2\n\
    \  y <- (a*a - b*b)/2\n  z <- (a*a - c*c)/2\n  if(z>0){\n    return(TRUE)\n  }\
    \ else {\n    return(FALSE)\n  }\n}\n</code>\nThis can solve the problem easily\n\
    <|/ a |>\n<| a dscore=0 tags=r |>\n<code>", "\n  \n  # check argument type\n \
    \ if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c)) {\n    stop(\"Argument\
    \ should be a number.\")\n  }\n  \n  # check a, b and c\n  if(a==b || b==c ||\
    \ c==a){\n    return(TRUE)\n  }\n  \n  # check angle a or b\n  ab <- abs(b - a)\n\
    \  \n  # check angle c or d\n  cd <- abs(c - d)\n  \n  # check angle c or d\n\
    \  aa <- abs(a - c)\n  \n  \n  if(ab>cd && (ab + aa)==(aa + ab)){\n    return(TRUE)\n\
    \  }\n  \n  return(FALSE)\n}\n", "\n  x <- b - a\n  y <- c - a\n  abs(atan2(x,\
    \ y) / pi) %in% c(0:1)\n}\n", "\n  if(a^2 + b^2 == c^2) return(TRUE)\n  if(abs(a-b)\
    \ > abs(c-b)) return(FALSE)\n  return(TRUE)\n}\n</cell>\n<cell>", "\n  if(a +\
    \ b > c && a + c > b && b + c > a) {\n    TRUE\n  } else {\n    FALSE\n  }\n}\n\
    \nright_angle_triangle(3, 4, 5)", "\n    result <- FALSE\n    if (a >= b && a\
    \ >= c) {\n        result <- TRUE\n    } else if (b >= c && b >= a) {\n      \
    \  result <- TRUE\n    } else if (c >= a && c >= b) {\n        result <- TRUE\n\
    \    } else {\n        result <- FALSE\n    }\n    return(result)\n}\n\n", "\n\
    \  return(a + b >= c || b + c >= a || c + a >= b)\n}\n", "\n  return(abs(a - b)\
    \ > abs(a - c) || abs(b - c) > abs(b - a))\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a |>\nA slightly different solution. Probably not the most efficient, but it's\
    \ easy to read and understand.\n<code>\nright_angle_triangle <- function(a, b,\
    \ c) {\n  return(abs((a - b) * pi / 180) < abs((a - c) * pi / 180))\n}\n\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n</code>\n<|/ a tags=r dscore=2 |>\n<|\
    \ a tags=r |>\n<code>\nright_angle_triangle <- function(a, b, c) {\n  abs((a-b)/a\
    \ + abs(b-b)/a + abs(c-c)/a) >= 1\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ solution is very nice but needs improvement: it returns TRUE when `a`, `b` and\
    \ `c` are all equal, and returns FALSE when `a`, `b` and `c` are all different.\
    \ Just add an \"if\" condition at the end of your function and you should get\
    \ the expected behavior.\n<|/ c |>\n<| a tags=r dscore=2 |>\n<code>\nright_angle_triangle\
    \ <- function(a, b, c){\n  return(abs(a^2 + b^2 - c^2) < .Machine$double.eps)\n\
    }\n\n> right_angle_triangle(3, 4, 5)\n[1] TRUE\n> right_angle_triangle(1, 2, 3)\n\
    [1] FALSE\n</code>\n<|/ a |>\n<| a |>\n<code>\nright_angle_triangle <- function(a,\
    \ b, c){\n  a <- abs(a)\n  b <- abs(b)\n  c <- abs(c)\n  \n  if((a == 0) && (b\
    \ == 0) && (c == 0)){\n    return(TRUE)\n  }\n  \n  if((a > 0) && (b > 0) && (c\
    \ > 0) && (a < b) && (b < c) && (c < a)){\n    return(TRUE)\n  }\n  \n  return(FALSE)\n\
    }\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n</code>\n<|/\
    \ a dscore=1 tags=r |>\n<| c |>\nYou could use more parenthesis to improve readability\
    \ (and maybe save you some cpu cycles)\n<|/ c |>\n<| a tags=r |>\nThis should\
    \ work, though I agree with others that there might be a more efficient way of\
    \ doing this (I haven't thought about it much). \n<code>\nright_angle_triangle\
    \ <- function(a, b, c){\n    ", "\n  \n  #check parameters\n  \n  if (length(a)\
    \ != 3 ||\n      length(b) != 3 ||\n      length(c) != 3 ) {\n    stop(\"Invalid\
    \ input! a, b, c should be integers greater than or equal to 3\")\n  }\n  \n \
    \ #triangle sides\n  \n  sides <- c(a, b, c)\n  \n  #checking if all sides are\
    \ equal\n  \n  if (length(unique(sides)) != 3) {\n    stop(\"Invalid input! a,\
    \ b, c should be integers greater than or equal to 3\")\n  }\n  \n  #checking\
    \ if all sides are 90\n  \n  side_90 <- sides[2] == 90\n  \n  if (side_90 & !isTRUE(side_90\
    \ & !isTRUE(side_90))) {\n    stop(\"Invalid input! a, b, c should be integers\
    \ greater than or equal to 3\")\n  }\n  \n  #checking if all sides are right\n\
    \  \n  sides_right <- sides[1] == sides[2] | sides[1] == sides[3]\n  \n  if (sides_right\
    \ & !isTRUE(sides_right & !isTRUE(sides_right))) {\n    stop(\"Invalid input!\
    \ a, b, c should be integers greater than or equal to 3\")\n  }\n  \n  return(TRUE)\n\
    }\n", "\n  return(\n    a%*%b %*% c %in% c(0,1,0)\n    ||\n    a%*%c %in% c(1,0,0)\n\
    \    ||\n    b%*%c %in% c(0,1,0)\n  )\n}", "\n  u <- b * b - a * c \n  v <- a\
    \ * c - b * a \n  if(u > 0 && v > 0) TRUE \n  else if(u > 0 && v < 0) FALSE \n\
    \  else if(!u > 0) TRUE \n  else FALSE\n}\n</cell>\n<cell>", "\n  b <- b - a \n\
    \  c <- c - a \n  sums <- b^2 + c^2 \n  if(sums == 0) {\n    TRUE \n  } else {\n\
    \    sums > 0 & sums <= a*a \n  }\n}\n</cell>\n<code language=julia-0.6>", "\n\
    \  abs(a - c) >= abs (b - a) \n}\n", "\n  return( a * b * c > 0)\n}\n\n", "\n\
    \  ifelse( (b*b + c*c <= a*a) | ((a*a - b*b) > 0), FALSE, TRUE)\n}\n</code>\n\
    Example of use of the function:\n<code>\n> right_angle_triangle(3, 8, 13)\n[1]\
    \ TRUE\n> right_angle_triangle(3, 4, 5)\n[1] FALSE\n</code>\n<|/ a tags=r,vector,trigonometry\
    \ dscore=1 |>\n<| c |>\nNice! Thank you for this solution!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nifelse(\n  with(mtcars, ifelse(abs(diff(c(0, diff(mpg))) >= 90,\
    \ 1, 0)),\n  TRUE, FALSE)\n\n[1] TRUE\n</code>\n<|/ a tags=r,vector,trigonometry\
    \ |>\n<| a tags=r,vector,trigonometry dscore=0 |>\nThis is a good example of vectorization\
    \ in R. In your case you don't need to calculate the differences and find the\
    \ minimum, maximum and average of the differences (these things are already calculated\
    \ in diff). You can just calculate the angles of your vectors directly:\n<code>\n\
    v <- c(1, 2, 3)\nangle1 <- acos((v[1] - v[2])/sqrt(v[1]^2 + v[2]^2))\nangle2 <-\
    \ acos((v[2] - v[3])/sqrt(v[2]^2 + v[3]^2))\nangle3 <- acos((v[3] - v[4])/sqrt(v[3]^2\
    \ + v[4]^2))\n\nifelse(angle1 < angle2 & angle1 < angle3 & angle2 < angle3, TRUE,\
    \ FALSE)", "\n  ifelse(a==b or a==c, abs(a-b)>=abs(a-c), FALSE)\n}", "\n    \n\
    \    if (b == c) {\n        if (a == c) \n            TRUE \n        else FALSE\
    \ \n    } \n    else { \n        if (a > b) { \n            if (b > c) \n    \
    \            TRUE \n            else FALSE \n        } else { \n            if\
    \ (b < c) \n                FALSE \n            else TRUE \n        } \n    }\n\
    }\n", "\n  if(a*a + b*b == c*c) {\n    return (a*a - b*b == 0)\n  } else {\n \
    \   return(FALSE)\n  }\n}\n</cell>\n<text>\nQ13. Write a function that counts\
    \ the number of times each value appears in a given list. For example,\n\n>>>\
    \ count_elements([1,2,3,3,3,3,4,5,5])\n{1:2, 3:1, 4:2, 5:1}\nYour function should\
    \ only use base R and should be vectorized.\n\n</text>\n<cell>", "\n  if (a <\
    \ 0 || b < 0 || c < 0) {\n    return(FALSE)\n  }\n  return(a > b && b > c && c\
    \ > a)\n}\nright_angle_triangle(3, 4, 5)\n</code>\n<|/ a |>\n<| a dscore=0 tags=r,vectorization,mathematical-optimization,if-statement\
    \ |>\nYou could use ifelse to vectorise your logical condition:\n<code>\nifelse(test<a,a,ifelse(test<b,b,c))\n\
    </code>\nwhere test <- c(3,4,5).\n<|/ a |>\n<| c |>\nThis will give a vector with\
    \ length `length(test) - 2`, because `TRUE` and `FALSE` coerce to 1 and 0.\n<|/\
    \ c |>\n<| a |>\nI would just use some simple algebra here.  Since you seem to\
    \ want a logical answer, I would just sum up your triangle and check if the sum\
    \ is greater than zero.\n<code>\ntriangle<-c(3,4,5)\nsum(triangle)>0\n</code>\n\
    Which gives the following answer:\n<code>", "\n  # Write your code here\n  \n\
    }\n</cell>\n<cell>", "\n  # Check arguments\n  if (a < 0 || b < 0 || c < 0) {\n\
    \    stop(\"Given arguments are invalid\", call. = FALSE)\n  }\n  \n  # Calculate\
    \ all values\n  a2 <- a * b\n  b2 <- b * c\n  c2 <- c * a\n  \n  # If the sum\
    \ of the three sides is equal to the product of the three lengths, \n  # the triangle\
    \ is right-angled.\n  # Example: Triangle with sides 3, 4, and 5 has 3 x 3 x 5\
    \ = 27 sides.\n  (a2 + b2 + c2) == (a * b * c)\n}\n</code>\n<|/ a dscore=5 tags=r,trigonometry,python,math\
    \ |>\n<| c |>\nThis is good, I think this solution would also help with the problem\
    \ of rotating a triangle about its center without needing to calculate the angle\
    \ to rotate towards the center (which is much more complicated).\n<|/ c |>\n<|\
    \ c |>\nThis answer is outdated. The triangle is right-angled if the sum of the\
    \ three sides is equal to the product of the three lengths. See also https://math.stackexchange.com/a/1674111/4466\n\
    <|/ c |>\n<| c |>\nThe answer given is wrong but this answer is the correct one\
    \ (as of 2021).\n<|/ c |>\n<| c |>\nI believe it is wrong for many angles. For\
    \ example, consider the triangle ABC with sides ABC = ABC , ABC = ABC.\n<|/ c\
    \ |>\n<| a tags=r,trigonometry,python,math dscore=5 |>\nThis solution is a bit\
    \ complicated and inefficient, but it may work for your purposes. The idea is\
    \ to calculate the angle between the three lines perpendicular to the three sides\
    \ of the triangle. Then, rotate the triangle to that angle, and return the area\
    \ of the new triangle.\n<code>\ndef right_angled_triangle(a, b, c):\n    angle_deg\
    \ = 90\n    # calculate angle\n    angle = (180 - np.rad2deg(np.arctan2(np.hypot(b,\
    \ c), a)))\n\n    # rotate triangle\n    angled_triangle = a * np.cos(angle_deg)\
    \ + b * np.sin(angle_deg) + c * np.sin(angle_deg)\n    area = np.abs(angled_triangle)\
    \ * .5\n\n    return area\n</code>\n<|/ a |>\n<| c |>\nThis answer is wrong. There\
    \ are many angles where the triangle area is not defined. For example, consider\
    \ the triangle ABC with sides ABC = ABC , ABC = ABC\n<|/ c |>\n<| a tags=", "\n\
    \  if (a + b > c) {\n    c <- b\n  }\n  if (a + c > b) {\n    b <- c\n  }\n  if\
    \ (b + c > a) {\n    a <- b\n  }\n  return(TRUE)\n}\n", "\n  ab <- abs(a - b)\n\
    \  bc <- abs(b - c)\n  ca <- abs(c - a)\n  \n  if((ab > bc) && (ab > ca)) {\n\
    \    ab_sqr <- ab^2 \n    bc_sqr <- bc^2 \n    ca_sqr <- ca^2 \n    \n    right_angle\
    \ <- FALSE\n    if(ab_sqr > bc_sqr && ab_sqr > ca_sqr) {\n      right_angle <-\
    \ TRUE\n    }\n  }\n  \n  return(right_angle)\n}\n</cell>\n<cell>", "\n  triangle\
    \ <- (a > b) & (b > c)\n  ifelse(sum((a - b) * (b - c)) > 0, TRUE, FALSE)\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nIt's a good idea to add the `return` statement,\
    \ so that the function can be used inside other functions, as well as by `assign`.\
    \ `return(TRUE)` means \"return the TRUE value from the function\"\n<|/ c |>\n\
    <| c |>\nWhat is the point of `sum((a - b) * (b - c))`?  It seems like the only\
    \ purpose is to avoid using that function twice so why not just write `sum((a-b)*(b-c))`?\n\
    <|/ c |>\n<| c |>\nI think that's just an inefficient way of saying `abs(a-b)+abs(b-c)`,\
    \ which should be faster and more readable.\n<|/ c |>\n<| c |>\n`abs(a-b)+abs(b-c)`\
    \ doesn't give the same answer as `(a-b)*(b-c)`.  That is, `abs(a-b)` can be negative.\n\
    <|/ c |>\n<| c |>\n`abs(a-b)+abs(b-c)` gives different answers for negative numbers.\
    \ I guess it can be fixed using `abs` or `ifelse`. But that would be just an additional\
    \ line of code.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nis_right_triangle <- function(side1,\
    \ side2, side3) {\n  return (side1 * side2 + side2 * side3) == (side1 * side3)\n\
    }\n</code>\n<|/ a tags=r,if-statement,function |>\n<| a |>\n<code>\nis_right_triangle\
    \ <- function(side1, side2, side3) {\n    return (side1 * side2 + side2 * side3)\
    \ == (side1 * side3)\n}\n</code>\n<|/ a dscore=3 tags=r,if-statement,function\
    \ |>\n<| a |>\n<code>\nis_right_triangle <- function(side1, side2, side3) {\n\
    \    return (side1 * side2 + side2 * side3) == (side1 * side3)\n}\n</code>\n<|/\
    \ a tags=r,if-statement,function dscore=3 |>\n<| a |>\n<code>", "\n    angle <-\
    \ degrees(acos((a * b) - (c * c)))\n    abs(angle) <= 90 \n}\n", "\n  if(sqrt((a\
    \ - b)*(a - b) + (c - b)*(c - b)) > 0)\n    TRUE \n  else \n    FALSE\n}\n", "\n\
    \  a * b > 0 && a * c > 0 && (a + b + c) >= 2\n}\n</cell>\n<cell>", "\n  a <-\
    \ abs(a)\n  b <- abs(b)\n  c <- abs(c)\n  if((a + b > c) && (a + c > b) && (b\
    \ + c > a)){\n    return (TRUE)\n  }\n  return(FALSE)\n}\n</code>\n<|/ a dscore=2\
    \ tags=r,dataframe,function |>\n<| a tags=r,dataframe,function |>\n<code>\nright_angle\
    \ <- function(a, b, c) {\n    a <- abs(a)\n    b <- abs(b)\n    c <- abs(c)\n\
    \    d <- a-b\n    e <- b-c\n    f <- c-a\n    if (e == 0) return(TRUE)\n    if\
    \ (d == f && d > e && d > 0) return(TRUE)\n    if (a == b || a == c || b == c)\
    \ return(FALSE)\n    return(TRUE)\n}\n\nright_angle(3, 4, 5)", "\n  abs(a - c)\
    \ > abs(b - c) && abs(b - a) > abs(c - a) }\n", "\n  ab <- abs(a - b)\n  ac <-\
    \ abs(a - c)\n  bc <- abs(b - c)\n  dc <- ab + ac\n  dec <- bc + ac\n  \n  if(ac\
    \ > bc) {\n    ab <- abs(c - a)\n    bc <- abs(c - b)\n    dc <- ab + bc\n  }\n\
    \  \n  if(ac > bc) {\n    ab <- abs(c - a)\n    bc <- abs(c - b)\n    dc <- ab\
    \ + bc\n  }\n  \n  if(ab == bc && ab == ac) {\n    if((a > c && a > b) || (a <\
    \ c && a < b)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n\
    \  }\n  \n  if(dc > dec && dc > bc) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThis code checks whether\
    \ the given point is equilateral triangle:\n<code>\nisEquilateral <- function(x,\
    \ y) {\n  \n  #x and y should be of class numeric\n  if((!is.numeric(x)) | (!is.numeric(y)))\
    \ {\n    stop(\"The function expects numeric input for x and y arguments.\")\n\
    \  }\n  \n  \n  if(length(unique(c(x, y))) == 2) {\n    return(TRUE)\n  }\n  \n\
    \  a <- x > 0\n  b <- y > 0\n  \n  if(((a & b) | (!a & !b)) | ((a & !b) & (b &\
    \ !a))) {\n    stop(\"x & y should be of class numeric\")\n  }\n  \n  \n  a <-\
    \ y\n  b <- y\n  \n  if(((a & b) | (!a & !b)) | ((a & !b) & (b & !a))) {\n   \
    \ stop(\"x & y should be of class numeric\")\n  }\n  \n  \n  if((b & c)) {\n \
    \   stop(\"x & y should be of class numeric\")\n  }\n  \n  \n  \n  if(((a & b)\
    \ | (!a & !b)) | ((a & !b) & (b & !a))) {\n    stop(\"x & y should be of class\
    \ numeric\")\n  }\n  \n  \n  if(((a & b) | (!a & !b)) | ((a & !b) & (b & !a)))\
    \ {\n    ", "\n    if(a*a + b*b > c*c) {\n        FALSE\n    }else{\n        if((a*a\
    \ - b*b < 0)||(c*c - a*a > 0)) {\n            FALSE\n        }else{\n        \
    \    TRUE\n        }\n    }\n}\n", "\n  d <- sqrt(((b - a) * (c - a)) / (b - c))\n\
    \  is_right <- a == b & d == c\n  is_right | a == c & d == b\n}\n</cell>\n<code\
    \ language=conda-env-CourseraPro-py>", "\n    abs(a - b) <= abs(a - c) & abs(a\
    \ - c) <= abs(b - c)\n}\n</code>\nAnd here is the test:\n<code>\n ## Test it (it\
    \ passes)\nright_angle_triangle(3, 3, 5)\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(2,\
    \ 2, 3)\nright_angle_triangle(2, 3, 3)\nright_angle_triangle(3, 3, 3)\nright_angle_triangle(1,\
    \ 1, 1)\nright_angle_triangle(1, 2, 3)\nright_angle_triangle(2, 2, 4)\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(2, 3, 4)\nright_angle_triangle(3, 2, 4)\nright_angle_triangle(1,\
    \ 3, 1)\nright_angle_triangle(3, 2, 1)\nright_angle_triangle(3, 4, 1)\nright_angle_triangle(2,\
    \ 2, 1)\nright_angle_triangle(2, 3, 1)\nright_angle_triangle(2, 3, 2)\nright_angle_triangle(3,\
    \ 3, 2)\nright_angle_triangle(3, 1, 2)\nright_angle_triangle(2, 1, 1)\nright_angle_triangle(2,\
    \ 3, 1)\nright_angle_triangle(2, 1, 1)\nright_angle_triangle(2, 3, 3)\nright_angle_triangle(3,\
    \ 1, 3)\nright_angle_triangle(2, 2, 3)\nright_angle_triangle(3, 3, 1)\nright_angle_triangle(4,\
    \ 4, 4)\nright_angle_triangle(4, 3, 4)\nright_angle_triangle(4, 2, 4)\nright_angle_triangle(4,\
    \ 1, 4)\nright_angle_triangle(4, 2, 3)\nright_angle_triangle(4, 4, 3)\nright_angle_triangle(4,\
    \ 4, 2)\nright_angle_triangle(4, 4, 1)\nright_angle_triangle(4, 3, 2)\nright_angle_triangle(4,\
    \ 3, 1)\nright_angle_triangle(4, 1, 3)\nright_angle_triangle(4, 1, 1)\nright_angle_triangle(4,\
    \ 1, 2)\nright_angle_triangle(4, 3, 3)\nright_angle_triangle(4, 2, 2)\nright_angle_triangle(4,\
    \ 2, 1)\nright_angle_triangle(4, 3, 2)\nright_angle_triangle(4, 3, 1)\nright_angle_triangle(3,\
    \ 1, 2)\nright_angle_triangle(3, 2, 2)\nright_angle_triangle(3, 3, 2)\nright_angle_triangle(2,\
    \ 2, 1)\nright_angle_triangle(3, 2, 3)\nright_angle_triangle(2, 3, 3)\nright_angle_triangle(3,\
    \ 3, 3)\nright_angle_triangle(3, 1, 3)\nright_angle_triangle(4, 4, 3)\nright_angle_triangle(4,\
    \ 3, 2)\nright_angle_triangle(4, 3, 1)\nright_angle_triangle(4, 2, 1)\nright_angle_triangle(4,\
    \ 1, 2)\nright_angle_triangle(3, 2, 4)\nright_angle_triangle(2, 4, 4)\nright_angle_triangle(2,\
    \ 3, 4)\nright_angle_triangle(2, 2, 4)\nright_angle_triangle(2, 4, 3)\nright_angle_triangle(2,\
    \ 3, 3)\nright_angle_triangle(2, 3, 2)\nright_angle_triangle(2, 2, 3)\nright_angle_triangle(2,\
    \ 1, 3)\nright_angle_triangle(2, 1, 2)\nright_angle_triangle(2, 3, 2)\nright_",
  "\n  ab <- abs(a - b)\n  ac <- abs(a - c)\n  bc <- abs(b - c)\n  if((ac > bc) &&\
    \ (ab > ac)) {\n    right_angle <- TRUE\n  } else if ((ac < bc) && (ab < ac))\
    \ {\n    right_angle <- FALSE\n  } else {\n    right_angle <- FALSE\n  }\n  return(right_angle)\n\
    }\n</cell>\n<cell>", "\n\ta > b && a > c || b > c || a > c\n}\n", "\n  if(a+b>c\
    \ | a+c>b | b+c>a)\n    TRUE else FALSE\n}\n", "\n  if (a <= b & b <= c | c <=\
    \ a & a <= b | a <= c & b <= a) TRUE else FALSE\n}\n", "\n  (a == b) || (a ==\
    \ c) || (b == c)\n}\n</cell>\n<text>\nExercise 3: Write a function that checks\
    \ if a triangle is equilateral or not.\nA triangle is equilateral if all three\
    \ sides are equal:\n\n$$\na^2 + b^2 = c^2\n$$\n\n\n</text>\n<cell>", "\n  # a\
    \ <= b, c <= b\n  if((a < b) & (c < b)) {\n    a_triangle_angle  <- acos((b^2\
    \ + c^2 - a^2) / (2 * b * c))\n    a_angle_diff     <- a_triangle_angle - atan(b/a)\n\
    \    c_angle_diff     <- a_triangle_angle - atan(c/a)\n    return(abs(a_angle_diff\
    \ - c_angle_diff) <= 1)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  if (b\
    \ %% 2 != 0) {\n    if (b % 2 == 0) {\n      if (b %% 2 != 0) {\n        if (b\
    \ %% 2 == 0 && a %% 2 == 0) {\n          return TRUE \n        }\n        else\
    \ {\n          return FALSE\n        }\n      }\n      else {\n        return\
    \ FALSE\n      }\n    }\n    else {\n      return FALSE\n    }\n  }\n  else {\n\
    \    if (c %% 2 != 0) {\n      if (c % 2 == 0) {\n        if (c %% 2 != 0) {\n\
    \          return FALSE\n        }\n        else {\n          return TRUE\n  \
    \      }\n      }\n      else {\n        if (a %% 2 == 0) {\n          return\
    \ FALSE\n        }\n        else {\n          return TRUE\n        }\n      }\n\
    \    }\n    else {\n      if (a %% 2 == 0 && b %% 2 == 0) {\n        return TRUE\n\
    \      }\n      else {\n        return FALSE\n      }\n    }\n  }\n}\n", "\n \
    \ \n  # Return TRUE if triangle is a right angled triangle\n  if(a != b && a !=\
    \ c && b != c) {\n    \n    # Return TRUE if one side is 90 degree\n    if(a ==\
    \ b && a == c) {\n      \n      # Return TRUE if third side is 90 degree\n   \
    \   if(a != b && b != c) {\n        \n        # Return TRUE if first side is 90\
    \ degree\n        if(b != a && a != c) {\n          \n          # Return TRUE\
    \ if two sides are equal\n          if(a == b) {\n            \n            #\
    \ Return TRUE if all three sides are equal\n            return TRUE\n        \
    \  }\n          \n          # Return FALSE\n          return(FALSE)\n        }\n\
    \        \n        # Return FALSE\n        return(FALSE)\n      }\n      \n  \
    \    # Return FALSE\n      return(FALSE)\n    }\n    \n    # Return TRUE\n   \
    \ return(TRUE)\n  }\n  \n  # Return FALSE\n  return(FALSE)\n}\n\n", "\n  \n  #\
    \ Define a function to check whether one angle is right angle or 90 degree.\n\
    \  right_angle <- function(angle) {\n    if (angle == 90 | angle == -90) return(TRUE)\n\
    \    else if (angle == 0) return(TRUE)\n    else return(FALSE)\n  }\n  \n  # Check\
    \ whether a and b is equal\n  if (a == b | a == c | b == c) return(TRUE)\n  \n\
    \  # Check whether a is the maximum of its three sides\n  if (a == max(a, b, c))\
    \ return(TRUE)\n  \n  # Check whether b is the maximum of its three sides\n  if\
    \ (b == max(a, b, c)) return(TRUE)\n  \n  # Check whether c is the maximum of\
    \ its three sides\n  if (c == max(a, b, c)) return(TRUE)\n  \n  # Check whether\
    \ a, b, and c are the maximum of their three sides\n  if (a == b & b == c & c\
    \ == max(a, b, c)) return(TRUE)\n  \n  # Check whether a, b, and c are the maximum\
    \ of their three sides\n  if (a == c & b == c & c == max(a, b, c)) return(TRUE)\n\
    \  \n  # Check whether a, b, and c are the maximum of their three sides\n  if\
    \ (a == b & c == b & c == max(a, b, c)) return(TRUE)\n  \n  # Check whether a,\
    \ b, and c are the maximum of their three sides\n  if (a == c & b == c & c ==\
    \ max(a, b, c)) return(TRUE)\n  \n  # Check whether a, b, and c are the maximum\
    \ of their three sides\n  if (b == c & a == c & a == max(a, b, c)) return(TRUE)\n\
    \  \n  # Check whether a, b, c are the maximum of their three sides\n  if (b ==\
    \ a & c == a & c == max(a, b, c)) return(TRUE)\n  \n  # Check whether a, b, c\
    \ are the maximum of their three sides\n  if (c == a & b == a & b == max(a, b,\
    \ c)) return(TRUE)\n  \n  # Check whether a, b, c are the maximum of their three\
    \ sides\n  if (a == b & c == b & c == max(a, b, c)) return(TRUE)\n  \n  # Check\
    \ whether a, b, c are the maximum of their three sides\n  if (a == c & b == c\
    \ & b == max(a, b, c)) return(TRUE)\n  \n  # Check whether a, b, c are the maximum\
    \ of their three sides\n  if (b == c & a == c & a == max(a, b, c)) return(TRUE)\n\
    \  \n  # Check whether a, b, c are the maximum of their three sides\n", "\n  \
    \  b <- b - a\n    c <- c - a\n    \n    x <- b * b * b\n    y <- c * c * c\n\
    \    \n    x <- x + c\n    y <- y + b\n    \n    if (x != 0 && y != 0) TRUE else\
    \ FALSE\n}\n", "\n  if (b <= a || c <= a) {\n    return(FALSE)\n  }\n  if (a==b\
    \ || a==c) {\n    return(TRUE)\n  }\n  if (b==c) {\n    return(TRUE)\n  }\n  return(FALSE)\n\
    }\n", "\n    # Check if the three sides forms a right angle triangle\n    if (length(a)\
    \ == b && length(a) == c && length(b) == c) TRUE else FALSE\n}\n", "\n  right_angle\
    \ <- abs(a - c) > abs(b - c)\n  right_angle\n}\n", "\n  if(a == 0)\n    stop(\"\
    Sides must be positive\")\n  if(a == b) \n    stop(\"Same side\")\n  if(a == c\
    \ || b == c)\n    TRUE\n  if(a > b && a > c)\n    TRUE \n  if(a == b) \n    TRUE\n\
    \  if(b == c)\n    TRUE \n  if(b < c)\n    TRUE\n}\n</cell>\n<cell>", "\n  \n\
    \  # Check if a is the smaller of the two\n  if(a<b){\n    a <- b\n  }\n\n  if(b<c){\n\
    \    b <- c\n  }\n\n  # Find the angle bisector\n  dx <- b - a\n  dy <- c - b\n\
    \  \n  # The sign of the cross product tells us which direction to go to\n  sign_abs\
    \ <- ifelse(dx < 0, \"-\", \"+\")\n  \n  # Now we have the two angles, we can\
    \ calculate the third angle\n  angle <- acos(dx/dy)\n  \n  # If the third angle\
    \ is greater than or equal to 90 degrees then we \n  # are okay\n  if(angle >=\
    \ pi/4) return(TRUE)\n  \n  # If the third angle is greater than or equal to 180\
    \ degrees then we \n  # are okay \n  if(angle >= 3*pi/4) return(TRUE)\n  \n  #\
    \ If neither angle is greater or equal to 180 degrees, return FALSE\n  return(FALSE)\n\
    }\n", "\n  # Write your code here\n  a < b * c & b <= a && a < c * b\n}\n</cell>\n\
    <cell>", "\n    # Triangle is right-angled if any two sides are equal and their\
    \ sum is equal\n    if (a == b || a == c || b == c) {\n        if (a + b == c\
    \ || a + c == b || b + c == a)\n            TRUE \n        else\n            FALSE\n\
    \    }\n}\n", "\n  # Write your code here\n  if((b^2) - (4 * a * c) == 0 && ((sqrt(b^2\
    \ - 4 * a * c)) > a || sqrt(b^2 - 4 * a * c) > c))\n  {\n    return(TRUE)\n  }\
    \ \n  return(FALSE)\n}\n", "\n  if(abs(b - c) <= 1) return(TRUE)\n  if((a == b)\
    \ & (b == c)) return(TRUE)\n  if((a < b) & (b < c)) return(FALSE)\n  if((a > b)\
    \ & (c > b)) return(FALSE)\n  if((a > b) & (c < b)) return(FALSE)\n  if((a ==\
    \ b) & (c < b)) return(FALSE)\n  if((a < b) & (b > c)) return(FALSE)\n}\n", "\n\
    \  b <- abs(b)\n  c <- abs(c)\n  a <- abs(a)\n  d <- b*b - 4*a*c\n  \n  if(d <\
    \ 0){\n    return(FALSE)\n  } else {\n    sqrt <- sqrt(d)\n    ans <- b + c <=\
    \ (sqrt * sqrt)\n    \n    return(ans)\n  }\n}\n", "\n  a > 0 && b > 0 && c >\
    \ 0 && a * a + b * b + c * c < 10 * 10 * 10\n}\n", "\n\ta = abs(a); b = abs(b);\
    \ c = abs(c)\n\tif (a == b & a == c) return(TRUE)\n\tif (a == b) return(FALSE)\n\
    \tif (a == c) return(FALSE)\n\ty = abs(a * b - c * b)\n\tx = abs(a * c - b * c)\n\
    \treturn(x > y && x > 0)\n}\n", "\n  \n  x <- a\n  y <- b\n  z <- c\n  \n  if(a\
    \ != 0 && b != 0 && c != 0) {\n    if(b > c && a > c){\n      if(a > b && a >\
    \ c) {\n        x <- a + b\n        y <- a - c\n        z <- c - b\n      }\n\
    \      else if(c > a && c > b) {\n        x <- a - c\n        y <- b + c\n   \
    \     z <- b - a\n      }\n    }\n    else if(c > a && c > b) {\n      if(c >\
    \ a && c > b) {\n        x <- b + c\n        y <- c - a\n        z <- a - c\n\
    \      }\n      else if(a > c && a > b) {\n        x <- c - a\n        y <- b\
    \ + c\n        z <- b - a\n      }\n    }\n    else if(a > b && a > c) {\n   \
    \   if(a > b && a > c) {\n        x <- a + b\n        y <- b - c\n        z <-\
    \ c - b\n      }\n      else if(c > a && c > b) {\n        x <- a - c\n      \
    \  y <- c - a\n        z <- c - b\n      }\n    }\n    else if(c > a && c > b)\
    \ {\n      if(c > a && c > b) {\n        x <- b + c\n        y <- c - a\n    \
    \    z <- a - c\n      }\n      else if(a > c && a > b) {\n        x <- c - a\n\
    \        y <- c - b\n        z <- c - b\n      }\n    }\n  }\n  \n  return(TRUE)\n\
    }\n", "\n  \n  # Compute the area of the triangle ABC\n  a <- a^2\n  b <- b^2\n\
    \  c <- c^2\n  abc <- a + b + c\n  \n  # Compute the area of the triangle ACB\n\
    \  a <- a\n  b <- b^2\n  c <- c^2\n  acb <- a + b + c\n  \n  # Compute the area\
    \ of the triangle ABC\n  a <- a^2\n  b <- b\n  c <- c^2\n  abc <- a + b + c\n\
    \  \n  # Check if all the condition is satisfied\n  if (abc > acb){\n    return(TRUE)\n\
    \  }else{\n    return(FALSE)\n  }\n}\n", "\n  if((b <= a) | (b <= c)) {\n    stop(\"\
    The length of the side B (b) should be greater than the length A of a or B or\
    \ C \")\n  }\n  if((c <= a) | (c <= b)) {\n    stop(\"The length of the side C\
    \ (c) should be greater than the length A of a or B or C \")\n  }\n  \n  if(((b\
    \ - a) * (c - b) > 0) | ((c - a) * (b - a) > 0)) {\n    stop(\"The two sides A\
    \ and C are parallel.\")\n  }\n\n  if(((b - a) * (c - b) == 0) | ((c - a) * (b\
    \ - a) == 0)) {\n    stop(\"The two sides A and C are identical.\")\n  }\n\n \
    \ if((b > a) | (c > b)) {\n    stop(\"The sides a and c are either of different\
    \ lengths.\")\n  }\n\n  if(((b - a) * (c - b) == (a * c - b * a)) | ((a - b) *\
    \ (c - b) == (b * c - a))) {\n    return(TRUE)\n  }\n  \n  return(FALSE)\n}\n\n\
    right_angle_triangle(3,4,5)\n</cell>\n<text>\nQ10. Calculate the area of a right-angled\
    \ triangle. \nHint: To find the area of a triangle, use\n$$\\text{area} = \\frac{sin\
    \ \\left(\\frac{\\theta}{2}\\right)}{\\left(\\cos\\left(\\frac{\\theta}{2}\\right)\\\
    right)}$$\n\n\n</text>\n<cell>", "\n  # Return TRUE if the sides of a triangle\
    \ are equal, else FALSE.\n  if(((a-b)^2)+((b-c)^2)+((c-a)^2) < 0)\n    TRUE \n\
    \  else\n    FALSE\n}\n</code>\n<|/ a |>\n<| c |>\n`a < b < c` would be `((a -\
    \ b) * a + (b - c) * b + (c - a) * c) < (a*a + b*b + c*c)` - just to save a few\
    \ cycles\n<|/ c |>\n<| c |>\n: yes, thanks for noticing - it is the same as `a\
    \ * b + b * c + c * a` when `a < b < c` but *not* when `a > b > c`. I think it\
    \ is clear why, though.\n<|/ c |>\n<| c |>\nYes I see it now - and I guess it\
    \ makes things even easier if you drop the abs function.\n<|/ c |>\n<| a |>\n\
    The accepted answer works well and has the advantage of using the geometric interpretation\
    \ of the area of triangles.  It also has the advantage of using base R functions,\
    \ which are handy for those new to R.\nAnother option is a solution using triangle\
    \ inequalities:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\ntriangle_area <- function(v1,\
    \ v2, v3) {\n  if(is.numeric(v1) && is.numeric(v2) && is.numeric(v3)) {\n    abs(v1\
    \ - v2) * abs(v1 - v3) * abs(v2 - v3)\n  } else {\n    return(NA)\n  }\n}\n\n\
    v1 <- 5\nv2 <- 6\nv3 <- 7\n\ntriangle_area(v1, v2, v3)\n\n[1] 45\n\ntriangle_area\
    \ <- function(v1, v2, v3) {\n  v1 <- abs(v1)\n  v2 <- abs(v2)\n  v3 <- abs(v3)\n\
    \  if(v1 == 0 || v2 == 0 || v3 == 0) {\n    return(NA)\n  }\n  v1 %*% t(v2) *\
    \ v3\n}\n\nv1 <- 5\nv2 <- 6\nv3 <- 7\n\ntriangle_area(v1, v2, v3)\n\n[1] 45\n\n\
    v1 <- 6\nv2 <- 7\nv3 <- 8\n\ntriangle_area(v1, v2, v3)\n\n[1] NA\n</code>\n<|/\
    \ a dscore=4 tags=r |>\n<| c |>\nYou can simplify your function with just `abs(v1\
    \ - v2) * abs(v2 - v3) * ", "\n  a <- abs(a)\n  b <- abs(b)\n  c <- abs(c)\n \
    \ return(\n    a > b && \n    b > c &&\n    a + b > c &&\n    a + c > b &&\n \
    \   b + c > a\n  )\n}\n", "\n    \n  if( abs(a - b) > abs(a - c))\n  {\n    \n\
    \    # Check the opposite sides\n    if ( abs(a - b) > abs(a - c))\n    {\n  \
    \    \n      if( abs(b - c) > abs(a - b) )\n      {\n        \n        # Return\
    \ TRUE if opposite sides are 90 degree or 180 degree\n        if( a > b ) {\n\
    \          \n          if( b > c ) {\n            \n            # Return TRUE\
    \ if opposite side is 90 degree\n            return(TRUE)\n            \n    \
    \      } else {\n            \n            # Return TRUE if opposite side is 180\
    \ degree\n            return(FALSE)\n          }\n        } else {\n         \
    \ \n          if( c > a ) {\n            \n            # Return TRUE if opposite\
    \ side is 90 degree\n            return(FALSE)\n            \n          } else\
    \ {\n            \n            # Return TRUE if opposite side is 180 degree\n\
    \            return(TRUE)\n          }\n        }\n      }\n      \n    } else\
    \ {\n      \n      if( abs(c - a) > abs(a - b) )\n      {\n        \n        #\
    \ Return TRUE if opposite sides are 90 degree or 180 degree\n        if( a > b\
    \ ) {\n          \n          if( b > c ) {\n            \n            # Return\
    \ TRUE if opposite side is 90 degree\n            return(FALSE)\n            \n\
    \          } else {\n            \n            # Return TRUE if opposite side\
    \ is 180 degree\n            return(TRUE)\n          }\n        } else {\n   \
    \       \n          if( c > a ) {\n            \n            # Return TRUE if\
    \ opposite side is 90 degree\n            return(TRUE)\n            \n       \
    \   } else {\n            \n            # Return TRUE if opposite side is 180\
    \ degree\n            return(FALSE)\n          }\n        }\n      }\n    }\n\
    \    \n  } else {\n    \n    # Check the opposite sides\n    if( abs(a - b) >\
    \ abs(a - c))\n    {\n      \n      if( abs(b - c) > abs(a - b) )\n      {\n \
    \       \n        # Return TRUE if opposite sides are 90 degree or 180 degree\n\
    \        if( a > b ) {\n          \n          if( b > c ) {\n            \n  \
    \          # Return TRUE if opposite side is 90 degree\n            return(TRUE)\n\
    \            \n          } else {\n            \n            # Return TRUE if\
    \ opposite side is 180 degree\n            return(FALSE)\n          }\n      \
    \  } else {\n          \n          if( c > a ) {", "\n  # Check whether a and\
    \ b are both greater than or equal to zero\n  if (a <= 0 | b <= 0 | c <= 0) {\n\
    \    return(FALSE)\n  }\n\n  x1 <- b\n  y1 <- c\n  x2 <- a + b\n  y2 <- a + c\n\
    \  x3 <- c\n  y3 <- a + b\n  x4 <- a\n  y4 <- a + c\n\n  return(\n    (y1-y2 >\
    \ 0) &\n      (x2-x3 > 0) &\n      (y3-y4 > 0) &\n      (x1-x4 > 0) &\n      (\n\
    \        (y2-y3 > 0) |\n        (y3-y4 > 0) |\n        (y4-y1 > 0)\n      )\n\
    \  )\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nI like your answer, it's much more\
    \ elegant than mine. +1\n<|/ c |>\n<| c |>\nThanks for your answer. I thought\
    \ about it for a while and finally decided to go with my original approach and\
    \ use your code. Your code is much easier to understand and thus easier to modify,\
    \ but it was also easier to modify (by me) than the original code. Again, thanks!\n\
    <|/ c |>\n<| a |>\nI suggest you to try out a package named \"diamonds\" (disclaimer:\
    \ I'm the author).\nThe package provides several methods for computing diamond\
    \ shapes. \n<code>\nlibrary(diamonds)\n</code>\nThe diamonds data frame is composed\
    \ of two main components, the first one is the \"id\" attribute that identifies\
    \ each observation, the second one is the \"price\" attribute, which shows the\
    \ price of a diamond of the given size.\nFor example the following code gives\
    \ you the price of a diamond of size 4 :\n<code>\ndiamonds[diamonds$carat == 4,]$price\n\
    </code>\nThe price is stored in a numeric variable, so you need to convert it\
    \ to character (as shown in the example) so that you can concatenate it with other\
    \ strings and store it in another column.\n<code>\ndiamonds[diamonds$carat ==\
    \ 4,]$price <- as.character(diamonds[diamonds$carat == 4,]$price)\n</code>\nTo\
    \ get an idea of what the diamonds data frame looks like, you can use the function\
    \ diamonds.head() to display the first 5 rows.\n<code>\ndiamonds.head(5)\n</code>\n\
    You also have the option to specify the number of rows you want ", "\n\tis_right_angle\
    \ <- a^2 + b^2 - c^2 > 0 # if a + b > c + d\n\treturn(is_right_angle)\n}\n", "\n\
    \  a > b & a > c\n}\n</cell>\n<cell>", "\n  abs(a - b) > abs(a - c) && abs(a -\
    \ b) > abs(b - c)\n}\n", "\n  n1 <- b - a\n  n2 <- c - a\n  n3 <- a + b\n  n4\
    \ <- b + c\n  n5 <- a + c\n  n6 <- c + a\n  n7 <- b + c\n  n8 <- c - a\n  n9 <-\
    \ a + c\n  n10 <- a + b\n  n11 <- c + b\n  n12 <- c - b\n  n13 <- c + a\n  n14\
    \ <- b + a\n  n15 <- a - b\n  n16 <- a + b\n  n17 <- a - c\n  n18 <- a - b\n \
    \ n19 <- a - c\n  n20 <- a - b\n  n21 <- a + c\n  n22 <- a - a\n  n23 <- a - b\n\
    \  n24 <- a + c\n  n25 <- a - a\n  n26 <- a + a\n  n27 <- a + b\n  n28 <- a +\
    \ c\n  n29 <- a - b\n  n30 <- a + a\n  n31 <- a - c\n  n32 <- a + c\n  n33 <-\
    \ a - a\n  n34 <- a + a\n  n35 <- a + c\n  n36 <- a + a\n  n37 <- a + a\n  n38\
    \ <- a + a\n  n39 <- a + a\n  n40 <- a + b\n  n41 <- b - a\n  n42 <- c - a\n \
    \ n43 <- a + b\n  n44 <- b - a\n  n45 <- a - b\n  n46 <- a - c\n  n47 <- a + b\n\
    \  n48 <- b - a\n  n49 <- a - b\n  n50 <- a - c\n  n51 <- a + b\n  n52 <- b -\
    \ a\n  n53 <- a - b\n  n54 <- a - c\n  n55 <- a + b\n  n56 <- b - a\n  n57 <-\
    \ a - b\n  n58 <- a - c\n  n59 <- a + b\n  n60 <- b - a\n  n61 <- a - b\n  n62\
    \ <- a - c\n  n63 <- a + b\n  n64 <- b - a\n  n65 <- a - b\n  n66", "\n  return(abs(b\
    \ - a) > abs(c - b)) \n}\n", "\n  if((b - c) != 0) {\n    if((b - c) >= 0 & (a\
    \ - c) >= 0) {\n      if((b - c) <= 90 & (a - c) <= 90) {\n        return(TRUE)\n\
    \      } else {\n        return(FALSE)\n      }\n    } else {\n      if((b - c)\
    \ >= 90 & (a - c) >= 90) {\n        return(TRUE)\n      } else {\n        return(FALSE)\n\
    \      }\n    }\n  } else {\n    if((a - b) >= 0 & (a - b) >= 0) {\n      if((a\
    \ - b) <= 90 & (a - b) <= 90) {\n        return(TRUE)\n      } else {\n      \
    \  return(FALSE)\n      }\n    } else {\n      if((a - b) >= 90 & (a - b) >= 90)\
    \ {\n        return(TRUE)\n      } else {\n        return(FALSE)\n      }\n  \
    \  }\n  }\n}\n", "\n\ta > b | a > c | b > c\n}\n", "\n    abs(a - b) <= abs(a\
    \ - c) + abs(b - c)\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,angle |>\nWe can\
    \ use angle\n<code>\nlibrary(geometry)\nangle(pt1[1], pt1[2], pt1[3], pt2[1],\
    \ pt2[2], pt2[3], pt3[1], pt3[2], pt3[3])", "\n  a > b + c | a + b > c\n}\n",
  "\n  return(abs(a - b) >= abs(a - c) && abs(b - a) >= abs(b - c))\n}\n", "\n  x1\
    \ <- c\n  x2 <- b\n  x3 <- a\n  y1 <- x3 - x2\n  y2 <- y1 - x1\n  y3 <- y2 - x1\n\
    \  y4 <- y3 - x1\n  y5 <- y4 - x1\n  x4 <- y1 + y3\n  x5 <- y2 + y4\n  x6 <- y3\
    \ + y5\n  x7 <- y4 + y5\n  \n  return(\n    (x1 == x2 && x2 == x3 && x3 == a)\
    \ ||\n    (x1 == x2 && x2 == x4 && x4 == a) ||\n    (x1 == x2 && x2 == x5 && x5\
    \ == a) ||\n    (x1 == x2 && x2 == x6 && x6 == a) ||\n    (x1 == x2 && x2 == x7\
    \ && x7 == a) ||\n    (x1 == x2 && x2 == x3 && x3 == a) ||\n    (x1 == x2 && x2\
    \ == x4 && x4 == a) ||\n    (x1 == x2 && x2 == x5 && x5 == a) ||\n    (x1 == x2\
    \ && x2 == x6 && x6 == a) ||\n    (x1 == x2 && x2 == x7 && x7 == a) ||\n    (x1\
    \ == x2 && x3 == x4 && x4 == a) ||\n    (x1 == x2 && x3 == x5 && x5 == a) ||\n\
    \    (x1 == x2 && x3 == x6 && x6 == a) ||\n    (x1 == x2 && x3 == x7 && x7 ==\
    \ a) ||\n    (x1 == x2 && x4 == x5 && x5 == a) ||\n    (x1 == x2 && x4 == x6 &&\
    \ x6 == a) ||\n    (x1 == x2 && x4 == x7 && x7 == a) ||\n    (x1 == x2 && x5 ==\
    \ x6 && x6 == a) ||\n    (x1 == x2 && x5 == x7 && x7 == a) ||\n    (x1 == x2 &&\
    \ x6 == x7 && x7 == a) ||\n    (x1 == x3 && x2 == x4 && x4 == a) ||\n    (x1 ==\
    \ x3 && x2 == x5 && x5 == a) ||\n    (x1 == x3 && x2 == x6 && x6 == a) ||\n  \
    \  (x1 == x3 && x2 == x7 && x7 == a) ||\n    (x1 == x3 && x3 == x4 && x4 == a)\
    \ ||\n    (x1 == x3 && x3 == x5 && x5 == a) ||\n    (x1 == x3 && x3 == x6 && x6\
    \ == a) ||\n    (x1 == ", "\n  abs(a[1]-b[1]) * abs(a[2]-c[2]) < abs(a[3]-b[3])\
    \ * abs(a[2]-c[3])\n}\n", "\n  return((a - b) * (b - c) >= 0)\n}\n", "\n  a >\
    \ b & a > c & b > c\n}\n", "\n  # Define the vector to store the differences.\n\
    \  diff <- c()\n  # Define the vector to store the sums.\n  sum <- c()\n  # Loop\
    \ over the vector.\n  for(i in 1:(length(a) - 1)) {\n    diff[i] <- b[i] - a[i]\n\
    \    sum[i] <- a[i] + b[i] + c[i]\n  }\n  # Define the angle to compare with.\n\
    \  angle <- 0\n  # Loop over the vector.\n  for(i in 1:(length(diff) - 1)) {\n\
    \    angle <- angle + sum[i] * diff[i]\n  }\n  # Check if the angle is 90 degree.\n\
    \  if((angle / length(diff)) == 90) {\n    TRUE\n  } else {\n    FALSE\n  }\n\
    }\n\nright_angle_triangle(1, 2, 3)\n</code>\nI got this answer, but now I realize\
    \ that there are much more better ways to solve this problem.\n<|/ a tags=math,r,algorithm\
    \ |>\n<| c |>\nThe solution is wrong. Try this: `right_angle_triangle(3, 4, 6)`\n\
    <|/ c |>\n<| c |>\nThe OP didn't specify whether the function should return true\
    \ if the triangle is right angled, or if the function should return true if the\
    \ triangle is a right triangle. The answer I provided was designed to give a general\
    \ solution to the problem of whether one triangle is right angled or left angled.\n\
    <|/ c |>\n<| c |>\nThis solution doesn't work if the triangle's sides are all\
    \ equal.  For example, right_angle_triangle(1,3,1)\n<|/ c |>\n<| c |>\nRight,\
    \ I just added a little conditional to fix it. Thanks!\n<|/ c |>\n<| c |>\nThis\
    \ answer is wrong: try `right_angle_triangle(1, 3, 4)` or `right_angle_triangle(1,\
    \ 4, 3)`.  (You also need a `diff[i] <- b[i] - a[i];` line in your second `for`\
    \ loop.)\n<|/ c |>\n<| a |>\nIn your first for loop, when you do\n<code>\na[1]\n\
    </code>\nyou are just getting the first element of the vector, which is 2. Since\
    \ you use vectors, there is no need to index into the vector. If you want to get\
    \ the first element of a vector, just use a[1]. If you want to get the second\
    \ element of a vector, use a[2] and so on...\nWhen you do\n<code>\nb[1]\n</code>\n\
    you are just getting the first element of the vector, which is 3. When you do\
    \ vectors, there is no need to index into the vector. If you want the second element\
    \ of a vector, use b[1]. If you want to get the first element of a vector, use\
    \ b[1]. If you want to get the second element of a ", "\n  return(ifelse((b*b\
    \ + c*c) %in% 0:1, TRUE, FALSE))\n}\n", "\n  abs(a - b) < abs(a - c) && abs(a\
    \ - c) < abs(b - c)\n}\n", "\n  # Check if any of these two sides are zero\n \
    \ if(a == 0 || b == 0 || c == 0) \n    return(FALSE)\n\n  # Check if the sum of\
    \ any of these three sides is 90 degree\n  # The sum of the side lengths must\
    \ be 90\n  if(a+b+c != 90) \n    return(FALSE)\n\n  # Check if the other two sides\
    \ are also not 90 degree\n  # The sum of the side lengths cannot be more than\
    \ 180\n  if((a + b) > 180)\n    return(FALSE)\n  if((a + c) > 180)\n    return(FALSE)\n\
    \  if((b + c) > 180)\n    return(FALSE)\n\n  # All checks passed. Return TRUE\n\
    \  return(TRUE)\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for providing\
    \ some code with your answer, but can you give some additional explanation or\
    \ references to understand what your code does?\n<|/ c |>\n<| c |>\nI added a\
    \ couple comments, let me know if anything is not clear.\n<|/ c |>\n<| a dscore=1\
    \ |>\nA solution in R would be as follows:\n<code>\ntest <- data.frame(x=c(1,1,1),\
    \ y=c(1,2,3), z=c(-1,0,-1), stringsAsFactors=FALSE)\n\ntest$right <- with(test,\
    \ (x+y+z) == (abs(x)+abs(y)+abs(z)))\n\ntest$right <- ifelse(test$right == TRUE,\
    \ 1, 0)\n</code>\nOutput:\n<code>\n> test\n  x y z  right\n1 1 1 -1      1\n2\
    \ 1 1 0      1\n3 1 2 -1      1\n4 1 2 0      1\n5 1 3 -1      1\n6 1 3 0    \
    \  1\n7 1 4 -1      1\n8 1 4 0      1\n9 1 5 -1      1\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThis works great and seems quite simple. I'm going to study it\
    \ a little bit more and see if I can figure out how it works.\n<|/ c |>\n<| a\
    \ tags=r dscore=1 |>\nHere's a solution using sapply, which can be quite efficient\
    \ depending on your data.\n<code>", "\n  if(is_right_angle(a, b, c)) {\n    TRUE\n\
    \  } else {\n    FALSE\n  }\n}\n", "\n  d <- b - c\n  if (abs(a) > abs(b)) stop(\"\
    Can't find angles for sides a and b of triangle\")\n  if (abs(a) > abs(c)) stop(\"\
    Can't find angles for sides a, b and c of triangle\")\n  if (d < 0) stop(\"Can't\
    \ find angles for sides a and b of triangle\")\n  if (d < 0) stop(\"Can't find\
    \ angles for sides a, b and c of triangle\")\n  return(TRUE)\n}\n</cell>\n<cell>",
  "\n  \n  # if there are two sides of a triangle, return TRUE if the length is equal\n\
    \  if (length(a) == 3 && length(b) == 3 && length(c) == 3) {\n    if (a == b &&\
    \ b == c) return TRUE\n    if (a == b || a == c || b == c) return TRUE\n  }\n\
    \  \n  # if there are three sides, return TRUE if there are two equal sides\n\
    \  if (length(a) == 3 && length(b) == 3 && length(c) == 2) {\n    if (a == b &&\
    \ b == c) return TRUE\n  }\n  \n  # if the side lengths are not equal, return\
    \ FALSE\n  if (length(a) != 3 || length(b) != 3 || length(c) != 3) return FALSE\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nA solution with Rcpp which gives\
    \ the right result regardless of the order of the angles:\n<code>", "\n  if((b\
    \ %in% c) || (c %in% a) || (a %in% b)) {\n    TRUE \n  } else {\n    FALSE\n \
    \ }\n}\n</cell>\n<cell>", "\n    \n    #return FALSE unless a,b,c are all positive\
    \ numbers greater than zero\n    stopifnot(all(a > 0, b > 0, c > 0))\n    \n \
    \   \n    #return a if a+b+c == 0 or b+a+c == 0 or c+a+b == 0\n    if(a+b+c <=\
    \ 0 || b+a+c <= 0 || c+a+b <= 0) {\n        return(FALSE)\n    }\n    \n    #Return\
    \ TRUE if all these are TRUE\n    if(b-a <= 0 && c-b <= 0 && a-c <= 0) {\n   \
    \     return(TRUE)\n    }\n}\n\n", "\n    b <- abs(b)\n    c <- abs(c)\n    a\
    \ <- abs(a)\n\n    a <- (a + b + c) / 2 \n    b <- (a - b + c) / 2 \n    c <-\
    \ (b - a + c) / 2 \n\n    b <- (b + c) / 2\n    c <- (c + b) / 2\n    a <- (a\
    \ + c) / 2\n\n    a <- abs(a)\n    b <- abs(b)\n    c <- abs(c)\n\n    a <- (a\
    \ + b + c) / 2 \n    b <- (a - b + c) / 2 \n    c <- (b - a + c) / 2 \n\n    b\
    \ <- (b + c) / 2\n    c <- (c + b) / 2\n    a <- (a + c) / 2\n\n    a <- abs(a)\n\
    \    b <- abs(b)\n    c <- abs(c)\n\n    a <- (a + b + c) / 2 \n    b <- (a -\
    \ b + c) / 2 \n    c <- (b - a + c) / 2 \n\n    b <- (b + c) / 2\n    c <- (c\
    \ + b) / 2\n    a <- (a + c) / 2\n\n    a <- abs(a)\n    b <- abs(b)\n    c <-\
    \ abs(c)\n\n    a <- (a + b + c) / 2 \n    b <- (a - b + c) / 2 \n    c <- (b\
    \ - a + c) / 2 \n\n    b <- (b + c) / 2\n    c <- (c + b) / 2\n    a <- (a + c)\
    \ / 2\n\n    a <- abs(a)\n    b <- abs(b)\n    c <- abs(c)\n\n    a <- (a + b\
    \ + c) / 2 \n    b <- (a - b + c) / 2 \n    c <- (b - a + c) / 2 \n\n    b <-\
    \ (b + c) / 2\n    c <- (c + b) / 2\n    a <- (a + c) / 2\n\n    a <- abs(a)\n\
    \    b <- abs(b)\n    c <- abs(c)\n\n    a <- (a + b + c) / 2 \n    b <- (a -\
    \ b + c) / 2 \n    c <- (b - a + c) / 2 \n\n    b <- (b + c) / 2\n    c <- (c\
    \ + b) / 2\n    a <- (a + c) / 2\n}\n", "\n  \n  x <- (b - a) %% (c - a)\n  y\
    \ <- a %% (c - a)\n  z <- b %% (c - a)\n\n  if(x == 0 && y == 0 && z == 0) {\n\
    \    return(TRUE)\n  } \n  \n  if(x == 0 && (y == 0 || z == 0)) {\n    return(TRUE)\n\
    \  } \n  \n  if(x == 0 && y == 0) {\n    return(TRUE)\n  } \n  \n  if(x == 0 &&\
    \ z == 0) {\n    return(TRUE)\n  } \n  \n  if(y == 0 && (z == 0 || x == 0)) {\n\
    \    return(TRUE)\n  } \n  \n  if(y == 0 && z == 0) {\n    return(TRUE)\n  } \n\
    \  \n  if(x == 0 && z == 0) {\n    return(TRUE)\n  } \n  \n  return(FALSE)\n}\n\
    </cell>\n<cell>", "\n  return(a == b + c)\n}\n", "\n    \n    # Check if a or\
    \ b or c are NA\n    if (is.na(a) | is.na(b) | is.na(c)) {\n        return(FALSE)\n\
    \    }\n    \n    # Check if the sides are equal or less than 0\n    if (a ==\
    \ b | a == c | b == c) {\n        return(TRUE)\n    }\n    \n    # Check if a\
    \ is greater than or equal to b \n    if (a >= b) {\n        if (a > c) {\n  \
    \          return(TRUE)\n        } else {\n            return(FALSE)\n       \
    \ }\n    }\n    \n    # Check if b is greater than or equal to c \n    if (b >=\
    \ c) {\n        if (b > a) {\n            return(TRUE)\n        } else {\n   \
    \         return(FALSE)\n        }\n    }\n    \n    # Check if c is greater than\
    \ or equal to a\n    if (c >= a) {\n        if (c > b) {\n            return(TRUE)\n\
    \        } else {\n            return(FALSE)\n        }\n    }\n}\n</cell>\n<cell>\n\
    right_angle_triangle(3, 4, 5)\n</cell>\n<cell>\nright_angle_triangle(1, 2, 3)\n\
    </cell>\n<cell>", "\n\ttri_length <- sqrt((b^2) + (c^2))\n\ttri_angle <- acos((b\
    \ * c + a * b) / ((b^2) + (c^2))) * 180/pi\n\t((180 < tri_angle) & (tri_angle\
    \ <= 360))\n}\n", "\n  # Check input data.\n  if(!is.numeric(a) || !is.numeric(b)\
    \ || !is.numeric(c)) {\n    stop('input data must be a numeric vector.')\n  }\n\
    \  if(length(a) != length(b)) {\n    stop('input data lengths must be the same.')\n\
    \  }\n  if(length(a) == 0) {\n    stop('input data length must be greater than\
    \ zero.')\n  }\n  if(length(b) == 0) {\n    stop('input data length must be greater\
    \ than zero.')\n  }\n  if(length(c) == 0) {\n    stop('input data length must\
    \ be greater than zero.')\n  }\n  \n  # Check if input is valid angle.\n  if(!is.numeric(a)\
    \ || !is.numeric(b) || !is.numeric(c)) {\n    stop('input data must be a numeric\
    \ vector.')\n  }\n  if(a < 1 || a > 360) {\n    stop('input data angle must be\
    \ between 1 to 360 degree.')\n  }\n  if(a > 180) {\n    a <- a - 180\n  }\n  if(a\
    \ < -180) {\n    a <- a + 180\n  }\n  \n  if(a <= b) {\n    if(a > c) {\n    \
    \  return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else {\n    if(a\
    \ > c) {\n      return(FALSE)\n    } else {\n      return(TRUE)\n    }\n  }\n\
    }\n</code>\n<|/ a tags=r dscore=2 |>\n<| c |>\nWelcome to Stack Overflow! Thanks\
    \ for posting your answer! Please be sure to read the [FAQ on Self-Promotion](http://stackoverflow.com/faq#promotion)\
    \ carefully. Also note that it is *required* that you post a disclaimer every\
    \ time you link to your own site/product.\n<|/ c |>\n<| c |>\nThank you for the\
    \ advice. I'm really new on Stackoverflow. I'll keep that in mind next time.\n\
    <|/ c |>\n<| c |>\nNo worries, welcome to SO. Just wanted to let you know that\
    \ there are some really good ways of doing this in R without writing any code.\
    \ Check out my answer.\n<|/ c |>\n<| a dscore=2 |>\nYou can solve this problem\
    \ with a simple test and a logical operator:\n<code>\nright_angle <- function(n){\n\
    \  if(n >= 3 & n <= 5) return(TRUE)\n  return(FALSE)\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThis is what I would have suggested\n<|/ c |>\n<| a dscore=1 |>\n\
    A much shorter function than other", "\n  \n  # Test whether each argument is\
    \ positive or negative\n  if (a < 0 || b < 0 || c < 0) return(FALSE)\n  \n  #\
    \ Test whether each argument is greater than the third \n  if (a > b) return(FALSE)\n\
    \  if (b > c) return(FALSE)\n  \n  # Test whether the third argument is equal\
    \ to the first argument\n  if (c > a) return(FALSE)\n  \n  # Test whether the\
    \ two other arguments are equal\n  \n  # Test whether one of the two arguments\
    \ is zero\n  if (a == 0 | b == 0 | c == 0) return(FALSE)\n  \n  # If all arguments\
    \ equal zero, return TRUE\n  return(TRUE)\n}\n</cell>\n<code language=conda-root-py>",
  "\n  a <- abs(a)\n  b <- abs(b)\n  c <- abs(c)\n  a > b & a > c\n}\n", "\n    d\
    \ <- (b - a) * tan(90 * (b - c))\n    a + (d / b)\n}\n</cell>\n<cell>", "\n  \
    \  \n    a_is_right <- abs(a - b) <= 90\n    b_is_right <- abs(b - c) <= 90\n\
    \    c_is_right <- abs(c - a) <= 90\n    \n    a_is_right && b_is_right && c_is_right\n\
    }\n</code>\nAnd finally, here's a function that returns the area of a right-angled\
    \ triangle:\n<code>", "\n  require(graphics)\n  if(length(a) == length(b) && length(a)\
    \ == length(c) && a > b && a > c) {\n    angle90 <- acos((a^2 + b^2 - c^2) / (2*a\
    \ * b))\n    angle180 <- acos((a^2 + b^2 + c^2) / (2*a * c))\n    TRUE <- angle180\
    \ > angle90\n  } else {\n    TRUE <- FALSE\n  }\n  return(TRUE)\n}\n</code>\n\
    <|/ a tags=r,trigonometry,function |>\n<| c |>\nIt's better to return `angle180\
    \ > angle90` directly instead of `TRUE` and then use a logical vector to subset\
    \ the vector. `angle180 > angle90` will be the logical vector.\n<|/ c |>\n<| a\
    \ tags=r,trigonometry,function |>\nHere's a solution using functions from the\
    \ geosphere package.\n<code>\nlibrary(geosphere)\n\nright_angle_triangle <- function(a,\
    \ b, c){\n  a <- deg2rad(a)\n  b <- deg2rad(b)\n  c <- deg2rad(c)\n  a_b_angle\
    \ <- acos((a^2 + b^2 - c^2) / (2*a * b))\n  c_b_angle <- acos((a^2 + b^2 + c^2)\
    \ / (2*a * c))\n  a_b_angle_cc_angle <- acos((a^2 + b^2 - c^2 + c^2) / (2*a *\
    \ b * c))\n  a_b_angle_cc_angle <- acos(a_b_angle_cc_angle)\n  a_b_angle < a_b_angle_cc_angle\
    \ & a_b_angle > a_b_angle_cc_angle\n}\n\nright_angle_triangle(3, 4, 5)", "\n \
    \ # write your code here\n  if((a < b) & (b < c) & (c > a)) {\n    return TRUE\n\
    \  } \n  else if((a == b) & (c > b)) {\n    return TRUE\n  } \n  else if((a >\
    \ b) & (b == c)) {\n    return TRUE\n  } \n  else if((a == b) & (c == b)) {\n\
    \    return TRUE\n  } \n  else if((a > b) & (b > c)) {\n    return TRUE\n  } \n\
    \  else if((a == b) & (b == c)) {\n    return TRUE\n  } \n  else if((a > b) &\
    \ (c == a)) {\n    return TRUE\n  } \n  else {\n    return FALSE\n  }\n}\n</cell>\n\
    <text>\nVerify Your Results\nRun the cell block below to test your right_angle_triangle()\
    \ function.\n\n\n</text>\n<cell>", "\n  abs(a * b - c * b)==abs(a * c - b * c)\n\
    }\n", "\n  a < b + c || \n  a < c + b + a || \n  b < a + c || \n  b < c + a +\
    \ b\n}\n", "\n  (sign(a) == sign(b) && sign(b) == sign(c) ||\n    (sign(b) ==\
    \ sign(a) && sign(a) == sign(c)))\n}\n", "\n  a <- a; b <- b; c <- c\n  if((a\
    \ == 0 && b == c) || (a == 0 && b != c && c != 0) || (a != 0 && b != c && c !=\
    \ 0) || (a != 0 && b == c && c != 0))\n    return(TRUE)\n  else\n    return(FALSE)\n\
    }\n</cell>\n<cell>", "\n  return(a > b & b > c & a > c & a == b | b > a & b >\
    \ c & c > a & c == b)\n}\n", "\n    ab <- abs(b - a)\n    cd <- abs(c - d)\n \
    \   ab_cd <- ab * cd\n\n    # Check if one of the sides is 90 degree\n    if(ab_cd\
    \ > 1) TRUE else FALSE\n}\n</code>\n<|/ a tags=algorithm,r |>\n<| c |>\nThe triangle\
    \ is correct if the sides are equal\n<|/ c |>\n<| c |>\nI guess you meant `ab_cd\
    \ == 1` instead of `ab_cd > 1`\n<|/ c |>\n<| c |>\nGood catch. Thanks.\n<|/ c\
    \ |>\n<| a |>\nThe question has been answered but I just wanted to post my take\
    \ on the problem for other's benefit (albeit it does rely on base R functions).\n\
    The triangle is said to be equilateral if each pair of sides is equal. This means\
    \ that if the sides are equal, the triangle is equilateral.\n<code>\ntriangle_equilateral\
    \ <- function(x1, y1, x2, y2, x3, y3) {\n  \n  x1 <- abs(x2 - x3)\n  y1 <- abs(y2\
    \ - y3)\n  x2 <- abs(x1 - x3)\n  y2 <- abs(y1 - y3)\n  \n  if(all(x1 == y1)) TRUE\
    \ else FALSE\n  \n}\n</code>\n<|/ a tags=algorithm,r dscore=2 |>\n<| a tags=algorithm,r\
    \ dscore=2 |>\nThis works (not much to it) but is probably not very efficient:\n\
    <code>\ncheckTriangle <- function(v1, v2, v3) {\n  if(v1 == v2 && v2 == v3) TRUE\n\
    \  else if(v2 != v3) FALSE else\n    stop(\"Not a triangle with equal sides\"\
    )\n}\n</code>\n<|/ a |>\n<| c |>\nI think you meant `else` not `elseif`\n<|/ c\
    \ |>\n<| a tags=algorithm,r |>\nThis solution will check whether all three sides\
    \ are equal or not, and also if they are perpendicular (equilateral triangle)\
    \ or not (isosceles triangle).\n<code>\nisEquiangle <- function(v1, v2, v3) {\n\
    \  if(v1 != v2 & v2 != v3) FALSE else TRUE\n}\n\nisIsosceles <- function(v1, v2,\
    \ v3) {\n  if(v1 != v2 & v2 != v3) TRUE else FALSE\n}\n\nisEquilateral <- function(v1,\
    \ v2, ", "\n  if (a < b) a <- b\n  if (a < c) a <- c\n  if (b < c) b <- c\n  return((b\
    \ - a) * (c - b) <= 0)\n}\n", "\n  return(abs(b - c) == abs(a - b) * sqrt(a *\
    \ a + b * b - c * c))\n}\n</cell>\n<text>\n5.5 Checking a list of polygons\n\n\
    </text>\n<cell>", "\n  # return TRUE if the three sides form a right-angled triangle\n\
    \  return((a + b > c) && (b + c > a) && (a + c > b)) \n}\n", "\n  sum <- a + b\
    \ + c\n  product <- a * b * c\n  result <- product / sum\n  ifelse(is.na(result),\
    \ TRUE, is.na(result - 90))\n}\nright_angle_triangle(3, 4, 5)", "\n  sum <- a\
    \ + b + c\n  tri <- sum - a\n  tri == 0 | tri == sum\n}", "\n  # Given the lengths\
    \ of the three sides of a triangle. Return TRUE if the three\n  # sides form a\
    \ right-angled triangle, FALSE otherwise.\n  # A right-angled triangle is a triangle\
    \ in which one angle is right angle or \n  # 90 degree.\n  # Example:\n  # >>>\
    \ right_angle_triangle(3, 4, 5)\n  # TRUE\n  # >>> right_angle_triangle(1, 2,\
    \ 3)\n  # FALSE\n  \n  \n  # Get sides\n  a <- abs(a)\n  b <- abs(b)\n  c <- abs(c)\n\
    \  \n  \n  # Check for 90 degrees\n  if((a > b) && (a > c)) {\n    return FALSE\n\
    \  } else if((b > c)) {\n    return FALSE\n  }\n  \n  # Else return TRUE \n  return\
    \ TRUE\n}\n</cell>\n<code language=conda-env-miniconda3-4.3.30-r>", "\n  # Create\
    \ a variable that is the sum of the sides.\n  s <- a + b + c\n  # Return TRUE\
    \ if the sum of the sides is an even number.\n  # Return FALSE if the sum of the\
    \ sides is an odd number.\n  if(s %% 2 == 0) TRUE else FALSE\n}\n", "\n  return(a\
    \ > b & b > c & a > c)\n}\n", "\n  if (a < b + c) {\n    return(FALSE)\n  } else\
    \ if (a + b > c) {\n    return(FALSE)\n  } else if (a + c > b) {\n    return(FALSE)\n\
    \  } else if (b + c > a) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n\
    \  }\n}\n", "\n  a <- abs(a)\n  b <- abs(b)\n  c <- abs(c)\n  x1 <- (-b + sqrt(b^2\
    \ - 4 * a * c))/(2 * a)\n  x2 <- (-b - sqrt(b^2 - 4 * a * c))/(2 * a)\n  y1 <-\
    \ sqrt(b^2 - 4 * a * c)\n  y2 <- -sqrt(b^2 - 4 * a * c)\n  abs((sin(x1) %*% cosf(y1))\
    \ - cos(y2))\n}\n\nright_angle_triangle <- function(a, b, c) {\n  a <- abs(a)\n\
    \  b <- abs(b)\n  c <- abs(c)\n  x1 <- (-b + sqrt(b^2 - 4 * a * c))/(2 * a)\n\
    \  x2 <- (-b - sqrt(b^2 - 4 * a * c))/(2 * a)\n  y1 <- sqrt(b^2 - 4 * a * c)\n\
    \  y2 <- -sqrt(b^2 - 4 * a * c)\n  abs((sin(x1) %*% cosf(y1)) - cos(y2))\n}\n",
  "\n    # Return TRUE if the three sides form a right-angled triangle, FALSE otherwise.\n\
    \    if(a > b || a > c || b > c) {\n        return(FALSE)\n    }\n    if(b > a\
    \ || b > c || c > a) {\n        return(FALSE)\n    }\n    if(a > b || c > b ||\
    \ a > c || b > c) {\n        return(FALSE)\n    }\n    return(TRUE)\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nGreat solution, just one point: to account for the case\
    \ of three sides of length zero, the second if statement should be: `if((b < 0\
    \ || b > c) && (a < 0 || a > c) && (c < 0 || c > a))`\n<|/ c |>\n<| c |>\n- Thanks\
    \ for pointing that out. I don't think it matters in this case, but it is a good\
    \ idea.\n<|/ c |>\n<| c |>\n, thanks for your efforts and time, I really appreciate\
    \ it.\n<|/ c |>\n<| c |>\n, I also want to say that this is definitely a nice\
    \ solution, however, when I run it, I get `TRUE` as a return value and no output.\
    \ How could I fix this?\n<|/ c |>\n<| c |>\n- I edited the solution to include\
    \ the function `right_angle_triangle` which you can download here: http://pastebin.com/XN5XcJmV\
    \ -- I tested it with three different lengths, including one with zero length\
    \ (which is an edge case).\n<|/ c |>\n<| a dscore=4 |>\nHere's a more efficient\
    \ solution:\n<code>\nisRightAngle <- function(a, b, c) {\n    if(is.null(a) ||\
    \ is.null(b) || is.null(c)) {\n        return(FALSE)\n    }\n    if(a > b && a\
    \ > c) {\n        return(TRUE)\n    }\n    b <= a && b > c || (c > a && c > b)\
    \ || a > b && a > c || (c > a && c > b) || a <= b && a > c\n}\n</code>\nThe basic\
    \ idea is to avoid redundant tests, and the \"redundant\" tests are the following:\n\
    \nIf a is null, then there is one test to rule out a < b\nIf a is less than b,\
    \ then b > c\nIf a is greater than b, then b > c\nIf a is greater than c, then\
    \ c > b\n\nThe solution is to take advantage of the short-circuit nature of the\
    \ && and || operators. In other words, if a is null, then we know that the other\
    \ three ", "\n  return((b*b) - 4*a*c > 0)\n}\n</code>\nand now we do the actual\
    \ computation\n<code>", "\n  a < 0 || (a > 0 && c < 0)\n  b <- b - c\n  c <- c\
    \ + b\n  a < b || a > c || b > c || (a > 0 && b > c)\n}\n", "\n  if(a*b*c == 0)\
    \ {\n    return(FALSE)\n  } else {\n    if(a*b > c) {\n      return(FALSE)\n \
    \   } else {\n      if(a*c > b) {\n        return(FALSE)\n      } else {\n   \
    \     return(TRUE)\n      }\n    }\n  }\n}\n</code>\n<|/ a tags=r,angle,trigonometry,geometry\
    \ |>\n<| c |>\nWhat about `right_angle_triangle(1,1,2)`?\n<|/ c |>\n<| c |>\n\
    : Good catch. I think I misinterpreted the original code. I'll update the answer\
    \ as appropriate.\n<|/ c |>\n<| c |>\nThat would still be a right angled triangle,\
    \ though, as points out in his answer.\n<|/ c |>\n<| a |>\nIn fact, you don't\
    \ need to go through all combinations. Just calculate the cross product of vectors\
    \ a-b and b-c.\n<code>\ncross_product = function(x,y){\n     return(\n       \
    \  cross(\n              x = list(a = x - y),\n              y = list(a = y -\
    \ x),\n              z = list(a = z - x)\n         )\n     )\n }\n</code>\n<|/\
    \ a tags=r,angle,trigonometry,geometry dscore=2 |>\n<| c |>\nVery neat, and fast!\n\
    <|/ c |>\n<| a dscore=2 tags=r,angle,trigonometry,geometry |>\nHere's a solution\
    \ using functions from the \"geosphere\" package.\n<code>\nangled <- function(x,\
    \ y, z) {\n    a <- c(a = x - y, b = y - x, c = z - x)\n    b <- c(a = y - x,\
    \ b = x - z, c = z - y)\n    c <- c(a = z - x, b = y - z, c = x - y)\n\n    a\
    \ <- a * a\n    b <- b * b\n    c <- c * c\n    sqrtA <- sqrt(a)\n    sqrtB <-\
    \ sqrt(b)\n    sqrtC <- sqrt(c)\n    angles <- degrees(acos((sqrtA + sqrtB - sqrtC)/(2\
    \ * sqrtA * sqrtB)))\n\n    if (angles == 90) {\n        angles <- 0\n    }\n\n\
    \    out <- c(angles = angles, \n             triangle_number = sign(acos(b/c))*sign(acos(c/b)))\n\
    \    out\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\nI got this from here. \n<code>\n\
    right_angle <- function(x, y, z){\n  a <- c(a = x - y, b = y - x, ", "\n  a *\
    \ a + b * b == c * c\n}\n", "\n  d <- b - a\n  s <- c - a\n  s2 <- s ^ 2\n  p\
    \ <- (d + s) / 2\n  q <- (2 * p * s) / 6\n  r <- p * q - s\n  r2 <- r * r\n  r3\
    \ <- r2 * r\n  r1 <- r3 - q\n  r4 <- p * (q * q - r * r - s) * (3 * p * q - 2\
    \ * r * s)\n  r5 <- p * (r * r - q * q - r * r) * (2 * p * q + 3 * r * s)\n  r6\
    \ <- p * (q * q - r * r) * (r * r - p * p - r * r)\n  r7 <- p * (r * r - q * q)\
    \ * (q * q - p * p - r * r)\n  r8 <- r * r * (p * p - r * r)\n  r9 <- r * r *\
    \ (q * q - p * p - r * r)\n  r10 <- p * q * r\n  r11 <- p * (r * r - q)\n  r12\
    \ <- p * (r * r - q * q) * q\n  r13 <- p * (r * r - q * q) * (q * q - r * r)\n\
    \  r14 <- p * (r * r - q * q) * (q * q - p * p - r * r)\n  r15 <- p * (r * r -\
    \ q * q) * (q * q - p * p - r * r) * q\n  r16 <- p * r * r * q * (3 * p * q -\
    \ 2 * r * s)\n  r17 <- p * r * r * q * (2 * p * q + 3 * r * s)\n  r18 <- p * r\
    \ * r * q * (r * r - p * p - r * r)\n  r19 <- p * r * r * q * (r * r - p * p -\
    \ r * r) * q\n  r20 <- p * r * r * q * (q * q - r * r) * p\n  r21 <- p * r * r\
    \ * q * (q * q - r * r) * p * q\n  r22 <- p * r * r * q * (q * q - p * p - r *\
    \ r) * p\n  r23 <- p * r * r * q * (q", "\n  return (180 - acos((b * b - c * a)\
    \ / (2 * a * b))) <= 90\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThis is an old\
    \ post but I was running into a similar problem and figured I'd add my solution\
    \ incase anyone else was having similar issues.\nIf you have a triangle with sides\
    \ a,b,c. All you need to do in order to determine if they are right angle is take\
    \ the hypotenuse of the triangle and divide by the product of the sides. If this\
    \ value is greater than 1 then they are not right angle else they are right angle.\
    \ \n<code>\na <- 3\nb <- 4\nc <- 5\n\nhypotenuse <- (sqrt(a^2 + b^2 + c^2))\n\
    rightAngle <- (hypotenuse/(a * b))\n\nif (rightAngle > 1) {\n    rightAngle <-\
    \ 0\n} else {\n    rightAngle <- 1\n}\n\nprint(rightAngle)\n</code>\n<|/ a tags=r,geometry,math,angle\
    \ |>\n<| a tags=r,geometry,math,angle |>\nHere's a method that doesn't require\
    \ trigonometry, and it works in all directions (a<b<c).\n<code>\nareRightAngled\
    \ <- function(a, b, c){\n  ifelse(abs(c^2 - b^2) > a*(b+c), \n         ifelse(abs(b^2\
    \ - a^2) > c*(a+b), \n            ifelse(abs(a^2 - c^2) > b*(a+c), \n        \
    \       ifelse(abs(a^2 - b^2) > c*(b+a), \n                 ifelse(abs(b^2 - c^2)\
    \ > a*(c+b), \n                   ifelse(abs(b^2 - a^2) > c*(a+c), \n        \
    \             ifelse(abs(c^2 - a^2) > a*(b+c), \n                       ifelse(abs(c^2\
    \ - b^2) > b*(a+c), \n                         ifelse(abs(a^2 - c^2) > c*(b+a),\
    \ \n                           ifelse(abs(a^2 - b^2) > c*(b+a), \n           \
    \                  ifelse(abs(b^2 - c^2) > a*(c+b), \n                       \
    \        ifelse(abs(b^2 - a^2) > c*(a+c), \n                                 TRUE,\n\
    \                                 FALSE\n                               ), \n\
    \                               FALSE\n                             ), \n    \
    \                         FALSE\n                           ), \n            \
    \               FALSE\n                         ), \n                        \
    \ FALSE\n                       ), \n                       FALSE\n          \
    \           ), \n                     FALSE\n                   ), \n        \
    \           FALSE\n                 ), \n                 FALSE\n            \
    \   ), \n               FALSE\n", "\n\tl <- abs(a - c)\n\tu <- abs(b - c)\n\t\
    t <- (a + b) %% 2 * pi\n\n\ta %% 2 * pi == 0 & a %% pi > 0 & a %% pi < t & \n\t\
    \tb %% pi > 0 & b %% pi < t & \n\t\tc %% pi > 0 & c %% pi < t\n}\n", "\n    if\
    \ (a == 0 | b == 0 | c == 0) return(FALSE)\n    if (a == c) return(TRUE)\n   \
    \ if (b == c) return(TRUE)\n    if (a < b) return(a >= b && a >= c)\n    if (b\
    \ < c) return(b >= c && b >= a)\n    if (b < a) return(b >= a && b >= c)\n}\n\
    </cell>\n<cell>", "\n  return (180 - abs((a - b) * (c - b)) > 180) && (180 - abs((a\
    \ - c) * (b - c)) > 180)\n}", "\n  return((a <= b & b <= c) | (c <= b & b <= a)\
    \ | (a <= c & c <= b))\n}\n", "\n  ab <- abs(a - b)\n  bc <- abs(b - c)\n  ca\
    \ <- abs(c - a)\n  \n  if(ab > bc) {\n    if(ab > ca) {\n      a <- b\n      b\
    \ <- c\n      c <- a\n    }\n    \n    return(TRUE)\n  }\n  \n  if(bc > ca) {\n\
    \    b <- c\n    c <- a\n    a <- b\n  }\n  \n  return(FALSE)\n}\n\nright_angle_triangle\
    \ <- function(a, b, c) {\n  ab <- abs(a - b)\n  bc <- abs(b - c)\n  ca <- abs(c\
    \ - a)\n  \n  if(ab > bc) {\n    if(ab > ca) {\n      a <- b\n      b <- c\n \
    \     c <- a\n    }\n    \n    return(TRUE)\n  }\n  \n  if(bc > ca) {\n    b <-\
    \ c\n    c <- a\n    a <- b\n  }\n  \n  return(FALSE)\n}\n", "\n  \n  # If sides\
    \ lengths are same, return TRUE i.e. right-angled.\n  if (a == b) return(TRUE)\n\
    \  if (b == c) return(TRUE)\n  \n  # If two sides are same, return TRUE i.e. right\
    \ angled.\n  if (a == c) return(TRUE)\n  \n  # If any two sides are same, return\
    \ TRUE i.e. right angled.\n  if (a > b) return(TRUE)\n  if (b > c) return(TRUE)\n\
    \  \n  # If any two sides are same, return FALSE i.e. not right angled.\n  # return\
    \ FALSE \n  return(FALSE)\n}\n", "\n    # Base Case\n    if (a == 0 || b == 0\
    \ || c == 0) return TRUE\n    # Recursive Case\n    if (a == b) return TRUE\n\
    \    if (a == c) return TRUE\n    if (b == c) return TRUE\n    # Otherwise, check\
    \ if all three of a, b and c are equal\n    return (a != b && a != c && b != c)\n\
    }\n</code>\n<|/ a dscore=3 tags=algorithm,r |>\n<| c |>\nYour function doesn't\
    \ seem to work when I try it on [this](https://stackoverflow.com/q/65504969/844962).\
    \ It says TRUE.\n<|/ c |>\n<| c |>\nThanks, I've edited my answer.\n<|/ c |>\n\
    <| c |>\nYour function doesn't seem to work when the lengths of a, b, c are negative.\n\
    <|/ c |>\n<| c |>\nThe function works with negative numbers and it gives the expected\
    \ output\n<|/ c |>\n<| c |>\nI'm sorry, my mistake. I misread the function earlier.\n\
    <|/ c |>\n<| a tags=algorithm,r |>\nThis is a different way of doing the same\
    \ thing. No packages required, just data.table:\n<code>", "\n  a * b * c > 0 &\
    \ a * c > b & b * c > a\n}\n</cell>\n<text>\n2. Write a function\n\n</text>\n\
    <cell>", "\n  # Write your code here\n  \n}\n\nright_angle_triangle(4, 6, 7)\n\
    right_angle_triangle(2, 8, 5)\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(5,\
    \ 8, 4)\nright_angle_triangle(2, 5, 6)\nright_angle_triangle(3, 8, 7)\nright_angle_triangle(4,\
    \ 7, 6)\nright_angle_triangle(5, 8, 3)\nright_angle_triangle(4, 6, 9)\nright_angle_triangle(4,\
    \ 7, 5)\nright_angle_triangle(4, 5, 4)\nright_angle_triangle(4, 6, 8)\nright_angle_triangle(4,\
    \ 8, 6)\nright_angle_triangle(6, 4, 7)\nright_angle_triangle(6, 7, 4)\nright_angle_triangle(6,\
    \ 5, 4)\nright_angle_triangle(6, 3, 4)\nright_angle_triangle(7, 2, 6)\nright_angle_triangle(7,\
    \ 6, 4)\nright_angle_triangle(7, 5, 3)\nright_angle_triangle(7, 4, 2)\nright_angle_triangle(7,\
    \ 6, 8)\nright_angle_triangle(7, 8, 5)\nright_angle_triangle(8, 7, 6)\nright_angle_triangle(8,\
    \ 6, 4)\nright_angle_triangle(8, 9, 5)\nright_angle_triangle(8, 7, 3)\nright_angle_triangle(9,\
    \ 6, 4)\nright_angle_triangle(9, 7, 5)\nright_angle_triangle(9, 8, 4)\nright_angle_triangle(9,\
    \ 6, 2)\nright_angle_triangle(9, 5, 3)\nright_angle_triangle(9, 4, 7)\nright_angle_triangle(9,\
    \ 8, 6)\nright_angle_triangle(9, 6, 5)\nright_angle_triangle(9, 7, 4)\nright_angle_triangle(10,\
    \ 7, 6)\nright_angle_triangle(8, 7, 8)\nright_angle_triangle(8, 6, 9)\nright_angle_triangle(8,\
    \ 7, 7)\nright_angle_triangle(8, 8, 6)\nright_angle_triangle(9, 7, 8)\nright_angle_triangle(10,\
    \ 7, 5)\nright_angle_triangle(8, 7, 4)\nright_angle_triangle(10, 6, 6)\nright_angle_triangle(9,\
    \ 8, 9)\nright_angle_triangle(10, 8, 8)\nright_angle_triangle(9, 9, 7)\nright_angle_triangle(10,\
    \ 7, 2)\nright_angle_triangle(10, 5, 3)\nright_angle_triangle(10, 4, 6)\nright_angle_triangle(10,\
    \ 6, 7)\nright_angle_triangle(10, 9, 6)\nright_angle_triangle(11, 9, 7)\nright_angle_triangle(12,\
    \ 9, 6)\nright_angle_triangle(12, 8, 7)\nright_angle_triangle(11, 8, 6)\nright_angle_triangle(13,\
    \ 9, 6)\nright_angle_triangle(11, 8, 5)\nright_angle_triangle(12, 9, 4)\nright_angle_triangle(12,\
    \ 8, 3)\nright_angle_triangle(13, 8, 6)\nright_angle_triangle(13, 11, 4)\nright_angle_triangle(13,\
    \ 12, 6)\nright_angle_triangle(13, 10, 4)\nright_angle_triangle(13, 8, 7)\nright_angle_",
  "\n\ttriangle_angle_90 <- function(a, b) {\n\t\tcar <- c(a[1],b[2])\n\t\tcdr <-\
    \ c(a[2],b[1])\n\t\tif(car > cdr) return(TRUE)\n\t\tif(cdr > car) return(FALSE)\n\
    \t\treturn(TRUE)\n\t}\n\ttriangle_angle_180 <- function(a, b) {\n\t\tcar <- c(a[1],b[2])\n\
    \t\tcdr <- c(a[2],b[1])\n\t\tif(car < cdr) return(TRUE)\n\t\tif(cdr < car) return(FALSE)\n\
    \t\treturn(TRUE)\n\t}\n\ttriangle_angle_270 <- function(a, b) {\n\t\tcar <- c(a[1],b[2])\n\
    \t\tcdr <- c(a[2],b[1])\n\t\tif(car > cdr) return(TRUE)\n\t\tif(cdr > car) return(FALSE)\n\
    \t\tif(car < cdr) return(FALSE)\n\t\treturn(TRUE)\n\t}\n\n\tif(!triangle_angle_90(a,\
    \ b))\n\t\treturn(FALSE)\n\tif(!triangle_angle_180(a, b))\n\t\treturn(FALSE)\n\
    \tif(!triangle_angle_270(a, b))\n\t\treturn(FALSE)\n\treturn(TRUE)\n}\n</code>\n\
    <|/ a tags=r,algorithm |>\n<| a tags=r,algorithm |>\nHere is a solution in R\n\
    <code>", "\n  if(!length(a) || !length(b) || !length(c)) return FALSE\n  if((a\
    \ + b > c) & (b + c > a) & (a + c > b)) {\n    c <- c\n    a <- a\n    b <- b\n\
    \  }\n  if((a + c > b) & (b + c > a) & (a + b > c)) {\n    a <- a\n    c <- c\n\
    \    b <- b\n  }\n  if((b + a > c) & (c + a > b) & (b + c > a)) {\n    c <- c\n\
    \    b <- b\n    a <- a\n  }\n  if((b + c > a) & (a + c > b) & (c + a > b)) {\n\
    \    a <- a\n    c <- c\n    b <- b\n  }\n  return((a + b == c) & (b + c == a)\
    \ & (c + a == b))\n}\n", "\n  return(degrees(a) == 90 || degrees(a) == 180 ||\
    \ degrees(a) == 270 &&\n         degrees(b) == 90 || degrees(b) == 180 || degrees(b)\
    \ == 270 &&\n         degrees(c) == 90 || degrees(c) == 180 || degrees(c) == 270)\n\
    }\n", "\n  # Write your code here!\n  \n  a <- abs(a)\n  b <- abs(b)\n  c <- abs(c)\n\
    \  \n  if((a >= b) & (a >= c)) {\n    if(a > b) {\n      if(a > c) {\n       \
    \ return(TRUE)\n      }\n      else {\n        return(FALSE)\n      }\n    }\n\
    \    else {\n      if(a > c) {\n        return(TRUE)\n      }\n      else {\n\
    \        return(FALSE)\n      }\n    }\n  }\n  \n  if((b >= a) & (b >= c)) {\n\
    \    if(b > c) {\n      if(b > a) {\n        return(TRUE)\n      }\n      else\
    \ {\n        return(FALSE)\n      }\n    }\n    else {\n      if(b > c) {\n  \
    \      return(TRUE)\n      }\n      else {\n        return(FALSE)\n      }\n \
    \   }\n  }\n  \n  if((c >= a) & (c >= b)) {\n    if(c > a) {\n      if(c > b)\
    \ {\n        return(TRUE)\n      }\n      else {\n        return(FALSE)\n    \
    \  }\n    }\n    else {\n      if(c > b) {\n        return(TRUE)\n      }\n  \
    \    else {\n        return(FALSE)\n      }\n    }\n  }\n  \n  return(FALSE)\n\
    }\n</cell>\n<text>\nProblem 6\nIn the following cell, implement the function is_equilateral().\
    \ is_equilateral() should return True if three sides a, b and c form an equilateral\
    \ triangle, return False otherwise.\n\n\n</text>\n<cell>", "\n  a > b & b > c\
    \ & c > a\n}\n", "\n  return(abs(a - b) > abs(a - c) > abs(b - c))\n}\n", "\n\
    \  \n  # If the triangle has any angles that are not right angles.\n  if (abs(a\
    \ - b) > abs(a - c) || abs(b - c) > abs(b - a)) {\n    return(FALSE)\n  }\n  \n\
    \  # If the triangle is a right angle.\n  else if(a == b | a == c | b == c) {\n\
    \    return(TRUE)\n  }\n  \n  # If the triangle is NOT a right angle.\n  else\
    \ {\n    \n    # Compute if the angles b and c are greater than 180 degree.\n\
    \    if (b > c) {\n      \n      # If b > c, then angle b is greater than 180\
    \ degree.\n      if (abs(b - a) > abs(c - b)) {\n        return(TRUE)\n      }\n\
    \      \n      # Otherwise, angle b is less than 180 degree.\n      else {\n \
    \       return(FALSE)\n      }\n    }\n    \n    # If c > b, then angle c is greater\
    \ than 180 degree.\n    else if (c > b) {\n      \n      # If c > b, then angle\
    \ c is greater than 180 degree.\n      if (abs(c - b) > abs(a - c)) {\n      \
    \  return(TRUE)\n      }\n      \n      # Otherwise, angle c is less than 180\
    \ degree.\n      else {\n        return(FALSE)\n      }\n    }\n  }\n}\n", "\n\
    \  abs(a * sin(b*pi/180)) + abs(b * cos(b*pi/180)) + abs(c * cos(a*pi/180)) >\n\
    \  abs(a * cos(b*pi/180)) + abs(b * sin(b*pi/180)) + abs(c * sin(a*pi/180)) \n\
    }\n", "\n\tright_angle <- (a + b > c) & (a + c > b) & (b + c > a)\n\treturn(right_angle)\n\
    }\n", "\n    (a * b) %in% c\n}\n", "\n  if(a < 0 || b < 0 || c < 0) {\n    return(FALSE)\n\
    \  }\n  if(a * a + b * b == c * c) {\n    return(TRUE)\n  }\n  if(a * a + b *\
    \ b < c * c) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n\
    \  sqrt(a^2 + b^2 == c^2) # Check if a square root is equals to c square\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r,trigonometry dscore=1 |>\nThe answers\
    \ given so far are really clever but are too complicated for my liking. My solution\
    \ was to create a function with the base function sin() that outputs the sine\
    \ of a given angle. To make sure that the function also works for negative angles,\
    \ I used the sign() function. \n<code>\nsin_function <- function(x) {\n  ifelse(x\
    \ < 0, sign(x), sin(x))\n}\n</code>\nTo make sure that the function returns only\
    \ values between -1 and 1, I used the ifelse() function to assign values greater\
    \ or equal -1 to -1 and less or equal to 1 to 1.\n<code>\nsin_function(-2) # Outputs\
    \ -1\nsin_function(1) # Outputs 1\n</code>\nThe only issue is that I wanted my\
    \ function output to vary from -1 to 1. To do that, I used the ifelse() function\
    \ again with the condition that x >= -1.\n<code>\nifelse(x >= -1, sin_function(x),\
    \ 1)\n</code>\nI hope that this helps anyone who comes across this issue in the\
    \ future. \nIf you want to use this function with different angles you can create\
    \ another function with different arguments and then use the sapply function in\
    \ combination with the ifelse function. I will create a function with the angle\
    \ between 10 and 20 and then use the ifelse() function to change the argument.\
    \ \n<code>\nangle_in_range <- function(x) {\n  ifelse(x >= 10, sin(x), ifelse(x\
    \ >= 20, sin(x), 1))\n}\n\nsapply(1:100, angle_in_range)\n</code>\n<|/ a |>\n\
    <| a |>\nI realize this is an old thread but I just wanted to give this a shot.\
    \ \n<code>\nlibrary(purrr)\n\nis_right_angle <- function(x, a, b) {\n  if (x ==\
    \ (a*a+b*b)^(1/2)) {\n    TRUE\n  } else {\n    FALSE\n  }\n}\n\nis_right_angle(-10,\
    \ 3, 6)\nis_right_angle(-10, 7, 6)\nis_right_angle(-8, 3, 6)\nis_right_angle(-8,\
    \ 5, 6)\nis_right_angle(-9, 3, 6)\nis_right_angle(-9, 5, 6)\nis_right_angle(-10,\
    \ 7, 8)\n</code>\n<|/ a tags=r,trigonometry dscore=1 |>\n<| c |>\nHi, welcome\
    \ to Stack Overflow! It would help if you provided a short explanation of your\
    \ solution, and how it might be applied in the example in the question.\n<|/ c\
    \ |>\n<|", "\n  # Right angle triangle: \n  # http://mathworld.wolfram.com/Right-AngledTriangle.html\n\
    \  # http://en.wikipedia.org/wiki/Right-angled_triangle\n  \n  # a >= b, b >=\
    \ c, c >= 1\n  if(a > b && b > c && c > 1) {\n    r <- TRUE\n  } else {\n    r\
    \ <- FALSE\n  }\n  \n  # Check all 3 sides\n  if(a + b > c) {\n    s <- a + b\n\
    \  } else {\n    s <- c\n  }\n  if(a + c > b) {\n    e <- a + c\n  } else {\n\
    \    e <- b\n  }\n  if(c + e > a) {\n    n <- c + e\n  } else {\n    n <- a\n\
    \  }\n  \n  # If all 3 sides are equal, it's an right angle triangle so return\
    \ TRUE\n  if(s == e && s == n && s == c) {\n    return(TRUE)\n  } else {\n   \
    \ # Only 1 side is equal so it's NOT a right angle triangle so return FALSE\n\
    \    return(FALSE)\n  }\n}\n", "\n  \n  if (b > a && b > c) \n    TRUE \n  else\
    \ if (a > b && a > c) \n    TRUE \n  else FALSE \n}\n", "\n  # Return TRUE if\
    \ the triangle formed by the three sides has a right-angled side\n  # or FALSE\
    \ otherwise.\n  \n  a < b & a < c & b < c & a >= b & b >= c & c >= a & c >= b\
    \ & b >= a & a >= c & c >= a & b >= c & c >= b\n}\n</code>\nSolution 2\n<code>",
  "\n    d <- abs(b - a) / sqrt(a^2 + b^2)\n    e <- sqrt(c^2 - d^2)\n    if (d >\
    \ e) {\n        return TRUE\n    }\n    else {\n        return FALSE\n    }\n\
    }\n</cell>\n<cell>\n%%R -w 900 -h 600", "\n  return ( (a^2 + b^2 == c^2) || (b^2\
    \ + c^2 == a^2) || (c^2 + a^2 == b^2) )\n}\n", "\n  x1 <- c(b - a, c - b)\n  y1\
    \ <- a - c\n  x2 <- c(a - c, b - a)\n  y2 <- b - a\n  x3 <- c(a - b, c)\n  y3\
    \ <- b\n  x4 <- c(b - a, b)\n  y4 <- a\n  x5 <- c(b - a, c)\n  y5 <- c\n  x6 <-\
    \ c(b - a, b)\n  y6 <- b\n  x7 <- a\n  y7 <- c\n  x8 <- c(b - a, b)\n  y8 <- b\n\
    \  x9 <- c\n  y9 <- c\n  x10<- a\n  y10<- c\n  x11<- c\n  y11<- c\n  x12<- b\n\
    \  y12<- c\n  x13<- c\n  y13<- a\n  x14<- b\n  y14<- a\n  x15<- c\n  y15<- c\n\
    \  x16<- c\n  y16<- b\n  x17<- a\n  y17<- c\n  x18<- b\n  y18<- a\n  x19<- c\n\
    \  y19<- c\n  x20<- a\n  y20<- c\n  x21<- c\n  y21<- b\n  x22<- b\n  y22<- a\n\
    \  x23<- c\n  y23<- c\n  x24<- a\n  y24<- c\n  x25<- c\n  y25<- b\n  x26<- b\n\
    \  y26<- a\n  x27<- c\n  y27<- c\n  x28<- a\n  y28<- c\n  x29<- c\n  y29<- c\n\
    \  x30<- b\n  y30<- c\n  x31<- c\n  y31<- b\n  x32<- c\n  y32<- a\n  x33<- c\n\
    \  y33<- c\n  x34<- b\n  y34<- c\n  x35<- b\n  y35<- a\n  x36<- c\n  y36<- c\n\
    \  x37<- b\n  y37<- c\n  x38<- c\n  y38<- b\n  x39<- c\n  y39<- c\n  x40<- c\n\
    \  y40<- ", "\n  return(abs(a - b) < abs(a - c) & abs(b - c) < abs(b - a))\n}\n\
    </cell>\n<cell>", "\n  return(abs(a-b) == abs(b-c) == abs(a+c))\n}\n</code>\n\
    <|/ a |>\n<| c |>\nWhat about this one? `right_angle_triangle <- function(x, y,\
    \ z) {\n return(abs(x-y) == abs(y-z) == abs(x+z))\n}`\n<|/ c |>\n<| c |>\n: that's\
    \ a very simple and straightforward approach\n<|/ c |>\n<| a |>\nYou can use anyDuplicate\
    \ and unique to filter out unique rows \n<code>\nx <- data.frame(side1=c(4,5,6,8,9,10),\
    \ side2=c(5,6,7,8,9,10))\nx\n  side1 side2\n1     4     5\n2     5     6\n3  \
    \   6     7\n4     8     8\n5     9     9\n6    10    10\nx<-unique(x)\nx\n  side1\
    \ side2\n1     4     5\n2     5     6\n3     6     7\n4     8     8\n5     9 \
    \    9\n6    10    10\n</code>\nThen to find out which rows have duplicated values\
    \ \n<code>\nx[!duplicated(x),]\n  side1 side2\n1     4     5\n2     5     6\n\
    3     6     7\n4     8     8\n5     9     9\n</code>\n<|/ a tags=r,dataframe dscore=2\
    \ |>\n<| a dscore=1 |>\nWe can use na.omit\n<code>\nna.omit(df1)", "\n  \n  result\
    \ <- FALSE\n  if (length(a) == length(b) == length(c)) {\n    if (a == b && b\
    \ == c || a == c && c == b) \n      result <- TRUE\n  }\n  \n  result\n}\n", "\n\
    \  if( a * b > c * b ) { stop(\"The third side of the triangle is greater than\
    \ the second side.\") }\n  if( a * b < c * b ) { stop(\"The third side of the\
    \ triangle is less than the second side.\") }\n  if( a * c > b * c ) { stop(\"\
    The third side of the triangle is greater than the first.\") }\n  if( a * c <\
    \ b * c ) { stop(\"The third side of the triangle is less than the first.\") }\n\
    \  if( a * a == b * b == c * c ) { TRUE } else { FALSE }\n}\n", "\n  return( a\
    \ > 0 & b > 0 & c > 0 & a > b & a > c & b > c )\n}\n", "\n  if((a > b) && (a >\
    \ c)) {\n    stop(\"a > b and a > c\")\n  }\n  else if((b > c) && (b > a)) {\n\
    \    stop(\"b > c and b > a\")\n  }\n  else if((c > b) && (c > a)) {\n    stop(\"\
    c > b and c > a\")\n  }\n  else {\n    return(TRUE)\n  }\n}\n", "\n  return(((c-b)%%a)==0\
    \ | (b%%a)==0)\n}\n</code>\n<|/ a |>\n<| c |>\n`grepl(\"[ABC]\",names(df))` would\
    \ return `TRUE` when `df` has columns with names A, B, C and D. I think you want\
    \ to use `%in%`.\n<|/ c |>\n<| c |>\nThe OP has a sample data set, and `grepl(\"\
    [ABC]\",names(df))` is returning `TRUE` for `df` which has columns `A`, `B`, `C`\
    \ and `D`\n<|/ c |>\n<| c |>\nThis answer is incorrect. The only way for a triangle\
    \ to not be a right angle triangle is if all the angles are opposite (i.e. `b`\
    \ is 90 degrees and `c` is 90 degrees). Otherwise your test will return `FALSE`.\n\
    <|/ c |>\n<| c |>\nYes, I agree, my comment was a little poorly phrased.\n<|/\
    \ c |>\n<| a |>\nYou can write a function to determine if a triangle is an right-angle\
    \ triangle or not based on the sides of the triangle. This approach makes use\
    \ of the fact that if a is greater than b, then angle b is 180-a.\n<code>\nright_angle\
    \ <- function(a,b,c){\n  if(a >= b && b >= c)\n    180 - a == 180\n  else \n \
    \   a == 180 \n}\n\nright_angle(3,5,7)\n[1] FALSE\nright_angle(5,4,2)\n[1] TRUE\n\
    </code>\n<|/ a dscore=5 tags=r,trigonometry,determinants,algorithm |>\n<| a tags=r,trigonometry,determinants,algorithm\
    \ dscore=4 |>\nHere is my R-centric solution:\n<code>\nf <- function(v){\n  return(!any(v\
    \ > 360))\n}\n\nf(c(5,4,2))\n[1] FALSE\nf(c(3,4,5))\n[1] TRUE\n</code>\n<|/ a\
    \ |>\n<| a |>\nIf anyone is interested in determining if a triangle is a right\
    \ triangle or not using R, I found a solution that works:\n<code>\nisRightTriangle\
    \ <- function(x,y,z){\n  return(!(all((x < 0)&(y > 0)&(y > z) & x < z)))\n}\n\
    </code>\nIt works by checking that there are no negative values, then that all\
    \ x and y are greater than 0. This is the case because a right triangle is made\
    \ up of positive values of x (all positive), y and z (all positive).\nExample:\n",
  "\n    abs(a * b - a + c) %% 2 != 0\n}\n", "\n    \n    # If the sides are equal\n\
    \    if (a == b && a == c) {\n        return(TRUE)\n    }\n    # If the sides\
    \ are equal\n    else if (a == b || a == c) {\n        return(FALSE)\n    }\n\
    \    # If the sides are equal\n    else if (b == c || b == a) {\n        return(FALSE)\n\
    \    }\n}\n</cell>\n<code language=conda-env-R-r>", "\n    abc <- sqrt(a^2 + b^2\
    \ + c^2)\n    \n    b <- b - bc\n    a <- a - abc\n    c <- c - abc\n\n    abc\
    \ <- (a + b + c)/2\n    \n    abc <- abs(abc)\n    \n    if(abc > 1) {\n     \
    \   abc <- 1 / abc\n    }\n    \n    a * b * c > 0 & (a + b + c) <= abc & (a +\
    \ b + c) >= 1\n}\n", "\n  ab <- abs(a^2 + b^2)\n  ac <- abs(c^2 - a^2)\n  bcd\
    \ <- c*b - a*c\n  abcd <- ab * ac\n  if(abcd < 0 || abcd > bcd){\n    return(FALSE)\n\
    \  } else {\n    return(TRUE)\n  }\n}\n", "\n\ta <- abs(a)\n\tb <- abs(b)\n\t\
    c <- abs(c)\n\ta <= b + c && b <= c + a && c <= a + b\n}\n\n", "\n  \n  # The\
    \ conditional check is for checking \n  # whether all three sides are equal\n\
    \  if (a == b && a == c) \n    TRUE \n  else {\n    # All the sides are different\n\
    \    if (a != b || a != c || b != c)\n      FALSE \n    else {\n      # Check\
    \ whether the angle is right angle\n      angle <- 90 - (acos((a * b + c * c -\
    \ a * b - c * a) / (-2 * a * b)))\n      if (angle > 180)\n        TRUE \n   \
    \   else if (angle < 180)\n        FALSE \n      else if (angle == 180)\n    \
    \    TRUE \n      else\n        FALSE\n    }\n  }\n}\n</cell>\n<cell>", "\n  #\
    \ Write your code here.\n  \n}\nright_angle_triangle(1, 2, 3)\nright_angle_triangle(3,\
    \ 4, 5)\n", "\n  a <- abs(a)\n  b <- abs(b)\n  c <- abs(c)\n  \n  x <- a + b\n\
    \  y <- a + c\n  z <- c + b\n  \n  return(abs((x ^ 2 + y ^ 2 - z ^ 2) - (y ^ 2\
    \ + z ^ 2 - x ^ 2)) <= 1)\n}\n", "\n  if(a > b & a > c){\n    return(TRUE)\n \
    \ }\n  else if(a > c & b > c){\n    return(TRUE)\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n</code>\n<|/ a dscore=1 tags=r,plot,conditional-statements,if-statement\
    \ |>\n<| c |>\nI believe this would also work if one were to say `if(a > b | a\
    \ > c)`, i.e. `OR` instead of `AND`.\n<|/ c |>\n<| c |>\nYes, it would. However,\
    \ OP only wanted the triangle to be right-angled. Thus, my suggested solution\
    \ would allow the triangle to also be right-angled if the angles meet both conditions,\
    \ such as `right_angle_triangle(5, 4, 2)`.\n<|/ c |>\n<| c |>\nSorry I didnt realize\
    \ it could be the case that the triangles could be both right and left angled.\
    \ The above solution worked great and I understand it now. I appreciate everyones\
    \ help very much!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help :-)\n<|/ c\
    \ |>\n<| a tags=r,plot,conditional-statements,if-statement dscore=0 |>\nTo check\
    \ if a triangle is right or left angled, you need to calculate it's hypotenuse,\
    \ compare it with either of the sides, i.e.\n<code>\nifelse(sqrt((a^2)+(b^2)+(c^2))==(a*b+b*c+c*a),\
    \ TRUE, FALSE)", "\n  a <- abs(a)\n  b <- abs(b)\n  c <- abs(c)\n  if(a > b &&\
    \ a > c) {\n    if(c > b) return(TRUE)\n    else return(FALSE)\n  } else if(b\
    \ > c) {\n    if(a > c) return(TRUE)\n    else return(FALSE)\n  } else {\n   \
    \ if(a > b) return(FALSE)\n    else return(FALSE)\n  }\n}\n", "\n  abs(a * b -\
    \ c) >= a * c\n}\n", "\n  a <- abs(a)\n  b <- abs(b)\n  c <- abs(c)\n  if (a <\
    \ b + c) {\n    if (b < a + c) {\n      if (a < b + c) return(TRUE)\n      return(FALSE)\n\
    \    }\n    return(FALSE)\n  }\n  if (b < a + c) {\n    if (a < b + c) return(FALSE)\n\
    \    return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n  ifelse(a*a+b*b<=c*c,\n   \
    \      TRUE,\n         FALSE)\n}\n</cell>\n<cell>", "\n  # Write your code!\n\
    \  a <- (a-b)/2\n  b <- (b-b)/2\n  c <- (c-b)/2\n  \n  if((a+b)>=(c+a)) {\n  \
    \  if( ( (a>b) & (a>c) ) | ( (a<b) & (a<c) )  ) {\n      if(( (b>c) & (b>a) )\
    \ | ( (b<c) & (b<a) ) ) {\n        TRUE\n      }\n    }\n  }\n  else\n    FALSE\n\
    }\n", "\n  return((a + b > c) & (b > c) & (c > a))\n}\n", "\n  a < b\n}\n", "\n\
    \  \n  if(a == 0 || b == 0 || c == 0) return(FALSE)\n  \n  a <- abs(a)\n  b <-\
    \ abs(b)\n  c <- abs(c)\n  \n  \n  if(a + b == c) {\n    \n    if(a > b + c) return(TRUE)\n\
    \    if(a > b) return(TRUE)\n    \n  }\n  if(a + b > c) {\n    \n    if(a > b)\
    \ return(TRUE)\n    \n  }\n  if(a + b > c || a > b + c) {\n    \n    return(FALSE)\n\
    \    \n  }\n  \n}\nright_angle_triangle <- function(x, y, z) {\n  \n  if(abs(x)\
    \ + abs(y) + abs(z) < 1e-10) return(TRUE)\n  \n  if(x > y && x > z) return(TRUE)\n\
    \  if(y > z && y > x) return(TRUE)\n  \n  if(abs(x) + abs(y) == abs(z)) {\n  \
    \  \n    if(x == y) return(FALSE)\n    if(x == z) return(FALSE)\n    \n  }\n \
    \ \n}\nright_angle_triangle <- function(a, b) {\n  \n  if(a == 0 || b == 0) return(FALSE)\n\
    \  \n  a <- abs(a)\n  b <- abs(b)\n  \n  if(a > b) return(TRUE)\n  \n}\nright_angle_triangle\
    \ <- function(x, y) {\n  \n  if(abs(x) + abs(y) < 1e-10) return(TRUE)\n  \n  if(x\
    \ > y) return(TRUE)\n  \n}\nright_angle_triangle <- function(x, z) {\n  \n  if(abs(x)\
    \ + abs(z) < 1e-10) return(TRUE)\n  \n  if(x > z) return(TRUE)\n  \n}\nright_angle_triangle\
    \ <- function(y, z) {\n  \n  if(abs(y) + abs(z) < 1e-10) return(TRUE)\n  \n  if(y\
    \ > z) return(TRUE)\n  \n}\nright_angle_triangle <- function(x, y) {\n  \n  if(abs(x)\
    \ + abs(y) == abs(z)) {\n    \n    if(x == y) return(FALSE)\n    if(x == z) return(FALSE)\n\
    \    \n  }\n  \n}\nright_angle_triangle <- function(x, z) {\n  \n  if(abs(y) +\
    \ abs(z) == abs(x)) {\n    \n    if(y == z) return(FALSE)\n    if(y == x) return(FALSE)\n\
    \    \n  }\n  \n}", "\n  \n  # Calculate the area of the triangle\n  area_tri\
    \ <- a * b * c\n  \n  # Find the area of 3 sides\n  side_a <- sqrt(b^2 - a^2)\n\
    \  side_b <- sqrt(c^2 - b^2)\n  side_c <- sqrt(a^2 - c^2)\n  \n  # Calculate the\
    \ area of the triangle by subtraction\n  # the area of 3 sides from the area of\
    \ triangle sides\n  area_tri_sub <- area_tri - (side_a * side_b * side_c)\n  \n\
    \  # Check if area is greater than zero\n  if(area_tri_sub > 0) {\n    \n    #\
    \ Check if bc >= ac\n    if(side_b >= side_c) {\n      return(TRUE)\n    } else\
    \ {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n}\n", "\n\t\
    a <- abs(a)\n\tb <- abs(b)\n\tc <- abs(c)\n\tx <- ifelse(a > b, ifelse(b > c,\
    \ 1, -1), -1)\n\tifelse(x != 1, (a == b) | (a == c) | (b == c), FALSE)\n}\n</cell>\n\
    <code language=R [r]>", "\n  ab <- abs(b)\n  cb <- abs(c)\n  if(ab < cb) {\n \
    \   if(b > c) {\n      c <- -b\n      ab <- abs(b)\n    }\n    a <- -b\n  }\n\
    \  a > cb || a < 0 || ab == 0\n}\n", "\n  d1 <- b - a\n  d2 <- c - b\n  \n  if((d1\
    \ * d2) > 0) TRUE else FALSE\n}\n", "\n  ab <- abs(a^2 + b^2)\n  cb <- abs(c^2\
    \ + b^2)\n  a <- abs(a^2 + c^2)\n  if(ab >= cb) {\n    if(a == 0) {\n      return(FALSE)\n\
    \    } else {\n      a <- ab / a\n      return(a >= 1 && a <= b && a >= c)\n \
    \   }\n  } else {\n    if(c == 0) {\n      return(FALSE)\n    } else {\n     \
    \ c <- cb / c\n      return(c >= 1 && c <= b && c >= a)\n    }\n  }\n}\n", "\n\
    \  x <- a\n  y <- b\n  z <- c\n  abs(a * x + b * y + c * z - 0) <= 1\n}\n</code>\n\
    <|/ a |>\n<| c |>\nIt works, thanks. I did add some comments to the code to explain\
    \ the logic. I hope my understanding is right. Thanks again!\n<|/ c |>\n<| c |>\n\
    I'm glad it helps. Your understanding is correct.\n<|/ c |>\n<| c |>\nAs a matter\
    \ of curiosity, why is my solution not good enough? The algorithm is pretty straightforward,\
    \ doesn't it matter if we use one or two variables?\n<|/ c |>\n<| c |>\nMy solution\
    \ is good enough, but I thought I would try to use less variables, by using the\
    \ fact that a^2 + b^2 + c^2 = 1. If I were to prove that one triangle is right\
    \ angled, I will have to prove that both angles are less than 90 degrees. This\
    \ is because my function is only concerned about the length of the 3 sides (a\
    \ triangle with 2 sides is NOT right angled). My proof of this will be to prove\
    \ that both angles are less than 90 degrees. I haven't proven that one angle is\
    \ 90 degrees yet\n<|/ c |>\n<| c |>\nThis is not an algorithmic problem. Just\
    \ think about it: how would you solve this problem if you had to solve this problem\
    \ by hand?\n<|/ c |>\n<| a tags=r dscore=0 |>\nA bit late, but thought I'd share\
    \ what I used myself. \nThe question was about a right angled triangle, with 3\
    \ sides of length a, b, and c. Here is an implementation of a functional form\
    \ in R. I only have a few minutes to do my proof and post it if anyone is interested.\n\
    <code>\nlibrary(dplyr)\n", "\n  # Define a variable for all the triangle sides\n\
    \  sides <- c(a, b, c)\n  \n  # Define a variable for all the triangle angles\n\
    \  angles <- c(90, 45, 0)\n  \n  # Check to see if any of the angles are in the\
    \ right range\n  is_triangle_right <- FALSE\n  for (i in 1:length(angles)) {\n\
    \    if (angles[i] <= 90 & angles[i] > 0)\n      is_triangle_right <- TRUE\n \
    \ }\n  \n  # If the triangle angle is right then return TRUE otherwise return\
    \ FALSE\n  return (is_triangle_right)\n}\n", "\n    \n    # Check the valid inputs\n\
    \    if (min(a, b, c) < 0) return(FALSE)\n    if (max(a, b, c) > 100) return(FALSE)\n\
    \n    # Compute the angles\n    a_angle <- 180 - asin(a / b)\n    b_angle <- 180\
    \ - asin(c / b)\n    c_angle <- 180 - asin(b / a)\n\n    # Check the angles\n\
    \    if (b_angle < a_angle) return(FALSE)\n    if (c_angle < b_angle) return(FALSE)\n\
    \n    # Return the result\n    return(TRUE)\n}\n\nright_angle_triangle <- function(x,\
    \ y, z) {\n\n    # Check the valid inputs\n    if (min(x, y) < 0 || min(y, z)\
    \ < 0 || min(z, x) < 0) return(FALSE)\n    if (max(x, y, z) > 100) return(FALSE)\n\
    \n    # Compute the angles\n    a_angle <- 180 - asin(y / x)\n    b_angle <- 180\
    \ - asin(z / x)\n    c_angle <- 180 - asin(x / y)\n\n    # Check the angles\n\
    \    if (b_angle < a_angle) return(FALSE)\n    if (c_angle < b_angle) return(FALSE)\n\
    \n    # Return the result\n    return(TRUE)\n}\n</cell>\n<cell>", "\n  return(\n\
    \    a*b*c == (abs(a - b) == abs(b - a)) ||\n    a*b*c == (abs(a - b) == abs(c\
    \ - a)) ||\n    (a*b*c == (abs(b - c) == abs(a - b))) ||\n    (a*b*c == (abs(b\
    \ - c) == abs(c - a))) ||\n    (a*b*c == (abs(c - a) == abs(b - a))) ||\n    (a*b*c\
    \ == (abs(c - a) == abs(a - b)))\n  )\n}\n", "\n  # Calculate length of the sides\
    \ a, b, and c\n  a <- a; b <- b; c <- c\n  a_length <- sqrt(a * a)\n  b_length\
    \ <- sqrt(b * b)\n  c_length <- sqrt(c * c)\n\n  # Calculate the angle abc, using\
    \ Pythagoras\n  abc <- a * b + c * b # Calculate the angle\n  abc <- abc - 2 *\
    \ a * c # Calculate the difference\n  abc <- abc / a_length # Calculate quotient\n\
    \n  # If the quotient is within [0, 90 degrees]\n  if(abc < 0 | abc > 90) {\n\
    \    stop(\"sides lengths are not equal\")\n  }\n  return(TRUE)\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nYou might want to change the line `abc <- abc / a_length`\
    \ to `abc <- abc / a_length^2`.\n<|/ c |>\n<| c |>\nYou don't need to calculate\
    \ `a * b` and `c * b` again and again like that. Use the result of `sqrt(a * a)`\
    \ and `sqrt(b * b)` and assign them to a variable and use that variable in the\
    \ formula for the angle.\n<|/ c |>\n<| c |>\nI agree with. `sqrt` will save you\
    \ a lot of time if you use it more than once in a line of code.\n<|/ c |>\n<|\
    \ c |>\nI like your `if`s better than mine ;-).\n<|/ c |>\n<| a tags=r,math,geometry,trigonometry\
    \ |>\nA simple way to calculate the right-angled triangle of a triangle is to\
    \ use two equations and solve for angles using the two equations to define the\
    \ triangle as having a right-angled triangle:\n<code>", "\n  a %in% c(b, c) ||\
    \ b %in% c(a, c) || c %in% c(a, b)\n}\n", "\n    \n    # If the length of a is\
    \ zero or less than zero return FALSE\n    if(a == 0 || a < 0)\n        return(FALSE)\n\
    \    \n    # If the length of b is zero or less than zero return FALSE\n    if(b\
    \ == 0 || b < 0)\n        return(FALSE)\n    \n    # If the length of c is zero\
    \ or less than zero return FALSE\n    if(a == 0 || b < 0)\n        return(FALSE)\n\
    \    \n    # Define the length of the side b and c\n    b_c <- b - c\n    \n \
    \   # If the length is zero return FALSE\n    if(b_c == 0) {\n        return(FALSE)\n\
    \    }\n    \n    # Define the angle of the side b c\n    b_c_angle <- abs((atan(b_c))*180/pi)\n\
    \    \n    # If the angle is less than 90 return TRUE\n    if(b_c_angle < 90)\n\
    \        return(TRUE)\n    \n    # Else return FALSE\n    else\n        return(FALSE)\n\
    \    }\n</cell>\n<cell>", "\n  if (a > b && a > c) {\n    if (b > c)\n      return\
    \ TRUE\n    else {\n      if (a == c)\n        return FALSE\n      else \n   \
    \     return (a + b + c) / 3 > 180\n    }\n  } else if (b > c && b > a) {\n  \
    \  if (c > a)\n      return TRUE\n    else {\n      if (b == c)\n        return\
    \ FALSE\n      else \n        return (a + b + c) / 3 > 180\n    }\n  } else if\
    \ (c > a && c > b) {\n    if (a == c)\n      return FALSE\n    else {\n      if\
    \ (b == c)\n        return FALSE\n      else \n        return (a + b + c) / 3\
    \ > 180\n    }\n  }\n}\n</code>\nThen you can use a combination of lapply to create\
    \ a matrix of boolean values and apply rowSums to that matrix to find all the\
    \ rows that have 3 or more true values.\n<code>\ntriangles <- lapply(list(a, b,\
    \ c), right_angle_triangle)\nsapply(triangles, rowSums) > 3", "\n  a * b * c >=\
    \ 0\n}\n</cell>\n<cell>", "\n  return((a + b > c) && (a + c > b) && (b + c > a))\n\
    }\n", "\n  # return TRUE if a == b + c\n  a <= b + c & a >= b\n}\n", "\n  triangle_length\
    \ <- abs(b - c)\n  is_right_angle <- abs(a - b) > (abs(b - c) / 2)\n  is_right_angle\
    \ & (triangle_length > 1) & (triangle_length > abs(a - b))\n}\n", "\n  (length(a)\
    \ == length(b) == length(c) && a != b && a != c && b != c)\n}\n", "\n  a <- (a\
    \ == 0) | (a == 360) | (a == 180)\n  b <- (b == 0) | (b == 360) | (b == 180)\n\
    \  c <- (c == 0) | (c == 360) | (c == 180)\n\n  (180 - a > b) & (180 - a > c)\
    \ & b > c & (a > b | a > c | b > c)\n}\n", "\n  if((a >= b) && (a >= c)) {\n \
    \   return(TRUE)\n  }\n  else {\n    if(b >= c) {\n      return(TRUE)\n    }\n\
    \    else {\n      if((a < b) || (a > c)) {\n        return(FALSE)\n      }\n\
    \      else {\n        if(b < c) {\n          return(FALSE)\n        }\n     \
    \   else {\n          if((b < c) && (a < c)) {\n            return(FALSE)\n  \
    \        }\n          else {\n            return(TRUE)\n          }\n        }\n\
    \      }\n    }\n  }\n}\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n", "\n  if(a > c & a > b) return(TRUE)\n  if(c > b & c > a) return(TRUE)\n\
    \  if(a > b & a > c) return(TRUE)\n  if(b > c & b > a) return(TRUE)\n  if(a >\
    \ b & a > c & c > b) return(TRUE)\n  return(FALSE)\n}\n</cell>\n<cell>", "\n \
    \   abs(a - b) >= abs (b - c) |\n        abs(a - b) >= abs (c - a) |\n       \
    \ abs(b - a) >= abs (c - b) |\n        abs(b - a) >= abs (a - c)\n}\n", "\n  \n\
    \  # Check that the input triangle sides are non-negative integers\n  if (!(a\
    \ <= 0L | b <= 0L | c <= 0L)) {\n    stop('a, b, and c must be non-negative integers')\n\
    \  }\n  # Check that the input triangle sides are non-zero\n  if (!(a > 0L | b\
    \ > 0L | c > 0L)) {\n    stop('a, b, and c must be non-zero')\n  }\n  # Check\
    \ that the input triangle sides are strictly increasing\n  if (!(a < b & b < c\
    \ & a < c)) {\n    stop('a, b, and c must be strictly increasing')\n  }\n  \n\
    \  # Check that each side is greater than the other two sides\n  if (a > b & b\
    \ > c) {\n    if (b > c) {\n      return(TRUE)\n    }\n    else {\n      return(FALSE)\n\
    \    }\n  }\n  else {\n    if (b > a) {\n      return(TRUE)\n    }\n    else {\n\
    \      return(FALSE)\n    }\n  }\n}\n", "\n  a < b + c && (a + b < c + a || a\
    \ + c < b + a) && a + b < c + a\n}\n", "\n  return((a+b+c)==(a*b*c))\n}\n", "\n\
    \  \n  # If the sides are equal\n  if (a == b) return(TRUE)\n  # If the sides\
    \ are unequal\n  else if (a != b) return(FALSE)\n  # If the sides are 90 degree\n\
    \  else {\n    # If the sum of the lengths of the sides is greater than the sum\
    \ of the lengths of the other sides\n    if ((a + b + c) > sqrt((c * a) + (b *\
    \ b) + (a * a))) return(TRUE)\n    # If the sum of lengths of the sides is smaller\
    \ than the sum of the lengths of the other sides\n    else return(FALSE)\n  }\n\
    }\n", "\n  \n  a <- abs(a)\n  b <- abs(b)\n  c <- abs(c)\n  \n  sum <- a + b +\
    \ c\n  \n  if(a+b > c && b+c > a && c+a > b && sum % 2 != 0) {\n    TRUE \n  }\
    \ \n  else {\n    FALSE \n  }\n}\n", "\n  if (length(a) == length(b) && length(a)\
    \ == length(c)) {\n    if (a == b) \n      return (a == c) | ((a == 90 | b ==\
    \ 90 | c == 90) | (a == 90 | b == 90 | c == 90))\n    else \n      return (a ==\
    \ 90 | b == 90 | c == 90)\n  } else \n    return FALSE\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
