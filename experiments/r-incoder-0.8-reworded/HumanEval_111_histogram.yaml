name: HumanEval_111_histogram
language: r
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a named list\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> histogram('a b c')\n# list('a' = 1, 'b' = 1, 'c' = 1)\n# >>> histogram('a\
  \ b b a')\n# list('a' = 2, 'b' = 2)\n# >>> histogram('a b c a b')\n# list('a' =\
  \ 2, 'b' = 2)\n# >>> histogram('b b b b a')\n# list('b' = 4)\n# >>> histogram('')\n\
  # list()\nhistogram <- function(test) {"
tests: "test_humaneval <- function() {\ncandidate <- histogram\n    if(!identical(candidate('a\
  \ b b a'), list('a' = 2, 'b' = 2))){quit('no', 1)}\n    if(!identical(candidate('a\
  \ b c a b'), list('a' = 2, 'b' = 2))){quit('no', 1)}\n    if(!identical(candidate('a\
  \ b c d g'), list('a' = 1, 'b' = 1, 'c' = 1, 'd' = 1, 'g' = 1))){quit('no', 1)}\n\
  \    if(!identical(candidate('r t g'), list('r' = 1, 't' = 1, 'g' = 1))){quit('no',\
  \ 1)}\n    if(!identical(candidate('b b b b a'), list('b' = 4))){quit('no', 1)}\n\
  \    if(!identical(candidate('r t g'), list('r' = 1, 't' = 1, 'g' = 1))){quit('no',\
  \ 1)}\n    if(!identical(candidate(''), list())){quit('no', 1)}\n    if(!identical(candidate('a'),\
  \ list('a' = 1))){quit('no', 1)}\n}\ntest_humaneval()"
completions: []
stop_tokens:
- "\n#"
- "\n```"
