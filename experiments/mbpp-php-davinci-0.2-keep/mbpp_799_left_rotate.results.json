{
  "name": "mbpp_799_left_rotate",
  "language": "php",
  "prompt": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n\necho left_rotate(16, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = ($n & $mask) >> ($bits - $d);\n\treturn $n;\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpph793gf2.php:17\nStack trace:\n#0 /tmp/tmpph793gf2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpph793gf2.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(16, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$d = $d % $bits;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask);\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $d; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$mask = ~$mask;\n\t$left = $n << $d;\n\t$right = $n & $mask;\n\t$right = $right >> ($bits - $d);\n\treturn $left | $right;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) & $mask;\n    $n = $n | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(5, 2) . \"\\n\";\necho left_rotate(5, 3) . \"\\n\";\necho left_rotate(5, 4) . \"\\n\";\necho left_rotate(5, 5) . \"\\n\";\necho left_rotate(5, 6) . \"\\n\";\necho left_rotate(5, 7) . \"\\n\";\necho left_rotate(5, 8) . \"\\n\";\necho left_rotate(5, 9) . \"\\n\";\necho left_rotate(5, 10) . \"\\n\";\necho left_rotate(5, 11) . \"\\n\";\necho left_rotate(5, 12) . \"\\n\";\necho left_rotate(5, 13) . \"\\n\";\necho left_rotate(5, 14) . \"\\n\";\necho left_rotate(5, 15) . \"\\n\";\necho left_rotate(5, 16) . \"\\n\";\necho left_rotate(5, 17) . \"\\n\";\necho left_rotate(5, 18) . \"\\n\";\necho left_rotate(5, 19) . \"\\n\";\necho left_rotate(5, 20) . \"\\n\";\necho left_rotate(5, 21) . \"\\n\";\necho left_rotate(5, 22) . \"\\n\";\necho left_rotate(5, 23) . \"\\n\";\necho left_rotate(5, 24) . \"\\n\";\necho left_rotate(5, 25) . \"\\n\";\necho left_rotate(5, 26) . \"\\n\";\necho left_rotate(5, 27) . \"\\n\";\necho left_rotate(5, 28) . \"\\n\";\necho left_rotate(5, 29) . \"\\n\";\necho left_rotate(5, 30) . \"\\n\";\necho left_\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \",\" or \";\" in /tmp/tmplz_pu_fm.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(2, 1);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | (($mask >> ($bits - $d)) & $mask);\n    return $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "67\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3a96r6g5.php:19\nStack trace:\n#0 /tmp/tmp3a96r6g5.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3a96r6g5.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$mask = (1 << $d) - 1;\n\t$mask = $mask << (32 - $d);\n\t$n = $n & $mask;\n\t$n = $n >> (32 - $d);\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp49xpyn5.php:19\nStack trace:\n#0 /tmp/tmpp49xpyn5.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp49xpyn5.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 3;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "28633115310",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b1101;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "52",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    $n = $n & $mask;\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\treturn (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(5, 2);\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n  return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 15;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "60",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n  $bits = 32;\n  $mask = (1 << $bits) - 1;\n  $n = $n & $mask;\n  $n = ($n << $d) | ($n >> ($bits - $d));\n  return $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n << $d) & $mask;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(0b10101010101010101010101010101010, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "11453246122",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(3, 1);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\treturn ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$left_mask = $mask << $d;\n\t$right_mask = $mask >> ($bits - $d);\n\t$left_mask = $left_mask & $n;\n\t$right_mask = $right_mask & $n;\n\t$left_mask = $left_mask >> ($bits - $d);\n\t$right_mask = $right_mask << $d;\n\treturn $left_mask | $right_mask;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8bg1hgs.php:23\nStack trace:\n#0 /tmp/tmpk8bg1hgs.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpk8bg1hgs.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(16, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$d = $d % $bits;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $left_rotate = ($n << $d) | ($n >> ($bits - $d));\n    return $left_rotate;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\treturn (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\n$n = left_rotate($n, $d);\nprintf(\"%b\\n\", $n);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "1111111111111111111111111111111111\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$left_rotate = ($n << $d) | ($n >> ($bits - $d));\n\treturn $left_rotate;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(1, 1) . \"\\n\";\necho left_rotate(1, 2) . \"\\n\";\necho left_rotate(1, 3) . \"\\n\";\necho left_rotate(1, 4) . \"\\n\";\necho left_rotate(1, 5) . \"\\n\";\necho left_rotate(1, 6) . \"\\n\";\necho left_rotate(1, 7) . \"\\n\";\necho left_rotate(1, 8) . \"\\n\";\necho left_rotate(1, 9) . \"\\n\";\necho left_rotate(1, 10) . \"\\n\";\necho left_rotate(1, 11) . \"\\n\";\necho left_rotate(1, 12) . \"\\n\";\necho left_rotate(1, 13) . \"\\n\";\necho left_rotate(1, 14) . \"\\n\";\necho left_rotate(1, 15) . \"\\n\";\necho left_rotate(1, 16) . \"\\n\";\necho left_rotate(1, 17) . \"\\n\";\necho left_rotate(1, 18) . \"\\n\";\necho left_rotate(1, 19) . \"\\n\";\necho left_rotate(1, 20) . \"\\n\";\necho left_rotate(1, 21) . \"\\n\";\necho left_rotate(1, 22) . \"\\n\";\necho left_rotate(1, 23) . \"\\n\";\necho left_rotate(1, 24) . \"\\n\";\necho left_rotate(1, 25) . \"\\n\";\necho left_rotate(1, 26) . \"\\n\";\necho left_rotate(1, 27) . \"\\n\";\necho left_rotate(1, 28) . \"\\n\";\necho left_rotate(1, 29) . \"\\n\";\necho left_rotate(1, 30\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpr18y9onx.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(12, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "48",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $d; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$mask = ~$mask;\n\t$left = $n << $d;\n\t$right = $n & $mask;\n\t$right = $right >> ($bits - $d);\n\treturn $left | $right;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7szoqzd.php:16\nStack trace:\n#0 /tmp/tmpp7szoqzd.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7szoqzd.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = ($n & $mask) << $d;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> $d;\n\t$mask = ~$mask;\n\t$n = ($n & $mask) >> $d;\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 4;\necho \"Left rotate $d bits of $n is \" . left_rotate($n, $d) . \"\\n\";\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "Left rotate 4 bits of 4294967295 is 4278190080\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8wf1frpx.php:25\nStack trace:\n#0 /tmp/tmp8wf1frpx.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8wf1frpx.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$mask = (1 << $d) - 1;\n\t$mask = $mask << (32 - $d);\n\t$n = $n & $mask;\n\t$n = $n >> (32 - $d);\n\treturn $n;\n}\n\necho left_rotate(8, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5w6e92b.php:17\nStack trace:\n#0 /tmp/tmp_5w6e92b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_5w6e92b.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\treturn $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv84ymvk2.php:19\nStack trace:\n#0 /tmp/tmpv84ymvk2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpv84ymvk2.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b110101101010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101101011010110101\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpekf4ogyj.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\tif ($i < $d) {\n\t\t\t$mask = $mask | (1 << $i);\n\t\t}\n\t}\n\t$mask = ~$mask;\n\t$left = ($n << $d) & $mask;\n\t$right = $n >> ($bits - $d);\n\treturn $left | $right;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\treturn $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv84ymvk2.php:19\nStack trace:\n#0 /tmp/tmpv84ymvk2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpv84ymvk2.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b1101;\n$d = 2;\n\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "52",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 0b00000000000000000000000000000001;\n$result = left_rotate($n, $d);\necho $result;\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "8589934591",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\treturn (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n\necho left_rotate(8, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "32",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\necho left_rotate($n, $d) . PHP_EOL;\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "17179869183\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $mask = $mask & $n;\n    $mask = $mask << $d;\n    $n = $n >> ($bits - $d);\n    $n = $n | $mask;\n    return $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 5;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "114532461242",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\treturn (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = decbin($n);\n\t$bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n\t$bits = substr($bits, $d) . substr($bits, 0, $d);\n\treturn bindec($bits);\n}\n\necho left_rotate(1, 1) . \"\\n\";\necho left_rotate(1, 2) . \"\\n\";\necho left_rotate(1, 3) . \"\\n\";\necho left_rotate(1, 4) . \"\\n\";\necho left_rotate(1, 5) . \"\\n\";\necho left_rotate(1, 6) . \"\\n\";\necho left_rotate(1, 7) . \"\\n\";\necho left_rotate(1, 8) . \"\\n\";\necho left_rotate(1, 9) . \"\\n\";\necho left_rotate(1, 10) . \"\\n\";\necho left_rotate(1, 11) . \"\\n\";\necho left_rotate(1, 12) . \"\\n\";\necho left_rotate(1, 13) . \"\\n\";\necho left_rotate(1, 14) . \"\\n\";\necho left_rotate(1, 15) . \"\\n\";\necho left_rotate(1, 16) . \"\\n\";\necho left_rotate(1, 17) . \"\\n\";\necho left_rotate(1, 18) . \"\\n\";\necho left_rotate(1, 19) . \"\\n\";\necho left_rotate(1, 20) . \"\\n\";\necho left_rotate(1, 21) . \"\\n\";\necho left_rotate(1, 22) . \"\\n\";\necho left_rotate(1, 23) . \"\\n\";\necho left_rotate(1, 24) . \"\\n\";\necho left_rotate(1, 25) . \"\\n\";\necho left_rotate(1, 26) . \"\\n\";\necho left_rotate(1, 27) . \"\\n\";\necho left_rotate(1, 28) . \"\\n\";\necho left_rotate(1, 29) . \"\\n\";\necho left_rotate(1, 30\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpmz9bh0tg.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 7;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "28",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n  $bits = 32;\n  $mask = (1 << $bits) - 1;\n  $n = $n & $mask;\n  $n = ($n << $d) | ($n >> ($bits - $d));\n  return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(2, 3);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "16",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\treturn $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "32\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzqj_pie4.php:22\nStack trace:\n#0 /tmp/tmpzqj_pie4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzqj_pie4.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return (($n << $d) | ($n >> (32 - $d)));\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\treturn ($n << $d) | ($n >> (32 - $d));\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = ($n & $mask) << $d;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> $d;\n\t$mask = ~$mask;\n\t$n = $n | ($n & $mask) >> ($bits - $d);\n\treturn $n;\n}\n\n$n = 0b11010111;\n$d = 3;\necho \"Left rotate $n by $d bits: \" . left_rotate($n, $d) . \"\\n\";\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "Left rotate 215 by 3 bits: 1664\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjeylm2g4.php:26\nStack trace:\n#0 /tmp/tmpjeylm2g4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjeylm2g4.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$d = $d % $bits;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    return ($n << $d) | ($n >> ($bits - $d));\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    return ($n << $d) | ($n >> ($bits - $d));\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $d; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $mask = ~$mask;\n    $left = $n << $d;\n    $right = $n & $mask;\n    $right = $right >> ($bits - $d);\n    return $left | $right;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(2, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = ($n & $mask) >> ($bits - $d);\n\treturn $n;\n}\n\necho left_rotate(1, 1);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmloauk08.php:17\nStack trace:\n#0 /tmp/tmpmloauk08.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmloauk08.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\n$n = 0b1101;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpspe9x9xh.php:19\nStack trace:\n#0 /tmp/tmpspe9x9xh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpspe9x9xh.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = 0;\n\tfor($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\t$n = $n & $mask;\n\treturn $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$d = $d % $bits;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(8, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "32",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(1, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(1, 1);\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n  return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $d; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$mask = ~$mask;\n\t$left = $n << $d;\n\t$right = ($n & $mask) >> ($bits - $d);\n\treturn $left | $right;\n}\n\necho left_rotate(1, 1);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n  $bits = decbin($n);\n  $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n  $bits = substr($bits, $d) . substr($bits, 0, $d);\n  return bindec($bits);\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n & $mask;\n    $n = $n >> ($bits - $d);\n    return $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zvmdeg2.php:18\nStack trace:\n#0 /tmp/tmp2zvmdeg2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2zvmdeg2.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = ($n >> ($bits - $d)) & ((1 << $d) - 1);\n    $mask = $mask << ($bits - $d);\n    $n = $n << $d;\n    $n = $n | $mask;\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n << $d) & $mask;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n << $d) & $mask;\n\t$n = ($n >> $bits) | $n;\n\treturn $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\t$n = $n & $mask;\n\treturn $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | (($mask >> ($bits - $d)) & $mask);\n    return $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 4;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "57266230623\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6psflds_.php:19\nStack trace:\n#0 /tmp/tmp6psflds_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6psflds_.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 3;\necho left_rotate($n, $d);\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "28633115310",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = decbin($n);\n\t$bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n\t$bits = substr($bits, $d) . substr($bits, 0, $d);\n\treturn bindec($bits);\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask);\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(2, 1);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) & $mask;\n    $n = $n | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $n = $n & $mask;\n    $n = $n << $d;\n    $n = $n & $mask;\n    return $n;\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$n = $n & $mask;\n\t$d = $d & $mask;\n\t$n = $n << $d;\n\t$n = $n & $mask;\n\t$n = $n >> ($bits - $d);\n\treturn $n;\n}\n\n$n = 2;\n$d = 1;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpfk_w35.php:25\nStack trace:\n#0 /tmp/tmpcpfk_w35.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcpfk_w35.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        if ($i < $d) {\n            $mask = $mask | (1 << $i);\n        }\n    }\n    $left = $n << $d;\n    $right = $n >> ($bits - $d);\n    $right = $right & $mask;\n    $result = $left | $right;\n    return $result;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 1;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "8589934591",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 10;\n$d = 3;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "80",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    return ($n << $d) | ($n >> ($bits - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n  $bits = 32;\n  $mask = (1 << $bits) - 1;\n  $n = ($n & $mask) << $d;\n  $n = $n | ($n >> $bits);\n  return $n;\n}\n\necho left_rotate(1, 1);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    return ($n << $d) | ($n >> ($bits - $d));\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0xFFFFFFFF;\n$d = 4;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "68719476735",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask);\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $d; $i++) {\n        $mask = ($mask << 1) | 1;\n    }\n    $mask = ~$mask;\n    $left = $n & $mask;\n    $left = $left >> ($bits - $d);\n    $right = $n & ~$mask;\n    $right = $right << $d;\n    return $left | $right;\n}\n\n$n = 0b10101010101010101010101010101010;\n$d = 2;\n$result = left_rotate($n, $d);\necho decbin($result);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "1010\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpykyhv0wo.php:26\nStack trace:\n#0 /tmp/tmpykyhv0wo.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpykyhv0wo.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 12;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "48",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(5, 2);\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n & $mask;\n    $n = $n >> ($bits - $d);\n    return $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zvmdeg2.php:18\nStack trace:\n#0 /tmp/tmp2zvmdeg2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2zvmdeg2.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\treturn $n;\n}\n\necho left_rotate(5, 2);\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "16\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1_e4ipl.php:21\nStack trace:\n#0 /tmp/tmpg1_e4ipl.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg1_e4ipl.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask);\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | (($n >> $bits) & $mask);\n\treturn $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$d = $d & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 0b10101010101010101010101010101010;\n\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "\nFatal error: Uncaught ArithmeticError: Bit shift by negative number in /tmp/tmp560mvvco.php:8\nStack trace:\n#0 /tmp/tmp560mvvco.php(15): left_rotate(3579139413, 2863311530)\n#1 {main}\n  thrown in /tmp/tmp560mvvco.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 3;\n$result = left_rotate($n, $d);\necho \"Left rotated by $d bits: \" . decbin($result) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "Left rotated by 3 bits: 11010101010101010101010101010101110\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $left = $n << $d;\n    $right = $n >> ($bits - $d);\n    return $left | $right;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = ~(~0 << $bits);\n    $mask = $mask >> $d;\n    $mask = ~$mask;\n    $n = $n & $mask;\n    $n = $n << $d;\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcuk1_dcw.php:18\nStack trace:\n#0 /tmp/tmpcuk1_dcw.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcuk1_dcw.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\n$n = 0b1101;\n$d = 2;\n$result = left_rotate($n, $d);\necho $result;\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "52",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\t$n = $n & $mask;\n\treturn $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    return (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(8, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "32",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $d) - 1;\n\t$mask = $mask << ($bits - $d);\n\t$mask = ~$mask;\n\t$n = ($n << $d) & $mask;\n\t$n = $n >> ($bits - $d);\n\treturn $n;\n}\n\necho left_rotate(10, 2) . \"\\n\";\necho left_rotate(10, 3) . \"\\n\";\necho left_rotate(10, 4) . \"\\n\";\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "0\n0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dp4vlqc.php:22\nStack trace:\n#0 /tmp/tmp4dp4vlqc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4dp4vlqc.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\necho left_rotate(5, 2);\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnk8dlrsa.php:18\nStack trace:\n#0 /tmp/tmpnk8dlrsa.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpnk8dlrsa.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\treturn (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n << $d) & $mask;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    return ($n << $d) | ($n >> ($bits - $d));\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = decbin($n);\n\t$bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n\t$bits = substr($bits, $d) . substr($bits, 0, $d);\n\treturn bindec($bits);\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\n$n = 0b11010101;\n$d = 3;\necho \"Left rotate of $n by $d bits is \" . left_rotate($n, $d);\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "Left rotate of 213 by 3 bits is 1704",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = ($n & $mask) << $d;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> $d;\n\t$mask = ~$mask;\n\t$n = $n | ($mask & $n);\n\treturn $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "32\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxd42ufud.php:25\nStack trace:\n#0 /tmp/tmpxd42ufud.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxd42ufud.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(8, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "32",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj58vavfl.php:17\nStack trace:\n#0 /tmp/tmpj58vavfl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpj58vavfl.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    $n = $n & $mask;\n    return $n;\n}\n\necho left_rotate(8, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "32",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\n$n = left_rotate($n, $d);\necho decbin($n);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "1111111111111111111111111111111111",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 12;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "48",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $d) - 1;\n\t$mask = $mask << ($bits - $d);\n\t$n = $n & $mask;\n\t$n = $n >> ($bits - $d);\n\treturn $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 5;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "26\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcr_mzs2.php:20\nStack trace:\n#0 /tmp/tmpbcr_mzs2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbcr_mzs2.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask);\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = decbin($n);\n\t$bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n\t$bits = substr($bits, $d) . substr($bits, 0, $d);\n\treturn bindec($bits);\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $d; $i++) {\n        $mask = ($mask << 1) | 1;\n    }\n    $mask = ~$mask;\n    $n = ($n << $d) & $mask;\n    $n = $n | (($n >> $bits) & $mask);\n    return $n;\n}\n\n$n = 0b10000000000000000000000000000001;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "8589934596",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask << 1;\n        $mask = $mask | 1;\n    }\n    $n = $n & $mask;\n    $n = $n << $d;\n    $n = $n & $mask;\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 4;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "57266230621",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(11, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "44",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\necho decbin(left_rotate($n, $d)) . PHP_EOL;\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "1111111111111111111111111111111111\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = ($n & $mask) >> ($bits - $d);\n\treturn $n;\n}\n\necho left_rotate(0b1101, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgc2xn7m2.php:17\nStack trace:\n#0 /tmp/tmpgc2xn7m2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgc2xn7m2.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510245,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11010101;\n$d = 3;\necho \"Original number: \" . decbin($n) . \"\\n\";\necho \"Rotated number: \" . decbin(left_rotate($n, $d)) . \"\\n\";\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "Original number: 11010101\nRotated number: 11010101000\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d % $bits;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 15;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "60",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $d; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$mask = ~$mask;\n\t$left = $n << $d;\n\t$right = ($n & $mask) >> ($bits - $d);\n\treturn $left | $right;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "64",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t// First get the number of bits in the number\n\t$bits = strlen(decbin($n));\n\t// Now left rotate the number by d bits\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbh6vthra.php:16\nStack trace:\n#0 /tmp/tmpbh6vthra.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbh6vthra.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(10, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122754,
      "stdout": "40",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(5, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122755,
      "stdout": "20",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\necho left_rotate(2, 1);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgaq9db05.php:17\nStack trace:\n#0 /tmp/tmpgaq9db05.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgaq9db05.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(8, 2);\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "32",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n\t$bits = 32;\n\treturn ($n << $d) | ($n >> ($bits - $d));\n}\n\nfunction candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}