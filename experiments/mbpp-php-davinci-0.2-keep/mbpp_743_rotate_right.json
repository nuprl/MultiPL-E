{
  "name": "mbpp_743_rotate_right",
  "language": "php",
  "prompt": "<?php\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfunction rotate_right($list, $m) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return rotate_right(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) !== array(8, 9, 10, 1, 2, 3, 4, 5, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2) !== array(9, 10, 1, 2, 3, 4, 5, 6, 7, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5) !== array(6, 7, 8, 9, 10, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $list_length = count($list);\n    $m = $m % $list_length;\n    $result = array_merge(array_slice($list, -$m), array_slice($list, 0, $list_length - $m));\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$m = 3;\nprint_r(rotate_right($list, $m));",
    "    $n = count($list);\n    $m = $m % $n;\n    $new_list = array_slice($list, $n - $m, $m);\n    $new_list = array_merge($new_list, array_slice($list, 0, $n - $m));\n    return $new_list;\n}\n\n$list = [1, 2, 3, 4, 5];\n$m = 2;\n$new_list = rotate_right($list, $m);\nprint_r($new_list);\n",
    "    $length = count($list);\n    $list = array_reverse($list);\n    $list = array_reverse(array_slice($list, 0, $length - $m));\n    $list = array_merge($list, array_reverse(array_slice($list, $length - $m)));\n    return $list;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7];\n$m = 2;\nprint_r(rotate_right($list, $m));",
    "    $result = [];\n    $n = count($list);\n    for ($i = 0; $i < $n; $i++) {\n        $result[($i + $m) % $n] = $list[$i];\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7];\n$m = 2;\n$result = rotate_right($list, $m);\nprint_r($result);",
    "    $new_list = array();\n    $list_length = count($list);\n    for ($i = 0; $i < $list_length; $i++) {\n        $new_list[$i] = $list[($i + $m) % $list_length];\n    }\n    return $new_list;\n}\n\n$list = array(1, 2, 3, 4, 5);\n$m = 2;\nprint_r(rotate_right($list, $m));",
    "    $result = [];\n    for ($i = 0; $i < count($list); $i++) {\n        $result[($i + $m) % count($list)] = $list[$i];\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7];\n$m = 2;\n\necho implode(', ', rotate_right($list, $m));",
    "    $length = count($list);\n    $m = $m % $length;\n    $new_list = array_slice($list, $length - $m);\n    $new_list = array_merge($new_list, array_slice($list, 0, $length - $m));\n    return $new_list;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$m = 3;\nprint_r(rotate_right($list, $m));",
    "    $new_list = [];\n    $n = count($list);\n    for ($i = 0; $i < $n; $i++) {\n        $new_list[($i + $m) % $n] = $list[$i];\n    }\n    return $new_list;\n}\n\n$list = [1, 2, 3, 4, 5, 6];\n$m = 2;\n$new_list = rotate_right($list, $m);\nprint_r($new_list);",
    "    $n = count($list);\n    $m = $m % $n;\n    $gcd = gcd($n, $m);\n    for ($i = 0; $i < $gcd; $i++) {\n        $temp = $list[$n - $i - 1];\n        $j = $n - $i - 1;\n        while (1) {\n            $k = $j - $m;\n            if ($k < 0) {\n                $k = $k + $n;\n            }\n            if ($k == $n - $i - 1) {\n                break;\n            }\n            $list[$j] = $list[$k];\n            $j = $k;\n        }\n        $list[$j] = $temp;\n    }\n    return $list;\n}\n",
    "    $n = count($list);\n    $m = $m % $n;\n    $gcd = gcd($n, $m);\n    for ($i = 0; $i < $gcd; $i++) {\n        $temp = $list[$n - $i - 1];\n        $j = $n - $i - 1;\n        while (true) {\n            $k = $j - $m;\n            if ($k < 0) {\n                $k = $k + $n;\n            }\n            if ($k == $n - $i - 1) {\n                break;\n            }\n            $list[$j] = $list[$k];\n            $j = $k;\n        }\n        $list[$j] = $temp;\n    }\n    return $list;\n}\n",
    "    $n = count($list);\n    $m = $m % $n;\n    $gcd = gcd($n, $m);\n    for ($i = 0; $i < $gcd; $i++) {\n        $temp = $list[$i];\n        $j = $i;\n        while (true) {\n            $k = $j + $m;\n            if ($k >= $n) {\n                $k = $k - $n;\n            }\n            if ($k == $i) {\n                break;\n            }\n            $list[$j] = $list[$k];\n            $j = $k;\n        }\n        $list[$j] = $temp;\n    }\n    return $list;\n}\n",
    "    $n = count($list);\n    $m = $m % $n;\n    $new_list = array_merge(array_slice($list, $n - $m), array_slice($list, 0, $n - $m));\n    return $new_list;\n}\n\n$list = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$m = 3;\n$new_list = rotate_right($list, $m);\nprint_r($new_list);\n",
    "    $n = count($list);\n    $gcd = gcd($n, $m);\n    for ($i = 0; $i < $gcd; $i++) {\n        $temp = $list[$i];\n        $j = $i;\n        while (true) {\n            $k = $j + $m;\n            if ($k >= $n) {\n                $k = $k - $n;\n            }\n            if ($k == $i) {\n                break;\n            }\n            $list[$j] = $list[$k];\n            $j = $k;\n        }\n        $list[$j] = $temp;\n    }\n    return $list;\n}\n",
    "    $n = count($list);\n    $gcd = gcd($n, $m);\n    for ($i = 0; $i < $gcd; $i++) {\n        $temp = $list[$i];\n        $j = $i;\n        while (true) {\n            $k = $j + $m;\n            if ($k >= $n) {\n                $k = $k - $n;\n            }\n            if ($k == $i) {\n                break;\n            }\n            $list[$j] = $list[$k];\n            $j = $k;\n        }\n        $list[$j] = $temp;\n    }\n    return $list;\n}\n",
    "    $n = count($list);\n    $m = $m % $n;\n    $temp = array_slice($list, $n - $m);\n    $temp2 = array_slice($list, 0, $n - $m);\n    return array_merge($temp, $temp2);\n}\n\n$list = [1, 2, 3, 4, 5];\n$m = 2;\nprint_r(rotate_right($list, $m));",
    "    $list_length = count($list);\n    $rotated_list = [];\n    for ($i = 0; $i < $list_length; $i++) {\n        $rotated_list[($i + $m) % $list_length] = $list[$i];\n    }\n    return $rotated_list;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$m = 3;\n$rotated_list = rotate_right($list, $m);\nprint_r($rotated_list);",
    "    $n = count($list);\n    $m = $m % $n;\n    $gcd = gcd($n, $m);\n    for ($i = 0; $i < $gcd; $i++) {\n        $temp = $list[$i];\n        $j = $i;\n        while (true) {\n            $k = $j + $m;\n            if ($k >= $n) {\n                $k = $k - $n;\n            }\n            if ($k == $i) {\n                break;\n            }\n            $list[$j] = $list[$k];\n            $j = $k;\n        }\n        $list[$j] = $temp;\n    }\n    return $list;\n}\n",
    "    $length = count($list);\n    $mod = $m % $length;\n    $result = array();\n    for ($i = 0; $i < $length; $i++) {\n        $result[$i] = $list[($i + $mod) % $length];\n    }\n    return $result;\n}\n\n$list = array(1, 2, 3, 4, 5);\n$m = 2;\n$result = rotate_right($list, $m);\nprint_r($result);",
    "    $list_length = count($list);\n    $new_list = [];\n    for ($i = 0; $i < $list_length; $i++) {\n        $new_list[($i + $m) % $list_length] = $list[$i];\n    }\n    return $new_list;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7];\n$m = 2;\n\nprint_r(rotate_right($list, $m));",
    "    $length = count($list);\n    $m = $m % $length;\n    $new_list = array_slice($list, $length - $m);\n    $new_list = array_merge($new_list, array_slice($list, 0, $length - $m));\n    return $new_list;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7];\n$m = 2;\nprint_r(rotate_right($list, $m));"
  ]
}