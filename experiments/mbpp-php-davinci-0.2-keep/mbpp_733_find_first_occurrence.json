{
  "name": "mbpp_733_find_first_occurrence",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } elseif ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;",
    "  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } elseif ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
    "    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
    "    $n = count($A);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($A[$m] < $x) {\n            $l = $m + 1;\n        } elseif ($A[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            if ($m == 0 || $A[$m - 1] < $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + (($high - $low) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1; // search left\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1; // search left\n        } else {\n            $low = $mid + 1; // search right\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);",
    "    $n = count($A);\n    $low = 0;\n    $high = $n - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n\n    return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x);\n\necho \"\\n\";\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 8;\necho find_first_occurrence($A, $x);\n\necho \"\\n\";\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 1;\necho find_first_occurrence($A, $x);\n\necho \"\\n\";\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 10;\necho find_first_occurrence($A, $x);",
    "    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);",
    "    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);",
    "    $low = 0;\n    $high = count($A) - 1;\n\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n\n        if ($A[$mid] == $x && ($mid == 0 || $A[$mid - 1] < $x)) {\n            return $mid;\n        } else if ($A[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n\n    return -1;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n\necho find_first_occurrence($A, $x);"
  ]
}