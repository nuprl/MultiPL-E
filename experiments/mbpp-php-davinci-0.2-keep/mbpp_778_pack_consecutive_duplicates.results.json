{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "php",
  "prompt": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp7bozksxr.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpmclv5ilq.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$list2_index], $list1[$i]);\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmppyasi62b.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$result = pack_consecutive_duplicates($list1);\necho \"Original List :\\n\";\necho implode(\", \", $list1);\necho \"\\nPacked List :\\n\";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "Original List :\n1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5\nPacked List :\n\nWarning: Array to string conversion in /tmp/tmp11vsm5da.php on line 25\n\nWarning: Array to string conversion in /tmp/tmp11vsm5da.php on line 25\n\nWarning: Array to string conversion in /tmp/tmp11vsm5da.php on line 25\n\nWarning: Array to string conversion in /tmp/tmp11vsm5da.php on line 25\n\nWarning: Array to string conversion in /tmp/tmp11vsm5da.php on line 25\nArray, Array, Array, Array, Array",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmps0ff30b_.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $result_index = -1;\n    $list_size = count($list1);\n    for ($i = 0; $i < $list_size; $i++) {\n        if ($i == 0 || $list1[$i] != $result[$result_index][0]) {\n            array_push($result, array());\n            $result_index++;\n        }\n        array_push($result[$result_index], $list1[$i]);\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n            [3] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [4] => Array\n        (\n            [0] => 4\n        )\n\n    [5] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $count = 0;\n    $temp = array();\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($i == 0) {\n            $temp[$count] = $list1[$i];\n            $count++;\n        } else {\n            if ($list1[$i] == $list1[$i - 1]) {\n                $temp[$count] = $list1[$i];\n                $count++;\n            } else {\n                $result[] = $temp;\n                $count = 0;\n                $temp = array();\n                $temp[$count] = $list1[$i];\n                $count++;\n            }\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n            [4] => 9\n            [5] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$list2_index], $list1[$i]);\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpznv_2evq.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $count = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$count], $list1[$i]);\n        } else {\n            $count++;\n            $list2[$count] = array();\n            array_push($list2[$count], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpr8aiu5bf.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = $list1[0];\n    $list2[1] = array();\n    $list2[1][0] = $list1[1];\n    $list2[2] = array();\n    $list2[2][0] = $list1[2];\n    $list2[2][1] = $list1[3];\n    $list2[3] = array();\n    $list2[3][0] = $list1[4];\n    $list2[4] = array();\n    $list2[4][0] = $list1[5];\n    $list2[4][1] = $list1[6];\n    $list2[5] = array();\n    $list2[5][0] = $list1[7];\n    $list2[5][1] = $list1[8];\n    $list2[5][2] = $list1[9];\n    $list2[6] = array();\n    $list2[6][0] = $list1[10];\n    $list2[7] = array();\n    $list2[7][0] = $list1[11];\n    $list2[7][1] = $list1[12];\n    $list2[8] = array();\n    $list2[8][0] = $list1[13];\n    $list2[8][1] = $list1[14];\n    $list2[8][2] = $list1[15];\n    $list2[8][3] = $list1[16];\n    $list2[9] = array();\n    $list2[9][0] = $list1[17];\n    $list2[9][1] = $list1[18];\n    $list2[9][2] = $list1[19];\n    $list2[9][3] = $list1[20];\n    $list2[9][4] = $list1[21];\n    $list2[9][5] = $list1[22];\n    $list2[9][6] = $list1[23\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmp351i20ez.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpx9r8iq88.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9, 9, 9, 9);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$result = array();\n\t$list_size = count($list1);\n\t$i = 0;\n\twhile ($i < $list_size) {\n\t\t$j = $i + 1;\n\t\t$sublist = array();\n\t\t$sublist[] = $list1[$i];\n\t\twhile ($j < $list_size && $list1[$j] == $list1[$i]) {\n\t\t\t$sublist[] = $list1[$j];\n\t\t\t$j++;\n\t\t}\n\t\t$result[] = $sublist;\n\t\t$i = $j;\n\t}\n\treturn $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9, 9, 9, 9);\n$result = pack_consecutive_duplicates($list1);\necho \"Original list: \";\nprint_r($list1);\necho \"Result: \";\nprint_r($result);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "Original list: Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 3\n    [6] => 4\n    [7] => 5\n    [8] => 5\n    [9] => 5\n    [10] => 5\n    [11] => 5\n    [12] => 6\n    [13] => 7\n    [14] => 8\n    [15] => 8\n    [16] => 8\n    [17] => 9\n    [18] => 9\n    [19] => 9\n    [20] => 9\n)\nResult: Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n           ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] === $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9);\n$result = pack_consecutive_duplicates($list1);\nprint_r($result);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = $list1[0];\n    $list3 = array();\n    $list3[] = $list2;\n    $i = 0;\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j]) {\n            $list2[] = $list1[$i];\n        } else {\n            $j++;\n            $list2 = array();\n            $list2[] = $list1[$i];\n            $list3[] = $list2;\n        }\n    }\n    return $list3;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "\nWarning: Undefined array key 1 in /tmp/tmpdsnrhiuh.php on line 11\n\nWarning: Undefined array key 2 in /tmp/tmpdsnrhiuh.php on line 11\n\nWarning: Undefined array key 3 in /tmp/tmpdsnrhiuh.php on line 11\n\nWarning: Undefined array key 4 in /tmp/tmpdsnrhiuh.php on line 11\n\nWarning: Undefined array key 5 in /tmp/tmpdsnrhiuh.php on line 11\n\nWarning: Undefined array key 6 in /tmp/tmpdsnrhiuh.php on line 11\n\nWarning: Undefined array key 7 in /tmp/tmpdsnrhiuh.php on line 11\n\nWarning: Undefined array key 8 in /tmp/tmpdsnrhiuh.php on line 11\n\nWarning: Undefined array key 9 in /tmp/tmpdsnrhiuh.php on line 11\n\nWarning: Undefined array key 10 in /tmp/tmpdsnrhiuh.php on line 11\n\nWarning: Undefined array key 11 in /tmp/tmpdsnrhiuh.php on line 11\n\nWarning: Undefined array key 12 in /tmp/tmpdsnrhiuh.php on line 11\n\nWarning: Undefined array key 13 in /tmp/tmpdsnrhiuh.php on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdsnrhiuh.php:28\nStack trace:\n#0 /tmp/tmpdsnrhiuh.php(33): test()\n#1 {main}\n  thrown in /tmp",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpzxom1ms5.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp_ec9a5r0.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            $list2[$j][0] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpdd2sg2t1.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $i = 0;\n    $j = 0;\n    $len = count($list1);\n    while ($i < $len) {\n        $temp[$j] = $list1[$i];\n        $j++;\n        $i++;\n        while ($i < $len && $list1[$i] == $list1[$i - 1]) {\n            $temp[$j] = $list1[$i];\n            $j++;\n            $i++;\n        }\n        $result[] = $temp;\n        $temp = array();\n        $j = 0;\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp7i1cbtkb.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$list2_index][0]) {\n            array_push($list2[$list2_index], $list1[$i]);\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp6930bc8k.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n            [3] => 7\n            [4] => 7\n            [5] => 7\n            [6] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n            [4] => 8\n         ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $result_index = -1;\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($i == 0 || $list1[$i] != $result[$result_index][0]) {\n            array_push($result, array($list1[$i]));\n            $result_index++;\n        } else {\n            array_push($result[$result_index], $list1[$i]);\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpuv_757b6.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list3 = array();\n    $list4 = array();\n    $list2[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[] = $list1[$i];\n        } else {\n            $list3[] = $list2;\n            $list2 = array();\n            $list2[] = $list1[$i];\n        }\n    }\n    $list3[] = $list2;\n    return $list3;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpsz23_c2_.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2_index = 0;\n    $list2[$list2_index] = array();\n    $list2[$list2_index][] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$list2_index][] = $list1[$i];\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array();\n            $list2[$list2_index][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n            [3] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [4] => Array\n        (\n            [0] => 4\n        )\n\n    [5] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\n\necho \"List 1: \";\nforeach ($list1 as $value) {\n    echo $value . \" \";\n}\necho \"\\n\";\n\necho \"List 2: \";\nforeach ($list2 as $value) {\n    echo \"[\";\n    foreach ($value as $value2) {\n        echo $value2 . \" \";\n    }\n    echo \"] \";\n}\necho \"\\n\";\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "List 1: 1 1 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 \nList 2: [1 1 1 ] [2 2 ] [3 3 3 ] [4 4 4 4 ] [5 5 5 5 5 ] \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][0] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpdvf76s4s.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 8, 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n            [4] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n        )\n\n    [9] => Array\n        (\n            [0] => 10\n            [1] => 10\n            [2] => 10\n            [3] => 10\n            [4] => 10\n            [5] => 10\n           ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = $list1[0];\n    $list3 = array();\n    $list3[] = $list2;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[count($list2) - 1]) {\n            $list2[] = $list1[$i];\n        } else {\n            $list2 = array();\n            $list2[] = $list1[$i];\n            $list3[] = $list2;\n        }\n    }\n    return $list3;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmplwummh7m.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$list2 = array();\n\t$list2[] = array($list1[0]);\n\t$j = 0;\n\tfor ($i = 1; $i < count($list1); $i++) {\n\t\tif ($list1[$i] == $list1[$i - 1]) {\n\t\t\t$list2[$j][] = $list1[$i];\n\t\t} else {\n\t\t\t$list2[] = array($list1[$i]);\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpvxbfn7cb.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpt9q3ste7.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$list2 = array();\n\t$list2[0] = array();\n\t$list2[0][] = $list1[0];\n\t$j = 0;\n\tfor ($i = 1; $i < count($list1); $i++) {\n\t\tif ($list1[$i] == $list1[$i-1]) {\n\t\t\t$list2[$j][] = $list1[$i];\n\t\t} else {\n\t\t\t$j++;\n\t\t\t$list2[$j][] = $list1[$i];\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp29358wnm.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n            [3] => 7\n            [4] => 7\n            [5] => 7\n            [6] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n            [4] => 8\n            [5] => 8\n         ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $result_index = -1;\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($i == 0 || $list1[$i] != $list1[$i - 1]) {\n            $result_index++;\n            $result[$result_index] = array($list1[$i]);\n        } else {\n            array_push($result[$result_index], $list1[$i]);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = array($list1[0]);\n    $i = 0;\n    for ($j = 1; $j < count($list1); $j++) {\n        if ($list1[$j] == $list2[$i][0]) {\n            $list2[$i][] = $list1[$j];\n        } else {\n            $i++;\n            $list2[] = array($list1[$j]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $i = 0;\n    $j = 0;\n    $len = count($list1);\n    while ($i < $len) {\n        $result[$j][] = $list1[$i];\n        if ($i < $len - 1 && $list1[$i] == $list1[$i + 1]) {\n            $i++;\n        } else {\n            $i++;\n            $j++;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $i = 0;\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = array($list1[0]);\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$list2_index][] = $list1[$i];\n        } else {\n            $list2_index++;\n            $list2[] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = array($list1[0]);\n    $i = 0;\n    for ($j = 1; $j < count($list1); $j++) {\n        if ($list1[$j] == $list2[$i][0]) {\n            $list2[$i][] = $list1[$j];\n        } else {\n            $i++;\n            $list2[] = array($list1[$j]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $list_length = count($list1);\n    $i = 0;\n    while ($i < $list_length) {\n        $j = $i + 1;\n        $sublist = array($list1[$i]);\n        while ($j < $list_length && $list1[$j] == $list1[$i]) {\n            array_push($sublist, $list1[$j]);\n            $j++;\n        }\n        array_push($result, $sublist);\n        $i = $j;\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n            [3] => 7\n            [4] => 7\n            [5] => 7\n            [6] => 7\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $list1_count = count($list1);\n    for ($i = 0; $i < $list1_count; $i++) {\n        if ($i == 0) {\n            $temp[] = $list1[$i];\n        } else if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpsz90vd0p.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $list_length = count($list1);\n    $i = 0;\n    while ($i < $list_length) {\n        $j = $i + 1;\n        $sublist = array();\n        $sublist[] = $list1[$i];\n        while ($j < $list_length && $list1[$i] == $list1[$j]) {\n            $sublist[] = $list1[$j];\n            $j++;\n        }\n        $result[] = $sublist;\n        $i = $j;\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpxjj10cbv.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpv9e8ys0k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i-1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j] = array();\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpkbn1eijp.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpob2rjtkc.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9, 10);\n$list2 = pack_consecutive_duplicates($list1);\necho \"List 1: \";\nprint_r($list1);\necho \"List 2: \";\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "List 1: Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 3\n    [6] => 4\n    [7] => 5\n    [8] => 5\n    [9] => 5\n    [10] => 5\n    [11] => 6\n    [12] => 7\n    [13] => 8\n    [14] => 8\n    [15] => 8\n    [16] => 9\n    [17] => 10\n)\nList 2: Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n        )\n\n    [9] => Array\n        (\n            [0] => 10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9);\n$list2 = pack_consecutive_duplicates($list1);\nforeach ($list2 as $sublist) {\n    foreach ($sublist as $element) {\n        echo $element . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "1 1 1 <br>2 2 <br>3 <br>4 4 4 4 <br>5 5 5 <br>6 6 6 6 6 <br>7 <br>8 8 8 <br>9 9 9 9 9 9 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $result[] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $result[$j][] = $list1[$i];\n        } else {\n            $result[] = array($list1[$i]);\n            $j++;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7, 7);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n            [3] => 7\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $result_index = -1;\n    $list1_size = count($list1);\n    for ($i = 0; $i < $list1_size; $i++) {\n        if ($i == 0 || $list1[$i] != $result[$result_index][0]) {\n            // First entry in sublist\n            $result[++$result_index] = array($list1[$i]);\n        } else {\n            // Entry is same as previous\n            $result[$result_index][] = $list1[$i];\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n            [3] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [4] => Array\n        (\n            [0] => 4\n        )\n\n    [5] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $list2[++$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            $list2[$j][0] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = array($list1[0]);\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$list2_index][0]) {\n            $list2[$list2_index][] = $list1[$i];\n        } else {\n            $list2_index++;\n            $list2[] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp_4untua3.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $list2[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $list2[] = $temp;\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5);\necho \"Input list: \";\nprint_r($list1);\necho \"<br>Output list: \";\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Input list: Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 1\n    [4] => 2\n    [5] => 3\n    [6] => 3\n    [7] => 1\n    [8] => 1\n    [9] => 4\n    [10] => 5\n    [11] => 5\n    [12] => 5\n    [13] => 5\n)\n<br>Output list: Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n            [3] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [4] => Array\n        (\n            [0] => 4\n        )\n\n    [5] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $prev = null;\n    foreach ($list1 as $item) {\n        if ($item !== $prev) {\n            if (!empty($temp)) {\n                $result[] = $temp;\n            }\n            $temp = array();\n        }\n        $temp[] = $item;\n        $prev = $item;\n    }\n    if (!empty($temp)) {\n        $result[] = $temp;\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n            [4] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $result[] = array($list1[0]);\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $result[count($result) - 1][] = $list1[$i];\n        } else {\n            $result[] = array($list1[$i]);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$list2 = array();\n\t$list2[] = array($list1[0]);\n\t$i = 0;\n\tfor ($j = 1; $j < count($list1); $j++) {\n\t\tif ($list1[$j] == $list2[$i][0]) {\n\t\t\t$list2[$i][] = $list1[$j];\n\t\t} else {\n\t\t\t$list2[] = array($list1[$j]);\n\t\t\t$i++;\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n            [3] => 7\n            [4] => 7\n            [5] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n            [4] => 8\n            [5] => 8\n            [6] => 8\n        )",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j] = array();\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n            [5] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 7, 8, 8, 8, 8, 8, 9, 9, 9, 10);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n            [4] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n        )\n\n    [9] => Array\n        (\n            [0] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $list2[++$j] = array();\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 8, 9, 9, 9, 10);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n        )\n\n    [9] => Array\n        (\n            [0] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = array($list1[0]);\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[count($list2) - 1][] = $list1[$i];\n        } else {\n            $list2[] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n            [4] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n        )\n\n    [9] => Array\n        (\n            [0] => 10\n            [1] => 10\n            [2] => 10\n            [3] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 7, 8, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n            [4] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n        )\n\n    [9] => Array\n        (\n            [0] => 10\n            [1] => 10\n            [2] => 10\n            [3] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $list_length = count($list1);\n    $i = 0;\n    while ($i < $list_length) {\n        $j = $i + 1;\n        $sublist = array($list1[$i]);\n        while ($j < $list_length && $list1[$i] == $list1[$j]) {\n            $sublist[] = $list1[$j];\n            $j++;\n        }\n        $result[] = $sublist;\n        $i = $j;\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n            [5] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($list1)) {\n        $result[$j][] = $list1[$i];\n        if ($i < count($list1) - 1) {\n            if ($list1[$i] != $list1[$i + 1]) {\n                $j++;\n            }\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9);\n$result = pack_consecutive_duplicates($list1);\nprint_r($result);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n            [5] => 5\n            [6] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $sublist = array();\n    $prev = null;\n    foreach ($list1 as $item) {\n        if ($item !== $prev) {\n            if ($sublist) {\n                $result[] = $sublist;\n            }\n            $sublist = array();\n        }\n        $sublist[] = $item;\n        $prev = $item;\n    }\n    if ($sublist) {\n        $result[] = $sublist;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $count = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$count], $list1[$i]);\n        } else {\n            array_push($list2, array($list1[$i]));\n            $count++;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4xss8216.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$list2 = array();\n\t$list2[] = $list1[0];\n\t$list3 = array();\n\t$list3[] = $list2;\n\tfor ($i = 1; $i < count($list1); $i++) {\n\t\tif ($list1[$i] == $list1[$i - 1]) {\n\t\t\t$list2[] = $list1[$i];\n\t\t} else {\n\t\t\t$list2 = array();\n\t\t\t$list2[] = $list1[$i];\n\t\t\t$list3[] = $list2;\n\t\t}\n\t}\n\treturn $list3;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp8g2vxdsg.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = $list1[0];\n    $list3 = array();\n    $list3[] = $list2;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[0]) {\n            $list2[] = $list1[$i];\n        } else {\n            $list2 = array();\n            $list2[] = $list1[$i];\n            $list3[] = $list2;\n        }\n    }\n    return $list3;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6vc6fi2.php:28\nStack trace:\n#0 /tmp/tmpv6vc6fi2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpv6vc6fi2.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmppn2az4l5.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$result = array();\n\t$temp = array();\n\t$temp[] = $list1[0];\n\tfor ($i = 1; $i < count($list1); $i++) {\n\t\tif ($list1[$i] == $list1[$i - 1]) {\n\t\t\t$temp[] = $list1[$i];\n\t\t} else {\n\t\t\t$result[] = $temp;\n\t\t\t$temp = array();\n\t\t\t$temp[] = $list1[$i];\n\t\t}\n\t}\n\t$result[] = $temp;\n\treturn $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$result = pack_consecutive_duplicates($list1);\nprint_r($result);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][0] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9);\nprint_r(pack_consecutive_duplicates($list1));\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n            [4] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n            [4] => 9\n        )\n\n    [9] => Array\n        (\n            [0] => 10\n            [1] => 10\n            [2] => 10\n            [3] => 10\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $list2[$k][$j] = $list1[$i];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $j++;\n            $list2[$k][$j] = $list1[$i];\n        } else {\n            $k++;\n            $j = 0;\n            $list2[$k][$j] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpj5_u0yb5.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $current = null;\n    $count = 0;\n    foreach ($list1 as $element) {\n        if ($element != $current) {\n            if ($count > 0) {\n                $result[] = array_fill(0, $count, $current);\n            }\n            $current = $element;\n            $count = 1;\n        } else {\n            $count++;\n        }\n    }\n    if ($count > 0) {\n        $result[] = array_fill(0, $count, $current);\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpu3ytu4ht.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp_6f3xc4t.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10);\n$result = pack_consecutive_duplicates($list1);\nprint_r($result);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n            [4] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n        )\n\n    [9] => Array\n        (\n            [0] => 10\n            [1] => 10\n            [2] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $last = null;\n    foreach ($list1 as $item) {\n        if ($item != $last) {\n            if ($temp) {\n                $result[] = $temp;\n            }\n            $temp = array($item);\n        } else {\n            $temp[] = $item;\n        }\n        $last = $item;\n    }\n    if ($temp) {\n        $result[] = $temp;\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp3e0_2agk.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $i = 0;\n    $j = 0;\n    $result[$j] = array();\n    $result[$j][] = $list1[$i];\n    $i++;\n    while ($i < count($list1)) {\n        if ($list1[$i] == $result[$j][0]) {\n            $result[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $result[$j] = array();\n            $result[$j][] = $list1[$i];\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpmrsk_q38.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2_index = 0;\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$list2_index][] = $list1[$i];\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array();\n            $list2[$list2_index][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpffxyy4__.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $current = null;\n    $count = 0;\n    foreach ($list1 as $item) {\n        if ($item !== $current) {\n            if ($count > 0) {\n                $result[] = array_fill(0, $count, $current);\n            }\n            $current = $item;\n            $count = 1;\n        } else {\n            $count++;\n        }\n    }\n    if ($count > 0) {\n        $result[] = array_fill(0, $count, $current);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$list2 = array();\n\t$list2[0] = array();\n\t$list2[0][0] = $list1[0];\n\t$j = 0;\n\tfor ($i = 1; $i < count($list1); $i++) {\n\t\tif ($list1[$i] == $list1[$i - 1]) {\n\t\t\t$list2[$j][] = $list1[$i];\n\t\t} else {\n\t\t\t$j++;\n\t\t\t$list2[$j][] = $list1[$i];\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $result_index = -1;\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($i == 0 || $list1[$i] != $result[$result_index][0]) {\n            array_push($result, array($list1[$i]));\n            $result_index++;\n        } else {\n            array_push($result[$result_index], $list1[$i]);\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9, 10, 10, 10, 10, 10);\nprint_r(pack_consecutive_duplicates($list1));\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n        )\n\n    [9] => Array\n        (\n            [0] => 10\n            [1] => 10\n            [2] => 10\n            [3] => 10\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpkxj0piib.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpbtsalmvg.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = $list1[0];\n    $j = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j][0] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp6q2roz44.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$list2 = array();\n\t$list2[] = array($list1[0]);\n\tfor ($i = 1; $i < count($list1); $i++) {\n\t\tif ($list1[$i] == $list1[$i - 1]) {\n\t\t\t$list2[count($list2) - 1][] = $list1[$i];\n\t\t} else {\n\t\t\t$list2[] = array($list1[$i]);\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $sublist = array();\n    $sublist[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $sublist[] = $list1[$i];\n        } else {\n            $result[] = $sublist;\n            $sublist = array();\n            $sublist[] = $list1[$i];\n        }\n    }\n    $result[] = $sublist;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpzidwn6d8.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n            [3] => 7\n            [4] => 7\n            [5] => 7\n            [6] => 7\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $prev = null;\n    foreach ($list1 as $item) {\n        if ($item !== $prev) {\n            if ($temp) {\n                $result[] = $temp;\n            }\n            $temp = array($item);\n        } else {\n            $temp[] = $item;\n        }\n        $prev = $item;\n    }\n    if ($temp) {\n        $result[] = $temp;\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmptuj1avhn.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$list2_index], $list1[$i]);\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n            [3] => 7\n            [4] => 7\n            [5] => 7\n            [6] => 7\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i-1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n            [3] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [4] => Array\n        (\n            [0] => 4\n        )\n\n    [5] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n            [3] => 7\n            [4] => 7\n            [5] => 7\n            [6] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n            [4] => 8\n            [5] => 8\n            [6] => 8\n         ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nforeach ($list2 as $list) {\n    foreach ($list as $element) {\n        echo $element . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "1 <br>2 2 <br>3 3 3 <br>4 4 4 4 <br>5 5 5 5 5 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            $list2[$j][0] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpcghgjc25.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n            [3] => 7\n            [4] => 7\n            [5] => 7\n            [6] => 7\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = $list1[0];\n    $list3 = array();\n    $list3[] = $list2;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[0]) {\n            $list2[] = $list1[$i];\n        } else {\n            $list2 = array();\n            $list2[] = $list1[$i];\n            $list3[] = $list2;\n        }\n    }\n    return $list3;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp924vat36.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i-1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpklx16zv0.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $current = null;\n    $count = 0;\n    foreach ($list1 as $element) {\n        if ($element != $current) {\n            if ($count > 0) {\n                array_push($result, array_fill(0, $count, $current));\n            }\n            $current = $element;\n            $count = 1;\n        } else {\n            $count++;\n        }\n    }\n    if ($count > 0) {\n        array_push($result, array_fill(0, $count, $current));\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgiqf0yik.php:31\nStack trace:\n#0 /tmp/tmpgiqf0yik.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgiqf0yik.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $sublist = array();\n    $prev = null;\n    foreach ($list1 as $item) {\n        if ($item == $prev) {\n            $sublist[] = $item;\n        } else {\n            if ($sublist) {\n                $result[] = $sublist;\n            }\n            $sublist = array($item);\n        }\n        $prev = $item;\n    }\n    if ($sublist) {\n        $result[] = $sublist;\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n            [3] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [4] => Array\n        (\n            [0] => 4\n        )\n\n    [5] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n            [3] => 7\n            [4] => 7\n            [5] => 7\n            [6] => 7\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $i = 0;\n    for ($j = 1; $j < count($list1); $j++) {\n        if ($list1[$j] == $list2[$i][0]) {\n            array_push($list2[$i], $list1[$j]);\n        } else {\n            $i++;\n            $list2[$i] = array($list1[$j]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\necho \"List 1: \";\nprint_r($list1);\necho \"<br>List 2: \";\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "List 1: Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 1\n    [4] => 2\n    [5] => 3\n    [6] => 3\n    [7] => 1\n    [8] => 1\n    [9] => 4\n    [10] => 5\n    [11] => 5\n    [12] => 5\n    [13] => 5\n)\n<br>List 2: Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n            [3] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [4] => Array\n        (\n            [0] => 4\n        )\n\n    [5] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $list_length = count($list1);\n    $i = 0;\n    while ($i < $list_length) {\n        $j = $i + 1;\n        $sublist = array($list1[$i]);\n        while ($j < $list_length && $list1[$i] == $list1[$j]) {\n            $sublist[] = $list1[$j];\n            $j++;\n        }\n        $result[] = $sublist;\n        $i = $j;\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpbh634wci.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$list2_index], $list1[$i]);\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpyh6wj1af.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            $list2[$j][0] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmplvy4igze.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = $list1[0];\n    $list3 = array();\n    $list3[] = $list2;\n    $i = 0;\n    for ($j = 1; $j < count($list1); $j++) {\n        if ($list1[$j] == $list2[$i]) {\n            $list2[] = $list1[$j];\n        } else {\n            $i++;\n            $list2 = array();\n            $list2[] = $list1[$j];\n            $list3[] = $list2;\n        }\n    }\n    return $list3;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6);\n$list3 = pack_consecutive_duplicates($list1);\nprint_r($list3);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nWarning: Undefined array key 1 in /tmp/tmpglf3f7nq.php on line 10\n\nWarning: Undefined array key 2 in /tmp/tmpglf3f7nq.php on line 10\n\nWarning: Undefined array key 3 in /tmp/tmpglf3f7nq.php on line 10\n\nWarning: Undefined array key 4 in /tmp/tmpglf3f7nq.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpglf3f7nq.php on line 10\n\nWarning: Undefined array key 6 in /tmp/tmpglf3f7nq.php on line 10\n\nWarning: Undefined array key 7 in /tmp/tmpglf3f7nq.php on line 10\n\nWarning: Undefined array key 8 in /tmp/tmpglf3f7nq.php on line 10\n\nWarning: Undefined array key 9 in /tmp/tmpglf3f7nq.php on line 10\n\nWarning: Undefined array key 10 in /tmp/tmpglf3f7nq.php on line 10\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 2\n        )\n\n    [3] => Array\n        (\n            [0] => 3\n        )\n\n    [4] => Array\n        (\n            [0] => 3\n        )\n\n    [5] => Array\n        (\n            [0] => 3\n  ",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n            [3] => 7\n            [4] => 7\n            [5] => 7\n            [6] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n            [4] => 8\n            [5] => 8\n         ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 6, 7, 7, 8, 8, 8, 8);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $i = 0;\n    foreach ($list1 as $item) {\n        if (isset($list1[$i+1]) && $item == $list1[$i+1]) {\n            $temp[] = $item;\n        } else {\n            $temp[] = $item;\n            $result[] = $temp;\n            $temp = array();\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 5, 5, 6, 6, 6, 6, 7, 8, 9, 9);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9);\n$result = pack_consecutive_duplicates($list1);\necho \"Original List :\\n\";\necho implode(', ', $list1);\necho \"\\nPacked List :\\n\";\necho implode(', ', array_map(function ($subArray) {\n    return '(' . implode(', ', $subArray) . ')';\n}, $result));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Original List :\n1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9\nPacked List :\n(1, 1, 1), (2), (3, 3, 3), (4), (5, 5, 5, 5, 5), (6, 6, 6), (7, 7), (8, 8), (9, 9, 9, 9)",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp58j9zwjr.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n            [4] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$list2_index], $list1[$i]);\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpy81_exyy.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 8, 9);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp73hcptso.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpoedumrb8.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9, 10, 10);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n            [5] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n        )\n\n    [9] => Array\n        (\n            [0] => 10\n            [1] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            $list2[$j][0] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $result[] = array($list1[0]);\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] === $list1[$i - 1]) {\n            $result[count($result) - 1][] = $list1[$i];\n        } else {\n            $result[] = array($list1[$i]);\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n            [4] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $result[] = array($list1[0]);\n    $i = 0;\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $result[$j][0]) {\n            $result[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $result[] = array($list1[$i]);\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10);\n$result = pack_consecutive_duplicates($list1);\nprint_r($result);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n            [4] => 8\n            [5] => 8\n            [6] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n        )\n\n    [9] => Array\n        (\n            [0] => 10\n            [1] => 10\n            [2]",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = array($list1[0]);\n    $i = 0;\n    for ($j = 1; $j < count($list1); $j++) {\n        if ($list1[$j] == $list2[$i][0]) {\n            $list2[$i][] = $list1[$j];\n        } else {\n            $i++;\n            $list2[] = array($list1[$j]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpv7_sa6fy.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] === $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpp6ld4woi.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $result[] = array($list1[0]);\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $result[count($result) - 1][] = $list1[$i];\n        } else {\n            $result[] = array($list1[$i]);\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpao7bc1_7.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = $list1[0];\n    $list3 = array();\n    $list3[] = $list2;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[0]) {\n            $list2[] = $list1[$i];\n        } else {\n            $list2 = array();\n            $list2[] = $list1[$i];\n            $list3[] = $list2;\n        }\n    }\n    return $list3;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 6, 6, 6, 6, 7, 8, 8, 9);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3qybgn3.php:27\nStack trace:\n#0 /tmp/tmpm3qybgn3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpm3qybgn3.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpb0ufc34g.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmptb5biq0f.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp2afd1wvz.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($list1)) {\n        $result[$j][] = $list1[$i];\n        if ($i < count($list1) - 1) {\n            if ($list1[$i] != $list1[$i + 1]) {\n                $j++;\n            }\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp26yg4h0q.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2_index = 0;\n    $list2[$list2_index] = array();\n    $list2[$list2_index][] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$list2_index][] = $list1[$i];\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array();\n            $list2[$list2_index][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$result = array();\n\t$temp = array();\n\t$prev = null;\n\tforeach ($list1 as $key => $value) {\n\t\tif ($value != $prev) {\n\t\t\tif (!empty($temp)) {\n\t\t\t\tarray_push($result, $temp);\n\t\t\t}\n\t\t\t$temp = array();\n\t\t}\n\t\tarray_push($temp, $value);\n\t\t$prev = $value;\n\t}\n\tarray_push($result, $temp);\n\treturn $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp2v9cdcle.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$list2_index], $list1[$i]);\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmplna_qi21.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$list2_index], $list1[$i]);\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 6, 6, 6, 6, 7, 8, 8, 9, 9, 9);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $last = null;\n    foreach ($list1 as $item) {\n        if ($item != $last) {\n            if ($temp) {\n                $result[] = $temp;\n            }\n            $temp = array();\n        }\n        $temp[] = $item;\n        $last = $item;\n    }\n    if ($temp) {\n        $result[] = $temp;\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10);\n$result = pack_consecutive_duplicates($list1);\necho \"Input: \";\nprint_r($list1);\necho \"<br>\";\necho \"Output: \";\nprint_r($result);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Input: Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 1\n    [4] => 2\n    [5] => 2\n    [6] => 2\n    [7] => 3\n    [8] => 3\n    [9] => 3\n    [10] => 3\n    [11] => 3\n    [12] => 4\n    [13] => 4\n    [14] => 4\n    [15] => 4\n    [16] => 5\n    [17] => 5\n    [18] => 5\n    [19] => 5\n    [20] => 5\n    [21] => 5\n    [22] => 6\n    [23] => 6\n    [24] => 6\n    [25] => 6\n    [26] => 6\n    [27] => 6\n    [28] => 6\n    [29] => 7\n    [30] => 7\n    [31] => 7\n    [32] => 7\n    [33] => 7\n    [34] => 7\n    [35] => 7\n    [36] => 7\n    [37] => 8\n    [38] => 8\n    [39] => 8\n    [40] => 8\n    [41] => 8\n    [42] => 8\n    [43] => 8\n    [44] => 8\n    [45] => 8\n    [46] => 9\n    [47] => 9\n    [48] => 9\n    [49] => 9\n    [50] => 9\n    [51] => 9\n    [52] => 9\n    [53] => 9\n    [54] => 9\n    [55] => 9\n    [56] => 10\n    [57] => 10\n    [58] => 10\n    [59] => 10\n    [60] => 10\n    [61] => 10\n    [62] => 10\n    [63] => 10\n    [64] => 10\n    [65] => 10\n    [66] => 10\n)\n<br>Output: Array\n(\n    [0] => Array\n        (\n            [0] => 1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$list2 = array();\n\t$list2[0] = $list1[0];\n\t$j = 0;\n\tfor ($i = 1; $i < count($list1); $i++) {\n\t\tif ($list1[$i] == $list1[$i - 1]) {\n\t\t\t$list2[$j][] = $list1[$i];\n\t\t} else {\n\t\t\t$j++;\n\t\t\t$list2[$j][] = $list1[$i];\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpkm7anilq.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $i = 0;\n    for ($j = 1; $j < count($list1); $j++) {\n        if ($list1[$j] == $list2[$i][0]) {\n            array_push($list2[$i], $list1[$j]);\n        } else {\n            $i++;\n            $list2[$i] = array($list1[$j]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n            [4] => 9\n            [5] => 9\n            [6] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $k = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$k][] = $list1[$i];\n        } else {\n            $k++;\n            $list2[$k] = array();\n            $list2[$k][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 8, 9, 10, 10, 10, 10, 10);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n        )\n\n    [9] => Array\n        (\n            [0] => 10\n            [1] => 10\n            [2] => 10\n            [3] => 10\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i-1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp_fwjnfw0.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $result[] = array($list1[0]);\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i-1]) {\n            $result[count($result)-1][] = $list1[$i];\n        } else {\n            $result[] = array($list1[$i]);\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpxhnhm6xw.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $i = 0;\n    for($j = 1; $j < count($list1); $j++) {\n        if($list1[$j] == $list1[$j-1]) {\n            array_push($list2[$i], $list1[$j]);\n        } else {\n            $i++;\n            $list2[$i] = array($list1[$j]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i-1]) {\n            $list2[$list2_index][] = $list1[$i];\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$list2_index][0]) {\n            array_push($list2[$list2_index], $list1[$i]);\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array();\n            $list2[$list2_index][0] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp0c2dn71s.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n            [3] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [4] => Array\n        (\n            [0] => 4\n        )\n\n    [5] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n            [4] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n            [4] => 9\n            [5] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$list2 = array();\n\t$list2[0] = array();\n\t$list2[0][0] = $list1[0];\n\t$j = 0;\n\tfor ($i = 1; $i < count($list1); $i++) {\n\t\tif ($list1[$i] == $list1[$i - 1]) {\n\t\t\tarray_push($list2[$j], $list1[$i]);\n\t\t} else {\n\t\t\t$j++;\n\t\t\t$list2[$j] = array();\n\t\t\tarray_push($list2[$j], $list1[$i]);\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpvsivtoom.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpgg2_921t.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $sublist = array();\n    $prev = $list1[0];\n    foreach ($list1 as $item) {\n        if ($item == $prev) {\n            $sublist[] = $item;\n        } else {\n            $list2[] = $sublist;\n            $sublist = array();\n            $sublist[] = $item;\n            $prev = $item;\n        }\n    }\n    $list2[] = $sublist;\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            $list2[$j][0] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$list2 = array();\n\t$list2[0] = array();\n\t$list2[0][0] = $list1[0];\n\t$j = 0;\n\tfor ($i = 1; $i < count($list1); $i++) {\n\t\tif ($list1[$i] == $list1[$i - 1]) {\n\t\t\t$list2[$j][] = $list1[$i];\n\t\t} else {\n\t\t\t$j++;\n\t\t\t$list2[$j][] = $list1[$i];\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpfljcpl6h.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array();\n            array_push($list2[$j], $list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 6);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n            [3] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n            [4] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = array($list1[0]);\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[count($list2) - 1][] = $list1[$i];\n        } else {\n            $list2[] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $list2[] = array($list1[$i]);\n            $j++;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp7r7i_5kl.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = $list1[0];\n    $list3 = array();\n    $list3[] = $list2;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[0]) {\n            $list2[] = $list1[$i];\n        } else {\n            $list2 = array();\n            $list2[] = $list1[$i];\n            $list3[] = $list2;\n        }\n    }\n    return $list3;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp8heh17km.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $k = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$k], $list1[$i]);\n        } else {\n            $k++;\n            $list2[$k] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n            [4] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n            [3] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n            [1] => 9\n            [2] => 9\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array();\n    $list2[0][] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            $list2[$j][] = $list1[$i];\n        } else {\n            $j++;\n            $list2[$j][] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpxyv9z_6u.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$list2 = array();\n\t$list2[0] = array($list1[0]);\n\t$j = 0;\n\tfor ($i = 1; $i < count($list1); $i++) {\n\t\tif ($list1[$i] == $list1[$i - 1]) {\n\t\t\tarray_push($list2[$j], $list1[$i]);\n\t\t} else {\n\t\t\t$j++;\n\t\t\t$list2[$j] = array($list1[$i]);\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpkbte91kp.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    $temp[] = $list1[0];\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $temp[] = $list1[$i];\n        } else {\n            $result[] = $temp;\n            $temp = array();\n            $temp[] = $list1[$i];\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpvui1bb1n.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$list2 = array();\n\t$list2[0] = array();\n\t$list2[0][0] = $list1[0];\n\t$list2_index = 0;\n\t$list2_subindex = 0;\n\tfor ($i = 1; $i < count($list1); $i++) {\n\t\tif ($list1[$i] == $list2[$list2_index][$list2_subindex]) {\n\t\t\t$list2[$list2_index][$list2_subindex + 1] = $list1[$i];\n\t\t\t$list2_subindex++;\n\t\t} else {\n\t\t\t$list2_index++;\n\t\t\t$list2[$list2_index] = array();\n\t\t\t$list2[$list2_index][0] = $list1[$i];\n\t\t\t$list2_subindex = 0;\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = $list1[0];\n    $list3 = array();\n    $list3[] = $list2;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[0]) {\n            $list2[] = $list1[$i];\n        } else {\n            $list2 = array();\n            $list2[] = $list1[$i];\n            $list3[] = $list2;\n        }\n    }\n    return $list3;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpjf6ezct4.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $list2_index = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$list2_index], $list1[$i]);\n        } else {\n            $list2_index++;\n            $list2[$list2_index] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n            [1] => 7\n            [2] => 7\n            [3] => 7\n            [4] => 7\n            [5] => 7\n            [6] => 7\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $list_size = count($list1);\n    $i = 0;\n    while ($i < $list_size) {\n        $j = $i + 1;\n        $temp = array($list1[$i]);\n        while ($j < $list_size && $list1[$j] == $list1[$i]) {\n            $temp[] = $list1[$j];\n            $j++;\n        }\n        $result[] = $temp;\n        $i = $j;\n    }\n    return $result;\n}\n\n$list1 = array(1, 1, 1, 2, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9);\n$result = pack_consecutive_duplicates($list1);\necho \"Original list: \";\necho implode(\", \", $list1);\necho \"\\n\";\necho \"Packed list: \";\necho implode(\", \", $result);\necho \"\\n\";\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Original list: 1, 1, 1, 2, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9\nPacked list: \nWarning: Array to string conversion in /tmp/tmpp96q97d8.php on line 26\n\nWarning: Array to string conversion in /tmp/tmpp96q97d8.php on line 26\n\nWarning: Array to string conversion in /tmp/tmpp96q97d8.php on line 26\n\nWarning: Array to string conversion in /tmp/tmpp96q97d8.php on line 26\n\nWarning: Array to string conversion in /tmp/tmpp96q97d8.php on line 26\n\nWarning: Array to string conversion in /tmp/tmpp96q97d8.php on line 26\n\nWarning: Array to string conversion in /tmp/tmpp96q97d8.php on line 26\n\nWarning: Array to string conversion in /tmp/tmpp96q97d8.php on line 26\n\nWarning: Array to string conversion in /tmp/tmpp96q97d8.php on line 26\nArray, Array, Array, Array, Array, Array, Array, Array, Array\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($i == 0) {\n            array_push($list2, $list1[$i]);\n        } else {\n            if ($list1[$i] == $list1[$i - 1]) {\n                array_push($list2, $list1[$i]);\n            } else {\n                array_push($list3, $list2);\n                $list2 = array();\n                array_push($list2, $list1[$i]);\n            }\n        }\n    }\n    array_push($list3, $list2);\n    return $list3;\n}\n\n$list1 = array(1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n            [3] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [4] => Array\n        (\n            [0] => 4\n        )\n\n    [5] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[] = array($list1[0]);\n    $i = 0;\n    for ($j = 1; $j < count($list1); $j++) {\n        if ($list1[$j] == $list2[$i][0]) {\n            $list2[$i][] = $list1[$j];\n        } else {\n            $list2[] = array($list1[$j]);\n            $i++;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n            [3] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i-1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n            [4] => 6\n            [5] => 6\n            [6] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            $list2[$j] = $list2[$j] . $list1[$i];\n        } else {\n            $j++;\n            $list2[$j] = $list1[$i];\n        }\n    }\n    return $list2;\n}\n\n$list1 = array('a', 'a', 'a', 'a', 'b', 'c', 'c', 'a', 'a', 'd', 'e', 'e', 'e', 'e');\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => aaaa\n    [1] => b\n    [2] => cc\n    [3] => aa\n    [4] => d\n    [5] => eeee\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoeqxwctk.php:26\nStack trace:\n#0 /tmp/tmpoeqxwctk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpoeqxwctk.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $result = array();\n    $temp = array();\n    foreach ($list1 as $key => $value) {\n        if ($key == 0) {\n            $temp[] = $value;\n        } else {\n            if ($value == $list1[$key - 1]) {\n                $temp[] = $value;\n            } else {\n                $result[] = $temp;\n                $temp = array();\n                $temp[] = $value;\n            }\n        }\n    }\n    $result[] = $temp;\n    return $result;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpes341uhi.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 8, 8, 8, 9);\nprint_r(pack_consecutive_duplicates($list1));\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n            [5] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n            [3] => 6\n        )\n\n    [6] => Array\n        (\n            [0] => 7\n        )\n\n    [7] => Array\n        (\n            [0] => 8\n            [1] => 8\n            [2] => 8\n        )\n\n    [8] => Array\n        (\n            [0] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = $list1[0];\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list2[$j][0]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp6qtiuu54.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpeilzmefw.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n\t$list2 = array();\n\t$list2[0] = array();\n\t$list2[0][0] = $list1[0];\n\t$j = 0;\n\tfor ($i = 1; $i < count($list1); $i++) {\n\t\tif ($list1[$i] == $list2[$j][0]) {\n\t\t\tarray_push($list2[$j], $list1[$i]);\n\t\t} else {\n\t\t\t$j++;\n\t\t\t$list2[$j] = array();\n\t\t\tarray_push($list2[$j], $list1[$i]);\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n            [2] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n    $list2 = array();\n    $list2[0] = array($list1[0]);\n    $j = 0;\n    for ($i = 1; $i < count($list1); $i++) {\n        if ($list1[$i] == $list1[$i - 1]) {\n            array_push($list2[$j], $list1[$i]);\n        } else {\n            $j++;\n            $list2[$j] = array($list1[$i]);\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6);\n$list2 = pack_consecutive_duplicates($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123448,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n            [2] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => 3\n            [2] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => 4\n            [2] => 4\n            [3] => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => 5\n            [2] => 5\n            [3] => 5\n            [4] => 5\n        )\n\n    [5] => Array\n        (\n            [0] => 6\n            [1] => 6\n            [2] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}