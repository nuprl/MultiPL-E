{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "php",
  "prompt": "<?php\n// Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square($N) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return next_Perfect_Square(...$args);\n}\n\nfunction test(): void {\n    if (candidate(35) !== 36) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== 16) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\necho next_Perfect_Square(5);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = intval(fgets(STDIN));\necho next_Perfect_Square($N);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\necho next_Perfect_Square(5);\necho \"\\n\";\necho next_Perfect_Square(12);\necho \"\\n\";\necho next_Perfect_Square(15);\necho \"\\n\";\necho next_Perfect_Square(16);\necho \"\\n\";\necho next_Perfect_Square(17);\necho \"\\n\";\necho next_Perfect_Square(18);\necho \"\\n\";\necho next_Perfect_Square(19);\necho \"\\n\";\necho next_Perfect_Square(20);\necho \"\\n\";\necho next_Perfect_Square(21);\necho \"\\n\";\necho next_Perfect_Square(22);\necho \"\\n\";\necho next_Perfect_Square(23);\necho \"\\n\";\necho next_Perfect_Square(24);\necho \"\\n\";\necho next_Perfect_Square(25);\necho \"\\n\";\necho next_Perfect_Square(26);\necho \"\\n\";\necho next_Perfect_Square(27);\necho \"\\n\";\necho next_Perfect_Square(28);\necho \"\\n\";\necho next_Perfect_Square(29);\necho \"\\n\";\necho next_Perfect_Square(30);\necho \"\\n\";\necho next_Perfect_Square(31);\necho \"\\n\";\necho next_Perfect_Square(32);\necho \"\\n\";\necho next_Perfect_Square(33);\necho \"\\n\";\necho next_Perfect_Square(34);\necho \"\\n\";\necho next_Perfect_Square(35);\necho \"\\n\";\necho next_Perfect_Square(36);\necho \"\\n\";\necho next_Perfect_Square(37);\necho \"\\n\";\necho next_Perfect_Square(38);\necho \"\\n\";\necho next_Perfect_Square(39);\necho \"\\n\";\necho next_Perfect_Square(40);\necho \"\\n\";\necho next_Perfect_Square(41);\necho \"\\n\";\necho next_Perfect_Square(42);\necho \"\\n\";\necho next_Perfect_Square(43);\necho \"\\n\";\necho next_Perfect_Square",
    "    $n = $N;\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $i += 2;\n    }\n    return $N + $i - 1;\n}\n\necho next_Perfect_Square(2);\necho next_Perfect_Square(3);\necho next_Perfect_Square(4);\necho next_Perfect_Square(5);\necho next_Perfect_Square(6);\necho next_Perfect_Square(7);\necho next_Perfect_Square(8);\necho next_Perfect_Square(9);\necho next_Perfect_Square(10);\necho next_Perfect_Square(11);\necho next_Perfect_Square(12);\necho next_Perfect_Square(13);\necho next_Perfect_Square(14);\necho next_Perfect_Square(15);\necho next_Perfect_Square(16);\necho next_Perfect_Square(17);\necho next_Perfect_Square(18);\necho next_Perfect_Square(19);\necho next_Perfect_Square(20);\necho next_Perfect_Square(21);\necho next_Perfect_Square(22);\necho next_Perfect_Square(23);\necho next_Perfect_Square(24);\necho next_Perfect_Square(25);\necho next_Perfect_Square(26);\necho next_Perfect_Square(27);\necho next_Perfect_Square(28);\necho next_Perfect_Square(29);\necho next_Perfect_Square(30);\necho next_Perfect_Square(31);\necho next_Perfect_Square(32);\necho next_Perfect_Square(33);\necho next_Perfect_Square(34);\necho next_Perfect_Square(35);\necho next_Perfect_Square(36);\necho next_Perfect_Square(37);\necho next_Perfect_Square(38);\necho next_Perfect_Square(39);\necho next_Perfect_Square(40);\necho next_Perfect_Square(41);\necho next_Perfect_Square(42);\necho next_Perfect_Square(43);\necho next_Perfect_Square(44);\necho next_Perfect_Square(45);\necho next_Perfect_Square(46);\necho next_Perfect_",
    "    $i = 1;\n    while ($i * $i <= $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\necho next_Perfect_Square(5);\necho \"\\n\";\necho next_Perfect_Square(12);\necho \"\\n\";\necho next_Perfect_Square(16);\necho \"\\n\";\necho next_Perfect_Square(25);\necho \"\\n\";\necho next_Perfect_Square(36);\necho \"\\n\";\necho next_Perfect_Square(37);\necho \"\\n\";\necho next_Perfect_Square(38);\necho \"\\n\";\necho next_Perfect_Square(39);\necho \"\\n\";\necho next_Perfect_Square(40);\necho \"\\n\";\necho next_Perfect_Square(41);\necho \"\\n\";\necho next_Perfect_Square(42);\necho \"\\n\";\necho next_Perfect_Square(43);\necho \"\\n\";\necho next_Perfect_Square(44);\necho \"\\n\";\necho next_Perfect_Square(45);\necho \"\\n\";\necho next_Perfect_Square(46);\necho \"\\n\";\necho next_Perfect_Square(47);\necho \"\\n\";\necho next_Perfect_Square(48);\necho \"\\n\";\necho next_Perfect_Square(49);\necho \"\\n\";\necho next_Perfect_Square(50);\necho \"\\n\";\necho next_Perfect_Square(51);\necho \"\\n\";\necho next_Perfect_Square(52);\necho \"\\n\";\necho next_Perfect_Square(53);\necho \"\\n\";\necho next_Perfect_Square(54);\necho \"\\n\";\necho next_Perfect_Square(55);\necho \"\\n\";\necho next_Perfect_Square(56);\necho \"\\n\";\necho next_Perfect_Square(57);\necho \"\\n\";\necho next_Perfect_Square(58);\necho \"\\n\";\necho next_Perfect_Square(59);\necho \"\\n\";\necho next_Perfect_Square(60);\necho \"\\n\";\necho next_Perfect_Square(61);\necho \"\\n\";\necho next_Perfect_Square(62);\necho \"\\n\";\necho next_Perfect_Square",
    "    $sqrt = sqrt($N);\n    $floor = floor($sqrt);\n    if($floor == $sqrt) {\n        return ($sqrt+1)*($sqrt+1);\n    } else {\n        return ($floor+1)*($floor+1);\n    }\n}\n\n$N = intval(fgets(STDIN));\necho next_Perfect_Square($N);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = intval(fgets(STDIN));\necho next_Perfect_Square($N);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = intval(fgets(STDIN));\necho next_Perfect_Square($N);",
    "    $sqrt = sqrt($N);\n    $floor = floor($sqrt);\n    if ($floor == $sqrt) {\n        return $N;\n    } else {\n        return ($floor + 1) * ($floor + 1);\n    }\n}\n\necho next_Perfect_Square(25);\necho \"\\n\";\necho next_Perfect_Square(37);\necho \"\\n\";\necho next_Perfect_Square(16);\necho \"\\n\";\necho next_Perfect_Square(225);\necho \"\\n\";\necho next_Perfect_Square(400);\necho \"\\n\";\necho next_Perfect_Square(0);\necho \"\\n\";",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\necho next_Perfect_Square(5);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\necho next_Perfect_Square(25);",
    "    $i = 1;\n    while ($i * $i <= $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = intval(fgets(STDIN));\necho next_Perfect_Square($N);",
    "    $sqrt = sqrt($N);\n    if ($sqrt == floor($sqrt)) {\n        return ($sqrt + 1) * ($sqrt + 1);\n    } else {\n        return ($sqrt + 1) * ($sqrt + 1);\n    }\n}\necho next_Perfect_Square(25);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = intval(fgets(STDIN));\necho next_Perfect_Square($N);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\necho next_Perfect_Square(25);",
    "    $i = 1;\n    while ($i * $i <= $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = intval(fgets(STDIN));\necho next_Perfect_Square($N);",
    "    $i = 1;\n    while ($i * $i <= $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = intval(fgets(STDIN));\necho next_Perfect_Square($N);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = intval(fgets(STDIN));\necho next_Perfect_Square($N);",
    "    $i = 1;\n    while ($i * $i <= $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\necho next_Perfect_Square(5);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = intval(fgets(STDIN));\necho next_Perfect_Square($N);"
  ]
}