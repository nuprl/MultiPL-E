{
  "name": "mbpp_780_find_combinations",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunction find_combinations($test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return find_combinations(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(2, 4), array(6, 7), array(5, 1), array(6, 10))) !== array(array(8, 11), array(7, 5), array(8, 14), array(11, 8), array(12, 17), array(11, 11))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 5), array(7, 8), array(6, 2), array(7, 11))) !== array(array(10, 13), array(9, 7), array(10, 16), array(13, 10), array(14, 19), array(13, 13))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(4, 6), array(8, 9), array(7, 3), array(8, 12))) !== array(array(12, 15), array(11, 9), array(12, 18), array(15, 12), array(16, 21), array(15, 15))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = array();\n    $combinations = array();\n    foreach ($test_list as $tuple) {\n        $combinations = array_merge($combinations, find_combinations_for_tuple($tuple));\n    }\n    foreach ($combinations as $combination) {\n        $sum = array_sum($combination);\n        if (isset($result[$sum])) {\n            $result[$sum] = array_merge($result[$sum], $combination);\n        } else {\n            $result[$sum] = $combination;\n        }\n    }\n    return $result;\n}\n",
    "    $result = array();\n    $result[0] = array();\n    for ($i = 0; $i < count($test_list); $i++) {\n        $result[$i + 1] = array();\n        for ($j = 0; $j < count($result); $j++) {\n            $temp = $result[$j];\n            $temp[] = $test_list[$i];\n            $result[$i + 1][] = $temp;\n        }\n    }\n    return $result;\n}\n\n$test_list = array(array(1, 2), array(3, 4), array(5, 6));\n$result = find_combinations($test_list);\necho \"<pre>\";\nprint_r($result);\necho \"</pre>\";",
    "    $result = array();\n    $n = count($test_list);\n    $combinations = pow(2, $n);\n    for ($i = 0; $i < $combinations; $i++) {\n        $sum = 0;\n        $temp_list = array();\n        for ($j = 0; $j < $n; $j++) {\n            if (($i & (1 << $j)) > 0) {\n                $sum += $test_list[$j][0];\n                $temp_list[] = $test_list[$j];\n            }\n        }\n        if ($sum == $test_list[0][1]) {\n            $result[] = $temp_list;\n        }\n    }\n    return $result;\n}\n\n$test_list = array(array(2, 4), array(3, 6), array(4, 8), array(5, 10), array(9, 18));\n$result = find_combinations($test_list);\necho \"The combinations of sums with tuples in the given tuple list are :\\n\";\nforeach ($result as $row) {\n    echo implode(\" \", $row) . \"\\n\";\n}",
    "    $result = array();\n    $n = count($test_list);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            $sum = $test_list[$i][0] + $test_list[$j][0];\n            if (!isset($result[$sum])) {\n                $result[$sum] = array();\n            }\n            $result[$sum][] = array($test_list[$i], $test_list[$j]);\n        }\n    }\n    return $result;\n}\n\n$test_list = array(array(2, 3), array(3, 4), array(4, 5), array(5, 6));\n$result = find_combinations($test_list);\nprint_r($result);",
    "    $result = array();\n    $n = count($test_list);\n    $combinations = pow(2, $n);\n    for ($i = 0; $i < $combinations; $i++) {\n        $sum = 0;\n        $tuple = array();\n        for ($j = 0; $j < $n; $j++) {\n            if (($i & (1 << $j)) > 0) {\n                $sum += $test_list[$j][0];\n                $tuple[] = $test_list[$j][1];\n            }\n        }\n        $result[] = array($sum, $tuple);\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f')\n);\n\n$result = find_combinations($test_list);\n\nforeach ($result as $item) {\n    echo $item[0] . ' ' . implode(',', $item[1]) . \"\\n\";\n}",
    "    $result = array();\n    $n = count($test_list);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($test_list[$i][0] + $test_list[$j][0] == $test_list[$i][1]) {\n                $result[] = array($test_list[$i], $test_list[$j]);\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = array(array(1, 2), array(3, 4), array(5, 6), array(7, 8), array(9, 10));\n$result = find_combinations($test_list);\necho \"The combinations of sums with tuples in the given tuple list are:\\n\";\nforeach ($result as $item) {\n    echo \"(\" . $item[0][0] . \", \" . $item[0][1] . \") and (\" . $item[1][0] . \", \" . $item[1][1] . \")\\n\";\n}",
    "    $result = array();\n    $n = count($test_list);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($test_list[$i][0] + $test_list[$j][0] == $test_list[$i][1] + $test_list[$j][1]) {\n                $result[] = array($test_list[$i], $test_list[$j]);\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = array(array(2, 3), array(1, 2), array(3, 4), array(1, 4), array(2, 3));\n$result = find_combinations($test_list);\necho \"The combinations of sums with tuples in the given tuple list are: \";\nforeach ($result as $item) {\n    echo \"(\" . $item[0][0] . \", \" . $item[0][1] . \"), (\" . $item[1][0] . \", \" . $item[1][1] . \")\";\n    echo \"<br>\";\n}",
    "    $result = array();\n    $result[] = array();\n    foreach ($test_list as $tuple) {\n        $temp = array();\n        foreach ($result as $r) {\n            $temp[] = array_merge($r, $tuple);\n        }\n        $result = array_merge($result, $temp);\n    }\n    return $result;\n}\n\n$test_list = array(array(1, 2), array(3, 4), array(5, 6));\n$result = find_combinations($test_list);\nforeach ($result as $r) {\n    echo implode(', ', $r) . \"\\n\";\n}\n",
    "    $result = array();\n    $n = count($test_list);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($test_list[$i][0] + $test_list[$j][0] == $test_list[$i][1] + $test_list[$j][1]) {\n                $result[] = array($test_list[$i], $test_list[$j]);\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = array(array(1, 2), array(3, 4), array(5, 6), array(7, 8), array(9, 10));\nprint_r(find_combinations($test_list));",
    "    $result = array();\n    $n = count($test_list);\n    $combination = array();\n    $combination_sum = 0;\n    $combination_sum_list = array();\n    $combination_list = array();\n    for ($i = 0; $i < $n; $i++) {\n        $combination[$i] = 0;\n    }\n    $i = 0;\n    while ($i < $n) {\n        if ($combination[$i] < $i) {\n            if ($i % 2 == 0) {\n                $temp = $combination[0];\n                $combination[0] = $combination[$i];\n                $combination[$i] = $temp;\n            } else {\n                $temp = $combination[$combination[$i]];\n                $combination[$combination[$i]] = $combination[$i];\n                $combination[$i] = $temp;\n            }\n            $combination_sum = 0;\n            for ($j = 0; $j <= $i; $j++) {\n                $combination_sum += $test_list[$combination[$j]];\n            }\n            if (!in_array($combination_sum, $combination_sum_list)) {\n                $combination_sum_list[] = $combination_sum;\n                $combination_list[] = $combination;\n            }\n            $combination[$i]++;\n            $i = 0;\n        } else {\n            $combination[$i] = 0;\n            $i++;\n        }\n    }\n    return $combination_list;\n}\n\n$test_list = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$result = find_combinations($test_list);\nforeach ($result as $combination) {\n    echo implode(',', $combination) . '<br>';\n}",
    "    $result = array();\n    $n = count($test_list);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($test_list[$i][0] + $test_list[$j][0] == $test_list[$i][1] + $test_list[$j][1]) {\n                $result[] = array($test_list[$i], $test_list[$j]);\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = array(array(1, 2), array(3, 4), array(5, 6), array(7, 8), array(9, 10));\nprint_r(find_combinations($test_list));\n",
    "    $result = array();\n    $n = count($test_list);\n    $i = 0;\n    while ($i < $n) {\n        $j = $i + 1;\n        while ($j < $n) {\n            $sum = $test_list[$i][0] + $test_list[$j][0];\n            $result[] = array($sum, $test_list[$i], $test_list[$j]);\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$test_list = array(array(2, 3), array(3, 4), array(4, 5), array(5, 6));\n$result = find_combinations($test_list);\nprint_r($result);\n",
    "    $result = array();\n    $length = count($test_list);\n    for ($i = 0; $i < $length; $i++) {\n        for ($j = $i + 1; $j < $length; $j++) {\n            $sum = $test_list[$i] + $test_list[$j];\n            $result[] = array($sum, $test_list[$i], $test_list[$j]);\n        }\n    }\n    return $result;\n}\n\n$test_list = array(1, 2, 3, 4, 5, 6);\n$result = find_combinations($test_list);\nprint_r($result);",
    "    $result = array();\n    $n = count($test_list);\n    $i = 0;\n    while ($i < $n) {\n        $j = $i + 1;\n        while ($j < $n) {\n            $sum = $test_list[$i] + $test_list[$j];\n            $result[] = array($test_list[$i], $test_list[$j], $sum);\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12),\n    array(13, 14, 15),\n    array(16, 17, 18),\n    array(19, 20, 21),\n    array(22, 23, 24),\n    array(25, 26, 27),\n    array(28, 29, 30),\n    array(31, 32, 33),\n    array(34, 35, 36),\n    array(37, 38, 39),\n    array(40, 41, 42),\n    array(43, 44, 45),\n    array(46, 47, 48),\n    array(49, 50, 51),\n    array(52, 53, 54),\n    array(55, 56, 57),\n    array(58, 59, 60),\n    array(61, 62, 63),\n    array(64, 65, 66),\n    array(67, 68, 69),\n    array(70, 71, 72),\n    array(73, 74, 75),\n    array(76, 77, 78),\n    array(79, 80, 81),\n    array(82, 83, 84),\n    array(85, 86, 87),\n    array(88, 89, 90),\n    array(91, 92, 93),\n    array(94, 95, 96),\n    array(97, 98, 99),\n    array(100, 101, 102),\n    array(103, 104, 105),\n    array(106, 107, 108),\n    array(109, 110, 111),\n    array(112,",
    "    $result = array();\n    $n = count($test_list);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            $sum = $test_list[$i] + $test_list[$j];\n            if (in_array($sum, $test_list)) {\n                $result[] = array($test_list[$i], $test_list[$j], $sum);\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = array(1, 2, 3, 4, 5, 6);\n$result = find_combinations($test_list);\nprint_r($result);",
    "    $result = array();\n    $n = count($test_list);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($test_list[$i][0] + $test_list[$j][0] == $test_list[$i][1] + $test_list[$j][1]) {\n                $result[] = array($test_list[$i], $test_list[$j]);\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = array(array(2, 3), array(3, 4), array(4, 5), array(5, 6), array(6, 7));\n$result = find_combinations($test_list);\nprint_r($result);",
    "    $result = [];\n    $n = count($test_list);\n    $i = 0;\n    while ($i < $n) {\n        $j = $i + 1;\n        while ($j < $n) {\n            $sum = $test_list[$i] + $test_list[$j];\n            $result[] = [$sum, $test_list[$i], $test_list[$j]];\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$test_list = [[1, 2], [3, 4], [5, 6]];\n$result = find_combinations($test_list);\nprint_r($result);",
    "    $result = array();\n    $length = count($test_list);\n    for ($i = 0; $i < $length; $i++) {\n        for ($j = $i + 1; $j < $length; $j++) {\n            $sum = $test_list[$i] + $test_list[$j];\n            $result[] = array($sum, $test_list[$i], $test_list[$j]);\n        }\n    }\n    return $result;\n}\n\n$test_list = array(1, 2, 3, 4, 5);\n$result = find_combinations($test_list);\nprint_r($result);",
    "    $result = [];\n    $n = count($test_list);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            $sum = $test_list[$i] + $test_list[$j];\n            $result[] = [$sum, $test_list[$i], $test_list[$j]];\n        }\n    }\n    return $result;\n}\n\n$test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$result = find_combinations($test_list);\nprint_r($result);\n",
    "    $result = array();\n    $n = count($test_list);\n    $result[0] = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $test_list[$i][0]; $j <= $test_list[$i][1]; $j++) {\n            $result[$j] = array();\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $test_list[$i][0]; $j <= $test_list[$i][1]; $j++) {\n            $result[$j][] = $test_list[$i];\n        }\n    }\n    return $result;\n}\n$test_list = array(array(1, 2), array(3, 4), array(1, 2), array(5, 6));\n$result = find_combinations($test_list);\nforeach ($result as $key => $value) {\n    echo $key . \": \";\n    foreach ($value as $val) {\n        echo \"(\" . $val[0] . \",\" . $val[1] . \")\";\n    }\n    echo \"\\n\";\n}"
  ]
}