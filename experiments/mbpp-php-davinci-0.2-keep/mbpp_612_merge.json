{
  "name": "mbpp_612_merge",
  "language": "php",
  "prompt": "<?php\n// Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nfunction merge($lst) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return merge(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"x\", \"y\"), array(\"a\", \"b\"), array(\"m\", \"n\"))) !== array(array(\"x\", \"a\", \"m\"), array(\"y\", \"b\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2), array(3, 4), array(5, 6), array(7, 8))) !== array(array(1, 3, 5, 7), array(2, 4, 6, 8))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"x\", \"y\", \"z\"), array(\"a\", \"b\", \"c\"), array(\"m\", \"n\", \"o\"))) !== array(array(\"x\", \"a\", \"m\"), array(\"y\", \"b\", \"n\"), array(\"z\", \"c\", \"o\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $res = array();\n    $res[] = array();\n    $res[] = array();\n    foreach($lst as $sublst) {\n        $res[0][] = $sublst[0];\n        $res[1][] = $sublst[1];\n    }\n    return $res;\n}\n\n$lst = array(array(1,2), array(3,4), array(5,6));\n$res = merge($lst);\nprint_r($res);",
    "    $first = array();\n    $second = array();\n    foreach ($lst as $sublist) {\n        $first[] = $sublist[0];\n        $second[] = $sublist[1];\n    }\n    return array($first, $second);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\nprint_r(merge($lst));",
    "    $first = array();\n    $second = array();\n    foreach ($lst as $sublist) {\n        $first[] = $sublist[0];\n        $second[] = $sublist[1];\n    }\n    return array($first, $second);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\n$result = merge($lst);\nprint_r($result);",
    "    $lst1 = array();\n    $lst2 = array();\n    foreach ($lst as $sublst) {\n        array_push($lst1, $sublst[0]);\n        array_push($lst2, $sublst[1]);\n    }\n    return array($lst1, $lst2);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\n$lst = merge($lst);\nprint_r($lst);",
    "    $result = array();\n    $result[0] = array();\n    $result[1] = array();\n    foreach($lst as $sublist) {\n        $result[0][] = $sublist[0];\n        $result[1][] = $sublist[1];\n    }\n    return $result;\n}\n$lst = array(array(1,2), array(3,4), array(5,6));\nprint_r(merge($lst));",
    "    $lst1 = array();\n    $lst2 = array();\n    foreach ($lst as $sublst) {\n        $lst1[] = $sublst[0];\n        $lst2[] = $sublst[1];\n    }\n    return array($lst1, $lst2);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\n$res = merge($lst);\nprint_r($res);",
    "    $lst1 = array();\n    $lst2 = array();\n    foreach ($lst as $sublst) {\n        $lst1[] = $sublst[0];\n        $lst2[] = $sublst[1];\n    }\n    return array($lst1, $lst2);\n}\n\n$lst = array(array(1,2), array(3,4), array(5,6));\n$lst = merge($lst);\nprint_r($lst);",
    "    $lst1 = array();\n    $lst2 = array();\n    foreach ($lst as $sublst) {\n        $lst1[] = $sublst[0];\n        $lst2[] = $sublst[1];\n    }\n    return array($lst1, $lst2);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\n$res = merge($lst);\nprint_r($res);",
    "    $first = array();\n    $second = array();\n    foreach ($lst as $sublist) {\n        $first[] = $sublist[0];\n        $second[] = $sublist[1];\n    }\n    return array($first, $second);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\n\n$result = merge($lst);\n\nprint_r($result);",
    "    $res = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        $res[0][$i] = $lst[$i][0];\n        $res[1][$i] = $lst[$i][1];\n    }\n    return $res;\n}\n\n$lst = [[1, 2], [3, 4], [5, 6]];\nprint_r(merge($lst));",
    "    $result = array();\n    $result[0] = array();\n    $result[1] = array();\n    foreach ($lst as $sublist) {\n        array_push($result[0], $sublist[0]);\n        array_push($result[1], $sublist[1]);\n    }\n    return $result;\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\n$result = merge($lst);\necho json_encode($result);",
    "    $first = array();\n    $second = array();\n    foreach ($lst as $sublist) {\n        $first[] = $sublist[0];\n        $second[] = $sublist[1];\n    }\n    return array($first, $second);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\n$result = merge($lst);\nprint_r($result);",
    "    $lst1 = array();\n    $lst2 = array();\n    foreach ($lst as $sublst) {\n        array_push($lst1, $sublst[0]);\n        array_push($lst2, $sublst[1]);\n    }\n    return array($lst1, $lst2);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\n$result = merge($lst);\nprint_r($result);",
    "    $first = array();\n    $second = array();\n    foreach ($lst as $sublist) {\n        $first[] = $sublist[0];\n        $second[] = $sublist[1];\n    }\n    return array($first, $second);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\nprint_r(merge($lst));",
    "    $first = array();\n    $second = array();\n    foreach ($lst as $sublst) {\n        $first[] = $sublst[0];\n        $second[] = $sublst[1];\n    }\n    return array($first, $second);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\n$result = merge($lst);\nprint_r($result);",
    "    $lst1 = array();\n    $lst2 = array();\n    foreach ($lst as $sublst) {\n        array_push($lst1, $sublst[0]);\n        array_push($lst2, $sublst[1]);\n    }\n    return array($lst1, $lst2);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\n$lst = merge($lst);\nprint_r($lst);",
    "    $lst1 = array();\n    $lst2 = array();\n    foreach ($lst as $sublist) {\n        array_push($lst1, $sublist[0]);\n        array_push($lst2, $sublist[1]);\n    }\n    return array($lst1, $lst2);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\nprint_r(merge($lst));",
    "    $first = array();\n    $second = array();\n    foreach ($lst as $sublist) {\n        array_push($first, $sublist[0]);\n        array_push($second, $sublist[1]);\n    }\n    return array($first, $second);\n}\n",
    "    $first = array();\n    $second = array();\n    foreach ($lst as $sublist) {\n        $first[] = $sublist[0];\n        $second[] = $sublist[1];\n    }\n    return array($first, $second);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\n$result = merge($lst);\nprint_r($result);",
    "    $first = array();\n    $second = array();\n    foreach ($lst as $sublst) {\n        array_push($first, $sublst[0]);\n        array_push($second, $sublst[1]);\n    }\n    return array($first, $second);\n}\n\n$lst = array(array(1, 2), array(3, 4), array(5, 6));\n$result = merge($lst);\nprint_r($result);"
  ]
}