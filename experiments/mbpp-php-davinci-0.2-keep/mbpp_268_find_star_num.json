{
  "name": "mbpp_268_find_star_num",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the n'th star number.\nfunction find_star_num($n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return find_star_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 73) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 121) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $i = 1;\n    $star_num = 0;\n    while ($i <= $n) {\n        $star_num += $i;\n        $i++;\n    }\n    return $star_num;\n}\n\necho find_star_num(5);",
    "    $star_num = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $star_num = $star_num * 10 + $i;\n    }\n    return $star_num;\n}\n",
    "    $star_num = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $star_num = $star_num * 10 + $i;\n    }\n    return $star_num;\n}\n",
    "    $i = 1;\n    $star_num = 0;\n    while ($i <= $n) {\n        $star_num += $i;\n        $i++;\n    }\n    return $star_num;\n}\n",
    "    $star_num = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $star_num = $star_num * 10 + $i;\n    }\n    return $star_num;\n}\n",
    "    $star_num = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $star_num = $star_num * 2 + 1;\n    }\n    return $star_num;\n}\n",
    "    $star_num = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $star_num = $star_num * 2 + 1;\n    }\n    return $star_num;\n}\n",
    "    $star_num = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $star_num = ($star_num * 10) + $i;\n    }\n    return $star_num;\n}\n",
    "    $star_num = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $star_num = $star_num * 10 + $i;\n    }\n    return $star_num;\n}\n",
    "    $star_num = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $star_num += $i;\n    }\n    return $star_num;\n}\n",
    "    $star_num = 1;\n    while ($n > 1) {\n        $star_num = $star_num * 2 + 1;\n        $n--;\n    }\n    return $star_num;\n}\n",
    "    $i = 1;\n    $star_num = 0;\n    while ($i <= $n) {\n        $star_num += $i;\n        $i++;\n    }\n    return $star_num;\n}\n\necho find_star_num(5);",
    "    $i = 1;\n    $count = 0;\n    while ($count < $n) {\n        $i++;\n        if (is_star_num($i)) {\n            $count++;\n        }\n    }\n    return $i;\n}\n",
    "    $i = 1;\n    $star_num = 0;\n    while ($i <= $n) {\n        $star_num += $i;\n        $i++;\n    }\n    return $star_num;\n}\n\necho find_star_num(5);",
    "    $i = 0;\n    $j = 0;\n    while ($i < $n) {\n        $j++;\n        if (is_star_num($j)) {\n            $i++;\n        }\n    }\n    return $j;\n}\n",
    "  $star_num = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $star_num = $star_num + $i;\n  }\n  return $star_num;\n}\n\necho find_star_num(5);",
    "    $star_num = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $star_num = $star_num * 2 + 1;\n    }\n    return $star_num;\n}\n",
    "    $star_num = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $star_num = ($star_num * 10) + $i;\n    }\n    return $star_num;\n}\n",
    "    $star_num = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $star_num = ($star_num * 10) + $i;\n    }\n    return $star_num;\n}\n",
    "    $num = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $num = $num * 2 + 1;\n    }\n    return $num;\n}\n"
  ]
}