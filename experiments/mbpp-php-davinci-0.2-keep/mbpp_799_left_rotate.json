{
  "name": "mbpp_799_left_rotate",
  "language": "php",
  "prompt": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n\necho left_rotate(16, 2);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = ($n & $mask) >> ($bits - $d);\n\treturn $n;\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(16, 2);",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$d = $d % $bits;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask);\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $d; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$mask = ~$mask;\n\t$left = $n << $d;\n\t$right = $n & $mask;\n\t$right = $right >> ($bits - $d);\n\treturn $left | $right;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) & $mask;\n    $n = $n | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(5, 2) . \"\\n\";\necho left_rotate(5, 3) . \"\\n\";\necho left_rotate(5, 4) . \"\\n\";\necho left_rotate(5, 5) . \"\\n\";\necho left_rotate(5, 6) . \"\\n\";\necho left_rotate(5, 7) . \"\\n\";\necho left_rotate(5, 8) . \"\\n\";\necho left_rotate(5, 9) . \"\\n\";\necho left_rotate(5, 10) . \"\\n\";\necho left_rotate(5, 11) . \"\\n\";\necho left_rotate(5, 12) . \"\\n\";\necho left_rotate(5, 13) . \"\\n\";\necho left_rotate(5, 14) . \"\\n\";\necho left_rotate(5, 15) . \"\\n\";\necho left_rotate(5, 16) . \"\\n\";\necho left_rotate(5, 17) . \"\\n\";\necho left_rotate(5, 18) . \"\\n\";\necho left_rotate(5, 19) . \"\\n\";\necho left_rotate(5, 20) . \"\\n\";\necho left_rotate(5, 21) . \"\\n\";\necho left_rotate(5, 22) . \"\\n\";\necho left_rotate(5, 23) . \"\\n\";\necho left_rotate(5, 24) . \"\\n\";\necho left_rotate(5, 25) . \"\\n\";\necho left_rotate(5, 26) . \"\\n\";\necho left_rotate(5, 27) . \"\\n\";\necho left_rotate(5, 28) . \"\\n\";\necho left_rotate(5, 29) . \"\\n\";\necho left_rotate(5, 30) . \"\\n\";\necho left_",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(2, 1);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | (($mask >> ($bits - $d)) & $mask);\n    return $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$mask = (1 << $d) - 1;\n\t$mask = $mask << (32 - $d);\n\t$n = $n & $mask;\n\t$n = $n >> (32 - $d);\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 3;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b1101;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    $n = $n & $mask;\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\treturn (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(5, 2);\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "  return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 15;\n$d = 2;\necho left_rotate($n, $d);",
    "  $bits = 32;\n  $mask = (1 << $bits) - 1;\n  $n = $n & $mask;\n  $n = ($n << $d) | ($n >> ($bits - $d));\n  return $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n << $d) & $mask;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(10, 2);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(0b10101010101010101010101010101010, 2);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(3, 1);",
    "\treturn ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$left_mask = $mask << $d;\n\t$right_mask = $mask >> ($bits - $d);\n\t$left_mask = $left_mask & $n;\n\t$right_mask = $right_mask & $n;\n\t$left_mask = $left_mask >> ($bits - $d);\n\t$right_mask = $right_mask << $d;\n\treturn $left_mask | $right_mask;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(16, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$d = $d % $bits;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(10, 2);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n",
    "    $bits = 32;\n    $left_rotate = ($n << $d) | ($n >> ($bits - $d));\n    return $left_rotate;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(5, 2);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\treturn (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\n$n = left_rotate($n, $d);\nprintf(\"%b\\n\", $n);",
    "\t$bits = 32;\n\t$left_rotate = ($n << $d) | ($n >> ($bits - $d));\n\treturn $left_rotate;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(1, 1) . \"\\n\";\necho left_rotate(1, 2) . \"\\n\";\necho left_rotate(1, 3) . \"\\n\";\necho left_rotate(1, 4) . \"\\n\";\necho left_rotate(1, 5) . \"\\n\";\necho left_rotate(1, 6) . \"\\n\";\necho left_rotate(1, 7) . \"\\n\";\necho left_rotate(1, 8) . \"\\n\";\necho left_rotate(1, 9) . \"\\n\";\necho left_rotate(1, 10) . \"\\n\";\necho left_rotate(1, 11) . \"\\n\";\necho left_rotate(1, 12) . \"\\n\";\necho left_rotate(1, 13) . \"\\n\";\necho left_rotate(1, 14) . \"\\n\";\necho left_rotate(1, 15) . \"\\n\";\necho left_rotate(1, 16) . \"\\n\";\necho left_rotate(1, 17) . \"\\n\";\necho left_rotate(1, 18) . \"\\n\";\necho left_rotate(1, 19) . \"\\n\";\necho left_rotate(1, 20) . \"\\n\";\necho left_rotate(1, 21) . \"\\n\";\necho left_rotate(1, 22) . \"\\n\";\necho left_rotate(1, 23) . \"\\n\";\necho left_rotate(1, 24) . \"\\n\";\necho left_rotate(1, 25) . \"\\n\";\necho left_rotate(1, 26) . \"\\n\";\necho left_rotate(1, 27) . \"\\n\";\necho left_rotate(1, 28) . \"\\n\";\necho left_rotate(1, 29) . \"\\n\";\necho left_rotate(1, 30",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(12, 2);",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $d; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$mask = ~$mask;\n\t$left = $n << $d;\n\t$right = $n & $mask;\n\t$right = $right >> ($bits - $d);\n\treturn $left | $right;\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = ($n & $mask) << $d;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> $d;\n\t$mask = ~$mask;\n\t$n = ($n & $mask) >> $d;\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 4;\necho \"Left rotate $d bits of $n is \" . left_rotate($n, $d) . \"\\n\";\n",
    "\t$mask = (1 << $d) - 1;\n\t$mask = $mask << (32 - $d);\n\t$n = $n & $mask;\n\t$n = $n >> (32 - $d);\n\treturn $n;\n}\n\necho left_rotate(8, 2);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\treturn $n;\n}\n",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\tif ($i < $d) {\n\t\t\t$mask = $mask | (1 << $i);\n\t\t}\n\t}\n\t$mask = ~$mask;\n\t$left = ($n << $d) & $mask;\n\t$right = $n >> ($bits - $d);\n\treturn $left | $right;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\treturn $n;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b1101;\n$d = 2;\n\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 0b00000000000000000000000000000001;\n$result = left_rotate($n, $d);\necho $result;",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\treturn (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n\necho left_rotate(8, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\necho left_rotate($n, $d) . PHP_EOL;",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $mask = $mask & $n;\n    $mask = $mask << $d;\n    $n = $n >> ($bits - $d);\n    $n = $n | $mask;\n    return $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 5;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\treturn (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = decbin($n);\n\t$bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n\t$bits = substr($bits, $d) . substr($bits, 0, $d);\n\treturn bindec($bits);\n}\n\necho left_rotate(1, 1) . \"\\n\";\necho left_rotate(1, 2) . \"\\n\";\necho left_rotate(1, 3) . \"\\n\";\necho left_rotate(1, 4) . \"\\n\";\necho left_rotate(1, 5) . \"\\n\";\necho left_rotate(1, 6) . \"\\n\";\necho left_rotate(1, 7) . \"\\n\";\necho left_rotate(1, 8) . \"\\n\";\necho left_rotate(1, 9) . \"\\n\";\necho left_rotate(1, 10) . \"\\n\";\necho left_rotate(1, 11) . \"\\n\";\necho left_rotate(1, 12) . \"\\n\";\necho left_rotate(1, 13) . \"\\n\";\necho left_rotate(1, 14) . \"\\n\";\necho left_rotate(1, 15) . \"\\n\";\necho left_rotate(1, 16) . \"\\n\";\necho left_rotate(1, 17) . \"\\n\";\necho left_rotate(1, 18) . \"\\n\";\necho left_rotate(1, 19) . \"\\n\";\necho left_rotate(1, 20) . \"\\n\";\necho left_rotate(1, 21) . \"\\n\";\necho left_rotate(1, 22) . \"\\n\";\necho left_rotate(1, 23) . \"\\n\";\necho left_rotate(1, 24) . \"\\n\";\necho left_rotate(1, 25) . \"\\n\";\necho left_rotate(1, 26) . \"\\n\";\necho left_rotate(1, 27) . \"\\n\";\necho left_rotate(1, 28) . \"\\n\";\necho left_rotate(1, 29) . \"\\n\";\necho left_rotate(1, 30",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 7;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n",
    "  $bits = 32;\n  $mask = (1 << $bits) - 1;\n  $n = $n & $mask;\n  $n = ($n << $d) | ($n >> ($bits - $d));\n  return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(2, 3);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\treturn $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);",
    "    return (($n << $d) | ($n >> (32 - $d)));\n}\n",
    "\treturn ($n << $d) | ($n >> (32 - $d));\n}\n",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = ($n & $mask) << $d;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> $d;\n\t$mask = ~$mask;\n\t$n = $n | ($n & $mask) >> ($bits - $d);\n\treturn $n;\n}\n\n$n = 0b11010111;\n$d = 3;\necho \"Left rotate $n by $d bits: \" . left_rotate($n, $d) . \"\\n\";\n",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$d = $d % $bits;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    return ($n << $d) | ($n >> ($bits - $d));\n}\n",
    "    $bits = 32;\n    return ($n << $d) | ($n >> ($bits - $d));\n}\n",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $d; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $mask = ~$mask;\n    $left = $n << $d;\n    $right = $n & $mask;\n    $right = $right >> ($bits - $d);\n    return $left | $right;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(2, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = ($n & $mask) >> ($bits - $d);\n\treturn $n;\n}\n\necho left_rotate(1, 1);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\n$n = 0b1101;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\t$n = $n & $mask;\n\treturn $n;\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$d = $d % $bits;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(8, 2);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(1, 2);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(1, 1);\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "  return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $d; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$mask = ~$mask;\n\t$left = $n << $d;\n\t$right = ($n & $mask) >> ($bits - $d);\n\treturn $left | $right;\n}\n\necho left_rotate(1, 1);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "  $bits = decbin($n);\n  $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n  $bits = substr($bits, $d) . substr($bits, 0, $d);\n  return bindec($bits);\n}\n",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(5, 2);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n & $mask;\n    $n = $n >> ($bits - $d);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = ($n >> ($bits - $d)) & ((1 << $d) - 1);\n    $mask = $mask << ($bits - $d);\n    $n = $n << $d;\n    $n = $n | $mask;\n    return $n;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n << $d) & $mask;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n << $d) & $mask;\n\t$n = ($n >> $bits) | $n;\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\t$n = $n & $mask;\n\treturn $n;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | (($mask >> ($bits - $d)) & $mask);\n    return $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 4;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 3;\necho left_rotate($n, $d);\n",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = decbin($n);\n\t$bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n\t$bits = substr($bits, $d) . substr($bits, 0, $d);\n\treturn bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask);\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(2, 1);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) & $mask;\n    $n = $n | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $n = $n & $mask;\n    $n = $n << $d;\n    $n = $n & $mask;\n    return $n;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$n = $n & $mask;\n\t$d = $d & $mask;\n\t$n = $n << $d;\n\t$n = $n & $mask;\n\t$n = $n >> ($bits - $d);\n\treturn $n;\n}\n\n$n = 2;\n$d = 1;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        if ($i < $d) {\n            $mask = $mask | (1 << $i);\n        }\n    }\n    $left = $n << $d;\n    $right = $n >> ($bits - $d);\n    $right = $right & $mask;\n    $result = $left | $right;\n    return $result;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 1;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 10;\n$d = 3;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    return ($n << $d) | ($n >> ($bits - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "  $bits = 32;\n  $mask = (1 << $bits) - 1;\n  $n = ($n & $mask) << $d;\n  $n = $n | ($n >> $bits);\n  return $n;\n}\n\necho left_rotate(1, 1);",
    "    $bits = 32;\n    return ($n << $d) | ($n >> ($bits - $d));\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0xFFFFFFFF;\n$d = 4;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask);\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $d; $i++) {\n        $mask = ($mask << 1) | 1;\n    }\n    $mask = ~$mask;\n    $left = $n & $mask;\n    $left = $left >> ($bits - $d);\n    $right = $n & ~$mask;\n    $right = $right << $d;\n    return $left | $right;\n}\n\n$n = 0b10101010101010101010101010101010;\n$d = 2;\n$result = left_rotate($n, $d);\necho decbin($result);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 12;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(5, 2);\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n & $mask;\n    $n = $n >> ($bits - $d);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\treturn $n;\n}\n\necho left_rotate(5, 2);\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask);\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | (($n >> $bits) & $mask);\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$d = $d & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 0b10101010101010101010101010101010;\n\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 3;\n$result = left_rotate($n, $d);\necho \"Left rotated by $d bits: \" . decbin($result) . PHP_EOL;\n",
    "    $bits = 32;\n    $left = $n << $d;\n    $right = $n >> ($bits - $d);\n    return $left | $right;\n}\n",
    "    $bits = 32;\n    $mask = ~(~0 << $bits);\n    $mask = $mask >> $d;\n    $mask = ~$mask;\n    $n = $n & $mask;\n    $n = $n << $d;\n    return $n;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\n$n = 0b1101;\n$d = 2;\n$result = left_rotate($n, $d);\necho $result;",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\t$n = $n & $mask;\n\treturn $n;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    return (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(8, 2);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $d) - 1;\n\t$mask = $mask << ($bits - $d);\n\t$mask = ~$mask;\n\t$n = ($n << $d) & $mask;\n\t$n = $n >> ($bits - $d);\n\treturn $n;\n}\n\necho left_rotate(10, 2) . \"\\n\";\necho left_rotate(10, 3) . \"\\n\";\necho left_rotate(10, 4) . \"\\n\";\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\necho left_rotate(5, 2);\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\treturn (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n << $d) & $mask;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    return ($n << $d) | ($n >> ($bits - $d));\n}\n",
    "\t$bits = decbin($n);\n\t$bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n\t$bits = substr($bits, $d) . substr($bits, 0, $d);\n\treturn bindec($bits);\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\n$n = 0b11010101;\n$d = 3;\necho \"Left rotate of $n by $d bits is \" . left_rotate($n, $d);\n",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = ($n & $mask) << $d;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> $d;\n\t$mask = ~$mask;\n\t$n = $n | ($mask & $n);\n\treturn $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(8, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    $n = $n & $mask;\n    return $n;\n}\n\necho left_rotate(8, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\n$n = left_rotate($n, $d);\necho decbin($n);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 12;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $d) - 1;\n\t$mask = $mask << ($bits - $d);\n\t$n = $n & $mask;\n\t$n = $n >> ($bits - $d);\n\treturn $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 5;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask);\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = decbin($n);\n\t$bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n\t$bits = substr($bits, $d) . substr($bits, 0, $d);\n\treturn bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $d; $i++) {\n        $mask = ($mask << 1) | 1;\n    }\n    $mask = ~$mask;\n    $n = ($n << $d) & $mask;\n    $n = $n | (($n >> $bits) & $mask);\n    return $n;\n}\n\n$n = 0b10000000000000000000000000000001;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask << 1;\n        $mask = $mask | 1;\n    }\n    $n = $n & $mask;\n    $n = $n << $d;\n    $n = $n & $mask;\n    return $n;\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 4;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(11, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\necho decbin(left_rotate($n, $d)) . PHP_EOL;",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = ($n & $mask) >> ($bits - $d);\n\treturn $n;\n}\n\necho left_rotate(0b1101, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11010101;\n$d = 3;\necho \"Original number: \" . decbin($n) . \"\\n\";\necho \"Rotated number: \" . decbin(left_rotate($n, $d)) . \"\\n\";",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d % $bits;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 15;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $d; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$mask = ~$mask;\n\t$left = $n << $d;\n\t$right = ($n & $mask) >> ($bits - $d);\n\treturn $left | $right;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t// First get the number of bits in the number\n\t$bits = strlen(decbin($n));\n\t// Now left rotate the number by d bits\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\necho left_rotate(2, 1);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(8, 2);",
    "\t$bits = 32;\n\treturn ($n << $d) | ($n >> ($bits - $d));\n}\n"
  ]
}