{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "php",
  "prompt": "<?php\n// Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfunction toggle_middle_bits($n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return toggle_middle_bits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(9) !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 13) { throw new Exception(\"Test failed!\"); }\n    if (candidate(65) !== 127) { throw new Exception(\"Test failed!\"); }\n    if (candidate(77) !== 115) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $mask = (1 << ($n - 2)) - 1;\n    $mask = $mask << 1;\n    return ($n ^ $mask);\n}\n\necho toggle_middle_bits(10);",
    "    $mask = (1 << ($n-1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(17) . \"\\n\";\necho toggle_middle_bits(50) . \"\\n\";",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(5) . PHP_EOL;\necho toggle_middle_bits(10) . PHP_EOL;\necho toggle_middle_bits(17) . PHP_EOL;\necho toggle_middle_bits(31) . PHP_EOL;\necho toggle_middle_bits(32) . PHP_EOL;\necho toggle_middle_bits(33) . PHP_EOL;\necho toggle_middle_bits(63) . PHP_EOL;\necho toggle_middle_bits(64) . PHP_EOL;\necho toggle_middle_bits(65) . PHP_EOL;\necho toggle_middle_bits(127) . PHP_EOL;\necho toggle_middle_bits(128) . PHP_EOL;\necho toggle_middle_bits(129) . PHP_EOL;\necho toggle_middle_bits(255) . PHP_EOL;\necho toggle_middle_bits(256) . PHP_EOL;\necho toggle_middle_bits(257) . PHP_EOL;\necho toggle_middle_bits(511) . PHP_EOL;\necho toggle_middle_bits(512) . PHP_EOL;\necho toggle_middle_bits(513) . PHP_EOL;\necho toggle_middle_bits(1023) . PHP_EOL;\necho toggle_middle_bits(1024) . PHP_EOL;\necho toggle_middle_bits(1025) . PHP_EOL;\necho toggle_middle_bits(2047) . PHP_EOL;\necho toggle_middle_bits(2048) . PHP_EOL;\necho toggle_middle_bits(2049) . PHP_EOL;\necho toggle_middle_bits(4095) . PHP_EOL;",
    "\t$first_bit = $n & 1;\n\t$last_bit = $n & (1 << (strlen(decbin($n)) - 1));\n\t$mask = (1 << (strlen(decbin($n)) - 1)) - 1;\n\t$mask = $mask ^ (1 << 0);\n\t$n = $n ^ $mask;\n\t$n = $n | ($first_bit << (strlen(decbin($n)) - 1));\n\t$n = $n | $last_bit;\n\treturn $n;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen($n) - 1));\n    $x = $n ^ ((1 << (strlen($n) - 1)) - 1);\n    return ($x ^ ((1 << (strlen($x) - 1)) - 1)) | $first_bit | $last_bit;\n}\n\necho toggle_middle_bits(10) . \"\\n\";\necho toggle_middle_bits(17) . \"\\n\";\necho toggle_middle_bits(56) . \"\\n\";\necho toggle_middle_bits(15) . \"\\n\";\necho toggle_middle_bits(31) . \"\\n\";\necho toggle_middle_bits(8) . \"\\n\";\necho toggle_middle_bits(7) . \"\\n\";\necho toggle_middle_bits(1) . \"\\n\";\necho toggle_middle_bits(0) . \"\\n\";\necho toggle_middle_bits(2) . \"\\n\";\necho toggle_middle_bits(3) . \"\\n\";\necho toggle_middle_bits(4) . \"\\n\";\necho toggle_middle_bits(5) . \"\\n\";\necho toggle_middle_bits(6) . \"\\n\";\necho toggle_middle_bits(9) . \"\\n\";\necho toggle_middle_bits(11) . \"\\n\";\necho toggle_middle_bits(12) . \"\\n\";\necho toggle_middle_bits(13) . \"\\n\";\necho toggle_middle_bits(14) . \"\\n\";\necho toggle_middle_bits(16) . \"\\n\";\necho toggle_middle_bits(18) . \"\\n\";\necho toggle_middle_bits(19) . \"\\n\";\necho toggle_middle_bits(20) . \"\\n\";\necho toggle_middle_bits(21) . \"\\n\";\necho toggle_middle_bits(22) . \"\\n\";\necho toggle_middle_bits(23) . \"\\n\";\necho toggle_middle_bits(24) . \"\\n\";\necho toggle_middle_bits(25) . \"\\n\";\necho toggle_middle_bits(26) . \"\\n\";\necho toggle_middle_bits(27) . \"\\n\";",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen($n) - 1));\n    $mask = (1 << (strlen($n) - 1)) - 1;\n    $mask = $mask ^ (1 << 0);\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << floor(log($n, 2)));\n    $n = $n ^ ((1 << floor(log($n, 2))) - 1);\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen(decbin($n)) - 1));\n    $n = $n >> 1;\n    $n = $n ^ (pow(2, strlen(decbin($n)) - 1) - 1);\n    $n = $n << 1;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(17);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 31);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (strlen(decbin($n)) - 1)));\n    $mask = (1 << (strlen(decbin($n)) - 1)) - 1;\n    $mask = $mask ^ (1 << 0);\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n >> 2;\n    $x = ~$x;\n    $x = $x << 2;\n    $x = $x | ($first_bit << 1);\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n >> 1)) - 1);\n    $x = $x ^ ((1 << ($n >> 1)) - 1);\n    $x = $x | ($first_bit << ($n >> 1));\n    $x = $x | ($last_bit << 1);\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "\t$first_bit = $n & 1;\n\t$last_bit = $n & (1 << (strlen(decbin($n)) - 1));\n\t$n = $n ^ ((1 << (strlen(decbin($n)) - 1)) - 1);\n\t$n = $n | ($first_bit << (strlen(decbin($n)) - 1));\n\t$n = $n | $last_bit;\n\treturn $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (PHP_INT_SIZE * 8 - 1)));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0;\n    $mask = ~($mask << ($n - 2));\n    $mask = ~($mask << 2);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(50);",
    "    $mask = 0;\n    $mask = $mask | (1 << 0);\n    $mask = $mask | (1 << 1);\n    $mask = $mask | (1 << 2);\n    $mask = $mask | (1 << 3);\n    $mask = $mask | (1 << 4);\n    $mask = $mask | (1 << 5);\n    $mask = $mask | (1 << 6);\n    $mask = $mask | (1 << 7);\n    $mask = $mask | (1 << 8);\n    $mask = $mask | (1 << 9);\n    $mask = $mask | (1 << 10);\n    $mask = $mask | (1 << 11);\n    $mask = $mask | (1 << 12);\n    $mask = $mask | (1 << 13);\n    $mask = $mask | (1 << 14);\n    $mask = $mask | (1 << 15);\n    $mask = $mask | (1 << 16);\n    $mask = $mask | (1 << 17);\n    $mask = $mask | (1 << 18);\n    $mask = $mask | (1 << 19);\n    $mask = $mask | (1 << 20);\n    $mask = $mask | (1 << 21);\n    $mask = $mask | (1 << 22);\n    $mask = $mask | (1 << 23);\n    $mask = $mask | (1 << 24);\n    $mask = $mask | (1 << 25);\n    $mask = $mask | (1 << 26);\n    $mask = $mask | (1 << 27);\n    $mask = $mask | (1 << 28);\n    $mask = $mask | (1 << 29);\n    $mask = $mask | (1 << 30);\n    $mask = $mask | (1 << 31);\n    return $n ^ $mask;\n}\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . \"\\n\";",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x | $first_bit;\n    $x = $x | ($last_bit << 1);\n    return $x;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = ~$mask;\n    $n = $n ^ $mask;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask >> 1;\n    $mask = $mask << 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen(decbin($n)) - 1));\n    $n = $n ^ ((1 << (strlen(decbin($n)) - 1)) - 1);\n    $n = $n | ($first_bit << (strlen(decbin($n)) - 1));\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen(decbin($n)) - 1));\n    $mask = (1 << (strlen(decbin($n)) - 2)) - 1;\n    $mask = ~$mask;\n    $n = $n & $mask;\n    $n = $n ^ ((1 << (strlen(decbin($n)) - 2)) - 1);\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(50);",
    "    $mask = 0b11111111111111111111111111111111;\n    $mask = $mask ^ 0b11;\n    $mask = $mask ^ 0b11000000000000000000000000000000;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111101) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111100) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111011) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111010) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111001) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111000) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110101) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110100) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110011) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110010) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110001) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110000) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101101) . \"\\n\";\necho toggle_middle_bits(0",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ($n >> 1);\n    $x = $x ^ ($x >> 2);\n    $x = $x & ((1 << ($x >> 1)) - 1);\n    $x = $x | ($first_bit << ($x >> 1));\n    $x = $x | ($last_bit << ($x + 1));\n    return $x;\n}\n\necho toggle_middle_bits(17);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\n$n = 0xFFFFFFFF;\necho decbin(toggle_middle_bits($n));",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 31);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $mask = (1 << (floor(log($n, 2)) - 1)) - 1;\n    $mask = $mask << 1;\n    $mask = $mask | 1;\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << 1);\n    $n = $n | ($last_bit << (floor(log($n, 2)) - 1));\n    return $n;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $mask = (1 << (floor(log($n, 2)) - 1)) - 1;\n    $mask = $mask ^ ((1 << 1) - 1);\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << 1);\n    $n = $n | ($last_bit << (floor(log($n, 2)) - 1));\n    return $n;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n >> 1)) - 1);\n    $x = $x | ($first_bit << ($n >> 1));\n    $x = $x | ($last_bit);\n    return $x;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask ^ $last_bit;\n    $mask = $mask ^ $first_bit;\n    $n = $n ^ $mask;\n    return $n;\n}\n\necho toggle_middle_bits(10) . \"\\n\";\necho toggle_middle_bits(11) . \"\\n\";\necho toggle_middle_bits(12) . \"\\n\";\necho toggle_middle_bits(13) . \"\\n\";\necho toggle_middle_bits(14) . \"\\n\";\necho toggle_middle_bits(15) . \"\\n\";\necho toggle_middle_bits(16) . \"\\n\";\necho toggle_middle_bits(17) . \"\\n\";\necho toggle_middle_bits(18) . \"\\n\";\necho toggle_middle_bits(19) . \"\\n\";\necho toggle_middle_bits(20) . \"\\n\";\necho toggle_middle_bits(21) . \"\\n\";\necho toggle_middle_bits(22) . \"\\n\";\necho toggle_middle_bits(23) . \"\\n\";\necho toggle_middle_bits(24) . \"\\n\";\necho toggle_middle_bits(25) . \"\\n\";\necho toggle_middle_bits(26) . \"\\n\";\necho toggle_middle_bits(27) . \"\\n\";\necho toggle_middle_bits(28) . \"\\n\";\necho toggle_middle_bits(29) . \"\\n\";\necho toggle_middle_bits(30) . \"\\n\";\necho toggle_middle_bits(31) . \"\\n\";\necho toggle_middle_bits(32) . \"\\n\";\necho toggle_middle_bits(33) . \"\\n\";\necho toggle_middle_bits(34) . \"\\n\";\necho toggle_middle_bits(35) . \"\\n\";\necho toggle_middle_bits(36) . \"\\n\";\necho toggle_middle_bits(37) . \"\\n\";\necho toggle_middle_bits(38) . \"\\n\";",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (PHP_INT_SIZE * 8 - 1)));\n    $mask = ~((1 << (PHP_INT_SIZE * 8 - 1)) | 1);\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask ^ 0xFFFFFFFE;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 31);\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 0b11010101010101010101010101010101;\necho decbin(toggle_middle_bits($n));",
    "    $mask = 0;\n    $mask = $mask | (1 << 1);\n    $mask = $mask | (1 << 2);\n    $mask = $mask | (1 << 3);\n    $mask = $mask | (1 << 4);\n    $mask = $mask | (1 << 5);\n    $mask = $mask | (1 << 6);\n    $mask = $mask | (1 << 7);\n    $mask = $mask | (1 << 8);\n    $mask = $mask | (1 << 9);\n    $mask = $mask | (1 << 10);\n    $mask = $mask | (1 << 11);\n    $mask = $mask | (1 << 12);\n    $mask = $mask | (1 << 13);\n    $mask = $mask | (1 << 14);\n    $mask = $mask | (1 << 15);\n    $mask = $mask | (1 << 16);\n    $mask = $mask | (1 << 17);\n    $mask = $mask | (1 << 18);\n    $mask = $mask | (1 << 19);\n    $mask = $mask | (1 << 20);\n    $mask = $mask | (1 << 21);\n    $mask = $mask | (1 << 22);\n    $mask = $mask | (1 << 23);\n    $mask = $mask | (1 << 24);\n    $mask = $mask | (1 << 25);\n    $mask = $mask | (1 << 26);\n    $mask = $mask | (1 << 27);\n    $mask = $mask | (1 << 28);\n    $mask = $mask | (1 << 29);\n    $mask = $mask | (1 << 30);\n    $mask = $mask | (1 << 31);\n    $mask = $mask | (1 << 32);\n    $mask = $mask | (1 << 33);\n    $mask = $mask | (1 << 34);\n    $mask = $mask | (1 << 35);\n    $mask = $mask | (1 << 36);\n    $mask = $mask | (1 << 37);\n    $mask = $mask | (1 << 38);\n    $mask = $mask | (1 <<",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $mask = (1 << (floor(log($n, 2)) - 1)) - 1;\n    $mask = $mask << 1;\n    $mask = $mask | 1;\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << 1);\n    $n = $n | ($last_bit << floor(log($n, 2)));\n    return $n;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($x >> 1)) - 1);\n    return ($x | ($first_bit << ($x >> 1)) | ($last_bit << 1));\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = ~(1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = $mask & ~1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10) . PHP_EOL;\necho toggle_middle_bits(13) . PHP_EOL;\necho toggle_middle_bits(15) . PHP_EOL;\necho toggle_middle_bits(16) . PHP_EOL;\necho toggle_middle_bits(17) . PHP_EOL;\necho toggle_middle_bits(18) . PHP_EOL;\necho toggle_middle_bits(19) . PHP_EOL;\necho toggle_middle_bits(20) . PHP_EOL;\necho toggle_middle_bits(21) . PHP_EOL;\necho toggle_middle_bits(22) . PHP_EOL;\necho toggle_middle_bits(23) . PHP_EOL;\necho toggle_middle_bits(24) . PHP_EOL;\necho toggle_middle_bits(25) . PHP_EOL;\necho toggle_middle_bits(26) . PHP_EOL;\necho toggle_middle_bits(27) . PHP_EOL;\necho toggle_middle_bits(28) . PHP_EOL;\necho toggle_middle_bits(29) . PHP_EOL;\necho toggle_middle_bits(30) . PHP_EOL;\necho toggle_middle_bits(31) . PHP_EOL;\necho toggle_middle_bits(32) . PHP_EOL;\necho toggle_middle_bits(33) . PHP_EOL;\necho toggle_middle_bits(34) . PHP_EOL;\necho toggle_middle_bits(35) . PHP_EOL;\necho toggle_middle_bits(36) . PHP_EOL;\necho toggle_middle_bits(37) . PHP_",
    "\t$n = $n ^ ($n >> 1);\n\t$n = $n ^ ($n >> 2);\n\t$n = $n ^ ($n >> 4);\n\t$n = $n ^ ($n >> 8);\n\t$n = $n ^ ($n >> 16);\n\treturn $n;\n}\n\necho toggle_middle_bits(23);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask ^ (1 << 31);\n    $mask = $mask ^ 1;\n    return $n ^ $mask;\n}\n\n$n = 0b11010101;\necho decbin(toggle_middle_bits($n));",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 31);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = (1 << $n) - 1;\n    $mask = $mask ^ (1 << 1);\n    $mask = $mask ^ (1 << ($n - 2));\n    return $mask;\n}\n\necho toggle_middle_bits(5);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen(decbin($n)) - 1));\n    $x = $n >> 1;\n    $x = $x ^ (2 ** (strlen(decbin($n)) - 2) - 1);\n    $x = $x << 1;\n    $x = $x | $first_bit;\n    $x = $x | $last_bit;\n    return $x;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 1;\n    $mask = $mask << 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = ~$mask;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "\t$n = $n ^ ($n >> 1);\n\t$n = $n ^ ($n >> 2);\n\t$n = $n ^ ($n >> 4);\n\t$n = $n ^ ($n >> 8);\n\t$n = $n ^ ($n >> 16);\n\t$n = $n ^ ($n >> 32);\n\treturn $n;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (floor(log($n, 2))));\n    $x = $n ^ ($n & ((1 << (floor(log($n, 2)))) - 1));\n    $x = $x ^ ($x >> 1);\n    $x = $x & ((1 << (floor(log($n, 2)))) - 1);\n    $x = $x | ($first_bit << (floor(log($n, 2))));\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen($n) - 1));\n    $mask = (1 << (strlen($n) - 1)) - 1;\n    $mask = $mask ^ (1 << 0);\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = (1 << ($n - 2)) - 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(17);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11010101010101010101010101010101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask & ~($first_bit | $last_bit);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10) . \"\\n\";\necho toggle_middle_bits(20) . \"\\n\";\necho toggle_middle_bits(30) . \"\\n\";\necho toggle_middle_bits(40) . \"\\n\";\necho toggle_middle_bits(50) . \"\\n\";\necho toggle_middle_bits(60) . \"\\n\";\necho toggle_middle_bits(70) . \"\\n\";\necho toggle_middle_bits(80) . \"\\n\";\necho toggle_middle_bits(90) . \"\\n\";\necho toggle_middle_bits(100) . \"\\n\";\necho toggle_middle_bits(110) . \"\\n\";\necho toggle_middle_bits(120) . \"\\n\";\necho toggle_middle_bits(130) . \"\\n\";\necho toggle_middle_bits(140) . \"\\n\";\necho toggle_middle_bits(150) . \"\\n\";\necho toggle_middle_bits(160) . \"\\n\";\necho toggle_middle_bits(170) . \"\\n\";\necho toggle_middle_bits(180) . \"\\n\";\necho toggle_middle_bits(190) . \"\\n\";\necho toggle_middle_bits(200) . \"\\n\";\necho toggle_middle_bits(210) . \"\\n\";\necho toggle_middle_bits(220) . \"\\n\";\necho toggle_middle_bits(230) . \"\\n\";\necho toggle_middle_bits(240) . \"\\n\";\necho toggle_middle_bits(250) . \"\\n\";\necho toggle_middle_bits(260) . \"\\n\";\necho toggle_middle_bits(270) . \"\\n\";\necho toggle_middle_bits(280) . \"\\n\";\necho toggle_middle_bits(290) . \"\\n\";\necho toggle_middle_bits(300) . \"\\n\";\n",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 2));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask ^ (1 << 1);\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n",
    "    $mask = (1 << ($n - 1)) | (1 << 1) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = (1 << ($n - 1)) | 1;\n    $mask = $mask | ($mask - 1);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n >> 1)) - 1);\n    return ($x | ($first_bit << 1)) | ($last_bit << ($n >> 1));\n}\n\necho toggle_middle_bits(17);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 0xFFFFFFFF;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0xF0F0F0F0;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0xCCCCCCCC;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0xAAAAAAAA;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0x55555555;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0x0;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0xFFFFFFFF;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0xFFFFFFF0;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0xFFFFFF0F;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0xFFFFF0FF;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0xFFFF0FFF;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0xFFF0FFFF;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0xFF0FFFFF;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0xF0FFFFFF;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0x0FFFFFFF;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "\t$first_bit = $n & 1;\n\t$last_bit = ($n >> 1) & 1;\n\t$x = $n ^ $n;\n\t$x = $x | ($first_bit << 1);\n\t$x = $x | $last_bit;\n\treturn $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ($n >> 1);\n    $x = $x ^ ($x >> 2);\n    $x = $x ^ ($x >> 4);\n    $x = $x ^ ($x >> 8);\n    $x = $x ^ ($x >> 16);\n    $x = $x & ~(1 << 0);\n    $x = $x & ~(1 << 1);\n    $x = $x | ($first_bit << 1);\n    $x = $x | ($last_bit);\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 1;\n    $mask = $mask << 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen($n) - 1));\n    $x = $n ^ ((1 << (strlen($n) - 1)) - 1);\n    $x = $x ^ ((1 << 1) - 1);\n    $x = $x | $first_bit;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\n$n = 5;\necho toggle_middle_bits($n);",
    "    $first_bit = ($n >> 1) & 1;\n    $last_bit = $n & 1;\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask ^ (1 << 1);\n    $mask = $mask ^ 1;\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << 1);\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n - 1)) - 1);\n    $x = $x ^ ((1 << 1) - 1);\n    $x = $x | ($first_bit << ($n - 1));\n    $x = $x | ($last_bit << 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = 0;\n    for ($i = 1; $i < PHP_INT_SIZE * 8 - 1; $i++) {\n        $mask |= 1 << $i;\n    }\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10) . PHP_EOL;\necho toggle_middle_bits(11) . PHP_EOL;\necho toggle_middle_bits(12) . PHP_EOL;\necho toggle_middle_bits(13) . PHP_EOL;\necho toggle_middle_bits(14) . PHP_EOL;\necho toggle_middle_bits(15) . PHP_EOL;\necho toggle_middle_bits(16) . PHP_EOL;\necho toggle_middle_bits(17) . PHP_EOL;\necho toggle_middle_bits(18) . PHP_EOL;\necho toggle_middle_bits(19) . PHP_EOL;\necho toggle_middle_bits(20) . PHP_EOL;\necho toggle_middle_bits(21) . PHP_EOL;\necho toggle_middle_bits(22) . PHP_EOL;\necho toggle_middle_bits(23) . PHP_EOL;\necho toggle_middle_bits(24) . PHP_EOL;\necho toggle_middle_bits(25) . PHP_EOL;\necho toggle_middle_bits(26) . PHP_EOL;\necho toggle_middle_bits(27) . PHP_EOL;\necho toggle_middle_bits(28) . PHP_EOL;\necho toggle_middle_bits(29) . PHP_EOL;\necho toggle_middle_bits(30) . PHP_EOL;\necho toggle_middle_bits(31) . PHP_EOL;\necho toggle_middle_bits(32) . PHP_EOL;\necho toggle_middle_bits(33) . PHP_EOL",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\n$n = 50;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) ^ ((1 << ($n >> 2)) - 1);\n    $x = $x << 2;\n    $x = $x | ($first_bit << 1) | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(17);",
    "    $n = $n | ($n >> 1);\n    $n = $n & (~($n >> 2));\n    return $n;\n}\n\necho toggle_middle_bits(10);\n",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x | (1 << 1);\n    $x = $x | (1 << ($n - 2));\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(17);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask ^ (1 << 31);\n    $mask = $mask ^ 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = ~$mask;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x | (1 << 1);\n    $x = $x | (1 << ($n - 1));\n    return $x;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen($n) - 1));\n    $x = $n >> 1;\n    $x = ~$x;\n    $x = $x << 1;\n    $x = ~$x;\n    $x = $x >> 1;\n    $x = $x | $first_bit;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n >> 1)) - 1);\n    return ($x | ($first_bit << ($n >> 1)) | ($last_bit << 1));\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n >> 1)) - 1);\n    $x = $x | ($first_bit << ($n >> 1));\n    $x = $x | ($last_bit);\n    return $x;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = (1 << ($n - 1)) - 1;\n    $mask = $mask ^ ($mask >> 1);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(50);",
    "    $mask = 0b11111111111111111111111111111111;\n    $mask = $mask ^ 0b11;\n    $mask = $mask ^ 0b11111111111111111111111111111100;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111101) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111100) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111011) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111010) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111001) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111000) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110101) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110100) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110011) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110010) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110001) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110000) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101101) . \"\\n\";\necho toggle_middle",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = $n >> 2;\n    $x = $x ^ (1 << (strlen(decbin($x)) - 1));\n    return $first_bit | $x | $last_bit;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask ^ $last_bit;\n    $mask = $mask ^ $first_bit;\n    return ($n ^ $mask);\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen($n) - 1));\n    $x = $n ^ ((1 << (strlen($n) - 1)) - 1);\n    $x = $x ^ ((1 << 1) - 1);\n    $x = $x | $first_bit;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $n = $n ^ ($n >> 1);\n    $n = $n & ~(1 << (PHP_INT_SIZE * 8 - 1));\n    $n = $n & ~1;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    return ($x ^ ((1 << ($first_bit + 1)) - 1));\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen($n) - 1));\n    $x = $n ^ ((1 << (strlen($n) - 1)) - 1);\n    $x = $x ^ ((1 << 1) - 1);\n    $x = $x | $first_bit;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $middle_bits = $n & ~(1 << 1 | 1);\n    return $first_bit | ~$middle_bits | $last_bit;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = 0xffffffff;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 0b11011010101;\necho decbin(toggle_middle_bits($n));",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n >> 2;\n    $x = ~$x;\n    $x = $x << 2;\n    $x = $x | ($first_bit << 1);\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\n$n = 5;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    return ($x ^ ((1 << ($first_bit + 1)) - 1));\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $middle_bits = $n >> 2;\n    $middle_bits = ~$middle_bits;\n    $middle_bits = $middle_bits << 2;\n    $middle_bits = $middle_bits >> 2;\n    return $first_bit | $middle_bits | $last_bit;\n}\n\necho toggle_middle_bits(5);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (PHP_INT_SIZE * 8 - 1)));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask ^ $last_bit;\n    $mask = $mask ^ $first_bit;\n    return ($n ^ $mask);\n}\n\necho toggle_middle_bits(5) . PHP_EOL;\necho toggle_middle_bits(7) . PHP_EOL;\necho toggle_middle_bits(10) . PHP_EOL;\necho toggle_middle_bits(15) . PHP_EOL;",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << ($n - 1));\n    $x = $n ^ ((1 << ($n - 1)) - 1);\n    $x = $x ^ ((1 << 1) - 1);\n    $x = $x | $first_bit;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen($n) - 1));\n    $x = $n ^ ($n & ((1 << (strlen($n) - 1)) - 1));\n    $x = $x ^ ($x >> 1);\n    $x = $x ^ ($x << 1);\n    $x = $x ^ ($x >> 2);\n    $x = $x ^ ($x << 2);\n    $x = $x ^ ($x >> 4);\n    $x = $x ^ ($x << 4);\n    $x = $x ^ ($x >> 8);\n    $x = $x ^ ($x << 8);\n    $x = $x ^ ($x >> 16);\n    $x = $x ^ ($x << 16);\n    $x = $x ^ ($x >> 32);\n    $x = $x ^ ($x << 32);\n    $x = $x & ((1 << (strlen($n) - 1)) - 1);\n    $x = $x | $first_bit;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10) . \"\\n\";\necho toggle_middle_bits(17) . \"\\n\";\necho toggle_middle_bits(56) . \"\\n\";\necho toggle_middle_bits(125) . \"\\n\";\necho toggle_middle_bits(100) . \"\\n\";\necho toggle_middle_bits(123) . \"\\n\";\necho toggle_middle_bits(456) . \"\\n\";\necho toggle_middle_bits(789) . \"\\n\";\necho toggle_middle_bits(1000) . \"\\n\";\necho toggle_middle_bits(1234) . \"\\n\";\necho toggle_middle_bits(5678) . \"\\n\";\necho toggle_middle_bits(9876) . \"\\n\";\necho toggle_middle_bits(12345) . \"\\n\";\necho toggle_middle_bits(67890) . \"\\n\";\necho toggle_middle_bits(123456) . \"\\n\";\necho toggle_middle_bits(987654) . \"\\n\";\necho toggle_middle_",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(17);",
    "    $mask = 0xffffffff;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n - 1)) - 1);\n    $x = $x ^ ((1 << 1) - 1);\n    $x = $x | ($first_bit << ($n - 1));\n    $x = $x | ($last_bit << 1);\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return ($n ^ $mask);\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(5);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111111110) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111111101) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111111100) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111111011) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111111010) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111111001) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111111000) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111110111) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111110110) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111110101) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111110100) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111110011) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111110010) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111110001) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111110000) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111101111) . PHP_EOL;\necho toggle_middle_bits(0b11111111111111111111111111101110) . PHP_EOL;\necho toggle_middle_bits(0b",
    "    $mask = (1 << ($n - 1)) - 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 1)) - 1;\n    $mask = $mask ^ (1 << 1);\n    $mask = $mask ^ (1 << (PHP_INT_SIZE * 8 - 2));\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\n$n = 0b11010101;\necho decbin(toggle_middle_bits($n));",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (floor(log($n, 2))));\n    $n = $n ^ ((1 << (floor(log($n, 2)))) - 1);\n    $n = $n | ($first_bit << (floor(log($n, 2))));\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(13);\n",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b10101010101010101010101010101010);",
    "\t$first_bit = ($n & 1);\n\t$last_bit = ($n & (1 << (strlen(decbin($n)) - 1)));\n\t$n = $n ^ ((1 << (strlen(decbin($n)) - 1)) - 1);\n\t$n = $n | ($first_bit << (strlen(decbin($n)) - 1));\n\t$n = $n | $last_bit;\n\treturn $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n >> 1)) - 1);\n    $x = $x & ~(1 << ($n >> 1));\n    $x = $x | ($first_bit << ($n >> 1));\n    $x = $x | ($last_bit);\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $mask = 0;\n    $mask = (1 << ($n - 1)) - 1;\n    $mask = $mask ^ ((1 << 1) - 1);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(17);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ($mask << 1) ^ $mask;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen(decbin($n)) - 1));\n    $mask = (1 << (strlen(decbin($n)) - 2)) - 1;\n    $mask = ~$mask;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(50);\n",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 31);\n    return $n ^ $mask;\n}\n\n$n = 0b10101010101010101010101010101010;\necho decbin(toggle_middle_bits($n));",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (strlen(decbin($n)) - 1)));\n    $n = $n >> 1;\n    $n = $n << 1;\n    $n = $n ^ $n;\n    $n = $n >> 1;\n    $n = $n << 1;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen($n) - 1));\n    $x = $n ^ ((1 << (strlen($n) - 1)) - 1);\n    $x = $x ^ ((1 << 1) - 1);\n    $x = $x | $first_bit;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n >> 1)) - 1);\n    $x = $x & ~(1 << ($n >> 1));\n    $x = $x | ($first_bit << ($n >> 1));\n    $x = $x | ($last_bit << 1);\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (floor(log($n, 2))));\n    $mask = ($last_bit << 1) - 1;\n    $mask = $mask ^ ((1 << floor(log($n, 2))) - 1);\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << (floor(log($n, 2))));\n    return $n;\n}\n\necho toggle_middle_bits(10) . \"\\n\";\necho toggle_middle_bits(17) . \"\\n\";\necho toggle_middle_bits(50) . \"\\n\";",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x | (1 << 1);\n    $x = $x | (1 << (strlen($n) - 2));\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen(decbin($n)) - 1));\n    $n = $n ^ ((1 << (strlen(decbin($n)) - 1)) - 1);\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(11);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x | (1 << 1);\n    $x = $x | (1 << ($n - 2));\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen(decbin($n)) - 1));\n    $n = $n ^ ((1 << (strlen(decbin($n)) - 1)) - 1);\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n >> 1)) - 1);\n    $x = $x ^ (($first_bit << 1) - 1);\n    $x = $x | ($last_bit << ($n >> 1));\n    return $x;\n}\n\necho toggle_middle_bits(10) . \"\\n\";\necho toggle_middle_bits(17) . \"\\n\";\necho toggle_middle_bits(31) . \"\\n\";\n",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (strlen(decbin($n)) - 1)));\n    $n = $n ^ ((1 << (strlen(decbin($n)) - 1)) - 1);\n    $n = $n | ($first_bit << (strlen(decbin($n)) - 1));\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen(decbin($n)) - 1));\n    $n = $n >> 1;\n    $n = $n ^ (1 << (strlen(decbin($n)) - 1));\n    $n = $n << 1;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $mask = (1 << (floor(log($n, 2)) - 1)) - 1;\n    $mask = $mask << 1;\n    $mask = $mask | 1;\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << 1);\n    $n = $n | ($last_bit << floor(log($n, 2)));\n    return $n;\n}\n\necho toggle_middle_bits(17);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 31);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111101) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111100) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111011) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111010) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111001) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111000) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110101) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110100) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110011) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110010) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110001) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110000) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101101) . \"\\n\";\necho toggle_middle_bits(0b111111111111111111111111",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 31);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 0b1101010101010101010101010101010101010101010101010101010101010101;\necho decbin(toggle_middle_bits($n));\n",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $mask = (1 << ($n - 1)) | 1;\n    $mask = ~$mask;\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << 1);\n    $n = $n | ($last_bit);\n    return $n;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (strlen(decbin($n)) - 1)));\n    $mask = (1 << (strlen(decbin($n)) - 1)) - 1;\n    $mask = $mask ^ (1 << 0);\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10) . \"\\n\";\necho toggle_middle_bits(17) . \"\\n\";\necho toggle_middle_bits(31) . \"\\n\";\necho toggle_middle_bits(0) . \"\\n\";\necho toggle_middle_bits(1) . \"\\n\";\necho toggle_middle_bits(2) . \"\\n\";\necho toggle_middle_bits(3) . \"\\n\";\necho toggle_middle_bits(4) . \"\\n\";\necho toggle_middle_bits(5) . \"\\n\";\necho toggle_middle_bits(6) . \"\\n\";\necho toggle_middle_bits(7) . \"\\n\";\necho toggle_middle_bits(8) . \"\\n\";\necho toggle_middle_bits(9) . \"\\n\";\necho toggle_middle_bits(11) . \"\\n\";\necho toggle_middle_bits(12) . \"\\n\";\necho toggle_middle_bits(13) . \"\\n\";\necho toggle_middle_bits(14) . \"\\n\";\necho toggle_middle_bits(15) . \"\\n\";\necho toggle_middle_bits(16) . \"\\n\";\necho toggle_middle_bits(18) . \"\\n\";\necho toggle_middle_bits(19) . \"\\n\";\necho toggle_middle_bits(20) . \"\\n\";\necho toggle_middle_bits(21) . \"\\n\";\necho toggle_middle_bits(22) . \"\\n\";\necho toggle_middle_bits(23) . \"\\n\";\necho toggle_middle_bits(24) . \"\\n\";\necho toggle_middle_bits(25) . \"\\n\";\necho toggle_middle_bits(26) . \"\\n\";\necho toggle_middle_bits(27) . \"\\n\";",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (floor(log($n, 2))));\n    $mask = (1 << (floor(log($n, 2)) - 1)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << (floor(log($n, 2)) - 1));\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(17);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen($n) - 1));\n    $x = $n >> 1;\n    $x = $x ^ ((1 << (strlen($n) - 2)) - 1);\n    $x = $x << 1;\n    $x = $x | $first_bit;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) ^ ((1 << (strlen(decbin($n)) - 4)) - 1);\n    return ($x << 2) | ($first_bit << 1) | $last_bit;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ($mask << 1) ^ ($mask >> 1);\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    return ($x ^ ((1 << ($first_bit + 1)) - 1));\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    return ($x >> 1) << 1 | $first_bit;\n}\n\necho toggle_middle_bits(13) . \"\\n\";\necho toggle_middle_bits(17) . \"\\n\";\necho toggle_middle_bits(50) . \"\\n\";",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ($n >> 1);\n    $x = $x ^ ($x >> 2);\n    $x = $x ^ ($x >> 4);\n    $x = $x ^ ($x >> 8);\n    $x = $x ^ ($x >> 16);\n    $x = $x & ~(1 << 0);\n    $x = $x & ~(1 << 31);\n    $x = $x | ($first_bit << 0);\n    $x = $x | ($last_bit << 31);\n    return $x;\n}\n\n$n = 0b11010101010101010101010101010101;\necho decbin(toggle_middle_bits($n));\n",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    return ($x ^ ((1 << ($first_bit + 1)) - 1));\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen(decbin($n)) - 1));\n    $n = $n ^ ($n & ~(1 << (strlen(decbin($n)) - 1)));\n    $n = $n ^ ($n & ~1);\n    $n = $n ^ ($n & ~(1 << (strlen(decbin($n)) - 1)));\n    $n = $n ^ ($n & ~1);\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n >> 1)) - 1);\n    $x = $x ^ (($first_bit << 1) + $last_bit);\n    return $x;\n}\n\necho toggle_middle_bits(17);",
    "    $mask = (1 << ($n - 1)) | 1;\n    $mask = $mask | ($mask - 1);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10) . \"\\n\";\necho toggle_middle_bits(17) . \"\\n\";\necho toggle_middle_bits(31) . \"\\n\";\necho toggle_middle_bits(32) . \"\\n\";\necho toggle_middle_bits(33) . \"\\n\";\necho toggle_middle_bits(63) . \"\\n\";\necho toggle_middle_bits(64) . \"\\n\";\necho toggle_middle_bits(65) . \"\\n\";",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111110).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111101).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111100).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111011).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111010).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111001).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111000).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110111).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110110).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110101).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110100).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110011).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110010).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110001).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110000).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101111).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101110).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101101).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101100).\"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (PHP_INT_SIZE * 8 - 1)));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask ^ $last_bit;\n    $mask = $mask ^ $first_bit;\n    return ($n ^ $mask);\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n - 1)) - 1);\n    $x = $x ^ ((1 << 1) - 1);\n    $x = $x | ($first_bit << ($n - 1));\n    $x = $x | ($last_bit << 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n ^ $n) >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "\t$first_bit = $n & 1;\n\t$last_bit = ($n >> 1) & 1;\n\t$x = $n ^ ((1 << $last_bit) - 1);\n\t$x = $x ^ ((1 << ($first_bit + 1)) - 1);\n\treturn $x;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $mask = (1 << (floor(log($n, 2)) - 1)) - 1;\n    $mask = $mask ^ ((1 << 1) - 1);\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << 1);\n    $n = $n | ($last_bit << (floor(log($n, 2)) - 1));\n    return $n;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n >> 2)) - 1);\n    $x = $x | ($first_bit << 1) | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (PHP_INT_SIZE * 8 - 1)));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask & ~($first_bit | $last_bit);\n    return ($n ^ $mask);\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen($n) - 1));\n    $x = $n ^ ((1 << (strlen($n) - 1)) - 1);\n    return ($x ^ ((1 << (strlen($x) - 1)) - 1)) | $first_bit | $last_bit;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x | (1 << 1);\n    $x = $x | (1 << ($n - 2));\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = ~(1 << (PHP_INT_SIZE * 8 - 1) | 1);\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x | (1 << 1);\n    $x = $x | (1 << (floor(log($n, 2)) - 1));\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "\t$n = $n ^ ((1 << ($n - 1)) - 1);\n\treturn $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 1) ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | ($first_bit << 1);\n    $x = $x | $last_bit;\n    return $x;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $n = $n ^ ((1 << (PHP_INT_SIZE * 8 - 1)) - 1);\n    $n = $n ^ 1;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = (1 << ($n >> 1)) - 1;\n    $mask = $mask << 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(17) . \"\\n\";\necho toggle_middle_bits(50) . \"\\n\";\necho toggle_middle_bits(107) . \"\\n\";",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (PHP_INT_SIZE * 8 - 1)));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xffffffff;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\necho toggle_middle_bits(0b10101010101010101010101010101010);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $mask = (1 << ($n - 1)) - 1;\n    $mask = $mask ^ ($mask >> 1);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($n >> 1)) - 1);\n    $x = $x & ~(1 << ($n >> 1));\n    $x = $x | ($first_bit << ($n >> 1));\n    $x = $x | ($last_bit);\n    return $x;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $middle_bits = $n & $mask;\n    $middle_bits = ~$middle_bits;\n    $middle_bits = $middle_bits & $mask;\n    $n = $first_bit | $middle_bits | $last_bit;\n    return $n;\n}\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n$n = 0b11111111111111111111111111111110;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n$n = 0b11111111111111111111111111111101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n$n = 0b11111111111111111111111111111100;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n$n = 0b11111111111111111111111111111011;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n$n = 0b11111111111111111111111111111010;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n$n = 0b11111111111111111111111111111001;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n$n = 0b11111111111111111111111111111000;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n$n = 0b11111111111111111111111111110111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n$n = 0b11111111111111111111111111110110;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n$n = 0b11111111111111111111111111110101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $first_bit ^ $last_bit;\n    $x = ($x << 1) | 1;\n    $x = $x << (PHP_INT_SIZE * 8 - 3);\n    return $n ^ $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = ~$mask;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111101) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111100) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111011) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111010) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111001) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111000) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110101) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110100) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110011) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110010) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110001) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110000) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101111) .",
    "\t$first_bit = $n & 1;\n\t$last_bit = ($n >> 1) & 1;\n\t$x = $n ^ ((1 << ($n - 1)) - 1);\n\t$x = $x ^ ((1 << ($n - 2)) - 1);\n\t$x = $x | ($first_bit << ($n - 1));\n\t$x = $x | ($last_bit << 1);\n\treturn $x;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = ($n >> 1) ^ ($n >> 2);\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    $x = $x | $first_bit;\n    return $x;\n}\n\necho toggle_middle_bits(17);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 31);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b1101010101010101010101010101010101010101010101010101010101010101);",
    "    $mask = (1 << ($n - 2)) - 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = $n >> 2;\n    $x = ~$x;\n    $x = $x << 2;\n    $x = $x >> 2;\n    return $first_bit | $x | $last_bit;\n}\n\necho toggle_middle_bits(10);"
  ]
}