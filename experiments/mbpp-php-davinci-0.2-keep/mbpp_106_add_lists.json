{
  "name": "mbpp_106_add_lists",
  "language": "php",
  "prompt": "<?php\n// Write a function to append the given list to the given tuples.\nfunction add_lists($test_list, $test_tup) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return add_lists(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 6, 7), array(9, 10)) !== array(9, 10, 5, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 7, 8), array(10, 11)) !== array(10, 11, 6, 7, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 8, 9), array(11, 12)) !== array(11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = array();\n    foreach ($test_tup as $key => $value) {\n        $result[] = array_merge($value, $test_list);\n    }\n    return $result;\n}\n\n$test_list = array(1, 2, 3);\n$test_tup = array(array(4, 5, 6), array(7, 8, 9));\n\nprint_r(add_lists($test_list, $test_tup));\n",
    "  $result = array();\n  foreach ($test_tup as $tup) {\n    $result[] = array_merge($tup, $test_list);\n  }\n  return $result;\n}\n\n$test_list = array(1, 2, 3);\n$test_tup = array(array(4, 5), array(6, 7));\n$result = add_lists($test_list, $test_tup);\nprint_r($result);\n",
    "    $result = array();\n    foreach ($test_tup as $tup) {\n        $result[] = array_merge($tup, $test_list);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($test_tup as $tup) {\n        $result[] = array_merge($tup, $test_list);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($test_tup as $key => $value) {\n        $result[$key] = $value;\n    }\n    foreach ($test_list as $key => $value) {\n        $result[$key] = $value;\n    }\n    return $result;\n}\n\n$test_list = array(\n    \"a\" => 1,\n    \"b\" => 2,\n    \"c\" => 3,\n    \"d\" => 4,\n    \"e\" => 5\n);\n$test_tup = array(\n    \"a\" => 6,\n    \"b\" => 7,\n    \"c\" => 8,\n    \"d\" => 9,\n    \"e\" => 10\n);\n$result = add_lists($test_list, $test_tup);\nprint_r($result);",
    "    $result = array();\n    foreach ($test_tup as $tup) {\n        $result[] = array_merge($tup, $test_list);\n    }\n    return $result;\n}\n\n$test_list = array(\"a\", \"b\", \"c\");\n$test_tup = array(array(1, 2), array(3, 4), array(5, 6));\n$result = add_lists($test_list, $test_tup);\nprint_r($result);\n",
    "    $result = array();\n    foreach ($test_tup as $tup) {\n        $result[] = array_merge($tup, $test_list);\n    }\n    return $result;\n}\n\n$test_list = array(1, 2, 3);\n$test_tup = array(array(4, 5, 6), array(7, 8, 9));\n\nprint_r(add_lists($test_list, $test_tup));\n",
    "    $result = array();\n    foreach ($test_tup as $tup) {\n        $result[] = array_merge($tup, $test_list);\n    }\n    return $result;\n}\n",
    "\t$result = array();\n\tforeach ($test_tup as $tup) {\n\t\t$result[] = array_merge($tup, $test_list);\n\t}\n\treturn $result;\n}\n",
    "    $result = array();\n    foreach ($test_tup as $tup) {\n        $result[] = array_merge($tup, $test_list);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($test_tup as $tup) {\n        $result[] = array_merge($tup, $test_list);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($test_tup as $tup) {\n        $result[] = array_merge($tup, $test_list);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup); $i++) {\n        $result[] = $test_tup[$i] + $test_list[$i];\n    }\n    return $result;\n}\n\n$test_list = array(1, 2, 3);\n$test_tup = array(4, 5, 6);\n\nprint_r(add_lists($test_list, $test_tup));\n",
    "  $result = array();\n  foreach ($test_tup as $tup) {\n    $result[] = array_merge($tup, $test_list);\n  }\n  return $result;\n}\n",
    "\t$test_list = array_merge($test_list, $test_tup);\n\treturn $test_list;\n}\n",
    "\t// Your code here\n\t$result = array();\n\tforeach ($test_tup as $key => $value) {\n\t\t$result[$key] = $value;\n\t}\n\tforeach ($test_list as $key => $value) {\n\t\t$result[$key] = $value;\n\t}\n\treturn $result;\n}\n",
    "    $result = array();\n    foreach ($test_tup as $tup) {\n        $result[] = array_merge($tup, $test_list);\n    }\n    return $result;\n}\n\n$test_list = array(1, 2, 3);\n$test_tup = array(array(4, 5, 6), array(7, 8, 9));\nprint_r(add_lists($test_list, $test_tup));",
    "    $result = array();\n    foreach ($test_tup as $tup) {\n        $result[] = array_merge($tup, $test_list);\n    }\n    return $result;\n}\n\n$test_list = array(1, 2, 3);\n$test_tup = array(\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(add_lists($test_list, $test_tup));\n",
    "    $result = array();\n    foreach ($test_tup as $tup) {\n        $result[] = array_merge($tup, $test_list);\n    }\n    return $result;\n}\n\n$test_list = array(1, 2, 3);\n$test_tup = array(array(4, 5, 6), array(7, 8, 9));\n\nprint_r(add_lists($test_list, $test_tup));",
    "    $result = array();\n    foreach ($test_tup as $tup) {\n        array_push($result, array_merge($tup, $test_list));\n    }\n    return $result;\n}\n"
  ]
}