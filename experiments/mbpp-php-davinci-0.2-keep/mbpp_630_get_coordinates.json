{
  "name": "mbpp_630_get_coordinates",
  "language": "php",
  "prompt": "<?php\n// Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nfunction get_coordinates($test_tup) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return get_coordinates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 4)) !== array(array(2, 3), array(2, 4), array(2, 5), array(3, 3), array(3, 4), array(3, 5), array(4, 3), array(4, 4), array(4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5)) !== array(array(3, 4), array(3, 5), array(3, 6), array(4, 4), array(4, 5), array(4, 6), array(5, 4), array(5, 5), array(5, 6))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6)) !== array(array(4, 5), array(4, 6), array(4, 7), array(5, 5), array(5, 6), array(5, 7), array(6, 5), array(6, 6), array(6, 7))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $coordinates = array();\n    $coordinates[] = array($test_tup[0] + 1, $test_tup[1]);\n    $coordinates[] = array($test_tup[0] - 1, $test_tup[1]);\n    $coordinates[] = array($test_tup[0], $test_tup[1] + 1);\n    $coordinates[] = array($test_tup[0], $test_tup[1] - 1);\n    return $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array(\n        array($x-1, $y-1),\n        array($x-1, $y),\n        array($x-1, $y+1),\n        array($x, $y-1),\n        array($x, $y+1),\n        array($x+1, $y-1),\n        array($x+1, $y),\n        array($x+1, $y+1)\n    );\n    return $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array(\n        array($x - 1, $y - 1),\n        array($x - 1, $y),\n        array($x - 1, $y + 1),\n        array($x, $y - 1),\n        array($x, $y + 1),\n        array($x + 1, $y - 1),\n        array($x + 1, $y),\n        array($x + 1, $y + 1)\n    );\n    return $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array();\n    $coordinates[] = array($x, $y + 1);\n    $coordinates[] = array($x, $y - 1);\n    $coordinates[] = array($x + 1, $y);\n    $coordinates[] = array($x - 1, $y);\n    return $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array(\n        array($x - 1, $y - 1),\n        array($x - 1, $y),\n        array($x - 1, $y + 1),\n        array($x, $y - 1),\n        array($x, $y + 1),\n        array($x + 1, $y - 1),\n        array($x + 1, $y),\n        array($x + 1, $y + 1)\n    );\n    return $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $adjacent_coordinates = array(\n        array($x, $y + 1),\n        array($x, $y - 1),\n        array($x + 1, $y),\n        array($x - 1, $y),\n        array($x + 1, $y + 1),\n        array($x - 1, $y - 1),\n        array($x + 1, $y - 1),\n        array($x - 1, $y + 1)\n    );\n    return $adjacent_coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array(\n        array($x - 1, $y - 1),\n        array($x - 1, $y),\n        array($x - 1, $y + 1),\n        array($x, $y - 1),\n        array($x, $y + 1),\n        array($x + 1, $y - 1),\n        array($x + 1, $y),\n        array($x + 1, $y + 1)\n    );\n    return $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array(\n        array($x - 1, $y - 1),\n        array($x - 1, $y),\n        array($x - 1, $y + 1),\n        array($x, $y - 1),\n        array($x, $y + 1),\n        array($x + 1, $y - 1),\n        array($x + 1, $y),\n        array($x + 1, $y + 1)\n    );\n    return $coordinates;\n}\n",
    "\t$x = $test_tup[0];\n\t$y = $test_tup[1];\n\t$coordinates = array();\n\tfor ($i = -1; $i <= 1; $i++) {\n\t\tfor ($j = -1; $j <= 1; $j++) {\n\t\t\tif ($i == 0 && $j == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$coordinates[] = array($x + $i, $y + $j);\n\t\t}\n\t}\n\treturn $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array();\n    for ($i = -1; $i <= 1; $i++) {\n        for ($j = -1; $j <= 1; $j++) {\n            if ($i == 0 && $j == 0) {\n                continue;\n            }\n            $coordinates[] = array($x + $i, $y + $j);\n        }\n    }\n    return $coordinates;\n}\n",
    "\t$x = $test_tup[0];\n\t$y = $test_tup[1];\n\t$coordinates = array();\n\t$coordinates[] = array($x - 1, $y - 1);\n\t$coordinates[] = array($x - 1, $y);\n\t$coordinates[] = array($x - 1, $y + 1);\n\t$coordinates[] = array($x, $y - 1);\n\t$coordinates[] = array($x, $y + 1);\n\t$coordinates[] = array($x + 1, $y - 1);\n\t$coordinates[] = array($x + 1, $y);\n\t$coordinates[] = array($x + 1, $y + 1);\n\treturn $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array();\n    $coordinates[] = array($x, $y);\n    $coordinates[] = array($x + 1, $y);\n    $coordinates[] = array($x - 1, $y);\n    $coordinates[] = array($x, $y + 1);\n    $coordinates[] = array($x, $y - 1);\n    $coordinates[] = array($x + 1, $y + 1);\n    $coordinates[] = array($x - 1, $y - 1);\n    $coordinates[] = array($x + 1, $y - 1);\n    $coordinates[] = array($x - 1, $y + 1);\n    return $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array(\n        array($x - 1, $y - 1),\n        array($x - 1, $y),\n        array($x - 1, $y + 1),\n        array($x, $y - 1),\n        array($x, $y + 1),\n        array($x + 1, $y - 1),\n        array($x + 1, $y),\n        array($x + 1, $y + 1),\n    );\n    return $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array();\n    $coordinates[] = array($x+1, $y);\n    $coordinates[] = array($x-1, $y);\n    $coordinates[] = array($x, $y+1);\n    $coordinates[] = array($x, $y-1);\n    return $coordinates;\n}\n\n$test_tup = array(1, 1);\n$coordinates = get_coordinates($test_tup);\nprint_r($coordinates);",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array(\n        array($x, $y - 1),\n        array($x, $y + 1),\n        array($x - 1, $y),\n        array($x + 1, $y),\n        array($x - 1, $y - 1),\n        array($x + 1, $y - 1),\n        array($x - 1, $y + 1),\n        array($x + 1, $y + 1),\n    );\n    return $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array();\n    $coordinates[] = array($x, $y);\n    $coordinates[] = array($x, $y + 1);\n    $coordinates[] = array($x, $y - 1);\n    $coordinates[] = array($x + 1, $y);\n    $coordinates[] = array($x + 1, $y + 1);\n    $coordinates[] = array($x + 1, $y - 1);\n    $coordinates[] = array($x - 1, $y);\n    $coordinates[] = array($x - 1, $y + 1);\n    $coordinates[] = array($x - 1, $y - 1);\n    return $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array(\n        array($x-1, $y-1),\n        array($x-1, $y),\n        array($x-1, $y+1),\n        array($x, $y-1),\n        array($x, $y+1),\n        array($x+1, $y-1),\n        array($x+1, $y),\n        array($x+1, $y+1),\n    );\n    return $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $result = array();\n    $result[] = array($x, $y + 1);\n    $result[] = array($x, $y - 1);\n    $result[] = array($x + 1, $y);\n    $result[] = array($x - 1, $y);\n    return $result;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array(\n        array($x, $y + 1),\n        array($x, $y - 1),\n        array($x + 1, $y),\n        array($x - 1, $y),\n        array($x + 1, $y + 1),\n        array($x - 1, $y - 1),\n        array($x + 1, $y - 1),\n        array($x - 1, $y + 1)\n    );\n    return $coordinates;\n}\n",
    "    $x = $test_tup[0];\n    $y = $test_tup[1];\n    $coordinates = array();\n    $coordinates[] = array($x, $y + 1);\n    $coordinates[] = array($x, $y - 1);\n    $coordinates[] = array($x + 1, $y);\n    $coordinates[] = array($x - 1, $y);\n    return $coordinates;\n}\n"
  ]
}