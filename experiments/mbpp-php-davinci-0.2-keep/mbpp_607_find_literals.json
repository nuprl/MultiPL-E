{
  "name": "mbpp_607_find_literals",
  "language": "php",
  "prompt": "<?php\n// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfunction find_literals($text, $pattern) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return find_literals(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\") !== array(\"fox\", 16, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Its been a very crazy procedure right\", \"crazy\") !== array(\"crazy\", 16, 21)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hardest choices required strongest will\", \"will\") !== array(\"will\", 35, 39)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return $matches[0];\n    } else {\n        return false;\n    }\n}\n",
    "  $result = array();\n  $start = 0;\n  $end = 0;\n  $match = \"\";\n  $len = strlen($text);\n  $i = 0;\n  while ($i < $len) {\n    if ($text[$i] == $pattern[0]) {\n      $start = $i;\n      $end = $i;\n      $match = $pattern[0];\n      $j = 1;\n      while ($j < strlen($pattern)) {\n        if ($text[$i+$j] == $pattern[$j]) {\n          $match .= $pattern[$j];\n          $end = $i+$j;\n        } else {\n          break;\n        }\n        $j++;\n      }\n      if ($match == $pattern) {\n        $result[] = array(\n          'match' => $match,\n          'start' => $start,\n          'end' => $end\n        );\n      }\n    }\n    $i++;\n  }\n  return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match_count === false) {\n        return false;\n    }\n    $result = array();\n    for ($i = 0; $i < $match_count; $i++) {\n        $result[] = array(\n            'match' => $matches[0][$i][0],\n            'start' => $matches[0][$i][1],\n            'end' => $matches[0][$i][1] + strlen($matches[0][$i][0])\n        );\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern = preg_quote($pattern, '/');\n    $pattern = str_replace('\\*', '.*', $pattern);\n    $pattern = str_replace('\\?', '.', $pattern);\n    $pattern = '/' . $pattern . '/';\n    if (preg_match($pattern, $text, $matches)) {\n        $match = $matches[0];\n        $start = strpos($text, $match);\n        $end = $start + strlen($match) - 1;\n    }\n    $result['match'] = $match;\n    $result['start'] = $start;\n    $result['end'] = $end;\n    return $result;\n}\n\n$text = 'This is a test';\n$pattern = '*test';\n$result = find_literals($text, $pattern);\necho $result['match'] . ' ' . $result['start'] . ' ' . $result['end'] . \"\\n\";\n$pattern = '*is*';\n$result = find_literals($text, $pattern);\necho $result['match'] . ' ' . $result['start'] . ' ' . $result['end'] . \"\\n\";\n$pattern = '*is*a';\n$result = find_literals($text, $pattern);\necho $result['match'] . ' ' . $result['start'] . ' ' . $result['end'] . \"\\n\";\n$pattern = '*is*a*';\n$result = find_literals($text, $pattern);\necho $result['match'] . ' ' . $result['start'] . ' ' . $result['end'] . \"\\n\";\n$pattern = '*is*a*t';\n$result = find_literals($text, $pattern);\necho $result['match'] . ' ' . $result['start'] . ' ' . $result['end'] . \"\\n\";\n$pattern = '*is*a*te';\n$result = find_literals($text, $pattern);\necho $result['match'] . ' ' . $result['start']",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $match = $matches[0];\n        $start = $match[1];\n        $end = $start + strlen($match[0]);\n        return array($match[0], $start, $end);\n    }\n    return array(null, null, null);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return $matches[0];\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'The quick brown fox jumps over the lazy dog';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/brown/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/cat/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return false;\n}\n",
    "  $result = array();\n  $matches = array();\n  $match_count = preg_match_all($pattern, $text, $matches);\n  if ($match_count > 0) {\n    $result['matches'] = $matches[0];\n    $result['start_index'] = $matches[0][0];\n    $result['end_index'] = $matches[0][$match_count - 1];\n  }\n  return $result;\n}\n\n$text = \"This is a test string. It has a few words in it.\";\n$pattern = \"/[a-z]+/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = array();\n    $result = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($result === false) {\n        return false;\n    }\n    foreach ($matches[0] as $match) {\n        $match['start'] = $match[1];\n        $match['end'] = $match[1] + strlen($match[0]);\n        $match['literal'] = $match[0];\n        $match['text'] = $text;\n        $match['pattern'] = $pattern;\n        $match['result'] = $result;\n        $match['matches'] = $matches;\n        $match['match'] = $match;\n        $match['function'] = __FUNCTION__;\n        $match['file'] = __FILE__;\n        $match['line'] = __LINE__;\n        $match['class'] = __CLASS__;\n        $match['method'] = __METHOD__;\n        $match['namespace'] = __NAMESPACE__;\n        $match['trait'] = __TRAIT__;\n        $match['doc'] = __DOC__;\n        $match['dir'] = __DIR__;\n        $match['file'] = __FILE__;\n        $match['line'] = __LINE__;\n        $match['function'] = __FUNCTION__;\n        $match['class'] = __CLASS__;\n        $match['trait'] = __TRAIT__;\n        $match['method'] = __METHOD__;\n        $match['namespace'] = __NAMESPACE__;\n        $match['doc'] = __DOC__;\n        $match['dir'] = __DIR__;\n        $match['file'] = __FILE__;\n        $match['line'] = __LINE__;\n        $match['function'] = __FUNCTION__;\n        $match['class'] = __CLASS__;\n        $match['trait'] = __TRAIT__;\n        $match['method'] = __METHOD__;\n        $match['namespace'] = __NAMESPACE__;\n       ",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => strpos($text, $matches[0]),\n      'end' => strpos($text, $matches[0]) + strlen($matches[0])\n    );\n  }\n  return false;\n}\n",
    "    $matches = array();\n    $offset = 0;\n    while (preg_match($pattern, $text, $match, PREG_OFFSET_CAPTURE, $offset)) {\n        $matches[] = $match[0][0];\n        $offset = $match[0][1] + 1;\n    }\n    return $matches;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/[a-z]+/\";\n\n$matches = find_literals($text, $pattern);\nprint_r($matches);",
    "    $result = [];\n    $start = 0;\n    $end = 0;\n    $length = strlen($text);\n    for ($i = 0; $i < $length; $i++) {\n        $char = $text[$i];\n        if ($char === $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $pattern_length = strlen($pattern);\n            for ($j = 1; $j < $pattern_length; $j++) {\n                if ($text[$i + $j] === $pattern[$j]) {\n                    $end = $i + $j;\n                } else {\n                    break;\n                }\n            }\n            if ($end - $start === $pattern_length - 1) {\n                $result[] = [\n                    'start' => $start,\n                    'end' => $end,\n                    'substring' => substr($text, $start, $end - $start + 1)\n                ];\n            }\n        }\n    }\n    return $result;\n}\n\n$text = 'This is a test string';\n$pattern = 'is';\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $length = strlen($text);\n    for ($i = 0; $i < $length; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $match = $text[$i];\n            $end = $i;\n            for ($j = 1; $j < strlen($pattern); $j++) {\n                if ($text[$i + $j] == $pattern[$j]) {\n                    $match .= $text[$i + $j];\n                    $end++;\n                } else {\n                    break;\n                }\n            }\n            if (strlen($match) == strlen($pattern)) {\n                $matches[] = array($match, $start, $end);\n            }\n        }\n    }\n    return $matches;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $length = strlen($text);\n    $pattern_length = strlen($pattern);\n    while ($start < $length) {\n        $end = $start + $pattern_length;\n        if ($end > $length) {\n            break;\n        }\n        $substring = substr($text, $start, $pattern_length);\n        if ($substring == $pattern) {\n            $result[] = array($substring, $start, $end);\n        }\n        $start++;\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $start = $matches[0][1];\n        $end = $start + strlen($matches[0][0]);\n    }\n    return array($match, $matches[0][0], $start, $end);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\nif ($match) {\n    echo 'Found \"' . $match['match'] . '\" in \"' . $text . '\" at ' . $match['start'] . ':' . $match['end'] . PHP_EOL;\n} else {\n    echo 'No match found' . PHP_EOL;\n}\n\n$pattern = '/slow/';\n$match = find_literals($text, $pattern);\nif ($match) {\n    echo 'Found \"' . $match['match'] . '\" in \"' . $text . '\" at ' . $match['start'] . ':' . $match['end'] . PHP_EOL;\n} else {\n    echo 'No match found' . PHP_EOL;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = [];\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        $start = strpos($text, $matches[0]);\n        $end = $start + strlen($matches[0]);\n        return [$matches[0], $start, $end];\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $result = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($result === 1) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return null;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $match = preg_match($pattern, $text, $result);\n    if ($match) {\n        return array(\n            'match' => $result[0],\n            'start' => $result[1],\n            'end' => $result[2]\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]{5}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]{5,}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]{5,10}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]{5,10}?/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]{5,10}?/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]{5,10}?/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]{5,10}?/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]{5,10}?/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]{5,10}?/';\n$result = find_literals($text,",
    "    $match = array();\n    $match['start'] = strpos($text, $pattern);\n    $match['end'] = $match['start'] + strlen($pattern);\n    $match['match'] = substr($text, $match['start'], $match['end']);\n    return $match;\n}\n\n$text = \"Hello world!\";\n$pattern = \"world\";\n$match = find_literals($text, $pattern);\necho \"Match: \" . $match['match'] . \"\\n\";\necho \"Start: \" . $match['start'] . \"\\n\";\necho \"End: \" . $match['end'] . \"\\n\";\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $result = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($result === false) {\n        return false;\n    }\n    return $matches;\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"/quick|brown|lazy/\";\n$matches = find_literals($text, $pattern);\n\nif ($matches === false) {\n    echo \"Error: \" . preg_last_error() . \"\\n\";\n} else {\n    foreach ($matches[0] as $match) {\n        echo \"Found '$match[0]' at $match[1]\\n\";\n    }\n}",
    "    $result = array();\n    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE, $start);\n    while ($match) {\n        $start = $matches[0][1];\n        $end = $start + strlen($matches[0][0]);\n        $result[] = array($matches[0][0], $start, $end);\n        $start = $end;\n        $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE, $start);\n    }\n    return $result;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/[a-z]+/\";\n$result = find_literals($text, $pattern);\nprint_r($result);",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return $matches[0];\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\necho \"Match: {$match['match']}\\n\";\necho \"Start: {$match['start']}\\n\";\necho \"End: {$match['end']}\\n\";\n\n$pattern = '/slow/';\n$match = find_literals($text, $pattern);\necho \"Match: {$match['match']}\\n\";\necho \"Start: {$match['start']}\\n\";\necho \"End: {$match['end']}\\n\";\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $match_text = $matches[0][0];\n        $match_start = $matches[0][1];\n        $match_end = $match_start + strlen($match_text);\n        return array($match_text, $match_start, $match_end);\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"/quick/\";\n$result = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Match: {$result['match']}\\n\";\necho \"Start Index: {$result['start']}\\n\";\necho \"End Index: {$result['end']}\\n\";\n\n$pattern = \"/slow/\";\n$result = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Match: {$result['match']}\\n\";\necho \"Start Index: {$result['start']}\\n\";\necho \"End Index: {$result['end']}\\n\";\n",
    "    $matches = array();\n    $result = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($result === false) {\n        return false;\n    }\n    $matches = $matches[0];\n    $results = array();\n    foreach ($matches as $match) {\n        $results[] = array(\n            'match' => $match[0],\n            'start' => $match[1],\n            'end' => $match[1] + strlen($match[0]) - 1\n        );\n    }\n    return $results;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/[a-z]+/';\n$results = find_literals($text, $pattern);\nvar_dump($results);\n",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] === $pattern[0]) {\n            $match = $text[$i];\n            $start = $i;\n            for ($j = 1; $j < $pattern_length; $j++) {\n                if ($text[$i + $j] === $pattern[$j]) {\n                    $match .= $text[$i + $j];\n                } else {\n                    break;\n                }\n            }\n            if ($match === $pattern) {\n                $end = $i + $j;\n                $matches[] = [$match, $start, $end];\n            }\n        }\n    }\n    return $matches;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = 'fox';\n$matches = find_literals($text, $pattern);\n\nforeach ($matches as $match) {\n    echo \"Match: $match[0]\\n\";\n    echo \"Start: $match[1]\\n\";\n    echo \"End: $match[2]\\n\";\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "\t$result = array();\n\t$start = 0;\n\twhile ($start < strlen($text)) {\n\t\t$match = array();\n\t\tif (preg_match($pattern, $text, $match, PREG_OFFSET_CAPTURE, $start)) {\n\t\t\t$result[] = array(\n\t\t\t\t'start' => $match[0][1],\n\t\t\t\t'end' => $match[0][1] + strlen($match[0][0]),\n\t\t\t\t'literal' => $match[0][0],\n\t\t\t);\n\t\t\t$start = $match[0][1] + strlen($match[0][0]);\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\necho $result['match'] . '<br>';\necho $result['start'] . '<br>';\necho $result['end'] . '<br>';\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $length = strlen($text);\n    for ($i = 0; $i < $length; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $match = $text[$i];\n            for ($j = 1; $j < strlen($pattern); $j++) {\n                if ($text[$i + $j] == $pattern[$j]) {\n                    $end = $i + $j;\n                    $match .= $text[$i + $j];\n                } else {\n                    break;\n                }\n            }\n            if ($match == $pattern) {\n                $matches[] = array($match, $start, $end);\n            }\n        }\n    }\n    return $matches;\n}\n\n$text = \"This is a test string\";\n$pattern = \"test\";\n$matches = find_literals($text, $pattern);\nforeach ($matches as $match) {\n    echo \"Match: \" . $match[0] . \" Start: \" . $match[1] . \" End: \" . $match[2] . \"\\n\";\n}",
    "    $matches = array();\n    $match = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    for ($i = 0; $i < $match_count; $i++) {\n        $match[] = array(\n            'match' => $matches[0][$i][0],\n            'start' => $matches[0][$i][1],\n            'end' => $matches[0][$i][1] + strlen($matches[0][$i][0])\n        );\n    }\n    return $match;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/[a-z]{5}/';\n$matches = find_literals($text, $pattern);\n\necho '<pre>';\nprint_r($matches);\necho '</pre>';",
    "    $result = array();\n    $matches = array();\n    $match_count = preg_match_all($pattern, $text, $matches);\n    if ($match_count > 0) {\n        $result['matches'] = $matches[0];\n        $result['start_index'] = $matches[0][0];\n        $result['end_index'] = $matches[0][$match_count - 1];\n    }\n    return $result;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/[a-z]{5}/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = preg_match($pattern, $text, $result, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $start = $result[0][1];\n        $end = $start + strlen($result[0][0]);\n    }\n    return array($result[0][0], $start, $end);\n}\n",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] === $pattern[0]) {\n            $start = $i;\n            $end = $i + $pattern_length - 1;\n            $match = substr($text, $start, $pattern_length);\n            if ($match === $pattern) {\n                $matches[] = [\n                    'match' => $match,\n                    'start' => $start,\n                    'end' => $end,\n                ];\n            }\n        }\n    }\n    return $matches;\n}\n\n$text = 'This is a test string';\n$pattern = 'is';\n$matches = find_literals($text, $pattern);\nprint_r($matches);",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\necho \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\";\n",
    "    $start = 0;\n    $end = 0;\n    $match = '';\n    $found = false;\n    while(!$found) {\n        $start = strpos($text, $pattern, $start);\n        if($start === false) {\n            break;\n        }\n        $end = $start + strlen($pattern);\n        $match = substr($text, $start, $end - $start);\n        $found = true;\n    }\n    return array($match, $start, $end);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $match = array();\n    $match['text'] = '';\n    $match['start'] = -1;\n    $match['end'] = -1;\n\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $match['start'] = $i;\n            $match['end'] = $i + $pattern_length - 1;\n            $match['text'] = substr($text, $i, $pattern_length);\n            break;\n        }\n    }\n\n    return $match;\n}\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match === false) {\n    return false;\n  }\n  if ($match === 0) {\n    return null;\n  }\n  return array(\n    'match' => $matches[0],\n    'start' => strpos($text, $matches[0]),\n    'end' => strpos($text, $matches[0]) + strlen($matches[0]) - 1,\n  );\n}\n",
    "    $result = array();\n    $match = preg_match($pattern, $text, $result);\n    if ($match) {\n        $start = strpos($text, $result[0]);\n        $end = $start + strlen($result[0]);\n        return array($result[0], $start, $end);\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    while (preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE, $start)) {\n        $match = $matches[0][0];\n        $start = $matches[0][1];\n        $end = $start + strlen($match);\n        echo \"Found '$match' at $start, $end\\n\";\n        $start = $end;\n    }\n}\n",
    "  $result = array();\n  $start = 0;\n  $end = 0;\n  $match = array();\n  $pattern = \"/$pattern/\";\n  $match = preg_match($pattern, $text, $result, PREG_OFFSET_CAPTURE);\n  if ($match) {\n    $start = $result[0][1];\n    $end = $start + strlen($result[0][0]);\n    $result = array($result[0][0], $start, $end);\n  }\n  else {\n    $result = array(null, null, null);\n  }\n  return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    else {\n        return false;\n    }\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i + $pattern_length;\n            $match = substr($text, $start, $pattern_length);\n            if ($match == $pattern) {\n                $result['start'] = $start;\n                $result['end'] = $end;\n                $result['match'] = $match;\n                return $result;\n            }\n        }\n    }\n    return $result;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = 'fox';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n",
    "    $result = array();\n    $matches = array();\n    $pattern = str_replace('/', '\\/', $pattern);\n    $pattern = str_replace('.', '\\.', $pattern);\n    $pattern = str_replace('*', '\\*', $pattern);\n    $pattern = str_replace('+', '\\+', $pattern);\n    $pattern = str_replace('?', '\\?', $pattern);\n    $pattern = str_replace('(', '\\(', $pattern);\n    $pattern = str_replace(')', '\\)', $pattern);\n    $pattern = str_replace('[', '\\[', $pattern);\n    $pattern = str_replace(']', '\\]', $pattern);\n    $pattern = str_replace('{', '\\{', $pattern);\n    $pattern = str_replace('}', '\\}', $pattern);\n    $pattern = str_replace('|', '\\|', $pattern);\n    $pattern = str_replace('^', '\\^', $pattern);\n    $pattern = str_replace('$', '\\$', $pattern);\n    $pattern = str_replace('\\\\', '\\\\\\\\', $pattern);\n    $pattern = str_replace(' ', '\\s', $pattern);\n    $pattern = str_replace('\\s', ' ', $pattern);\n    $pattern = str_replace('\\s', ' ', $pattern);\n    $pattern = str_replace('\\s', ' ', $pattern);\n    $pattern = str_replace('\\s', ' ', $pattern);\n    $pattern = str_replace('\\s', ' ', $pattern);\n    $pattern = str_replace('\\s', ' ', $pattern);\n    $pattern = str_replace('\\s', ' ', $pattern);\n    $pattern = str_replace('\\s', ' ', $pattern);\n    $pattern = str_replace('\\s', ' ', $pattern);\n    $pattern = str_replace('\\s', ' ', $pattern);\n    $pattern = str_replace('\\s', ' ', $pattern);\n    $pattern = str_replace('\\s', ' ', $pattern);\n    $pattern = str_replace('",
    "  $matches = array();\n  $start = 0;\n  $end = 0;\n  $match = \"\";\n  $found = false;\n  $i = 0;\n  $j = 0;\n  $k = 0;\n  $l = 0;\n  $m = 0;\n  $n = 0;\n  $o = 0;\n  $p = 0;\n  $q = 0;\n  $r = 0;\n  $s = 0;\n  $t = 0;\n  $u = 0;\n  $v = 0;\n  $w = 0;\n  $x = 0;\n  $y = 0;\n  $z = 0;\n  $A = 0;\n  $B = 0;\n  $C = 0;\n  $D = 0;\n  $E = 0;\n  $F = 0;\n  $G = 0;\n  $H = 0;\n  $I = 0;\n  $J = 0;\n  $K = 0;\n  $L = 0;\n  $M = 0;\n  $N = 0;\n  $O = 0;\n  $P = 0;\n  $Q = 0;\n  $R = 0;\n  $S = 0;\n  $T = 0;\n  $U = 0;\n  $V = 0;\n  $W = 0;\n  $X = 0;\n  $Y = 0;\n  $Z = 0;\n  $a = 0;\n  $b = 0;\n  $c = 0;\n  $d = 0;\n  $e = 0;\n  $f = 0;\n  $g = 0;\n  $h = 0;\n  $i = 0;\n  $j = 0;\n  $k = 0;\n  $l = 0;\n  $m = 0;\n  $n = 0;\n  $o = 0;\n  $p = 0;\n  $q = 0;\n  $r = 0;\n  $s = 0;\n  $t = 0;\n  $u = 0;\n  $v = 0;\n  $w = 0;\n  $x = 0;",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    } else {\n        return array(null, null, null);\n    }\n}\n",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $len = strlen($text);\n    $i = 0;\n    while ($i < $len) {\n        $char = $text[$i];\n        if ($char == $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $j = 1;\n            $k = $i + 1;\n            while ($j < strlen($pattern)) {\n                if ($pattern[$j] == $text[$k]) {\n                    $end = $k;\n                    $j++;\n                    $k++;\n                } else {\n                    break;\n                }\n            }\n            if ($j == strlen($pattern)) {\n                $matches[] = [$start, $end];\n            }\n        }\n        $i++;\n    }\n    return $matches;\n}\n\n$text = \"This is a test string\";\n$pattern = \"test\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => strpos($text, $matches[0]),\n      'end' => strpos($text, $matches[0]) + strlen($matches[0])\n    );\n  }\n  return null;\n}\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => $matches[1],\n      'end' => $matches[2],\n    );\n  }\n  return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"/quick/\";\n$match = find_literals($text, $pattern);\necho \"Match: \" . $match['match'] . \"\\n\";\necho \"Start: \" . $match['start'] . \"\\n\";\necho \"End: \" . $match['end'] . \"\\n\";\n\n$pattern = \"/slow/\";\n$match = find_literals($text, $pattern);\nif ($match) {\n    echo \"Match: \" . $match['match'] . \"\\n\";\n    echo \"Start: \" . $match['start'] . \"\\n\";\n    echo \"End: \" . $match['end'] . \"\\n\";\n} else {\n    echo \"No match found.\\n\";\n}",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        $start = strpos($text, $matches[0]);\n        $end = $start + strlen($matches[0]) - 1;\n        return array($matches[0], $start, $end);\n    }\n    return false;\n}\n",
    "\t$result = array();\n\t$matches = array();\n\t$match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n\tif ($match_count > 0) {\n\t\tforeach ($matches[0] as $match) {\n\t\t\t$result[] = array(\n\t\t\t\t\"text\" => $match[0],\n\t\t\t\t\"start\" => $match[1],\n\t\t\t\t\"end\" => $match[1] + strlen($match[0])\n\t\t\t);\n\t\t}\n\t}\n\treturn $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return array(null, null, null);\n}\n",
    "    $result = array();\n    $matches = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match_count > 0) {\n        for ($i = 0; $i < $match_count; $i++) {\n            $result[$i] = array(\n                'match' => $matches[0][$i][0],\n                'start' => $matches[0][$i][1],\n                'end' => $matches[0][$i][1] + strlen($matches[0][$i][0])\n            );\n        }\n    }\n    return $result;\n}\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => strpos($text, $matches[0]),\n      'end' => strpos($text, $matches[0]) + strlen($matches[0])\n    );\n  }\n  return false;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/slow/';\n$result = find_literals($text, $pattern);\nprint_r($result);",
    "    $result = array();\n    $match = preg_match($pattern, $text, $result);\n    if ($match) {\n        return array(\n            'match' => $result[0],\n            'start' => $result[1],\n            'end' => $result[2],\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[A-Z]\\w+/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\d+/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\s+/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\s+/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\s+/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\s+/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\s+/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\s+/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\s+/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\s+/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\s+/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\s+/';\n$result = find_literals($text, $pattern);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $len = strlen($text);\n    for ($i = 0; $i < $len; $i++) {\n        if ($text[$i] === $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $match = $text[$i];\n            for ($j = 1; $j < strlen($pattern); $j++) {\n                if ($text[$i + $j] === $pattern[$j]) {\n                    $end++;\n                    $match .= $text[$i + $j];\n                } else {\n                    break;\n                }\n            }\n            if ($match === $pattern) {\n                $matches[] = [\n                    'match' => $match,\n                    'start' => $start,\n                    'end' => $end\n                ];\n            }\n        }\n    }\n    return $matches;\n}\n\n$text = \"This is a test string\";\n$pattern = \"is\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n",
    "    $matches = array();\n    $start = 0;\n    while (preg_match($pattern, $text, $match, PREG_OFFSET_CAPTURE, $start)) {\n        $matches[] = array(\n            'match' => $match[0][0],\n            'start' => $match[0][1],\n            'end' => $match[0][1] + strlen($match[0][0]) - 1\n        );\n        $start = $match[0][1] + strlen($match[0][0]);\n    }\n    return $matches;\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i + $pattern_length;\n            $match = substr($text, $start, $pattern_length);\n            if ($match == $pattern) {\n                $matches[] = array('match' => $match, 'start' => $start, 'end' => $end);\n            }\n        }\n    }\n    return $matches;\n}\n",
    "    $match = array();\n    $start = 0;\n    $end = 0;\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $start = $matches[0][1];\n        $end = $start + strlen($matches[0][0]);\n    }\n    return array($match, $start, $end);\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"/quick/\";\nlist($match, $start, $end) = find_literals($text, $pattern);\nif ($match) {\n    echo \"Found '$match' at $start to $end\\n\";\n} else {\n    echo \"No match found\\n\";\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $found = false;\n    for ($i = 0; $i < strlen($text); $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $match = $text[$i];\n            $found = true;\n            for ($j = 1; $j < strlen($pattern); $j++) {\n                if ($text[$i + $j] == $pattern[$j]) {\n                    $end++;\n                    $match .= $text[$i + $j];\n                } else {\n                    $found = false;\n                    break;\n                }\n            }\n            if ($found) {\n                $matches[] = array(\"match\" => $match, \"start\" => $start, \"end\" => $end);\n            }\n        }\n    }\n    return $matches;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        $start = strpos($text, $matches[0]);\n        $end = $start + strlen($matches[0]);\n        return array($matches[0], $start, $end);\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return $matches[0];\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $len = strlen($text);\n    for ($i = 0; $i < $len; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $match = $text[$i];\n            for ($j = 1; $j < strlen($pattern); $j++) {\n                if ($text[$i + $j] == $pattern[$j]) {\n                    $end++;\n                    $match .= $text[$i + $j];\n                } else {\n                    break;\n                }\n            }\n            if (strlen($match) == strlen($pattern)) {\n                $matches[] = array($match, $start, $end);\n            }\n        }\n    }\n    return $matches;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog\";\n$pattern = \"fox\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = array();\n    $pattern = '/'.$pattern.'/';\n    $match = preg_match($pattern, $text, $result, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $start = $result[0][1];\n        $end = $start + strlen($result[0][0]);\n    }\n    return array($result[0][0], $start, $end);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return null;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/slow/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $i = 0;\n    while ($i < strlen($text)) {\n        $j = 0;\n        while ($j < strlen($pattern)) {\n            if ($text[$i + $j] == $pattern[$j]) {\n                $match .= $text[$i + $j];\n                $j++;\n            } else {\n                break;\n            }\n        }\n        if ($j == strlen($pattern)) {\n            $end = $i + $j;\n            $result[] = array(\"match\" => $match, \"start\" => $start, \"end\" => $end);\n            $start = $end;\n            $match = \"\";\n        }\n        $i++;\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return null;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $result = array();\n    $start = 0;\n    while (true) {\n        $start = strpos($text, $pattern, $start);\n        if ($start === false) {\n            break;\n        }\n        $end = $start + strlen($pattern);\n        $result[] = array($start, $end, substr($text, $start, $end - $start));\n        $start = $end;\n    }\n    return $result;\n}\n",
    "    $match = array();\n    $match['text'] = '';\n    $match['start'] = -1;\n    $match['end'] = -1;\n    $match['length'] = 0;\n    $match['pattern'] = $pattern;\n\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n\n    for ($i = 0; $i < $text_length; $i++) {\n        $match_found = true;\n        for ($j = 0; $j < $pattern_length; $j++) {\n            if ($text[$i + $j] != $pattern[$j]) {\n                $match_found = false;\n                break;\n            }\n        }\n        if ($match_found) {\n            $match['text'] = $pattern;\n            $match['start'] = $i;\n            $match['end'] = $i + $pattern_length - 1;\n            $match['length'] = $pattern_length;\n            break;\n        }\n    }\n\n    return $match;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i + $pattern_length;\n            $match = substr($text, $start, $pattern_length);\n            if ($match == $pattern) {\n                $matches[] = array(\"match\" => $match, \"start\" => $start, \"end\" => $end);\n            }\n        }\n    }\n    return $matches;\n}\n",
    "    $result = [];\n    $match = preg_match($pattern, $text, $result);\n    if ($match) {\n        return [$result[0], $result[1], $result[2]];\n    } else {\n        return false;\n    }\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/(quick|brown|lazy)/\";\n$result = find_literals($text, $pattern);\necho $result[0] . \" \" . $result[1] . \" \" . $result[2] . \"\\n\";\n",
    "  $result = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n  if ($result) {\n    return [$matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]) - 1];\n  } else {\n    return false;\n  }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = array();\n    if (preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE)) {\n        foreach ($matches[0] as $m) {\n            $match[] = array(\n                'substring' => $m[0],\n                'start' => $m[1],\n                'end' => $m[1] + strlen($m[0])\n            );\n        }\n    }\n    return $match;\n}\n\n$text = 'This is a test. This is a programming test. This is a programming test in PHP.';\n$pattern = '/is/';\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/quick/\";\n$match = find_literals($text, $pattern);\necho \"Match: \" . $match['match'] . \"\\n\";\necho \"Start: \" . $match['start'] . \"\\n\";\necho \"End: \" . $match['end'] . \"\\n\";\n\n$pattern = \"/^The/\";\n$match = find_literals($text, $pattern);\necho \"Match: \" . $match['match'] . \"\\n\";\necho \"Start: \" . $match['start'] . \"\\n\";\necho \"End: \" . $match['end'] . \"\\n\";\n\n$pattern = \"/dog.$/\";\n$match = find_literals($text, $pattern);\necho \"Match: \" . $match['match'] . \"\\n\";\necho \"Start: \" . $match['start'] . \"\\n\";\necho \"End: \" . $match['end'] . \"\\n\";\n\n$pattern = \"/[a-z]/\";\n$match = find_literals($text, $pattern);\necho \"Match: \" . $match['match'] . \"\\n\";\necho \"Start: \" . $match['start'] . \"\\n\";\necho \"End: \" . $match['end'] . \"\\n\";\n\n$pattern = \"/[A-Z]/\";\n$match = find_literals($text, $pattern);\necho \"Match: \" . $match['match'] . \"\\n\";\necho \"Start: \" . $match['start'] . \"\\n\";\necho \"End: \" . $match['end'] . \"\\n\";\n\n$pattern = \"/[0-9]/\";\n$match",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return null;\n}\n",
    "    $matches = array();\n    $match = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match_count > 0) {\n        $match['text'] = $matches[0][0][0];\n        $match['start'] = $matches[0][0][1];\n        $match['end'] = $match['start'] + strlen($match['text']) - 1;\n    } else {\n        $match['text'] = '';\n        $match['start'] = -1;\n        $match['end'] = -1;\n    }\n    return $match;\n}\n",
    "    $result = [];\n    $start = 0;\n    $end = 0;\n    $found = false;\n    for ($i = 0; $i < strlen($text); $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $found = true;\n            for ($j = 1; $j < strlen($pattern); $j++) {\n                if ($text[$i + $j] != $pattern[$j]) {\n                    $found = false;\n                    break;\n                }\n                $end++;\n            }\n            if ($found) {\n                array_push($result, [$start, $end]);\n            }\n        }\n    }\n    return $result;\n}\n\n$text = \"This is a test string\";\n$pattern = \"test\";\n$result = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Result:\\n\";\nprint_r($result);\n\necho \"\\n\\n\";\n\n$text = \"This is a test string\";\n$pattern = \"is\";\n$result = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Result:\\n\";\nprint_r($result);\n\necho \"\\n\\n\";\n\n$text = \"This is a test string\";\n$pattern = \"This\";\n$result = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Result:\\n\";\nprint_r($result);\n\necho \"\\n\\n\";\n\n$text = \"This is a test string\";\n$pattern = \"ing\";\n$result = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Result:\\n\";\nprint_r($result);\n\necho \"\\n\\n\";\n\n$text = \"This is a test string\";\n$pattern = \"is a\";\n$result = find",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/cat/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "\t$matches = array();\n\t$match = preg_match($pattern, $text, $matches);\n\tif ($match) {\n\t\treturn array(\n\t\t\t'match' => $matches[0],\n\t\t\t'start' => strpos($text, $matches[0]),\n\t\t\t'end' => strpos($text, $matches[0]) + strlen($matches[0])\n\t\t);\n\t}\n\treturn false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] === $pattern[0]) {\n            $start = $i;\n            for ($j = 0; $j < $pattern_length; $j++) {\n                if ($text[$i + $j] === $pattern[$j]) {\n                    $match .= $text[$i + $j];\n                    $end = $i + $j;\n                } else {\n                    $match = '';\n                    break;\n                }\n            }\n            if ($match !== '') {\n                $matches[] = [\n                    'match' => $match,\n                    'start' => $start,\n                    'end' => $end\n                ];\n                $match = '';\n            }\n        }\n    }\n    return $matches;\n}\n\n$text = 'This is a test string';\n$pattern = 'test';\n\n$matches = find_literals($text, $pattern);\n\nforeach ($matches as $match) {\n    echo \"Match: {$match['match']}, Start: {$match['start']}, End: {$match['end']}\\n\";\n}\n",
    "    $result = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($result) {\n        return [$matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0])];\n    } else {\n        return null;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => $matches[1],\n            'end' => $matches[2]\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\necho $result['match'] . '<br>';\necho $result['start'] . '<br>';\necho $result['end'] . '<br>';\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    $i = 0;\n    $j = 0;\n    $found = false;\n    while ($i < $text_length) {\n        if ($text[$i] == $pattern[$j]) {\n            if ($j == 0) {\n                $start = $i;\n            }\n            $match .= $text[$i];\n            $j++;\n            if ($j == $pattern_length) {\n                $end = $i;\n                $found = true;\n                break;\n            }\n        } else {\n            $j = 0;\n            $match = \"\";\n        }\n        $i++;\n    }\n    if ($found) {\n        $matches[] = $match;\n        $matches[] = $start;\n        $matches[] = $end;\n    }\n    return $matches;\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"fox\";\n$matches = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Match: $matches[0]\\n\";\necho \"Start Index: $matches[1]\\n\";\necho \"End Index: $matches[2]\\n\";\n\necho \"\\n\";\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"cat\";\n$matches = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Match: $matches[0]\\n\";\necho \"Start Index: $matches[1]\\n\";\necho \"End Index: $matches[2]\\n\";\n\necho \"\\n\";\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"The\";\n$matches = find_literals($text, $pattern);\necho",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $match_found = false;\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i + $pattern_length;\n            $match = substr($text, $start, $pattern_length);\n            if ($match == $pattern) {\n                $match_found = true;\n                break;\n            }\n        }\n    }\n    if ($match_found) {\n        $matches[] = $match;\n        $matches[] = $start;\n        $matches[] = $end;\n    }\n    return $matches;\n}\n\n$text = \"This is a test string\";\n$pattern = \"test\";\n$matches = find_literals($text, $pattern);\nif (count($matches) > 0) {\n    echo \"Matching substring: \" . $matches[0] . \"<br>\";\n    echo \"Start index: \" . $matches[1] . \"<br>\";\n    echo \"End index: \" . $matches[2] . \"<br>\";\n} else {\n    echo \"No match found\";\n}",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\necho $result['match'] . '<br>';\necho $result['start'] . '<br>';\necho $result['end'] . '<br>';\n\n$pattern = '/cat/';\n$result = find_literals($text, $pattern);\necho $result['match'] . '<br>';\necho $result['start'] . '<br>';\necho $result['end'] . '<br>';\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return null;\n}\n",
    "    $result = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($result) {\n        return [$matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0])];\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $matches = array();\n    preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    foreach ($matches[0] as $match) {\n        $result[] = array(\n            'match' => $match[0],\n            'start' => $match[1],\n            'end' => $match[1] + strlen($match[0])\n        );\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return null;\n}\n",
    "\t$result = array();\n\t$start = 0;\n\t$end = 0;\n\t$match = \"\";\n\t$pattern_length = strlen($pattern);\n\t$text_length = strlen($text);\n\tfor ($i = 0; $i < $text_length; $i++) {\n\t\t$match = \"\";\n\t\t$start = $i;\n\t\tfor ($j = 0; $j < $pattern_length; $j++) {\n\t\t\tif ($text[$i] == $pattern[$j]) {\n\t\t\t\t$match .= $text[$i];\n\t\t\t\t$i++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($match == $pattern) {\n\t\t\t$end = $i - 1;\n\t\t\t$result[] = array($match, $start, $end);\n\t\t}\n\t}\n\treturn $result;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"fox\";\n$result = find_literals($text, $pattern);\necho \"Text: $text<br>\";\necho \"Pattern: $pattern<br>\";\necho \"Result:<br>\";\nvar_dump($result);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern = '/' . $pattern . '/';\n    preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if (count($matches) > 0) {\n        $match = $matches[0][0];\n        $start = $matches[0][1];\n        $end = $start + strlen($match);\n    }\n    $result['match'] = $match;\n    $result['start'] = $start;\n    $result['end'] = $end;\n    return $result;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = 'fox';\n$result = find_literals($text, $pattern);\necho '<p>' . $result['match'] . '</p>';\necho '<p>' . $result['start'] . '</p>';\necho '<p>' . $result['end'] . '</p>';\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => strpos($text, $matches[0]),\n      'end' => strpos($text, $matches[0]) + strlen($matches[0])\n    );\n  }\n  return false;\n}\n\n$text = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  Nullam euismod, nisl eu consectetur porta, ipsum nisi tincidunt\n  nisi, eget vehicula nisl nisi eu nisl. Sed eget mauris eget\n  justo tempus imperdiet. Sed euismod, nisl eu consectetur porta,\n  ipsum nisi tincidunt nisi, eget vehicula nisl nisi eu nisl. Sed\n  eget mauris eget justo tempus imperdiet.';\n\n$pattern = '/nisl/';\n$result = find_literals($text, $pattern);\n\necho $result['match'] . '<br>';\necho $result['start'] . '<br>';\necho $result['end'] . '<br>';\n",
    "    $matches = array();\n    $match = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match_count > 0) {\n        $match['match'] = $matches[0][0][0];\n        $match['start'] = $matches[0][0][1];\n        $match['end'] = $match['start'] + strlen($match['match']) - 1;\n        return $match;\n    } else {\n        return false;\n    }\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $found = false;\n    $pattern_len = strlen($pattern);\n    $text_len = strlen($text);\n    while ($start < $text_len) {\n        $end = $start + $pattern_len;\n        if ($end > $text_len) {\n            break;\n        }\n        $match = substr($text, $start, $pattern_len);\n        if ($match === $pattern) {\n            $result[] = array($match, $start, $end);\n            $found = true;\n        }\n        $start++;\n    }\n    if (!$found) {\n        $result[] = array('', -1, -1);\n    }\n    return $result;\n}\n",
    "\t$result = array();\n\t$start = 0;\n\t$end = 0;\n\t$match = \"\";\n\t$pattern_length = strlen($pattern);\n\t$text_length = strlen($text);\n\tfor ($i = 0; $i < $text_length; $i++) {\n\t\tif ($text[$i] == $pattern[0]) {\n\t\t\t$start = $i;\n\t\t\t$end = $i + $pattern_length;\n\t\t\t$match = substr($text, $start, $end);\n\t\t\tif ($match == $pattern) {\n\t\t\t\t$result[] = array($match, $start, $end);\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"fox\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "    $matches = array();\n    $start = 0;\n    while (true) {\n        $pos = strpos($text, $pattern, $start);\n        if ($pos === false) {\n            break;\n        }\n        $matches[] = array(\n            'start' => $pos,\n            'end' => $pos + strlen($pattern),\n            'text' => $pattern,\n        );\n        $start = $pos + 1;\n    }\n    return $matches;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $match_start = 0;\n    $match_end = 0;\n    $match_found = false;\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] == $pattern[$start]) {\n            if ($start == 0) {\n                $match_start = $i;\n            }\n            $match .= $text[$i];\n            $start++;\n            if ($start == $pattern_length) {\n                $match_end = $i;\n                $match_found = true;\n                break;\n            }\n        } else {\n            $start = 0;\n            $match = '';\n        }\n    }\n    if ($match_found) {\n        $result['match'] = $match;\n        $result['start'] = $match_start;\n        $result['end'] = $match_end;\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $match = $matches[0];\n        return array(\n            'match' => $match[0],\n            'start' => $match[1],\n            'end' => $match[1] + strlen($match[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $length = strlen($text);\n    for ($i = 0; $i < $length; $i++) {\n        if ($text[$i] === $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $match = $text[$i];\n            for ($j = 1; $j < strlen($pattern); $j++) {\n                if ($text[$i + $j] === $pattern[$j]) {\n                    $end++;\n                    $match .= $text[$i + $j];\n                } else {\n                    break;\n                }\n            }\n            if ($match === $pattern) {\n                $matches[] = [\n                    'match' => $match,\n                    'start' => $start,\n                    'end' => $end,\n                ];\n            }\n        }\n    }\n    return $matches;\n}\n\n$text = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin porttitor, orci nec nonummy molestie, enim est eleifend mi, non fermentum diam nisl sit amet erat. Duis semper. Duis arcu massa, scelerisque vitae, consequat in, pretium a, enim. Pellentesque congue. Ut in risus volutpat libero pharetra tempor. Cras vestibulum bibendum augue. Praesent egestas leo in pede. Praesent blandit odio eu enim. Pellentesque sed dui ut augue blandit sodales. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Aliquam nibh. Mauris ac mauris sed pede",
    "    $result = [];\n    $matches = [];\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match_count > 0) {\n        for ($i = 0; $i < $match_count; $i++) {\n            $result[] = [\n                'match' => $matches[0][$i][0],\n                'start' => $matches[0][$i][1],\n                'end' => $matches[0][$i][1] + strlen($matches[0][$i][0])\n            ];\n        }\n    }\n    return $result;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/[a-z]{5}/';\n$matches = find_literals($text, $pattern);\nforeach ($matches as $match) {\n    echo \"Match: {$match['match']}, Start: {$match['start']}, End: {$match['end']}\\n\";\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = array();\n    $found = preg_match($pattern, $text, $match, PREG_OFFSET_CAPTURE);\n    if ($found) {\n        $start = $match[0][1];\n        $end = $start + strlen($match[0][0]);\n        $result = array(\n            'match' => $match[0][0],\n            'start' => $start,\n            'end' => $end\n        );\n    }\n    return $result;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\d{5}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\d{5}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\d{5}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\d{5}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\d{5}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\d{5}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\d{5}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\d{5}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\d{5}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/\\d{5}/';\n$result =",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match_count === false) {\n        return false;\n    } else {\n        return $matches[0];\n    }\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"/quick|fox/\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = preg_match($pattern, $text, $result, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $start = $result[0][1];\n        $end = $start + strlen($result[0][0]);\n    }\n    return array($result[0][0], $start, $end);\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/quick/\";\n$result = find_literals($text, $pattern);\necho \"Text: $text<br>\";\necho \"Pattern: $pattern<br>\";\necho \"Result: $result[0]<br>\";\necho \"Start: $result[1]<br>\";\necho \"End: $result[2]<br>\";\n\n$pattern = \"/cat/\";\n$result = find_literals($text, $pattern);\necho \"Text: $text<br>\";\necho \"Pattern: $pattern<br>\";\necho \"Result: $result[0]<br>\";\necho \"Start: $result[1]<br>\";\necho \"End: $result[2]<br>\";\n\n$pattern = \"/[a-z]/\";\n$result = find_literals($text, $pattern);\necho \"Text: $text<br>\";\necho \"Pattern: $pattern<br>\";\necho \"Result: $result[0]<br>\";\necho \"Start: $result[1]<br>\";\necho \"End: $result[2]<br>\";\n\n$pattern = \"/[a-z]+/\";\n$result = find_literals($text, $pattern);\necho \"Text: $text<br>\";\necho \"Pattern: $pattern<br>\";\necho \"Result: $result[0]<br>\";\necho \"Start: $result[1]<br>\";\necho \"End: $result[2]<br>\";\n\n$pattern = \"/[a-z]{4}/\";\n$result = find_literals($text, $pattern);\necho \"",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    } else {\n        return array(null, null, null);\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"/quick/\";\n$result = find_literals($text, $pattern);\necho \"Match: \" . $result['match'] . \"\\n\";\necho \"Start: \" . $result['start'] . \"\\n\";\necho \"End: \" . $result['end'] . \"\\n\";\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return array(null, null, null);\n}\n",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $found = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE, $start);\n    if ($found) {\n        $match = $matches[0][0];\n        $start = $matches[0][1];\n        $end = $start + strlen($match);\n    }\n    return [$match, $start, $end];\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    } else {\n        return array();\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\n\nif ($match) {\n    echo 'Found \"' . $match['match'] . '\" in \"' . $text . '\" from ' . $match['start'] .\n        ' to ' . $match['end'];\n} else {\n    echo 'No match found';\n}\n",
    "    $matches = array();\n    $match = array();\n    $start = 0;\n    $end = 0;\n    $match_count = 0;\n    $match_index = 0;\n    $match_length = 0;\n    $match_text = '';\n    $match_start = 0;\n    $match_end = 0;\n    $match_string = '';\n    $match_string_length = 0;\n    $match_string_index = 0;\n    $match_string_start = 0;\n    $match_string_end = 0;\n    $match_string_text = '';\n    $match_string_text_length = 0;\n    $match_string_text_index = 0;\n    $match_string_text_start = 0;\n    $match_string_text_end = 0;\n    $match_string_text_start_index = 0;\n    $match_string_text_end_index = 0;\n    $match_string_text_start_index_length = 0;\n    $match_string_text_end_index_length = 0;\n    $match_string_text_start_index_length_start = 0;\n    $match_string_text_end_index_length_start = 0;\n    $match_string_text_start_index_length_start_end = 0;\n    $match_string_text_end_index_length_start_end = 0;\n    $match_string_text_start_index_length_start_end_text = '';\n    $match_string_text_end_index_length_start_end_text = '';\n    $match_string_text_start_index_length_start_end_text_length = 0;\n    $match_string_text_end_index_length_start_end_text_length = 0;\n    $match_string_text_start_index_length_start_end_text_length_index = 0;\n    $match_string_text_end_index_length_start_end_text_length_index = 0;\n    $match_string_text_start_index_length_start_end_",
    "    $start = 0;\n    $end = 0;\n    $match = '';\n    $result = array();\n    while (preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE, $start)) {\n        $match = $matches[0][0];\n        $start = $matches[0][1];\n        $end = $start + strlen($match);\n        $result[] = array('match' => $match, 'start' => $start, 'end' => $end);\n        $start = $end;\n    }\n    return $result;\n}\n\n$text = 'This is a test string. This is a test string. This is a test string.';\n$pattern = '/test/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "\t$matches = array();\n\t$match = preg_match($pattern, $text, $matches);\n\tif ($match) {\n\t\treturn array(\n\t\t\t\"match\" => $matches[0],\n\t\t\t\"start\" => strpos($text, $matches[0]),\n\t\t\t\"end\" => strpos($text, $matches[0]) + strlen($matches[0])\n\t\t);\n\t} else {\n\t\treturn false;\n\t}\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $result = [];\n    $match = preg_match($pattern, $text, $result);\n    if ($match) {\n        return $result;\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found: $result[0]\\n\";\n    echo \"Start: $result[1]\\n\";\n    echo \"End: $result[2]\\n\";\n} else {\n    echo \"Not found\\n\";\n}\n\n$pattern = '/slow/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found: $result[0]\\n\";\n    echo \"Start: $result[1]\\n\";\n    echo \"End: $result[2]\\n\";\n} else {\n    echo \"Not found\\n\";\n}",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n  if ($match) {\n    $match = $matches[0];\n    return array(\n      'match' => $match[0],\n      'start' => $match[1],\n      'end' => $match[1] + strlen($match[0])\n    );\n  }\n  return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return array(null, null, null);\n}\n",
    "    $matches = array();\n    $start = 0;\n    while ($start < strlen($text)) {\n        $pos = strpos($text, $pattern, $start);\n        if ($pos === false) {\n            break;\n        }\n        $matches[] = array(\n            'match' => $pattern,\n            'start' => $pos,\n            'end' => $pos + strlen($pattern)\n        );\n        $start = $pos + strlen($pattern);\n    }\n    return $matches;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $len = strlen($text);\n    $i = 0;\n    while ($i < $len) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $match = $text[$i];\n            $j = 1;\n            while ($j < strlen($pattern)) {\n                if ($text[$i + $j] == $pattern[$j]) {\n                    $match .= $text[$i + $j];\n                    $end++;\n                } else {\n                    break;\n                }\n                $j++;\n            }\n            if ($match == $pattern) {\n                $result[] = array($match, $start, $end);\n            }\n        }\n        $i++;\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = array();\n    $start = 0;\n    $end = 0;\n    $match_count = 0;\n    $match_index = 0;\n    $match_length = 0;\n    $match_start = 0;\n    $match_end = 0;\n    $match_text = \"\";\n\n    // Find the first match\n    $match_count = preg_match($pattern, $text, $match, PREG_OFFSET_CAPTURE, $start);\n\n    // Loop through the matches\n    while ($match_count > 0) {\n        // Get the match index\n        $match_index = $match[0][1];\n\n        // Get the match length\n        $match_length = strlen($match[0][0]);\n\n        // Get the match start\n        $match_start = $match_index;\n\n        // Get the match end\n        $match_end = $match_start + $match_length - 1;\n\n        // Get the match text\n        $match_text = $match[0][0];\n\n        // Add the match to the matches array\n        $matches[] = array(\n            \"text\" => $match_text,\n            \"start\" => $match_start,\n            \"end\" => $match_end\n        );\n\n        // Set the start to the end of the match\n        $start = $match_end + 1;\n\n        // Find the next match\n        $match_count = preg_match($pattern, $text, $match, PREG_OFFSET_CAPTURE, $start);\n    }\n\n    return $matches;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $matches = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match_count > 0) {\n        $result['matches'] = $matches[0];\n        $result['match_count'] = $match_count;\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return $matches[0];\n    }\n    return false;\n}\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n  if ($match) {\n    return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n  }\n  return array(null, null, null);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $result['substring'] = $matches[0][0];\n        $result['start'] = $matches[0][1];\n        $result['end'] = $matches[0][1] + strlen($matches[0][0]);\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "\t$matches = array();\n\t$match = preg_match($pattern, $text, $matches);\n\tif ($match) {\n\t\treturn array(\n\t\t\t'match' => $matches[0],\n\t\t\t'start' => strpos($text, $matches[0]),\n\t\t\t'end' => strpos($text, $matches[0]) + strlen($matches[0])\n\t\t);\n\t}\n\treturn false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => $matches[1],\n            'end' => $matches[2]\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/the/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/dog/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/cat/';\n$result = find_literals($text, $pattern);\nprint_r($result);",
    "    $result = [];\n    $matches = [];\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match_count) {\n        foreach ($matches[0] as $match) {\n            $result[] = [\n                'text' => $match[0],\n                'start' => $match[1],\n                'end' => $match[1] + strlen($match[0])\n            ];\n        }\n    }\n    return $result;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/[a-z]+/';\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n  if ($match) {\n    return array(\n      'match' => $matches[0][0],\n      'start' => $matches[0][1],\n      'end' => $matches[0][1] + strlen($matches[0][0])\n    );\n  }\n  return false;\n}\n",
    "    $matches = [];\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return [$matches[0], $matches[1], $matches[2]];\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array($matches[0], $matches[1], $matches[2]);\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return null;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/quick/\";\n$match = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Match: \" . $match['match'] . \"\\n\";\necho \"Start: \" . $match['start'] . \"\\n\";\necho \"End: \" . $match['end'] . \"\\n\";\n\n$pattern = \"/slow/\";\n$match = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Match: \" . $match['match'] . \"\\n\";\necho \"Start: \" . $match['start'] . \"\\n\";\necho \"End: \" . $match['end'] . \"\\n\";\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $i = 0;\n    while (preg_match($pattern, $text, $match, PREG_OFFSET_CAPTURE, $i)) {\n        $matches[] = $match[0];\n        $i = $match[1] + strlen($match[0]);\n    }\n    return $matches;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/[a-z]+/\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $len = strlen($text);\n    $i = 0;\n    while ($i < $len) {\n        if ($text[$i] === $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $match = $text[$i];\n            $j = 1;\n            while ($j < strlen($pattern)) {\n                if ($text[$i + $j] === $pattern[$j]) {\n                    $match .= $text[$i + $j];\n                    $end = $i + $j;\n                    $j++;\n                } else {\n                    break;\n                }\n            }\n            if ($match === $pattern) {\n                $matches[] = [\n                    'match' => $match,\n                    'start' => $start,\n                    'end' => $end\n                ];\n            }\n        }\n        $i++;\n    }\n    return $matches;\n}\n\n$text = 'This is a test of the emergency broadcast system. This is only a test.';\n$pattern = 'test';\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return null;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\\n\";\n} else {\n    echo \"No match found.\\n\";\n}\n\n$pattern = '/slow/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\\n\";\n} else {\n    echo \"No match found.\\n\";\n}\n",
    "    $matches = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    $result = array();\n    for ($i = 0; $i < $match_count; $i++) {\n        $result[] = array(\n            'match' => $matches[0][$i][0],\n            'start' => $matches[0][$i][1],\n            'end' => $matches[0][$i][1] + strlen($matches[0][$i][0])\n        );\n    }\n    return $result;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/[a-z]+/';\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => strpos($text, $matches[0]),\n      'end' => strpos($text, $matches[0]) + strlen($matches[0])\n    );\n  } else {\n    return false;\n  }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        $match_start = strpos($text, $matches[0]);\n        $match_end = $match_start + strlen($matches[0]);\n        return array($matches[0], $match_start, $match_end);\n    }\n    return array(null, null, null);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        $start = strpos($text, $matches[0]);\n        $end = $start + strlen($matches[0]);\n        return array($matches[0], $start, $end);\n    }\n    return false;\n}\n",
    "\t$matches = array();\n\t$match = preg_match($pattern, $text, $matches);\n\tif ($match) {\n\t\treturn array(\n\t\t\t'start' => $matches[1],\n\t\t\t'end' => $matches[2],\n\t\t\t'match' => $matches[0]\n\t\t);\n\t}\n\treturn false;\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"/(quick|brown|lazy)/\";\n$result = find_literals($text, $pattern);\necho $result['match'];\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return $matches[0];\n    }\n    return false;\n}\n",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        $match = '';\n        for ($j = 0; $j < $pattern_length; $j++) {\n            if ($text[$i + $j] == $pattern[$j]) {\n                $match .= $text[$i + $j];\n            } else {\n                break;\n            }\n        }\n        if ($match == $pattern) {\n            $start = $i;\n            $end = $i + $pattern_length - 1;\n            $matches[] = [\n                'match' => $match,\n                'start' => $start,\n                'end' => $end\n            ];\n        }\n    }\n    return $matches;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = 'fox';\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return array(null, null, null);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $match = $matches[0];\n        $start = $match[1];\n        $end = $start + strlen($match[0]);\n        return array($match[0], $start, $end);\n    }\n    return array(null, null, null);\n}\n"
  ]
}