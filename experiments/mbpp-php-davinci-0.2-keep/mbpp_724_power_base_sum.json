{
  "name": "mbpp_724_power_base_sum",
  "language": "php",
  "prompt": "<?php\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum($base, $power) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return power_base_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 100) !== 115) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8, 10) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8, 15) !== 62) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 3) !== 9) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = $base ** $power;\n    $sum = 0;\n    while ($result > 0) {\n        $sum += $result % 10;\n        $result = (int)($result / 10);\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 10);",
    "    $result = pow($base, $power);\n    $sum = 0;\n    while ($result > 0) {\n        $sum += $result % 10;\n        $result = floor($result / 10);\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 100);",
    "    $sum = 0;\n    $result = pow($base, $power);\n    $result = str_split($result);\n    foreach ($result as $value) {\n        $sum += $value;\n    }\n    return $sum;\n}\necho power_base_sum(2, 100);\necho \"\\n\";\n",
    "    $result = pow($base, $power);\n    $result = str_split($result);\n    $sum = 0;\n    foreach ($result as $digit) {\n        $sum += $digit;\n    }\n    return $sum;\n}\necho power_base_sum(2, 1000);",
    "    $result = $base ** $power;\n    $result = str_split($result);\n    $sum = 0;\n    foreach ($result as $digit) {\n        $sum += $digit;\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 1000);",
    "    $result = pow($base, $power);\n    $sum = 0;\n    while ($result > 0) {\n        $sum += $result % 10;\n        $result = floor($result / 10);\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 2);\necho \"<br>\";\necho power_base_sum(2, 3);\necho \"<br>\";\necho power_base_sum(2, 4);\necho \"<br>\";\necho power_base_sum(2, 5);\necho \"<br>\";\necho power_base_sum(2, 6);\necho \"<br>\";\necho power_base_sum(2, 7);\necho \"<br>\";\necho power_base_sum(2, 8);\necho \"<br>\";\necho power_base_sum(2, 9);\necho \"<br>\";\necho power_base_sum(2, 10);\necho \"<br>\";\necho power_base_sum(2, 11);\necho \"<br>\";\necho power_base_sum(2, 12);\necho \"<br>\";\necho power_base_sum(2, 13);\necho \"<br>\";\necho power_base_sum(2, 14);\necho \"<br>\";\necho power_base_sum(2, 15);\necho \"<br>\";\necho power_base_sum(2, 16);\necho \"<br>\";\necho power_base_sum(2, 17);\necho \"<br>\";\necho power_base_sum(2, 18);\necho \"<br>\";\necho power_base_sum(2, 19);\necho \"<br>\";\necho power_base_sum(2, 20);\necho \"<br>\";\necho power_base_sum(2, 21);\necho \"<br>\";\necho power_base_sum(2, 22);\necho \"<br>\";\necho power_base_sum(2, 23);\necho \"<br>\";\necho power_base_sum(2, 24);\necho \"<br>\";\necho power_base_sum(2, 25);\necho \"<br>\";\necho power_base_sum(2, 26);\necho \"<br>\";\n",
    "    $sum = 0;\n    $result = pow($base, $power);\n    $result = (string)$result;\n    for ($i = 0; $i < strlen($result); $i++) {\n        $sum += $result[$i];\n    }\n    return $sum;\n}\necho power_base_sum(2, 1000);",
    "    $result = pow($base, $power);\n    $sum = 0;\n    while ($result > 0) {\n        $sum += $result % 10;\n        $result = floor($result / 10);\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 1000);",
    "\t$sum = 0;\n\t$base_power = pow($base, $power);\n\t$base_power_str = strval($base_power);\n\tfor ($i = 0; $i < strlen($base_power_str); $i++) {\n\t\t$sum += intval($base_power_str[$i]);\n\t}\n\treturn $sum;\n}\n\necho power_base_sum(2, 1000);\n",
    "    $result = pow($base, $power);\n    $sum = 0;\n    while ($result > 0) {\n        $sum += $result % 10;\n        $result = floor($result / 10);\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 10);",
    "    $result = pow($base, $power);\n    $sum = 0;\n    while ($result > 0) {\n        $sum += $result % 10;\n        $result = floor($result / 10);\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 1000);",
    "    $result = pow($base, $power);\n    $sum = 0;\n    while ($result > 0) {\n        $sum += $result % 10;\n        $result = floor($result / 10);\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 1000);",
    "    $result = pow($base, $power);\n    $result = str_split($result);\n    $result = array_sum($result);\n    return $result;\n}\necho power_base_sum(2, 4);",
    "    $sum = 0;\n    $result = pow($base, $power);\n    $result = str_split($result);\n    foreach ($result as $value) {\n        $sum += $value;\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 100);",
    "\t$result = pow($base, $power);\n\t$sum = 0;\n\twhile ($result > 0) {\n\t\t$sum += $result % 10;\n\t\t$result = floor($result / 10);\n\t}\n\treturn $sum;\n}\n\necho power_base_sum(2, 1000);",
    "    $result = $base ** $power;\n    $sum = 0;\n    while ($result > 0) {\n        $sum += $result % 10;\n        $result = floor($result / 10);\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 100);",
    "    $sum = 0;\n    $result = pow($base, $power);\n    while ($result > 0) {\n        $sum += $result % 10;\n        $result = floor($result / 10);\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 1000);",
    "\t$sum = 0;\n\t$base_to_power = pow($base, $power);\n\t$base_to_power_str = strval($base_to_power);\n\tfor ($i = 0; $i < strlen($base_to_power_str); $i++) {\n\t\t$sum += intval($base_to_power_str[$i]);\n\t}\n\treturn $sum;\n}\n\necho power_base_sum(2, 1000);",
    "    $result = pow($base, $power);\n    $sum = 0;\n    while ($result > 0) {\n        $sum += $result % 10;\n        $result = floor($result / 10);\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 4);",
    "    $result = pow($base, $power);\n    $sum = 0;\n    while ($result > 0) {\n        $sum += $result % 10;\n        $result = floor($result / 10);\n    }\n    return $sum;\n}\n\necho power_base_sum(2, 1000);"
  ]
}