{
  "name": "mbpp_69_is_sublist",
  "language": "php",
  "prompt": "<?php\n// Write a function to check whether a list contains the given sublist or not.\nfunction is_sublist($l, $s) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return is_sublist(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 4, 3, 5, 7), array(3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 5, 7), array(4, 3)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 5, 7), array(1, 6)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    foreach($s as $v) {\n        if(!in_array($v, $l)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$s = [2, 3, 4];\n$s2 = [2, 3, 5];\n\necho is_sublist($l, $s) ? 'true' : 'false';\necho \"\\n\";\necho is_sublist($l, $s2) ? 'true' : 'false';\necho \"\\n\";",
    "    $i = 0;\n    $j = 0;\n    while ($i < count($l) && $j < count($s)) {\n        if ($l[$i] == $s[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    if ($j == count($s)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$s = [3, 4, 5];\n\necho is_sublist($l, $s) ? 'true' : 'false';",
    "    foreach($s as $v) {\n        if(!in_array($v, $l)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$l = array(1, 2, 3, 4, 5);\n$s = array(2, 3);\n\nif(is_sublist($l, $s)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}\n",
    "    $i = 0;\n    $j = 0;\n    while ($i < count($l) && $j < count($s)) {\n        if ($l[$i] == $s[$j]) {\n            $j++;\n        }\n        $i++;\n    }\n    return $j == count($s);\n}\n\n$l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$s = [1, 2, 3];\n$s2 = [2, 3, 4];\n$s3 = [2, 3, 4, 5, 6];\n$s4 = [2, 3, 4, 5, 6, 7, 8, 9];\n$s5 = [2, 3, 4, 5, 6, 7, 8, 9, 10];\n\necho is_sublist($l, $s) ? 'true' : 'false';\necho \"\\n\";\necho is_sublist($l, $s2) ? 'true' : 'false';\necho \"\\n\";\necho is_sublist($l, $s3) ? 'true' : 'false';\necho \"\\n\";\necho is_sublist($l, $s4) ? 'true' : 'false';\necho \"\\n\";\necho is_sublist($l, $s5) ? 'true' : 'false';\necho \"\\n\";",
    "    foreach($s as $v) {\n        if(!in_array($v, $l)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$l = [1, 2, 3, 4, 5];\n$s = [2, 3];\n\nvar_dump(is_sublist($l, $s));\n\n$l = [1, 2, 3, 4, 5];\n$s = [2, 4];\n\nvar_dump(is_sublist($l, $s));\n\n$l = [1, 2, 3, 4, 5];\n$s = [2, 3, 4];\n\nvar_dump(is_sublist($l, $s));\n\n$l = [1, 2, 3, 4, 5];\n$s = [2, 3, 4, 5];\n\nvar_dump(is_sublist($l, $s));\n\n$l = [1, 2, 3, 4, 5];\n$s = [1, 2, 3, 4, 5];\n\nvar_dump(is_sublist($l, $s));\n\n$l = [1, 2, 3, 4, 5];\n$s = [5, 4, 3];\n\nvar_dump(is_sublist($l, $s));\n\n$l = [1, 2, 3, 4, 5];\n$s = [3, 4, 2];\n\nvar_dump(is_sublist($l, $s));\n\n$l = [1, 2, 3, 4, 5];\n$s = [1, 2, 3, 4, 5, 6];\n\nvar_dump(is_sublist($l, $s));",
    "    foreach ($s as $v) {\n        if (!in_array($v, $l)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$l = [1, 2, 3, 4, 5, 6];\n$s = [2, 3, 4];\n\nif (is_sublist($l, $s)) {\n    echo \"Yes, it is a sublist\\n\";\n} else {\n    echo \"No, it is not a sublist\\n\";\n}",
    "    foreach($s as $k=>$v) {\n        if($l[$k] != $v) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    $i = 0;\n    $j = 0;\n    $n = count($l);\n    $m = count($s);\n    while ($i < $n && $j < $m) {\n        if ($l[$i] == $s[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    if ($j == $m) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$l = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$s = array(5, 6, 7);\n$s1 = array(5, 6, 7, 8);\n$s2 = array(5, 6, 7, 8, 9);\n$s3 = array(5, 6, 7, 8, 9, 10);\n$s4 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$s5 = array(1, 2, 3, 4, 5, 6, 7, 8);\n$s6 = array(1, 2, 3, 4, 5, 6, 7);\n$s7 = array(1, 2, 3, 4, 5, 6);\n$s8 = array(1, 2, 3, 4, 5);\n$s9 = array(1, 2, 3, 4);\n$s10 = array(1, 2, 3);\n$s11 = array(1, 2);\n$s12 = array(1);\n$s13 = array(2);\n$s14 = array(3);\n$s15 = array(4);\n$s16 = array(5);\n$s17 = array(6);\n$s18 = array(7);\n$s19 = array(8);\n$s20 = array(9);\n$s21 = array(10);\n\necho is_sublist($l, $s) ? \"Yes\" : \"No\";\necho \"\\n\";\necho is_sublist($l, $s1) ? \"Yes\" : \"No\";\necho \"\\n\";\necho is_sublist($l, $s2) ? \"Yes\"",
    "    $i = 0;\n    $j = 0;\n    while ($i < count($l) && $j < count($s)) {\n        if ($l[$i] == $s[$j]) {\n            $j++;\n        } else {\n            $j = 0;\n        }\n        $i++;\n    }\n    return $j == count($s);\n}\n\n$l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$s = [3, 4, 5];\n\necho is_sublist($l, $s) ? 'true' : 'false';",
    "    if (empty($s)) {\n        return true;\n    }\n    if (empty($l)) {\n        return false;\n    }\n    if ($l[0] == $s[0]) {\n        $l = array_slice($l, 1);\n        $s = array_slice($s, 1);\n        return is_sublist($l, $s);\n    } else {\n        $l = array_slice($l, 1);\n        return is_sublist($l, $s);\n    }\n}\n\n$l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$s = [2, 3, 4];\n$s2 = [2, 4, 6];\n$s3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$s4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n\necho is_sublist($l, $s) ? 'true' : 'false';\necho \"\\n\";\necho is_sublist($l, $s2) ? 'true' : 'false';\necho \"\\n\";\necho is_sublist($l, $s3) ? 'true' : 'false';\necho \"\\n\";\necho is_sublist($l, $s4) ? 'true' : 'false';\necho \"\\n\";",
    "    if (empty($s)) {\n        return true;\n    }\n    if (empty($l)) {\n        return false;\n    }\n    if ($l[0] == $s[0]) {\n        $s_new = array_slice($s, 1);\n        $l_new = array_slice($l, 1);\n        return is_sublist($l_new, $s_new);\n    } else {\n        $l_new = array_slice($l, 1);\n        return is_sublist($l_new, $s);\n    }\n}\n\n$l = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$s = array(3, 4, 5);\necho is_sublist($l, $s);\n",
    "    $i = 0;\n    $j = 0;\n    $n = count($l);\n    $m = count($s);\n    while ($i < $n && $j < $m) {\n        if ($l[$i] == $s[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i = $i - $j + 1;\n            $j = 0;\n        }\n    }\n    if ($j == $m) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$l = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$s = array(2, 3, 4);\n$s2 = array(2, 3, 4, 5);\n$s3 = array(2, 3, 4, 5, 6);\n$s4 = array(2, 3, 4, 5, 6, 7);\n$s5 = array(2, 3, 4, 5, 6, 7, 8);\n$s6 = array(2, 3, 4, 5, 6, 7, 8, 9);\n$s7 = array(2, 3, 4, 5, 6, 7, 8, 9, 10);\n$s8 = array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\n\necho is_sublist($l, $s) ? \"true\\n\" : \"false\\n\";\necho is_sublist($l, $s2) ? \"true\\n\" : \"false\\n\";\necho is_sublist($l, $s3) ? \"true\\n\" : \"false\\n\";\necho is_sublist($l, $s4) ? \"true\\n\" : \"false\\n\";\necho is_sublist($l, $s5) ? \"true\\n\" : \"false\\n\";\necho is_sublist($l, $s6) ? \"true\\n\" : \"false\\n\";\necho is_sublist($l, $s7) ? \"true\\n\" : \"false\\n\";\necho is_sublist($l, $s8) ? \"",
    "    foreach($s as $k=>$v) {\n        if($l[$k] != $v) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    if (empty($s)) {\n        return true;\n    }\n    if (empty($l)) {\n        return false;\n    }\n    if ($l[0] == $s[0]) {\n        $s = array_slice($s, 1);\n    }\n    return is_sublist(array_slice($l, 1), $s);\n}\n\nvar_dump(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nvar_dump(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nvar_dump(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nvar_dump(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nvar_dump(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nvar_dump(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nvar_dump(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nvar_dump(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nvar_dump(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nvar_dump(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nvar_dump(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nvar_dump(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nvar_dump(is_sublist([1, 2, 3, 4",
    "    if (empty($s)) {\n        return true;\n    }\n    if (empty($l)) {\n        return false;\n    }\n    if ($l[0] == $s[0]) {\n        $sublist = array_slice($l, 0, count($s));\n        return $sublist == $s;\n    }\n    return is_sublist(array_slice($l, 1), $s);\n}\n\n$l = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$s = array(2, 3, 4);\necho is_sublist($l, $s) ? 'true' : 'false';\necho \"\\n\";\n\n$l = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$s = array(2, 3, 4, 5, 6);\necho is_sublist($l, $s) ? 'true' : 'false';\necho \"\\n\";\n\n$l = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$s = array(2, 3, 4, 5, 6, 7, 8, 9, 10);\necho is_sublist($l, $s) ? 'true' : 'false';\necho \"\\n\";\n\n$l = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$s = array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\necho is_sublist($l, $s) ? 'true' : 'false';\necho \"\\n\";\n\n$l = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$s = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho is_sublist($l, $s) ? 'true' : 'false';\necho \"\\n\";\n\n$l = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$s = array(1, 2, 3, 4, 5, 6, 7,",
    "    if (empty($s)) {\n        return true;\n    }\n    if (empty($l)) {\n        return false;\n    }\n    if ($l[0] == $s[0]) {\n        $l = array_slice($l, 1);\n        $s = array_slice($s, 1);\n        return is_sublist($l, $s);\n    } else {\n        $l = array_slice($l, 1);\n        return is_sublist($l, $s);\n    }\n}\n\n$l = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$s = array(3, 4, 5);\n$s1 = array(3, 4, 5, 6, 7);\n$s2 = array(3, 4, 5, 6, 7, 8, 9);\n$s3 = array(3, 4, 5, 6, 7, 8, 9, 10);\n$s4 = array(3, 4, 5, 6, 7, 8, 9, 10, 11);\n$s5 = array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n$s6 = array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);\n$s7 = array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);\n$s8 = array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n$s9 = array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n$s10 = array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);\n$s11 = array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18);\n$s12 = array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16",
    "    $i = 0;\n    $j = 0;\n    $n = count($l);\n    $m = count($s);\n    while ($i < $n && $j < $m) {\n        if ($l[$i] == $s[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    if ($j == $m) {\n        return true;\n    } else {\n        return false;\n    }\n}\n$l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$s = [3, 4, 5];\nvar_dump(is_sublist($l, $s));",
    "    foreach($s as $v) {\n        if(!in_array($v, $l)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$l = [1,2,3,4,5,6,7,8,9];\n$s = [2,3,4];\n\necho is_sublist($l, $s) ? \"Yes\" : \"No\";",
    "    $i = 0;\n    $j = 0;\n    while ($i < count($l) && $j < count($s)) {\n        if ($l[$i] == $s[$j]) {\n            $j++;\n        } else {\n            $j = 0;\n        }\n        $i++;\n    }\n    return $j == count($s);\n}\n\n$l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$s = [2, 3, 4];\n$s2 = [2, 4, 3];\n$s3 = [3, 4, 5, 6];\n$s4 = [3, 4, 5, 6, 7, 8, 9, 10];\n$s5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$s6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n\necho is_sublist($l, $s) ? \"true\\n\" : \"false\\n\";\necho is_sublist($l, $s2) ? \"true\\n\" : \"false\\n\";\necho is_sublist($l, $s3) ? \"true\\n\" : \"false\\n\";\necho is_sublist($l, $s4) ? \"true\\n\" : \"false\\n\";\necho is_sublist($l, $s5) ? \"true\\n\" : \"false\\n\";\necho is_sublist($l, $s6) ? \"true\\n\" : \"false\\n\";",
    "    $i = 0;\n    $j = 0;\n    $n = count($l);\n    $m = count($s);\n    while ($i < $n && $j < $m) {\n        if ($l[$i] == $s[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return $j == $m;\n}\n\n$l = array(1, 2, 3, 4, 5);\n$s = array(3, 4);\n\necho is_sublist($l, $s) ? \"Yes\" : \"No\";"
  ]
}