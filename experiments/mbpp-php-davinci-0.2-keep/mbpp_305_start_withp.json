{
  "name": "mbpp_305_start_withp",
  "language": "php",
  "prompt": "<?php\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunction start_withp($words) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return start_withp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Python PHP\", \"Java JavaScript\", \"c c++\")) !== array(\"Python\", \"PHP\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Python Programming\", \"Java Programming\")) !== array(\"Python\", \"Programming\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Pqrst Pqr\", \"qrstuv\")) !== array(\"Pqrst\", \"Pqr\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $p_words = [];\n    foreach ($words as $word) {\n        if (strtolower($word[0]) == 'p') {\n            $p_words[] = $word;\n        }\n    }\n    return $p_words;\n}\n\n$words = ['PHP', 'Exercises', 'Backend'];\nprint_r(start_withp($words));",
    "    $pwords = [];\n    foreach ($words as $word) {\n        if (strtolower(substr($word, 0, 1)) == 'p') {\n            $pwords[] = $word;\n        }\n    }\n    return $pwords;\n}\n\n$words = ['Pineapple', 'Apple', 'Banana', 'Pear', 'Peach', 'Plum'];\n$pwords = start_withp($words);\nprint_r($pwords);\n",
    "    $p_words = array();\n    foreach ($words as $word) {\n        if (preg_match('/^p/', $word)) {\n            $p_words[] = $word;\n        }\n    }\n    return $p_words;\n}\n",
    "  $p_words = [];\n  foreach ($words as $word) {\n    if (strtolower($word[0]) == 'p') {\n      $p_words[] = $word;\n    }\n  }\n  return $p_words;\n}\n\n$words = ['PHP', 'Exercises', 'Backend'];\n$p_words = start_withp($words);\necho implode(', ', $p_words);",
    "\t$pwords = array();\n\tforeach ($words as $word) {\n\t\tif (preg_match('/^p/', $word)) {\n\t\t\t$pwords[] = $word;\n\t\t}\n\t}\n\treturn $pwords;\n}\n\n$words = array('pizza', 'pasta', 'penguin', 'panda', 'pumpkin', 'potato', 'pepper', 'pancake');\nprint_r(start_withp($words));",
    "\t$result = array();\n\tforeach ($words as $word) {\n\t\tif (strtolower(substr($word, 0, 1)) == 'p') {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$words = array('PHP', 'Ruby', 'Python', 'JavaScript');\nprint_r(start_withp($words));\n",
    "\t$p_words = array();\n\tforeach ($words as $word) {\n\t\tif (strtolower(substr($word, 0, 1)) == 'p') {\n\t\t\t$p_words[] = $word;\n\t\t}\n\t}\n\treturn $p_words;\n}\n\n$words = array('PHP', 'Perl', 'Python', 'JavaScript', 'Ruby', 'C', 'C++', 'C#');\n$p_words = start_withp($words);\nvar_dump($p_words);",
    "  $result = array();\n  foreach ($words as $word) {\n    if (strtolower(substr($word, 0, 1)) == 'p') {\n      array_push($result, $word);\n    }\n  }\n  return $result;\n}\n\n$words = array('PHP', 'Java', 'Python', 'Perl', 'Ruby', 'C', 'C++', 'C#');\nprint_r(start_withp($words));\n",
    "    $pwords = [];\n    foreach ($words as $word) {\n        if (strpos($word, 'p') === 0) {\n            $pwords[] = $word;\n        }\n    }\n    return $pwords;\n}\n\n$words = ['pizza', 'pasta', 'pepperoni', 'potato', 'pork', 'prawns', 'pastries'];\nprint_r(start_withp($words));\n",
    "    $result = [];\n    foreach ($words as $word) {\n        if (strpos($word, 'p') === 0) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n$words = ['pear', 'apple', 'pineapple', 'orange', 'papaya', 'peach'];\n\nprint_r(start_withp($words));",
    "  $pwords = [];\n  foreach ($words as $word) {\n    if (preg_match('/^p/', $word)) {\n      $pwords[] = $word;\n    }\n  }\n  return $pwords;\n}\n\n$words = ['pizza', 'pasta', 'pudding', 'potato', 'pepper', 'pancake'];\nprint_r(start_withp($words));\n",
    "  $pwords = array();\n  foreach ($words as $word) {\n    if (strtolower($word[0]) == 'p') {\n      $pwords[] = $word;\n    }\n  }\n  return $pwords;\n}\n\n$words = array('pizza', 'apple', 'pear', 'banana', 'pineapple', 'pork', 'prawns');\n$pwords = start_withp($words);\nprint_r($pwords);\n",
    "\t$pwords = array();\n\tforeach ($words as $word) {\n\t\tif (substr($word, 0, 1) == 'p') {\n\t\t\t$pwords[] = $word;\n\t\t}\n\t}\n\treturn $pwords;\n}\n\n$words = array('pizza', 'pasta', 'pepper', 'potato', 'pork', 'prawns', 'pastry', 'peas');\n$pwords = start_withp($words);\nprint_r($pwords);",
    "  $result = [];\n  foreach ($words as $word) {\n    if (strtolower(substr($word, 0, 1)) == 'p') {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\n$words = ['PHP', 'Exercises', 'Backend'];\nprint_r(start_withp($words));\n",
    "    $result = [];\n    foreach ($words as $word) {\n        if (strpos($word, 'p') === 0) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n$words = ['pizza', 'apple', 'pear', 'peach', 'pineapple'];\nprint_r(start_withp($words));",
    "    $result = [];\n    foreach ($words as $word) {\n        if (strtolower(substr($word, 0, 1)) == 'p') {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n$words = ['pizza', 'pasta', 'potato', 'pumpkin', 'pepper', 'parsnip'];\nprint_r(start_withp($words));\n",
    "  $p_words = array();\n  foreach ($words as $word) {\n    if (substr($word, 0, 1) == 'p') {\n      array_push($p_words, $word);\n    }\n  }\n  return $p_words;\n}\n\n$words = array('pizza', 'apple', 'pear', 'banana', 'pizza', 'pear');\n$p_words = start_withp($words);\nprint_r($p_words);",
    "    $result = [];\n    foreach ($words as $word) {\n        if (substr($word, 0, 1) == 'p') {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n$words = ['pear', 'apple', 'pineapple', 'orange', 'papaya'];\n$result = start_withp($words);\nprint_r($result);\n",
    "    $result = [];\n    foreach ($words as $word) {\n        if (strtolower(substr($word, 0, 1)) == 'p') {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n$words = ['PHP', 'Exercises', 'Backend'];\nprint_r(start_withp($words));",
    "    $result = array();\n    foreach ($words as $word) {\n        if (strpos($word, 'p') === 0) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n$words = array('pizza', 'apple', 'pear', 'pineapple', 'peach', 'potato');\nprint_r(start_withp($words));"
  ]
}