{
  "name": "mbpp_635_heap_sort",
  "language": "php",
  "prompt": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted list: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted list: ' . implode(', ', heap_sort($list)) . PHP_EOL;",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho \"Unsorted list: \" . implode(', ', $list) . \"\\n\";\n$sorted = heap_sort($list);\necho \"Sorted list: \" . implode(', ', $sorted) . \"\\n\";",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho implode(', ', $list) . \"\\n\";\necho implode(', ', heap_sort($list)) . \"\\n\";",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$array = [5, 3, 1, 2, 4];\nprint_r(heap_sort($array));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 5, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 2, 4, 3];\n$sorted = heap_sort($list);\nvar_dump($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7];\n\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [5, 3, 1, 2, 4];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = array();\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$unsorted = array(1, 3, 2, 4, 5);\n$sorted = heap_sort($unsorted);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 6, 7, 8, 1, 2, 12, 14];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nvar_dump(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 2, 1, 4, 3];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted list: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted list: ' . implode(', ', heap_sort($list)) . PHP_EOL;",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$iterable = [5, 3, 8, 2, 1, 4];\n$sorted = heap_sort($iterable);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$array = [1, 5, 2, 7, 3, 9, 4, 6, 8];\n\nprint_r(heap_sort($array));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 4, 1, 5, 2];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 2, 5, 6, 1, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 2, 5, 1, 4];\n$sorted = heap_sort($list);\nvar_dump($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 5, 2, 3, 4, 6, 7, 8, 9, 10];\n\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 5, 7, 9, 8, 6, 4, 2];\necho implode(', ', heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\n$sorted = heap_sort($list);\n\necho implode(', ', $sorted) . PHP_EOL;",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [5, 2, 3, 1, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 2, 4, 3];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 5, 1, 4, 2];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\n$list = heap_sort($list);\nprint_r($list);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho 'Unsorted: ' . implode(', ', $list) . PHP_EOL;\n$sorted = heap_sort($list);\necho 'Sorted: ' . implode(', ', $sorted) . PHP_EOL;",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 4, 2, 3, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$array = [1, 4, 2, 3, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($array));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 5, 1, 4, 2];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1,2,3,4,5,6,7,8,9,10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$unsorted = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($unsorted);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted: ' . implode(', ', heap_sort($list)) . PHP_EOL;",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 7, 6, 9, 8];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\n\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));",
    "    $heap = new SplHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho \"Unsorted list: \" . implode(', ', $list) . \"\\n\";\necho \"Sorted list: \" . implode(', ', heap_sort($list)) . \"\\n\";",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = array();\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$array = array(1, 4, 2, 5, 3, 7, 6);\nprint_r(heap_sort($array));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 7, 6, 9, 8];\necho implode(', ', heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [5, 6, 3, 1, 8, 7, 2, 4];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\n\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 2, 7, 3, 9, 4, 6, 8];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 5, 2, 7, 3, 9, 4, 6, 8];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 4, 2, 3, 5, 6, 7, 8, 9, 10];\necho implode(', ', heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 5, 3, 2, 4];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nshuffle($list);\nprint_r($list);\n\n$list = heap_sort($list);\nprint_r($list);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted list: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted list: ' . implode(', ', heap_sort($list)) . PHP_EOL;",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho implode(', ', $list) . PHP_EOL;\necho implode(', ', heap_sort($list)) . PHP_EOL;",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [2, 5, 3, 1, 4];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 4, 2, 3, 5];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 7, 2, 3, 1, 4, 6];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 2, 4, 3];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [2, 3, 2, 5, 6, 1, -2, 3, 14, 12];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 3, 1, 4, 2];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 4, 2, 5, 3];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 3, 8, 1, 2, 9, 4, 7, 6];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 3, 1, 2, 4];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 7, 6, 9, 8];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [4, 2, 1, 3, 5];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 5, 1, 2, 4];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [2, 5, 1, 3, 4];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$unsorted = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\nvar_dump(heap_sort($unsorted));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nvar_dump($list);\nvar_dump(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$array = [1, 3, 2, 4, 5, 7, 6, 9, 8];\n$sorted = heap_sort($array);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho implode(', ', $list) . \"\\n\";\necho implode(', ', heap_sort($list)) . \"\\n\";\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 2, 4, 6, 1, 3];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = array();\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = array(3, 5, 1, 4, 2);\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [5, 3, 1, 4, 2];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [2, 5, 1, 3, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 5, 1, 4, 2];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMinHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [4, 5, 1, 3, 2];\nprint_r(heap_sort($list));",
    "    $heap = new SplMinHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [5, 2, 4, 6, 1, 3];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 4, 1, 2, 5];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$iterable = [1, 3, 2, 4, 5];\nprint_r(heap_sort($iterable));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\n$list = heap_sort($list);\nprint_r($list);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [5, 3, 1, 2, 4];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 2, 3, 4, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 3, 2, 4];\nvar_dump(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted: ' . implode(', ', heap_sort($list)) . PHP_EOL;",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [5, 3, 8, 2, 1, 4, 7, 6];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 2, 7, 3, 9, 4, 6, 8];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [2, 3, 1, 5, 4];\n$sorted = heap_sort($list);\nvar_dump($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 3, 8, 2, 1, 4, 7, 6];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted list: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted list: ' . implode(', ', heap_sort($list)) . PHP_EOL;",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    return iterator_to_array($heap);\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\n\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 4, 2, 1, 5, 6, 7, 8, 1, 1];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted: ' . implode(', ', heap_sort($list)) . PHP_EOL;",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho implode(', ', $list) . PHP_EOL;\necho implode(', ', heap_sort($list)) . PHP_EOL;",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 2, 4, 6, 1, 3];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 1, 2, 5, 4];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted: ' . implode(', ', heap_sort($list)) . PHP_EOL;",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho implode(', ', $list) . \"\\n\";\n$sorted = heap_sort($list);\necho implode(', ', $sorted) . \"\\n\";",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [3, 4, 2, 1, 5, 7, 6];\n\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 5, 2, 7, 3, 9, 4, 6, 8];\necho implode(', ', heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 5, 2, 1, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\nvar_dump(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 5, 3, 2, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = array();\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = array(4, 2, 5, 1, 3);\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 3, 2, 4];\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n\n    return $sorted;\n}\n\n$list = [5, 3, 2, 4, 1];\n$sorted = heap_sort($list);\n\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 6, 7, 8, 1, 2, 12, 14];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\nprint_r(heap_sort($list));",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 2, 1, 4, 5];\nprint_r(heap_sort($list));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n\n    return $sorted;\n}\n\n$unsorted = [1, 3, 2, 5, 4];\n$sorted = heap_sort($unsorted);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 3, 1, 4, 2];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho \"Unsorted:\\n\";\nprint_r($list);\n\n$sorted = heap_sort($list);\n\necho \"Sorted:\\n\";\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 2, 9, 1, 3, 7, 4, 8, 6];\n$sorted = heap_sort($list);\nprint_r($sorted);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\n"
  ]
}