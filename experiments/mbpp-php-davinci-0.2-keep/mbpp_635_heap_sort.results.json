{
  "name": "mbpp_635_heap_sort",
  "language": "php",
  "prompt": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6mq06jq.php:23\nStack trace:\n#0 /tmp/tmpx6mq06jq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpx6mq06jq.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted list: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted list: ' . implode(', ', heap_sort($list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Unsorted list: 8, 3, 5, 7, 1, 10, 4, 9, 6, 2\nSorted list: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfry7mr_.php:25\nStack trace:\n#0 /tmp/tmpyfry7mr_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyfry7mr_.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho \"Unsorted list: \" . implode(', ', $list) . \"\\n\";\n$sorted = heap_sort($list);\necho \"Sorted list: \" . implode(', ', $sorted) . \"\\n\";\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Unsorted list: 9, 1, 3, 8, 2, 6, 10, 7, 4, 5\nSorted list: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi47xxn_v.php:25\nStack trace:\n#0 /tmp/tmpi47xxn_v.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpi47xxn_v.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho implode(', ', $list) . \"\\n\";\necho implode(', ', heap_sort($list)) . \"\\n\";\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "7, 9, 8, 1, 2, 6, 10, 5, 4, 3\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpctmb2qak.php:24\nStack trace:\n#0 /tmp/tmpctmb2qak.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpctmb2qak.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpna8x1_lt.php:20\nStack trace:\n#0 /tmp/tmpna8x1_lt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpna8x1_lt.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$array = [5, 3, 1, 2, 4];\nprint_r(heap_sort($array));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeskkjexk.php:23\nStack trace:\n#0 /tmp/tmpeskkjexk.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpeskkjexk.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 5, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57atuy6n.php:24\nStack trace:\n#0 /tmp/tmp57atuy6n.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp57atuy6n.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 8\n    [2] => 6\n    [3] => 1\n    [4] => 5\n    [5] => 7\n    [6] => 9\n    [7] => 2\n    [8] => 3\n    [9] => 10\n)\nArray\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpffzxh_xg.php:24\nStack trace:\n#0 /tmp/tmpffzxh_xg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpffzxh_xg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 2, 4, 3];\n$sorted = heap_sort($list);\nvar_dump($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "array(5) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(4)\n  [2]=>\n  int(3)\n  [3]=>\n  int(2)\n  [4]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9i5l_ypu.php:24\nStack trace:\n#0 /tmp/tmp9i5l_ypu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9i5l_ypu.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n    [9] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2xck9vq.php:24\nStack trace:\n#0 /tmp/tmpw2xck9vq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw2xck9vq.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpna8x1_lt.php:20\nStack trace:\n#0 /tmp/tmpna8x1_lt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpna8x1_lt.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7];\n\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 7\n    [1] => 6\n    [2] => 5\n    [3] => 4\n    [4] => 3\n    [5] => 2\n    [6] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbfuonf6.php:25\nStack trace:\n#0 /tmp/tmphbfuonf6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphbfuonf6.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [5, 3, 1, 2, 4];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkira0jfp.php:22\nStack trace:\n#0 /tmp/tmpkira0jfp.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkira0jfp.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = array();\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$unsorted = array(1, 3, 2, 4, 5);\n$sorted = heap_sort($unsorted);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoj_w6w8r.php:24\nStack trace:\n#0 /tmp/tmpoj_w6w8r.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoj_w6w8r.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 6, 7, 8, 1, 2, 12, 14];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 14\n    [1] => 12\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 2\n    [7] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_1dsbmb.php:23\nStack trace:\n#0 /tmp/tmpf_1dsbmb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpf_1dsbmb.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nvar_dump(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "array(10) {\n  [9]=>\n  int(10)\n  [8]=>\n  int(9)\n  [7]=>\n  int(8)\n  [6]=>\n  int(7)\n  [5]=>\n  int(6)\n  [4]=>\n  int(5)\n  [3]=>\n  int(4)\n  [2]=>\n  int(3)\n  [1]=>\n  int(2)\n  [0]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9155ussd.php:19\nStack trace:\n#0 /tmp/tmp9155ussd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9155ussd.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 2, 1, 4, 3];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgds2n41b.php:22\nStack trace:\n#0 /tmp/tmpgds2n41b.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpgds2n41b.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [9] => 10\n    [8] => 9\n    [7] => 8\n    [6] => 7\n    [5] => 6\n    [4] => 5\n    [3] => 4\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26hctcya.php:20\nStack trace:\n#0 /tmp/tmp26hctcya.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp26hctcya.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31f91dxs.php:23\nStack trace:\n#0 /tmp/tmp31f91dxs.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp31f91dxs.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted list: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted list: ' . implode(', ', heap_sort($list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Unsorted list: 10, 6, 3, 4, 1, 2, 5, 8, 7, 9\nSorted list: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8cbeo4v.php:25\nStack trace:\n#0 /tmp/tmpe8cbeo4v.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpe8cbeo4v.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf4swd5fh.php:22\nStack trace:\n#0 /tmp/tmpf4swd5fh.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpf4swd5fh.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n    [9] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnu6zxov7.php:23\nStack trace:\n#0 /tmp/tmpnu6zxov7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpnu6zxov7.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$iterable = [5, 3, 8, 2, 1, 4];\n$sorted = heap_sort($iterable);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 8\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcqhftlk.php:23\nStack trace:\n#0 /tmp/tmprcqhftlk.php(28): test()\n#1 {main}\n  thrown in /tmp/tmprcqhftlk.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpna8x1_lt.php:20\nStack trace:\n#0 /tmp/tmpna8x1_lt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpna8x1_lt.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$array = [1, 5, 2, 7, 3, 9, 4, 6, 8];\n\nprint_r(heap_sort($array));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu1150_hx.php:24\nStack trace:\n#0 /tmp/tmpu1150_hx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu1150_hx.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpna8x1_lt.php:20\nStack trace:\n#0 /tmp/tmpna8x1_lt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpna8x1_lt.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 4, 1, 5, 2];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm78x5kfd.php:22\nStack trace:\n#0 /tmp/tmpm78x5kfd.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpm78x5kfd.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 2, 5, 6, 1, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3fo0pls.php:23\nStack trace:\n#0 /tmp/tmpd3fo0pls.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpd3fo0pls.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 2, 5, 1, 4];\n$sorted = heap_sort($list);\nvar_dump($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "array(5) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(4)\n  [2]=>\n  int(3)\n  [3]=>\n  int(2)\n  [4]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvip38x6_.php:23\nStack trace:\n#0 /tmp/tmpvip38x6_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvip38x6_.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmswuzuho.php:25\nStack trace:\n#0 /tmp/tmpmswuzuho.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmswuzuho.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92gmkk6w.php:23\nStack trace:\n#0 /tmp/tmp92gmkk6w.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp92gmkk6w.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 5, 2, 3, 4, 6, 7, 8, 9, 10];\n\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bn4u5kc.php:23\nStack trace:\n#0 /tmp/tmp9bn4u5kc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9bn4u5kc.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 5, 7, 9, 8, 6, 4, 2];\necho implode(', ', heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "9, 8, 7, 6, 5, 4, 3, 2, 1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2q35guw8.php:22\nStack trace:\n#0 /tmp/tmp2q35guw8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2q35guw8.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\n$sorted = heap_sort($list);\n\necho implode(', ', $sorted) . PHP_EOL;\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps6mng4ps.php:26\nStack trace:\n#0 /tmp/tmps6mng4ps.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps6mng4ps.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [5, 2, 3, 1, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_cqcbln.php:24\nStack trace:\n#0 /tmp/tmpt_cqcbln.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt_cqcbln.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 2, 4, 3];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb883d0l8.php:24\nStack trace:\n#0 /tmp/tmpb883d0l8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpb883d0l8.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 5, 1, 4, 2];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwf2c2jh4.php:23\nStack trace:\n#0 /tmp/tmpwf2c2jh4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpwf2c2jh4.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\n$list = heap_sort($list);\nprint_r($list);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 3\n    [2] => 9\n    [3] => 10\n    [4] => 7\n    [5] => 5\n    [6] => 8\n    [7] => 2\n    [8] => 4\n    [9] => 1\n)\nArray\n(\n    [9] => 10\n    [8] => 9\n    [7] => 8\n    [6] => 7\n    [5] => 6\n    [4] => 5\n    [3] => 4\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpywsgftbz.php:22\nStack trace:\n#0 /tmp/tmpywsgftbz.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpywsgftbz.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho 'Unsorted: ' . implode(', ', $list) . PHP_EOL;\n$sorted = heap_sort($list);\necho 'Sorted: ' . implode(', ', $sorted) . PHP_EOL;\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Unsorted: 10, 6, 9, 3, 2, 7, 4, 1, 8, 5\nSorted: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprp4v8co3.php:25\nStack trace:\n#0 /tmp/tmprp4v8co3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprp4v8co3.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 4, 2, 3, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65lkpcu9.php:22\nStack trace:\n#0 /tmp/tmp65lkpcu9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp65lkpcu9.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$array = [1, 4, 2, 3, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($array));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5juzk41o.php:23\nStack trace:\n#0 /tmp/tmp5juzk41o.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5juzk41o.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 5, 1, 4, 2];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbhjh05p.php:22\nStack trace:\n#0 /tmp/tmprbhjh05p.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprbhjh05p.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1,2,3,4,5,6,7,8,9,10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 1\n    [2] => 6\n    [3] => 5\n    [4] => 9\n    [5] => 3\n    [6] => 7\n    [7] => 2\n    [8] => 10\n    [9] => 8\n)\nArray\n(\n    [9] => 10\n    [8] => 9\n    [7] => 8\n    [6] => 7\n    [5] => 6\n    [4] => 5\n    [3] => 4\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1sq3a8uj.php:20\nStack trace:\n#0 /tmp/tmp1sq3a8uj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp1sq3a8uj.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 9\n    [3] => 3\n    [4] => 6\n    [5] => 5\n    [6] => 10\n    [7] => 8\n    [8] => 7\n    [9] => 4\n)\nArray\n(\n    [9] => 10\n    [8] => 9\n    [7] => 8\n    [6] => 7\n    [5] => 6\n    [4] => 5\n    [3] => 4\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ecp5k0i.php:20\nStack trace:\n#0 /tmp/tmp_ecp5k0i.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_ecp5k0i.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx86f_628.php:22\nStack trace:\n#0 /tmp/tmpx86f_628.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpx86f_628.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$unsorted = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($unsorted);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2s_8a01r.php:24\nStack trace:\n#0 /tmp/tmp2s_8a01r.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2s_8a01r.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted: ' . implode(', ', heap_sort($list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Unsorted: 5, 2, 7, 10, 9, 8, 4, 3, 1, 6\nSorted: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm4ua8d2x.php:25\nStack trace:\n#0 /tmp/tmpm4ua8d2x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpm4ua8d2x.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 7, 6, 9, 8];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqhqz1hd.php:23\nStack trace:\n#0 /tmp/tmpcqhqz1hd.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcqhqz1hd.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsjuugh_9.php:20\nStack trace:\n#0 /tmp/tmpsjuugh_9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsjuugh_9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\n\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 1\n    [2] => 2\n    [3] => 7\n    [4] => 10\n    [5] => 4\n    [6] => 9\n    [7] => 3\n    [8] => 5\n    [9] => 8\n)\nArray\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjio2jpjt.php:26\nStack trace:\n#0 /tmp/tmpjio2jpjt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjio2jpjt.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n    [9] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xz37co1.php:22\nStack trace:\n#0 /tmp/tmp2xz37co1.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2xz37co1.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 1\n    [2] => 5\n    [3] => 3\n    [4] => 4\n    [5] => 8\n    [6] => 6\n    [7] => 7\n    [8] => 9\n    [9] => 2\n)\nArray\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmb4329x0.php:24\nStack trace:\n#0 /tmp/tmpmb4329x0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmb4329x0.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho \"Unsorted list: \" . implode(', ', $list) . \"\\n\";\necho \"Sorted list: \" . implode(', ', heap_sort($list)) . \"\\n\";\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Unsorted list: 3, 5, 6, 10, 9, 1, 8, 2, 4, 7\n\nFatal error: Uncaught Error: Cannot instantiate abstract class SplHeap in /tmp/tmpwih9_mnw.php:4\nStack trace:\n#0 /tmp/tmpwih9_mnw.php(19): heap_sort(Array)\n#1 {main}\n  thrown in /tmp/tmpwih9_mnw.php on line 4\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = array();\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$array = array(1, 4, 2, 5, 3, 7, 6);\nprint_r(heap_sort($array));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 7\n    [1] => 6\n    [2] => 5\n    [3] => 4\n    [4] => 3\n    [5] => 2\n    [6] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_htcmae.php:22\nStack trace:\n#0 /tmp/tmpc_htcmae.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpc_htcmae.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 8\n    [2] => 6\n    [3] => 1\n    [4] => 5\n    [5] => 7\n    [6] => 9\n    [7] => 2\n    [8] => 3\n    [9] => 10\n)\nArray\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpffzxh_xg.php:24\nStack trace:\n#0 /tmp/tmpffzxh_xg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpffzxh_xg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 7, 6, 9, 8];\necho implode(', ', heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "9, 8, 7, 6, 5, 4, 3, 2, 1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpewq7okvx.php:22\nStack trace:\n#0 /tmp/tmpewq7okvx.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpewq7okvx.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6we__03m.php:23\nStack trace:\n#0 /tmp/tmp6we__03m.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6we__03m.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [5, 6, 3, 1, 8, 7, 2, 4];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 8\n    [1] => 7\n    [2] => 6\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n    [7] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38_1r9o4.php:24\nStack trace:\n#0 /tmp/tmp38_1r9o4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp38_1r9o4.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwj2sjawm.php:23\nStack trace:\n#0 /tmp/tmpwj2sjawm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpwj2sjawm.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\n\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 1\n    [2] => 2\n    [3] => 7\n    [4] => 10\n    [5] => 4\n    [6] => 9\n    [7] => 3\n    [8] => 5\n    [9] => 8\n)\nArray\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjio2jpjt.php:26\nStack trace:\n#0 /tmp/tmpjio2jpjt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjio2jpjt.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 2, 7, 3, 9, 4, 6, 8];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4o4icf4c.php:24\nStack trace:\n#0 /tmp/tmp4o4icf4c.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4o4icf4c.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1i85lrf_.php:23\nStack trace:\n#0 /tmp/tmp1i85lrf_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp1i85lrf_.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 8\n    [2] => 6\n    [3] => 1\n    [4] => 5\n    [5] => 7\n    [6] => 9\n    [7] => 2\n    [8] => 3\n    [9] => 10\n)\nArray\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpffzxh_xg.php:24\nStack trace:\n#0 /tmp/tmpffzxh_xg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpffzxh_xg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 5, 2, 7, 3, 9, 4, 6, 8];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjm4bg9j.php:23\nStack trace:\n#0 /tmp/tmpyjm4bg9j.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpyjm4bg9j.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 4, 2, 3, 5, 6, 7, 8, 9, 10];\necho implode(', ', heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4358kff.php:22\nStack trace:\n#0 /tmp/tmpd4358kff.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpd4358kff.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 5, 3, 2, 4];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvof7ad_d.php:23\nStack trace:\n#0 /tmp/tmpvof7ad_d.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvof7ad_d.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nshuffle($list);\nprint_r($list);\n\n$list = heap_sort($list);\nprint_r($list);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 9\n    [4] => 2\n    [5] => 8\n    [6] => 7\n    [7] => 3\n    [8] => 1\n)\nArray\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2u3t55w.php:26\nStack trace:\n#0 /tmp/tmpe2u3t55w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpe2u3t55w.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpugtfp_fr.php:22\nStack trace:\n#0 /tmp/tmpugtfp_fr.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpugtfp_fr.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted list: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted list: ' . implode(', ', heap_sort($list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Unsorted list: 8, 3, 5, 7, 1, 10, 4, 9, 6, 2\nSorted list: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfry7mr_.php:25\nStack trace:\n#0 /tmp/tmpyfry7mr_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyfry7mr_.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho implode(', ', $list) . PHP_EOL;\necho implode(', ', heap_sort($list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "9, 6, 2, 4, 10, 1, 3, 7, 5, 8\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwlmhrws.php:24\nStack trace:\n#0 /tmp/tmpqwlmhrws.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqwlmhrws.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n    [9] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpif9ockeo.php:22\nStack trace:\n#0 /tmp/tmpif9ockeo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpif9ockeo.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsjuugh_9.php:20\nStack trace:\n#0 /tmp/tmpsjuugh_9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsjuugh_9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [2, 5, 3, 1, 4];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk09ac8ud.php:24\nStack trace:\n#0 /tmp/tmpk09ac8ud.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpk09ac8ud.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 4, 2, 3, 5];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6jmbpxj.php:22\nStack trace:\n#0 /tmp/tmpf6jmbpxj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpf6jmbpxj.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplx8s6xpf.php:23\nStack trace:\n#0 /tmp/tmplx8s6xpf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplx8s6xpf.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8d49umcj.php:22\nStack trace:\n#0 /tmp/tmp8d49umcj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp8d49umcj.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 7, 2, 3, 1, 4, 6];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 7\n    [1] => 6\n    [2] => 5\n    [3] => 4\n    [4] => 3\n    [5] => 2\n    [6] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp55o8slyy.php:23\nStack trace:\n#0 /tmp/tmp55o8slyy.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp55o8slyy.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 2, 4, 3];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb883d0l8.php:24\nStack trace:\n#0 /tmp/tmpb883d0l8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpb883d0l8.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [2, 3, 2, 5, 6, 1, -2, 3, 14, 12];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 14\n    [1] => 12\n    [2] => 6\n    [3] => 5\n    [4] => 3\n    [5] => 3\n    [6] => 2\n    [7] => 2\n    [8] => 1\n    [9] => -2\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphdjx4hdr.php:24\nStack trace:\n#0 /tmp/tmphdjx4hdr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphdjx4hdr.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 3, 1, 4, 2];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2a1zssht.php:23\nStack trace:\n#0 /tmp/tmp2a1zssht.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2a1zssht.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 4, 2, 5, 3];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [4] => 5\n    [3] => 4\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcz599xd.php:19\nStack trace:\n#0 /tmp/tmprcz599xd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprcz599xd.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 3, 8, 1, 2, 9, 4, 7, 6];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxppaii0v.php:23\nStack trace:\n#0 /tmp/tmpxppaii0v.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpxppaii0v.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n    [9] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8r0j6qg.php:24\nStack trace:\n#0 /tmp/tmpt8r0j6qg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt8r0j6qg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhz_s9jy.php:23\nStack trace:\n#0 /tmp/tmpbhz_s9jy.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbhz_s9jy.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmswuzuho.php:25\nStack trace:\n#0 /tmp/tmpmswuzuho.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmswuzuho.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 3, 1, 2, 4];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6b1xw44.php:22\nStack trace:\n#0 /tmp/tmpj6b1xw44.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpj6b1xw44.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcq_uk7at.php:23\nStack trace:\n#0 /tmp/tmpcq_uk7at.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcq_uk7at.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 7, 6, 9, 8];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvom0z07.php:24\nStack trace:\n#0 /tmp/tmpsvom0z07.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsvom0z07.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [4, 2, 1, 3, 5];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4vzosegc.php:23\nStack trace:\n#0 /tmp/tmp4vzosegc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4vzosegc.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 5, 1, 2, 4];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwyx73sz.php:22\nStack trace:\n#0 /tmp/tmpqwyx73sz.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqwyx73sz.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 8\n    [2] => 6\n    [3] => 1\n    [4] => 5\n    [5] => 7\n    [6] => 9\n    [7] => 2\n    [8] => 3\n    [9] => 10\n)\nArray\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpffzxh_xg.php:24\nStack trace:\n#0 /tmp/tmpffzxh_xg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpffzxh_xg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [2, 5, 1, 3, 4];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgsn50yx.php:23\nStack trace:\n#0 /tmp/tmpdgsn50yx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdgsn50yx.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$unsorted = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\nvar_dump(heap_sort($unsorted));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "array(10) {\n  [0]=>\n  int(10)\n  [1]=>\n  int(9)\n  [2]=>\n  int(8)\n  [3]=>\n  int(7)\n  [4]=>\n  int(6)\n  [5]=>\n  int(5)\n  [6]=>\n  int(4)\n  [7]=>\n  int(3)\n  [8]=>\n  int(2)\n  [9]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcp0vyzt2.php:22\nStack trace:\n#0 /tmp/tmpcp0vyzt2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcp0vyzt2.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsjuugh_9.php:20\nStack trace:\n#0 /tmp/tmpsjuugh_9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsjuugh_9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpna8x1_lt.php:20\nStack trace:\n#0 /tmp/tmpna8x1_lt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpna8x1_lt.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nvar_dump($list);\nvar_dump(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "array(10) {\n  [0]=>\n  int(10)\n  [1]=>\n  int(9)\n  [2]=>\n  int(3)\n  [3]=>\n  int(5)\n  [4]=>\n  int(1)\n  [5]=>\n  int(7)\n  [6]=>\n  int(6)\n  [7]=>\n  int(2)\n  [8]=>\n  int(4)\n  [9]=>\n  int(8)\n}\narray(10) {\n  [9]=>\n  int(10)\n  [8]=>\n  int(9)\n  [7]=>\n  int(8)\n  [6]=>\n  int(7)\n  [5]=>\n  int(6)\n  [4]=>\n  int(5)\n  [3]=>\n  int(4)\n  [2]=>\n  int(3)\n  [1]=>\n  int(2)\n  [0]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7gd6q7y.php:20\nStack trace:\n#0 /tmp/tmpi7gd6q7y.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpi7gd6q7y.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$array = [1, 3, 2, 4, 5, 7, 6, 9, 8];\n$sorted = heap_sort($array);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjmu_q3b.php:24\nStack trace:\n#0 /tmp/tmpmjmu_q3b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmjmu_q3b.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho implode(', ', $list) . \"\\n\";\necho implode(', ', heap_sort($list)) . \"\\n\";\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "3, 5, 8, 1, 4, 7, 9, 2, 6, 10\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpegdj7kl8.php:25\nStack trace:\n#0 /tmp/tmpegdj7kl8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpegdj7kl8.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 2, 4, 6, 1, 3];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8d8ow68v.php:23\nStack trace:\n#0 /tmp/tmp8d8ow68v.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8d8ow68v.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = array();\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = array(3, 5, 1, 4, 2);\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9xn3qeg.php:23\nStack trace:\n#0 /tmp/tmpv9xn3qeg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpv9xn3qeg.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [5, 3, 1, 4, 2];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [4] => 5\n    [3] => 4\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexz5ebra.php:19\nStack trace:\n#0 /tmp/tmpexz5ebra.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpexz5ebra.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnek3tjjt.php:24\nStack trace:\n#0 /tmp/tmpnek3tjjt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnek3tjjt.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsjuugh_9.php:20\nStack trace:\n#0 /tmp/tmpsjuugh_9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsjuugh_9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n    [9] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpijhgl0mx.php:23\nStack trace:\n#0 /tmp/tmpijhgl0mx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpijhgl0mx.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsjuugh_9.php:20\nStack trace:\n#0 /tmp/tmpsjuugh_9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsjuugh_9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [2, 5, 1, 3, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9mj162y8.php:24\nStack trace:\n#0 /tmp/tmp9mj162y8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9mj162y8.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n    [9] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8r0j6qg.php:24\nStack trace:\n#0 /tmp/tmpt8r0j6qg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt8r0j6qg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 5, 1, 4, 2];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_770lv8h.php:23\nStack trace:\n#0 /tmp/tmp_770lv8h.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_770lv8h.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp54vu0hye.php:23\nStack trace:\n#0 /tmp/tmp54vu0hye.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp54vu0hye.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppsig5uk3.php:23\nStack trace:\n#0 /tmp/tmppsig5uk3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppsig5uk3.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMinHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [4, 5, 1, 3, 2];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMinHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [5, 2, 4, 6, 1, 3];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [5] => 1\n    [4] => 2\n    [3] => 3\n    [2] => 4\n    [1] => 5\n    [0] => 6\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnnjtjl1.php:20\nStack trace:\n#0 /tmp/tmprnnjtjl1.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprnnjtjl1.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 4, 1, 2, 5];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7kczadgo.php:24\nStack trace:\n#0 /tmp/tmp7kczadgo.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7kczadgo.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpugtfp_fr.php:22\nStack trace:\n#0 /tmp/tmpugtfp_fr.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpugtfp_fr.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$iterable = [1, 3, 2, 4, 5];\nprint_r(heap_sort($iterable));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjvc9o0ey.php:22\nStack trace:\n#0 /tmp/tmpjvc9o0ey.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpjvc9o0ey.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmva5qjp5.php:24\nStack trace:\n#0 /tmp/tmpmva5qjp5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmva5qjp5.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\n$list = heap_sort($list);\nprint_r($list);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 7\n    [3] => 8\n    [4] => 10\n    [5] => 6\n    [6] => 2\n    [7] => 5\n    [8] => 3\n    [9] => 9\n)\nArray\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9f030wv.php:25\nStack trace:\n#0 /tmp/tmpd9f030wv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpd9f030wv.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8d49umcj.php:22\nStack trace:\n#0 /tmp/tmp8d49umcj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp8d49umcj.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6we__03m.php:23\nStack trace:\n#0 /tmp/tmp6we__03m.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6we__03m.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp57lgz87.php:23\nStack trace:\n#0 /tmp/tmpp57lgz87.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp57lgz87.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpugtfp_fr.php:22\nStack trace:\n#0 /tmp/tmpugtfp_fr.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpugtfp_fr.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [5, 3, 1, 2, 4];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkira0jfp.php:22\nStack trace:\n#0 /tmp/tmpkira0jfp.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkira0jfp.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmva5qjp5.php:24\nStack trace:\n#0 /tmp/tmpmva5qjp5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmva5qjp5.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 2, 3, 4, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr5j8zy3c.php:22\nStack trace:\n#0 /tmp/tmpr5j8zy3c.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr5j8zy3c.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 3, 2, 4];\nvar_dump(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "array(5) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(4)\n  [2]=>\n  int(3)\n  [3]=>\n  int(2)\n  [4]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7se1pta.php:22\nStack trace:\n#0 /tmp/tmpq7se1pta.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpq7se1pta.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 9\n    [3] => 3\n    [4] => 6\n    [5] => 5\n    [6] => 10\n    [7] => 8\n    [8] => 7\n    [9] => 4\n)\nArray\n(\n    [9] => 10\n    [8] => 9\n    [7] => 8\n    [6] => 7\n    [5] => 6\n    [4] => 5\n    [3] => 4\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ecp5k0i.php:20\nStack trace:\n#0 /tmp/tmp_ecp5k0i.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_ecp5k0i.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted: ' . implode(', ', heap_sort($list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Unsorted: 2, 9, 10, 4, 1, 3, 8, 7, 6, 5\nSorted: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsyftek93.php:25\nStack trace:\n#0 /tmp/tmpsyftek93.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpsyftek93.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [5, 3, 8, 2, 1, 4, 7, 6];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 8\n    [1] => 7\n    [2] => 6\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n    [7] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprn77w0px.php:24\nStack trace:\n#0 /tmp/tmprn77w0px.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprn77w0px.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 2, 7, 3, 9, 4, 6, 8];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq__c55zi.php:23\nStack trace:\n#0 /tmp/tmpq__c55zi.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpq__c55zi.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8hd1xbi.php:24\nStack trace:\n#0 /tmp/tmpu8hd1xbi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu8hd1xbi.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 9\n    [3] => 3\n    [4] => 6\n    [5] => 5\n    [6] => 10\n    [7] => 8\n    [8] => 7\n    [9] => 4\n)\nArray\n(\n    [9] => 10\n    [8] => 9\n    [7] => 8\n    [6] => 7\n    [5] => 6\n    [4] => 5\n    [3] => 4\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ecp5k0i.php:20\nStack trace:\n#0 /tmp/tmp_ecp5k0i.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_ecp5k0i.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpna8x1_lt.php:20\nStack trace:\n#0 /tmp/tmpna8x1_lt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpna8x1_lt.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl92qhhbb.php:24\nStack trace:\n#0 /tmp/tmpl92qhhbb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpl92qhhbb.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [2, 3, 1, 5, 4];\n$sorted = heap_sort($list);\nvar_dump($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "array(5) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(4)\n  [2]=>\n  int(3)\n  [3]=>\n  int(2)\n  [4]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkuzqr3je.php:24\nStack trace:\n#0 /tmp/tmpkuzqr3je.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpkuzqr3je.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 3, 8, 2, 1, 4, 7, 6];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 8\n    [1] => 7\n    [2] => 6\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n    [7] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qquxgjy.php:24\nStack trace:\n#0 /tmp/tmp6qquxgjy.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6qquxgjy.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2nuo_t_l.php:23\nStack trace:\n#0 /tmp/tmp2nuo_t_l.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2nuo_t_l.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted list: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted list: ' . implode(', ', heap_sort($list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Unsorted list: 10, 6, 3, 4, 1, 2, 5, 8, 7, 9\nSorted list: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8cbeo4v.php:25\nStack trace:\n#0 /tmp/tmpe8cbeo4v.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpe8cbeo4v.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk57bkue3.php:23\nStack trace:\n#0 /tmp/tmpk57bkue3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpk57bkue3.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk57bkue3.php:23\nStack trace:\n#0 /tmp/tmpk57bkue3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpk57bkue3.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    return iterator_to_array($heap);\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnv3rkkp3.php:16\nStack trace:\n#0 /tmp/tmpnv3rkkp3.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnv3rkkp3.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\n\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 6\n    [2] => 1\n    [3] => 7\n    [4] => 4\n    [5] => 8\n    [6] => 9\n    [7] => 10\n    [8] => 3\n    [9] => 5\n)\nArray\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqj7am6_i.php:26\nStack trace:\n#0 /tmp/tmpqj7am6_i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqj7am6_i.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 4, 2, 1, 5, 6, 7, 8, 1, 1];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 8\n    [1] => 7\n    [2] => 6\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n    [7] => 1\n    [8] => 1\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvla1jhu.php:23\nStack trace:\n#0 /tmp/tmpnvla1jhu.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpnvla1jhu.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted: ' . implode(', ', heap_sort($list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Unsorted: 4, 5, 9, 3, 8, 2, 10, 7, 6, 1\nSorted: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvp6mkda2.php:25\nStack trace:\n#0 /tmp/tmpvp6mkda2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvp6mkda2.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\nprint_r($list);\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 8\n    [2] => 6\n    [3] => 1\n    [4] => 5\n    [5] => 7\n    [6] => 9\n    [7] => 2\n    [8] => 3\n    [9] => 10\n)\nArray\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpffzxh_xg.php:24\nStack trace:\n#0 /tmp/tmpffzxh_xg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpffzxh_xg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n    [9] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp873ardca.php:23\nStack trace:\n#0 /tmp/tmp873ardca.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp873ardca.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 20\n    [1] => 19\n    [2] => 18\n    [3] => 17\n    [4] => 16\n    [5] => 15\n    [6] => 14\n    [7] => 13\n    [8] => 12\n    [9] => 11\n    [10] => 10\n    [11] => 9\n    [12] => 8\n    [13] => 7\n    [14] => 6\n    [15] => 5\n    [16] => 4\n    [17] => 3\n    [18] => 2\n    [19] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnpit1ok2.php:23\nStack trace:\n#0 /tmp/tmpnpit1ok2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpnpit1ok2.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho implode(', ', $list) . PHP_EOL;\necho implode(', ', heap_sort($list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "9, 6, 2, 4, 10, 1, 3, 7, 5, 8\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwlmhrws.php:24\nStack trace:\n#0 /tmp/tmpqwlmhrws.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqwlmhrws.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 2, 4, 6, 1, 3];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8d8ow68v.php:23\nStack trace:\n#0 /tmp/tmp8d8ow68v.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8d8ow68v.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpna8x1_lt.php:20\nStack trace:\n#0 /tmp/tmpna8x1_lt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpna8x1_lt.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [9] => 10\n    [8] => 9\n    [7] => 8\n    [6] => 7\n    [5] => 6\n    [4] => 5\n    [3] => 4\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptpr9gjlm.php:20\nStack trace:\n#0 /tmp/tmptpr9gjlm.php(25): test()\n#1 {main}\n  thrown in /tmp/tmptpr9gjlm.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 1, 2, 5, 4];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpje6w1ee_.php:22\nStack trace:\n#0 /tmp/tmpje6w1ee_.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpje6w1ee_.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n    [9] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8r0j6qg.php:24\nStack trace:\n#0 /tmp/tmpt8r0j6qg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt8r0j6qg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho 'Unsorted: ' . implode(', ', $list) . PHP_EOL;\necho 'Sorted: ' . implode(', ', heap_sort($list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Unsorted: 1, 4, 8, 7, 9, 10, 5, 3, 6, 2\nSorted: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbnz2vqm.php:25\nStack trace:\n#0 /tmp/tmpmbnz2vqm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmbnz2vqm.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\necho implode(', ', $list) . \"\\n\";\n$sorted = heap_sort($list);\necho implode(', ', $sorted) . \"\\n\";\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "4, 5, 2, 8, 7, 10, 6, 3, 9, 1\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f_a7qem.php:25\nStack trace:\n#0 /tmp/tmp9f_a7qem.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9f_a7qem.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [3, 4, 2, 1, 5, 7, 6];\n\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [6] => 7\n    [5] => 6\n    [4] => 5\n    [3] => 4\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_g0ut74.php:20\nStack trace:\n#0 /tmp/tmpz_g0ut74.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpz_g0ut74.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsjuugh_9.php:20\nStack trace:\n#0 /tmp/tmpsjuugh_9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsjuugh_9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n    [9] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbqfb9xk1.php:23\nStack trace:\n#0 /tmp/tmpbqfb9xk1.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbqfb9xk1.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    return iterator_to_array($heap);\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [9] => 10\n    [8] => 9\n    [7] => 8\n    [6] => 7\n    [5] => 6\n    [4] => 5\n    [3] => 4\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplftp0q1f.php:21\nStack trace:\n#0 /tmp/tmplftp0q1f.php(26): test()\n#1 {main}\n  thrown in /tmp/tmplftp0q1f.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 5, 2, 7, 3, 9, 4, 6, 8];\necho implode(', ', heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "9, 8, 7, 6, 5, 4, 3, 2, 1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7tfg2b9.php:22\nStack trace:\n#0 /tmp/tmpw7tfg2b9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpw7tfg2b9.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp120thu0r.php:23\nStack trace:\n#0 /tmp/tmp120thu0r.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp120thu0r.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 5, 4];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7u6o1yg.php:22\nStack trace:\n#0 /tmp/tmpm7u6o1yg.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpm7u6o1yg.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 5, 2, 1, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaldd4fy2.php:24\nStack trace:\n#0 /tmp/tmpaldd4fy2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpaldd4fy2.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\nvar_dump(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "array(5) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(4)\n  [2]=>\n  int(3)\n  [3]=>\n  int(2)\n  [4]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa39tybcm.php:23\nStack trace:\n#0 /tmp/tmpa39tybcm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpa39tybcm.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 5, 3, 2, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpulx8pkil.php:24\nStack trace:\n#0 /tmp/tmpulx8pkil.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpulx8pkil.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppzkuyr4x.php:25\nStack trace:\n#0 /tmp/tmppzkuyr4x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppzkuyr4x.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsjuugh_9.php:20\nStack trace:\n#0 /tmp/tmpsjuugh_9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsjuugh_9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = array();\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = array(4, 2, 5, 1, 3);\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbnt0vem2.php:24\nStack trace:\n#0 /tmp/tmpbnt0vem2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbnt0vem2.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 5, 3, 2, 4];\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj915rdyr.php:22\nStack trace:\n#0 /tmp/tmpj915rdyr.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpj915rdyr.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n\n    return $sorted;\n}\n\n$list = [5, 3, 2, 4, 1];\n$sorted = heap_sort($list);\n\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zxgf0h8.php:26\nStack trace:\n#0 /tmp/tmp2zxgf0h8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2zxgf0h8.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 6, 7, 8, 1, 2, 12, 14];\n$sorted_list = heap_sort($list);\nprint_r($sorted_list);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 14\n    [1] => 12\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 2\n    [7] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1z089_81.php:24\nStack trace:\n#0 /tmp/tmp1z089_81.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1z089_81.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\nprint_r(heap_sort($list));\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvw_l1z6.php:24\nStack trace:\n#0 /tmp/tmplvw_l1z6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplvw_l1z6.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [3, 2, 1, 4, 5];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpat9g1x12.php:23\nStack trace:\n#0 /tmp/tmpat9g1x12.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpat9g1x12.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n\n    return $sorted;\n}\n\n$unsorted = [1, 3, 2, 5, 4];\n$sorted = heap_sort($unsorted);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptq558khc.php:26\nStack trace:\n#0 /tmp/tmptq558khc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmptq558khc.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpukbbevnk.php:23\nStack trace:\n#0 /tmp/tmpukbbevnk.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpukbbevnk.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuz___k.php:20\nStack trace:\n#0 /tmp/tmpgwuz___k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwuz___k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 3, 1, 4, 2];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe1k4oq3_.php:24\nStack trace:\n#0 /tmp/tmpe1k4oq3_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpe1k4oq3_.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nshuffle($list);\n\necho \"Unsorted:\\n\";\nprint_r($list);\n\n$sorted = heap_sort($list);\n\necho \"Sorted:\\n\";\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Unsorted:\nArray\n(\n    [0] => 10\n    [1] => 4\n    [2] => 7\n    [3] => 5\n    [4] => 2\n    [5] => 1\n    [6] => 8\n    [7] => 3\n    [8] => 6\n    [9] => 9\n)\nSorted:\nArray\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9d9ejdsr.php:31\nStack trace:\n#0 /tmp/tmp9d9ejdsr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9d9ejdsr.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $value) {\n        $heap->insert($value);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [1, 3, 2, 5, 4];\n$sorted = heap_sort($list);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509923,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6mq06jq.php:23\nStack trace:\n#0 /tmp/tmpx6mq06jq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpx6mq06jq.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $sorted = [];\n    while (!$heap->isEmpty()) {\n        $sorted[] = $heap->extract();\n    }\n    return $sorted;\n}\n\n$list = [5, 2, 9, 1, 3, 7, 4, 8, 6];\n$sorted = heap_sort($list);\nprint_r($sorted);\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqrnl5hsi.php:24\nStack trace:\n#0 /tmp/tmpqrnl5hsi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqrnl5hsi.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n    $heap = new SplMaxHeap();\n    foreach ($iterable as $item) {\n        $heap->insert($item);\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$list = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_sort($list));\n\nfunction candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcq_uk7at.php:23\nStack trace:\n#0 /tmp/tmpcq_uk7at.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcq_uk7at.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}