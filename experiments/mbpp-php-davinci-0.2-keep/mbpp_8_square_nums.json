{
  "name": "mbpp_8_square_nums",
  "language": "php",
  "prompt": "<?php\n// Write a function to find squares of individual elements in a list.\nfunction square_nums($nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return square_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== array(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 20, 30)) !== array(100, 400, 900)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 15)) !== array(144, 225)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $squares = array();\n    foreach ($nums as $num) {\n        array_push($squares, $num * $num);\n    }\n    return $squares;\n}\n\n$nums = array(1, 2, 3, 4, 5);\n$squares = square_nums($nums);\nprint_r($squares);",
    "    $squares = [];\n    foreach ($nums as $num) {\n        array_push($squares, $num * $num);\n    }\n    return $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\necho implode(', ', square_nums($nums));",
    "    $squares = [];\n    foreach ($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n",
    "\t$squares = array();\n\tforeach ($nums as $num) {\n\t\t$squares[] = $num * $num;\n\t}\n\treturn $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\nprint_r(square_nums($nums));\n",
    "    $squares = [];\n    foreach($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\n$squares = square_nums($nums);\nprint_r($squares);\n",
    "    $squares = array();\n    foreach ($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n\n$nums = array(1, 2, 3, 4, 5);\n$squares = square_nums($nums);\nprint_r($squares);\n",
    "    $squares = array();\n    foreach ($nums as $num) {\n        array_push($squares, $num * $num);\n    }\n    return $squares;\n}\n\n$nums = array(1, 2, 3, 4, 5);\nprint_r(square_nums($nums));\n",
    "    $squares = [];\n    foreach ($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\nprint_r(square_nums($nums));\n",
    "  $squares = [];\n  foreach ($nums as $num) {\n    $squares[] = $num * $num;\n  }\n  return $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\necho implode(', ', square_nums($nums));",
    "    $squares = [];\n    foreach ($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\n$squares = square_nums($nums);\nprint_r($squares);\n",
    "    $squares = [];\n    foreach ($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\nprint_r(square_nums($nums));\n",
    "    $squares = [];\n    foreach ($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\n$squares = square_nums($nums);\nprint_r($squares);\n",
    "\t$squares = [];\n\tforeach ($nums as $num) {\n\t\t$squares[] = $num * $num;\n\t}\n\treturn $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\n$squares = square_nums($nums);\nprint_r($squares);\n",
    "    $squares = [];\n    foreach ($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\nprint_r(square_nums($nums));\n",
    "    $squares = [];\n    foreach ($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\n$squares = square_nums($nums);\nprint_r($squares);\n",
    "    $squares = [];\n    foreach ($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n",
    "    $squares = [];\n    foreach ($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\n$squares = square_nums($nums);\nprint_r($squares);\n",
    "    $squares = [];\n    foreach ($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\n$squares = square_nums($nums);\nprint_r($squares);\n",
    "    $squares = [];\n    foreach ($nums as $num) {\n        $squares[] = $num * $num;\n    }\n    return $squares;\n}\n\nprint_r(square_nums([1, 2, 3, 4, 5]));\n",
    "  $squares = [];\n  foreach ($nums as $num) {\n    $squares[] = $num * $num;\n  }\n  return $squares;\n}\n\n$nums = [1, 2, 3, 4, 5];\n$squares = square_nums($nums);\nprint_r($squares);\n"
  ]
}