{
  "name": "mbpp_301_dict_depth",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => array(\n                        'g' => array(\n                            'h' => array(\n                                'i' => array(\n                                    'j' => array(\n                                        'k' => array(\n                                            'l' => array(\n                                                'm' => array(\n                                                    'n' => array(\n                                                        'o' => array(\n                                                            'p' => array(\n                                                                'q' => array(\n                                                                    'r' => array(\n                                                                        's' => array(\n                                                                            't' => array(\n                                                                                'u' => array(\n                                                                                    'v' => array(\n                                                                                        'w' => array(\n                                                                                            'x' => array(\n                                                                                                'y' => array(\n                                                                                                    'z' => array(\n                                                                                                        'aa' => array(\n                                                                                                            'bb' => array(\n                                                                                                                'cc' => array(\n                                                                                                                    'dd' => array(\n                                                                                                                        'ee' => array(\n                                                                                                                            'ff' => array(\n                                                                                                                                'gg' => array(\n                                                                                                                                    'hh' => array(\n                                                                                                                                        'ii' => array(\n                                                                                                                                            'jj' => array(\n                                                                                                                                                'kk' => array(\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp1sxd8p_0.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 1;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = 1 + dict_depth($v);\n      if ($depth > $max) {\n        $max = $depth;\n      }\n    }\n  }\n  return $max;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $d = dict_depth($v);\n            if ($d > $max) {\n                $max = $d;\n            }\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n                'h' => array(\n                    'i' => 5,\n                    'j' => array(\n                        'k' => 6,\n                        'l' => array(\n                            'm' => 7,\n                            'n' => array(\n                                'o' => 8,\n                                'p' => array(\n                                    'q' => 9,\n                                    'r' => array(\n                                        's' => 10,\n                                        't' => array(\n                                            'u' => 11,\n                                            'v' => array(\n                                                'w' => 12,\n                                                'x' => array(\n                                                    'y' => 13,\n                                                    'z' => 14,\n                                                ),\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "13",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => array(\n                        'g' => array(\n                            'h' => array(\n                                'i' => array(\n                                    'j' => array(\n                                        'k' => array(\n                                            'l' => array(\n                                                'm' => array(\n                                                    'n' => array(\n                                                        'o' => array(\n                                                            'p' => array(\n                                                                'q' => array(\n                                                                    'r' => array(\n                                                                        's' => array(\n                                                                            't' => array(\n                                                                                'u' => array(\n                                                                                    'v' => array(\n                                                                                        'w' => array(\n                                                                                            'x' => array(\n                                                                                                'y' => array(\n                                                                                                    'z' => array(\n                                                                                                        'aa' => array(\n                                                                                                            'bb' => array(\n                                                                                                                'cc' => array(\n                                                                                                                    'dd' => array(\n                                                                                                                        'ee' => array(\n                                                                                                                            'ff' => array(\n                                                                                                                                'gg' => array(\n                                                                                                                                    'hh' => array(\n                                                                                                                                        'ii' => array(\n                                                                                                                                            'jj' => array(\n                                                                                                                                                'kk' => array(\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpgyndu6s6.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => 3,\n            'e' => 4,\n        ),\n        'f' => 5,\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $depth = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = max($depth, dict_depth($v));\n        }\n    }\n    return $depth + 1;\n}\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $key => $value) {\n    if (is_array($value)) {\n      $depth = dict_depth($value);\n      if ($depth > $max) {\n        $max = $depth;\n      }\n    }\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => array(\n      'd' => array(\n        'e' => 1,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => array(\n                        'g' => array(\n                            'h' => array(\n                                'i' => array(\n                                    'j' => array(\n                                        'k' => array(\n                                            'l' => array(\n                                                'm' => array(\n                                                    'n' => array(\n                                                        'o' => array(\n                                                            'p' => array(\n                                                                'q' => array(\n                                                                    'r' => array(\n                                                                        's' => array(\n                                                                            't' => array(\n                                                                                'u' => array(\n                                                                                    'v' => array(\n                                                                                        'w' => array(\n                                                                                            'x' => array(\n                                                                                                'y' => array(\n                                                                                                    'z' => array(\n                                                                                                        'aa' => array(\n                                                                                                            'bb' => array(\n                                                                                                                'cc' => array(\n                                                                                                                    'dd' => array(\n                                                                                                                        'ee' => array(\n                                                                                                                            'ff' => array(\n                                                                                                                                'gg' => array(\n                                                                                                                                    'hh' => array(\n                                                                                                                                        'ii' => array(\n                                                                                                                                            'jj' => array(\n                                                                                                                                                'kk' => array(\n                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp1wyfuuhb.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n        ),\n    ),\n);\n\necho dict_depth($d); // 3\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n\t$max = 1;\n\tforeach ($d as $k => $v) {\n\t\tif (is_array($v)) {\n\t\t\t$max = max($max, 1 + dict_depth($v));\n\t\t}\n\t}\n\treturn $max;\n}\n\n$d = array(\n\t'a' => 1,\n\t'b' => array(\n\t\t'c' => 2,\n\t\t'd' => array(\n\t\t\t'e' => 3\n\t\t)\n\t)\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  if (!is_array($d)) return 0;\n  $max = 0;\n  foreach ($d as $v) {\n    $depth = dict_depth($v);\n    if ($depth > $max) $max = $depth;\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => array(\n    'b' => array(\n      'c' => array(\n        'd' => array(\n          'e' => array(\n            'f' => array(\n              'g' => array(\n                'h' => array(\n                  'i' => array(\n                    'j' => array(\n                      'k' => array(\n                        'l' => array(\n                          'm' => array(\n                            'n' => array(\n                              'o' => array(\n                                'p' => array(\n                                  'q' => array(\n                                    'r' => array(\n                                      's' => array(\n                                        't' => array(\n                                          'u' => array(\n                                            'v' => array(\n                                              'w' => array(\n                                                'x' => array(\n                                                  'y' => array(\n                                                    'z' => array(\n                                                      'a' => array(\n                                                        'b' => array(\n                                                          'c' => array(\n                                                            'd' => array(\n                                                              'e' => array(\n                                                                'f' => array(\n                                                                  'g' => array(\n                                                                    'h' => array(\n                                                                      'i' => array(\n                                                                        'j' => array(\n                                                                          'k' => array(\n                                                                            'l' => array(\n                                                                              'm' => array(\n                                                                                'n' => array(\n                                                                                  'o' => array(\n                                                                                    'p' => array(\n                                                                                      'q' => array(\n                                                                                        'r' => array(\n                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpxnz83ovr.php on line 59\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 1;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v) + 1;\n      if ($depth > $max) {\n        $max = $depth;\n      }\n    }\n  }\n  return $max;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => array(\n      'd' => array(\n        'e' => 1,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n        'h' => 6,\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n                'h' => array(\n                    'i' => 5,\n                ),\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $max = max($max, dict_depth($v));\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'aa' => array(\n                                                                                                                'bb' => array(\n                                                                                                                    'cc' => array(\n                                                                                                                        'dd' => array(\n                                                                                                                            'ee' => array(\n                                                                                                                                'ff' => array(\n                                                                                                                                    'gg' => array(\n                                                                                                                                        'hh' => array(\n                                                                                                                                            'ii' => array(\n                                                                                                                                                'jj' => array(\n                                                                                                                                                    'kk' => array(\n                                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp6hjk0cjd.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (is_array($d)) {\n        $max = 0;\n        foreach ($d as $v) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n        return $max + 1;\n    }\n    return 0;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            '0' => array(\n                                                                                                                '1' => array(\n                                                                                                                    '2' => array(\n                                                                                                                        '3' => array(\n                                                                                                                            '4' => array(\n                                                                                                                                '5' => array(\n                                                                                                                                    '6' => array(\n                                                                                                                                        '7' => array(\n                                                                                                                                            '8' => array(\n                                                                                                                                                '9' => array(\n                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpirkadv1i.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    \"key1\" => 1,\n    \"key2\" => array(\n        \"key3\" => 1,\n        \"key4\" => array(\n            \"key5\" => 4\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) return 0;\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) $max = $depth;\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'aa' => array(\n                                                                                                                'ab' => array(\n                                                                                                                    'ac' => array(\n                                                                                                                        'ad' => array(\n                                                                                                                            'ae' => array(\n                                                                                                                                'af' => array(\n                                                                                                                                    'ag' => array(\n                                                                                                                                        'ah' => array(\n                                                                                                                                            'ai' => array(\n                                                                                                                                                'aj' => array(\n                                                                                                                                                    'ak' => array(\n                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpp8i62m7_.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v);\n      if ($depth > $max) {\n        $max = $depth;\n      }\n    }\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n      ),\n    ),\n  ),\n);\n\nprint dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'aa' => array(\n                                                                                                                'bb' => array(\n                                                                                                                    'cc' => array(\n                                                                                                                        'dd' => array(\n                                                                                                                            'ee' => array(\n                                                                                                                                'ff' => array(\n                                                                                                                                    'gg' => array(\n                                                                                                                                        'hh' => array(\n                                                                                                                                            'ii' => array(\n                                                                                                                                                'jj' => array(\n                                                                                                                                                    'kk' => array(\n                                                                                                                                                       \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpvn7ejmwa.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, 1 + dict_depth($v));\n        }\n    }\n    return $max;\n}\n\n$d = array('a' => 1, 'b' => array('c' => 2, 'd' => array('e' => 3)));\nprint_r(dict_depth($d));\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => 3,\n            'e' => 4,\n        ),\n        'f' => 5,\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n                'h' => array(\n                    'i' => 5,\n                    'j' => array(\n                        'k' => 6,\n                        'l' => array(\n                            'm' => 7,\n                            'n' => array(\n                                'o' => 8,\n                                'p' => array(\n                                    'q' => 9,\n                                    'r' => array(\n                                        's' => 10,\n                                        't' => array(\n                                            'u' => 11,\n                                            'v' => array(\n                                                'w' => 12,\n                                                'x' => array(\n                                                    'y' => 13,\n                                                    'z' => 14,\n                                                ),\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "13",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4\n            )\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => 3,\n            'e' => 4,\n        ),\n        'f' => 5,\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max + 1;\n}\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v) + 1;\n      if ($depth > $max) {\n        $max = $depth;\n      }\n    }\n  }\n  return $max;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpennz4lnb.php:35\nStack trace:\n#0 /tmp/tmpennz4lnb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpennz4lnb.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) {\n            $max = $depth;\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmprp1lza4g.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'aa' => array(\n                                                                                                                'bb' => array(\n                                                                                                                    'cc' => array(\n                                                                                                                        'dd' => array(\n                                                                                                                            'ee' => array(\n                                                                                                                                'ff' => array(\n                                                                                                                                    'gg' => array(\n                                                                                                                                        'hh' => array(\n                                                                                                                                            'ii' => array(\n                                                                                                                                                'jj' => array(\n                                                                                                                                                    '\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmpb__3bq0l.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n        'h' => 6,\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpoab8a64u.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n        'h' => 6,\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\nprint_r(dict_depth($d));\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 1;\n  foreach ($d as $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v) + 1;\n      if ($depth > $max) {\n        $max = $depth;\n      }\n    }\n  }\n  return $max;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => array(\n      'd' => array(\n        'e' => array(\n          'f' => array(\n            'g' => array(\n              'h' => array(\n                'i' => array(\n                  'j' => array(\n                    'k' => array(\n                      'l' => array(\n                        'm' => array(\n                          'n' => array(\n                            'o' => array(\n                              'p' => array(\n                                'q' => array(\n                                  'r' => array(\n                                    's' => array(\n                                      't' => array(\n                                        'u' => array(\n                                          'v' => array(\n                                            'w' => array(\n                                              'x' => array(\n                                                'y' => array(\n                                                  'z' => array(\n                                                    'a' => 1,\n                                                    'b' => 1,\n                                                    'c' => 1,\n                                                    'd' => 1,\n                                                    'e' => 1,\n                                                    'f' => 1,\n                                                    'g' => 1,\n                                                    'h' => 1,\n                                                    'i' => 1,\n                                                    'j' => 1,\n                                                    'k' => 1,\n                                                    'l' => 1,\n                                                    'm' => 1,\n                                                    'n' => 1,\n                                                    'o' => 1,\n                                                    'p' => 1,\n                                                    'q' => 1,\n                                                    'r' => 1,\n                                                    's' => 1,\n                                                    't' => 1,\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp54esdpcu.php on line 64\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $depth = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = max($depth, dict_depth($v));\n    }\n  }\n  return $depth + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n        'h' => 5,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) return 0;\n    $max = 1;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) $max = $depth;\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_nmoyo3f.php:29\nStack trace:\n#0 /tmp/tmp_nmoyo3f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_nmoyo3f.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => array(\n                        'g' => array(\n                            'h' => array(\n                                'i' => array(\n                                    'j' => array(\n                                        'k' => array(\n                                            'l' => array(\n                                                'm' => array(\n                                                    'n' => array(\n                                                        'o' => array(\n                                                            'p' => array(\n                                                                'q' => array(\n                                                                    'r' => array(\n                                                                        's' => array(\n                                                                            't' => array(\n                                                                                'u' => array(\n                                                                                    'v' => array(\n                                                                                        'w' => array(\n                                                                                            'x' => array(\n                                                                                                'y' => array(\n                                                                                                    'z' => array(\n                                                                                                        'aa' => array(\n                                                                                                            'bb' => array(\n                                                                                                                'cc' => array(\n                                                                                                                    'dd' => array(\n                                                                                                                        'ee' => array(\n                                                                                                                            'ff' => array(\n                                                                                                                                'gg' => array(\n                                                                                                                                    'hh' => array(\n                                                                                                                                        'ii' => array(\n                                                                                                                                            'jj' => array(\n                                                                                                                                                'kk' => array(\n                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmptty5s8t_.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) return 0;\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) $max = $depth;\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    \"key1\" => 1,\n    \"key2\" => array(\n        \"key3\" => 1,\n        \"key4\" => array(\n            \"key5\" => 4\n        ),\n    ),\n);\n\nprint_r(dict_depth($d));\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl2ma395k.php:32\nStack trace:\n#0 /tmp/tmpl2ma395k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpl2ma395k.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (is_array($d)) {\n        $max = 0;\n        foreach ($d as $v) {\n            $max = max($max, dict_depth($v));\n        }\n        return $max + 1;\n    }\n    return 0;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                                                                    'k' => array(\n                                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp1v62yhhv.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $k => $v) {\n        $max = max($max, dict_depth($v));\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $key => $value) {\n        if (is_array($value)) {\n            $depth = dict_depth($value) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max_depth = 1;\n  foreach ($d as $key => $value) {\n    if (is_array($value)) {\n      $depth = dict_depth($value) + 1;\n      if ($depth > $max_depth) {\n        $max_depth = $depth;\n      }\n    }\n  }\n  return $max_depth;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => array(\n      'd' => array(\n        'e' => array(\n          'f' => array(\n            'g' => array(\n              'h' => array(\n                'i' => array(\n                  'j' => array(\n                    'k' => array(\n                      'l' => array(\n                        'm' => array(\n                          'n' => array(\n                            'o' => array(\n                              'p' => array(\n                                'q' => array(\n                                  'r' => array(\n                                    's' => array(\n                                      't' => array(\n                                        'u' => array(\n                                          'v' => array(\n                                            'w' => array(\n                                              'x' => array(\n                                                'y' => array(\n                                                  'z' => array(\n                                                    'a' => 1,\n                                                  ),\n                                                ),\n                                              ),\n                                            ),\n                                          ),\n                                        ),\n                                      ),\n                                    ),\n                                  ),\n                                ),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (is_array($d)) {\n        $max = 0;\n        foreach ($d as $v) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n        return $max + 1;\n    }\n    return 0;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp0b411csc.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $depth = 0;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = max($depth, dict_depth($v));\n        }\n    }\n    return $depth + 1;\n}\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if(!is_array($d)) return 0;\n    $max = 0;\n    foreach($d as $v) {\n        $depth = dict_depth($v);\n        if($depth > $max) $max = $depth;\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'aa' => array(\n                                                                                                                'bb' => array(\n                                                                                                                    'cc' => array(\n                                                                                                                        'dd' => array(\n                                                                                                                            'ee' => array(\n                                                                                                                                'ff' => array(\n                                                                                                                                    'gg' => array(\n                                                                                                                                        'hh' => array(\n                                                                                                                                            'ii' => array(\n                                                                                                                                                'jj' => array(\n                                                                                                                                                    'kk' => array(\n                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpkmiek_7c.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) return 0;\n    $depth = 1;\n    foreach ($d as $v) {\n        $depth = max($depth, 1 + dict_depth($v));\n    }\n    return $depth;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                                                                    'k' => array(\n                                                                                                                                                        'l' =>\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp53zm9k2m.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n        'h' => 6,\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) {\n            $max = $depth;\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'aa' => array(\n                                                                                                                'bb' => array(\n                                                                                                                    'cc' => array(\n                                                                                                                        'dd' => array(\n                                                                                                                            'ee' => array(\n                                                                                                                                'ff' => array(\n                                                                                                                                    'gg' => array(\n                                                                                                                                        'hh' => array(\n                                                                                                                                            'ii' => array(\n                                                                                                                                                'jj' => array(\n                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4h0mqry6.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n\n    return $max_depth;\n}\n\n$d = [\n    'key1' => 1,\n    'key2' => [\n        'key3' => 1,\n        'key4' => [\n            'key5' => 4\n        ],\n    ],\n];\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 1;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $max = max($max, 1 + dict_depth($v));\n    }\n  }\n  return $max;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $depth = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = max($depth, dict_depth($v));\n    }\n  }\n  return $depth + 1;\n}\n\n$d = array(\n  'a' => array(\n    'b' => array(\n      'c' => array(\n        'd' => array(\n          'e' => array(\n            'f' => array(\n              'g' => array(\n                'h' => array(\n                  'i' => array(\n                    'j' => array(\n                      'k' => array(\n                        'l' => array(\n                          'm' => array(\n                            'n' => array(\n                              'o' => array(\n                                'p' => array(\n                                  'q' => array(\n                                    'r' => array(\n                                      's' => array(\n                                        't' => array(\n                                          'u' => array(\n                                            'v' => array(\n                                              'w' => array(\n                                                'x' => array(\n                                                  'y' => array(\n                                                    'z' => array(\n                                                      'a' => array(\n                                                        'b' => array(\n                                                          'c' => array(\n                                                            'd' => array(\n                                                              'e' => array(\n                                                                'f' => array(\n                                                                  'g' => array(\n                                                                    'h' => array(\n                                                                      'i' => array(\n                                                                        'j' => array(\n                                                                          'k' => array(\n                                                                            'l' => array(\n                                                                              'm' => array(\n                                                                                'n' => array(\n                                                                                  'o' => array(\n                                                                                    'p' => array(\n                                                                                      'q' => array(\n                                                                                        'r' => array(\n                                                                                          's'\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpv6bwgaqp.php on line 59\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 1;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $max = max($max, 1 + dict_depth($v));\n    }\n  }\n  return $max;\n}\n\n$d = array('a' => 1, 'b' => array('c' => 2, 'd' => array('e' => 3)));\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6p0d800.php:33\nStack trace:\n#0 /tmp/tmpi6p0d800.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpi6p0d800.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $k => $v) {\n        $max = max($max, dict_depth($v));\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n                'h' => 5,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 1;\n  foreach ($d as $v) {\n    if (is_array($v)) {\n      $max = max($max, 1 + dict_depth($v));\n    }\n  }\n  return $max;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n        'h' => 5,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $depth = 0;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = max($depth, dict_depth($v));\n        }\n    }\n    return $depth + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'aa' => array(\n                                                                                                                'bb' => array(\n                                                                                                                    'cc' => array(\n                                                                                                                        'dd' => array(\n                                                                                                                            'ee' => array(\n                                                                                                                                'ff' => array(\n                                                                                                                                    'gg' => array(\n                                                                                                                                        'hh' => array(\n                                                                                                                                            'ii' => array(\n                                                                                                                                                'jj' => array(\n                                                                                                                                                    '\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmpb__3bq0l.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n        'h' => 6,\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max_depth = 1;\n  foreach($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v) + 1;\n      if ($depth > $max_depth) {\n        $max_depth = $depth;\n      }\n    }\n  }\n  return $max_depth;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => array(\n      'd' => array(\n        'e' => 1\n      )\n    )\n  )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $d = dict_depth($v) + 1;\n            if ($d > $max) {\n                $max = $d;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n        'h' => 6,\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => array(\n                        'g' => array(\n                            'h' => array(\n                                'i' => array(\n                                    'j' => array(\n                                        'k' => array(\n                                            'l' => array(\n                                                'm' => array(\n                                                    'n' => array(\n                                                        'o' => array(\n                                                            'p' => array(\n                                                                'q' => array(\n                                                                    'r' => array(\n                                                                        's' => array(\n                                                                            't' => array(\n                                                                                'u' => array(\n                                                                                    'v' => array(\n                                                                                        'w' => array(\n                                                                                            'x' => array(\n                                                                                                'y' => array(\n                                                                                                    'z' => 1,\n                                                                                                ),\n                                                                                            ),\n                                                                                        ),\n                                                                                    ),\n                                                                                ),\n                                                                            ),\n                                                                        ),\n                                                                    ),\n                                                                ),\n                                                            ),\n                                                        ),\n                                                    ),\n                                                ),\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcz2c4cc.php:75\nStack trace:\n#0 /tmp/tmpjcz2c4cc.php(80): test()\n#1 {main}\n  thrown in /tmp/tmpjcz2c4cc.php on line 75\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) return 0;\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) $max = $depth;\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                                                                    'k' => array(\n                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpwkgjtzy1.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n        'h' => 6,\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) return 0;\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) $max = $depth;\n    }\n    return $max + 1;\n}\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v);\n      if ($depth > $max) {\n        $max = $depth;\n      }\n    }\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => array(\n      'd' => array(\n        'e' => array(\n          'f' => 1,\n        ),\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max_depth = 1;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v) + 1;\n      if ($depth > $max_depth) {\n        $max_depth = $depth;\n      }\n    }\n  }\n  return $max_depth;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => array(\n      'd' => 3,\n      'e' => 4,\n    ),\n    'f' => 5,\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\nvar_dump(dict_depth($d));\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "int(4)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  if (!is_array($d)) {\n    return 0;\n  }\n  $max = 0;\n  foreach ($d as $k => $v) {\n    $max = max($max, dict_depth($v));\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) {\n            $max = $depth;\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'A' => array(\n                                                                                                                'B' => array(\n                                                                                                                    'C' => array(\n                                                                                                                        'D' => array(\n                                                                                                                            'E' => array(\n                                                                                                                                'F' => array(\n                                                                                                                                    'G' => array(\n                                                                                                                                        'H' => array(\n                                                                                                                                            'I' => array(\n                                                                                                                                                'J' => array(\n                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpdtoi08zt.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => 1,\n                ),\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $k => $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) {\n            $max = $depth;\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) {\n            $max = $depth;\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2m7hl6cz.php:35\nStack trace:\n#0 /tmp/tmp2m7hl6cz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2m7hl6cz.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n\t$max = 1;\n\tforeach ($d as $k => $v) {\n\t\tif (is_array($v)) {\n\t\t\t$max = max($max, dict_depth($v) + 1);\n\t\t}\n\t}\n\treturn $max;\n}\n\n$d = array(\n\t'a' => array(\n\t\t'b' => array(\n\t\t\t'c' => array(\n\t\t\t\t'd' => array(\n\t\t\t\t\t'e' => array(\n\t\t\t\t\t\t'f' => array(\n\t\t\t\t\t\t\t'g' => array(\n\t\t\t\t\t\t\t\t'h' => array(\n\t\t\t\t\t\t\t\t\t'i' => array(\n\t\t\t\t\t\t\t\t\t\t'j' => array(\n\t\t\t\t\t\t\t\t\t\t\t'k' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t'l' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'm' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'n' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'o' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'p' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'q' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'r' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t's' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t't' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'u' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'v' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'w' => array(\n\t\t\t\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp9k0qqwww.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => array(\n                        'g' => array(\n                            'h' => array(\n                                'i' => array(\n                                    'j' => array(\n                                        'k' => array(\n                                            'l' => array(\n                                                'm' => array(\n                                                    'n' => array(\n                                                        'o' => array(\n                                                            'p' => array(\n                                                                'q' => array(\n                                                                    'r' => array(\n                                                                        's' => array(\n                                                                            't' => array(\n                                                                                'u' => array(\n                                                                                    'v' => array(\n                                                                                        'w' => array(\n                                                                                            'x' => array(\n                                                                                                'y' => array(\n                                                                                                    'z' => array(\n                                                                                                        'a' => 1,\n                                                                                                        'b' => 2,\n                                                                                                        'c' => 3,\n                                                                                                        'd' => 4,\n                                                                                                        'e' => 5,\n                                                                                                        'f' => 6,\n                                                                                                        'g' => 7,\n                                                                                                        'h' => 8,\n                                                                                                        'i' => 9,\n                                                                                                        'j' => 10,\n                                                                                                        'k' => 11,\n                                                                                                        'l' => 12,\n                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpcfxki65m.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => array(\n                        'g' => array(\n                            'h' => array(\n                                'i' => array(\n                                    'j' => array(\n                                        'k' => array(\n                                            'l' => array(\n                                                'm' => array(\n                                                    'n' => array(\n                                                        'o' => array(\n                                                            'p' => array(\n                                                                'q' => array(\n                                                                    'r' => array(\n                                                                        's' => array(\n                                                                            't' => array(\n                                                                                'u' => array(\n                                                                                    'v' => array(\n                                                                                        'w' => array(\n                                                                                            'x' => array(\n                                                                                                'y' => array(\n                                                                                                    'z' => array(\n                                                                                                        'aa' => array(\n                                                                                                            'bb' => array(\n                                                                                                                'cc' => array(\n                                                                                                                    'dd' => array(\n                                                                                                                        'ee' => array(\n                                                                                                                            'ff' => array(\n                                                                                                                                'gg' => array(\n                                                                                                                                    'hh' => array(\n                                                                                                                                        'ii' => array(\n                                                                                                                                            'jj' => array(\n                                                                                                                                                'kk' => array(\n                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp1wyfuuhb.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (is_array($d)) {\n        $max = 0;\n        foreach ($d as $v) {\n            $max = max($max, dict_depth($v));\n        }\n        return $max + 1;\n    }\n    return 0;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                                                                    'k' => array(\n                                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp1v62yhhv.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $max = max($max, dict_depth($v));\n    }\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 1;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $max = max($max, dict_depth($v) + 1);\n    }\n  }\n  return $max;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => 3,\n            'e' => 4,\n        ),\n        'f' => 5,\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => 1,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $k => $v) {\n        $max = max($max, dict_depth($v));\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509729,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max_depth = 1;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v) + 1;\n      if ($depth > $max_depth) {\n        $max_depth = $depth;\n      }\n    }\n  }\n  return $max_depth;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => array(\n      'd' => array(\n        'e' => 1\n      )\n    )\n  )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => 3,\n            'e' => 4,\n        ),\n        'f' => 5,\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $depth = 0;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = max($depth, dict_depth($v));\n        }\n    }\n    return $depth + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, 1 + dict_depth($v));\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => array(\n                        'g' => array(\n                            'h' => array(\n                                'i' => array(\n                                    'j' => array(\n                                        'k' => array(\n                                            'l' => array(\n                                                'm' => array(\n                                                    'n' => array(\n                                                        'o' => array(\n                                                            'p' => array(\n                                                                'q' => array(\n                                                                    'r' => array(\n                                                                        's' => array(\n                                                                            't' => array(\n                                                                                'u' => array(\n                                                                                    'v' => array(\n                                                                                        'w' => array(\n                                                                                            'x' => array(\n                                                                                                'y' => array(\n                                                                                                    'z' => array(\n                                                                                                        'a' => 1,\n                                                                                                        'b' => 1,\n                                                                                                        'c' => 1,\n                                                                                                        'd' => 1,\n                                                                                                        'e' => 1,\n                                                                                                        'f' => 1,\n                                                                                                        'g' => 1,\n                                                                                                        'h' => 1,\n                                                                                                        'i' => 1,\n                                                                                                        'j' => 1,\n                                                                                                        'k' => 1,\n                                                                                                        'l' => 1,\n                                                                                                        '\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmppt8ppl3i.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 1;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $max = max($max, 1 + dict_depth($v));\n    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    \"key1\" => 1,\n    \"key2\" => array(\n        \"key3\" => 1,\n        \"key4\" => array(\n            \"key5\" => 4\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (is_array($d)) {\n        $max = 0;\n        foreach ($d as $v) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n        return $max + 1;\n    } else {\n        return 0;\n    }\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'A' => array(\n                                                                                                                'B' => array(\n                                                                                                                    'C' => array(\n                                                                                                                        'D' => array(\n                                                                                                                            'E' => array(\n                                                                                                                                'F' => array(\n                                                                                                                                    'G' => array(\n                                                                                                                                        'H' => array(\n                                                                                                                                            'I' => array(\n                                                                                                                                                'J' => array(\n                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpuhjtrhj_.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => array(\n                        'g' => array(\n                            'h' => array(\n                                'i' => array(\n                                    'j' => array(\n                                        'k' => array(\n                                            'l' => array(\n                                                'm' => array(\n                                                    'n' => array(\n                                                        'o' => array(\n                                                            'p' => array(\n                                                                'q' => array(\n                                                                    'r' => array(\n                                                                        's' => array(\n                                                                            't' => array(\n                                                                                'u' => array(\n                                                                                    'v' => array(\n                                                                                        'w' => array(\n                                                                                            'x' => array(\n                                                                                                'y' => array(\n                                                                                                    'z' => array(\n                                                                                                        'a' => 1,\n                                                                                                        'b' => 2,\n                                                                                                        'c' => 3,\n                                                                                                        'd' => 4,\n                                                                                                        'e' => 5,\n                                                                                                        'f' => 6,\n                                                                                                        'g' => 7,\n                                                                                                        'h' => 8,\n                                                                                                        'i' => 9,\n                                                                                                        'j' => 10,\n                                                                                                        'k' => 11,\n                                                                                                        'l' => 12,\n                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpcfxki65m.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4\n            )\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (is_array($d)) {\n        $max = 0;\n        foreach ($d as $v) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n        return $max + 1;\n    }\n    return 0;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp0b411csc.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) return 0;\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) $max = $depth;\n    }\n    return $max + 1;\n}\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => array(\n                        'g' => array(\n                            'h' => array(\n                                'i' => array(\n                                    'j' => array(\n                                        'k' => array(\n                                            'l' => array(\n                                                'm' => array(\n                                                    'n' => array(\n                                                        'o' => array(\n                                                            'p' => array(\n                                                                'q' => array(\n                                                                    'r' => array(\n                                                                        's' => array(\n                                                                            't' => array(\n                                                                                'u' => array(\n                                                                                    'v' => array(\n                                                                                        'w' => array(\n                                                                                            'x' => array(\n                                                                                                'y' => array(\n                                                                                                    'z' => array(\n                                                                                                        'a' => 1,\n                                                                                                        'b' => 2,\n                                                                                                        'c' => 3,\n                                                                                                        'd' => 4,\n                                                                                                        'e' => 5,\n                                                                                                        'f' => 6,\n                                                                                                        'g' => 7,\n                                                                                                        'h' => 8,\n                                                                                                        'i' => 9,\n                                                                                                        'j' => 10,\n                                                                                                        'k' => 11,\n                                                                                                        'l' => 12,\n                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpbn18_4cd.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $depth = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = max($depth, dict_depth($v));\n        }\n    }\n    return $depth + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = [\n    'a' => 1,\n    'b' => [\n        'c' => 2,\n        'd' => [\n            'e' => 3,\n        ],\n    ],\n];\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $max = max($max, dict_depth($v));\n    }\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $depth = 1;\n  foreach ($d as $v) {\n    if (is_array($v)) {\n      $depth = max($depth, 1 + dict_depth($v));\n    }\n  }\n  return $depth;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n        'h' => 6,\n    ),\n);\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $depth = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = max($depth, dict_depth($v));\n    }\n  }\n  return $depth + 1;\n}\n\n$d = array(\n  \"key1\" => 1,\n  \"key2\" => array(\n    \"key3\" => 1,\n    \"key4\" => array(\n      \"key5\" => 4\n    ),\n  ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v);\n      if ($depth > $max) {\n        $max = $depth;\n      }\n    }\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n        'h' => array(\n          'i' => 5,\n        ),\n      ),\n    ),\n  ),\n);\n\nprint_r(dict_depth($d));\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $k => $v) {\n        $max = max($max, dict_depth($v));\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                                                                    'k' => array(\n                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp9on2zxni.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'aa' => array(\n                                                                                                                'bb' => array(\n                                                                                                                    'cc' => array(\n                                                                                                                        'dd' => array(\n                                                                                                                            'ee' => array(\n                                                                                                                                'ff' => array(\n                                                                                                                                    'gg' => array(\n                                                                                                                                        'hh' => array(\n                                                                                                                                            'ii' => array(\n                                                                                                                                                'jj' => array(\n                                                                                                                                                    '\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmpb__3bq0l.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array('a' => 1, 'b' => array('c' => 2, 'd' => 3));\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (is_array($d)) {\n        $max = 0;\n        foreach ($d as $k => $v) {\n            $max = max($max, dict_depth($v));\n        }\n        return $max + 1;\n    }\n    return 0;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                                                                    'k' => array(\n                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp9sealxek.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4\n            )\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = max($depth, dict_depth($v) + 1);\n        }\n    }\n    return $depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    \"key1\" => 1,\n    \"key2\" => array(\n        \"key3\" => 1,\n        \"key4\" => array(\n            \"key5\" => 4\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n                'h' => array(\n                    'i' => 5,\n                    'j' => array(\n                        'k' => 6,\n                        'l' => array(\n                            'm' => 7,\n                            'n' => array(\n                                'o' => 8,\n                                'p' => array(\n                                    'q' => 9,\n                                    'r' => array(\n                                        's' => 10,\n                                        't' => array(\n                                            'u' => 11,\n                                            'v' => array(\n                                                'w' => 12,\n                                                'x' => array(\n                                                    'y' => 13,\n                                                    'z' => 14,\n                                                ),\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "13",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) return 0;\n    $max = 0;\n    foreach ($d as $k => $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) $max = $depth;\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d); // 3\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v);\n      if ($depth > $max) {\n        $max = $depth;\n      }\n    }\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n      ),\n    ),\n  ),\n);\n\nprint_r(dict_depth($d));\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach($d as $k => $v) {\n        if(is_array($v)) {\n            $depth = dict_depth($v);\n            if($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 'b',\n    'c' => array(\n        'd' => 'e',\n        'f' => array(\n            'g' => 'h',\n            'i' => 'j',\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, 1 + dict_depth($v));\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $max = max($max, dict_depth($v));\n    }\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $depth = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = max($depth, dict_depth($v));\n        }\n    }\n    return $depth + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => 1\n                )\n            )\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) {\n            $max = $depth;\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmprp1lza4g.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n        'h' => 6,\n    ),\n    'i' => 7,\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $depth = 0;\n  foreach($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = max($depth, dict_depth($v));\n    }\n  }\n  return $depth + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => array(\n      'd' => array(\n        'e' => array(\n          'f' => array(\n            'g' => array(\n              'h' => array(\n                'i' => array(\n                  'j' => array(\n                    'k' => array(\n                      'l' => array(\n                        'm' => array(\n                          'n' => array(\n                            'o' => array(\n                              'p' => array(\n                                'q' => array(\n                                  'r' => array(\n                                    's' => array(\n                                      't' => array(\n                                        'u' => array(\n                                          'v' => array(\n                                            'w' => array(\n                                              'x' => array(\n                                                'y' => array(\n                                                  'z' => array(\n                                                    'aa' => array(\n                                                      'bb' => array(\n                                                        'cc' => array(\n                                                          'dd' => array(\n                                                            'ee' => array(\n                                                              'ff' => array(\n                                                                'gg' => array(\n                                                                  'hh' => array(\n                                                                    'ii' => array(\n                                                                      'jj' => array(\n                                                                        'kk' => array(\n                                                                          'll' => array(\n                                                                            'mm' => array(\n                                                                              'nn' => array(\n                                                                                'oo' => array(\n                                                                                  'pp' => array(\n                                                                                    'qq' => array(\n                                                                                      'rr' => array(\n                                                                                        'ss' => array(\n                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpowz48wiw.php on line 60\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                                                                    '\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmp3d16iwfd.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $max = max($max, dict_depth($v));\n    }\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) {\n            $max = $depth;\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmprp1lza4g.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $depth = 1;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) return 0;\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) $max = $depth;\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'A' => array(\n                                                                                                                'B' => array(\n                                                                                                                    'C' => array(\n                                                                                                                        'D' => array(\n                                                                                                                            'E' => array(\n                                                                                                                                'F' => array(\n                                                                                                                                    'G' => array(\n                                                                                                                                        'H' => array(\n                                                                                                                                            'I' => array(\n                                                                                                                                                'J' => array(\n                                                                                                                                                    'K' => array(\n                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp6jphqz2h.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $k => $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) {\n            $max = $depth;\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpk609ro3e.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $k => $v) {\n        $max = max($max, dict_depth($v));\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n                'h' => array(\n                    'i' => 5,\n                    'j' => array(\n                        'k' => 6,\n                        'l' => array(\n                            'm' => 7,\n                        ),\n                    ),\n                ),\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "7",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => 1,\n                'f' => 1\n            )\n        )\n    )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max_depth = 1;\n  foreach ($d as $key => $value) {\n    if (is_array($value)) {\n      $depth = dict_depth($value) + 1;\n      if ($depth > $max_depth) {\n        $max_depth = $depth;\n      }\n    }\n  }\n  return $max_depth;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => 2,\n  'c' => array(\n    'd' => 3,\n    'e' => array(\n      'f' => 4,\n      'g' => 5,\n    ),\n  ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 1;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $max = max($max, 1 + dict_depth($v));\n    }\n  }\n  return $max;\n}\n\n$d = array('a' => 1, 'b' => array('c' => 2, 'd' => 3));\nprint dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) return 0;\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) $max = $depth;\n    }\n    return $max + 1;\n}\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v);\n      if ($depth > $max) {\n        $max = $depth;\n      }\n    }\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => array(\n      'd' => array(\n        'e' => 1,\n        'f' => 1,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => 3,\n            'e' => 4,\n        ),\n        'f' => 5,\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122489,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) return 0;\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) $max = $depth;\n    }\n    return $max + 1;\n}\n\n$d = array(\n    \"key1\" => 1,\n    \"key2\" => array(\n        \"key3\" => 1,\n        \"key4\" => array(\n            \"key5\" => 4\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $max = max($max, dict_depth($v));\n    }\n  }\n  return $max + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n      ),\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) {\n            $max = $depth;\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmprp1lza4g.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach($d as $v) {\n        if(is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n        'h' => 6,\n    ),\n    'i' => 7,\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => 1\n            )\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $max = max($max, dict_depth($v));\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) return 0;\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) $max = $depth;\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'A' => array(\n                                                                                                                'B' => array(\n                                                                                                                    'C' => array(\n                                                                                                                        'D' => array(\n                                                                                                                            'E' => array(\n                                                                                                                                'F' => array(\n                                                                                                                                    'G' => array(\n                                                                                                                                        'H' => array(\n                                                                                                                                            'I' => array(\n                                                                                                                                                'J' => array(\n                                                                                                                                                    'K' => array(\n                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp6jphqz2h.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 0;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v);\n      if ($depth > $max) {\n        $max = $depth;\n      }\n    }\n  }\n  return $max + 1;\n}\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 1;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $max = max($max, 1 + dict_depth($v));\n    }\n  }\n  return $max;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3\n    )\n  )\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max_depth = 1;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v) + 1;\n      if ($depth > $max_depth) {\n        $max_depth = $depth;\n      }\n    }\n  }\n  return $max_depth;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => array(\n      'd' => 3,\n      'e' => 4,\n    ),\n    'f' => 5,\n  ),\n);\n\nprint_r(dict_depth($d));\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 1;\n  foreach ($d as $v) {\n    if (is_array($v)) {\n      $depth = dict_depth($v) + 1;\n      if ($depth > $max) {\n        $max = $depth;\n      }\n    }\n  }\n  return $max;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => 2,\n  'c' => array(\n    'd' => 3,\n    'e' => array(\n      'f' => 4,\n      'g' => 5,\n    ),\n  ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => 3,\n            'e' => 4,\n        ),\n        'f' => 5,\n    ),\n);\n\nprint dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) {\n            $max = $depth;\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'aa' => array(\n                                                                                                                'bb' => array(\n                                                                                                                    'cc' => array(\n                                                                                                                        'dd' => array(\n                                                                                                                            'ee' => array(\n                                                                                                                                'ff' => array(\n                                                                                                                                    'gg' => array(\n                                                                                                                                        'hh' => array(\n                                                                                                                                            'ii' => array(\n                                                                                                                                                'jj' => array(\n                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4h0mqry6.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => array(\n                    'f' => array(\n                        'g' => array(\n                            'h' => array(\n                                'i' => array(\n                                    'j' => array(\n                                        'k' => array(\n                                            'l' => array(\n                                                'm' => array(\n                                                    'n' => array(\n                                                        'o' => array(\n                                                            'p' => array(\n                                                                'q' => array(\n                                                                    'r' => array(\n                                                                        's' => array(\n                                                                            't' => array(\n                                                                                'u' => array(\n                                                                                    'v' => array(\n                                                                                        'w' => array(\n                                                                                            'x' => array(\n                                                                                                'y' => array(\n                                                                                                    'z' => array(\n                                                                                                        'a' => array(\n                                                                                                            'b' => array(\n                                                                                                                'c' => array(\n                                                                                                                    'd' => array(\n                                                                                                                        'e' => array(\n                                                                                                                            'f' => array(\n                                                                                                                                'g' => array(\n                                                                                                                                    'h' => array(\n                                                                                                                                        'i' => array(\n                                                                                                                                            'j' => array(\n                                                                                                                                                'k' => array(\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp38uqu6h_.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $max = max($max, dict_depth($v));\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                                                                    'k' => array(\n                                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpa8o0t1n7.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => array(\n        'b' => array(\n            'c' => array(\n                'd' => array(\n                    'e' => array(\n                        'f' => array(\n                            'g' => array(\n                                'h' => array(\n                                    'i' => array(\n                                        'j' => array(\n                                            'k' => array(\n                                                'l' => array(\n                                                    'm' => array(\n                                                        'n' => array(\n                                                            'o' => array(\n                                                                'p' => array(\n                                                                    'q' => array(\n                                                                        'r' => array(\n                                                                            's' => array(\n                                                                                't' => array(\n                                                                                    'u' => array(\n                                                                                        'v' => array(\n                                                                                            'w' => array(\n                                                                                                'x' => array(\n                                                                                                    'y' => array(\n                                                                                                        'z' => array(\n                                                                                                            'a' => array(\n                                                                                                                'b' => array(\n                                                                                                                    'c' => array(\n                                                                                                                        'd' => array(\n                                                                                                                            'e' => array(\n                                                                                                                                'f' => array(\n                                                                                                                                    'g' => array(\n                                                                                                                                        'h' => array(\n                                                                                                                                            'i' => array(\n                                                                                                                                                'j' => array(\n                                                                                                                                \nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpoab8a64u.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $depth = 0;\n  foreach ($d as $v) {\n    if (is_array($v)) {\n      $depth = max($depth, dict_depth($v));\n    }\n  }\n  return $depth + 1;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => 2,\n    'd' => array(\n      'e' => 3,\n      'f' => array(\n        'g' => 4,\n      ),\n    ),\n  ),\n);\n\nprint dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => array(\n                'e' => 1,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (is_array($d)) {\n        $max = 0;\n        foreach ($d as $v) {\n            $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n        return $max + 1;\n    }\n    return 0;\n}\n\n$d = array(\n    \"key1\" => 1,\n    \"key2\" => array(\n        \"key3\" => 1,\n        \"key4\" => array(\n            \"key5\" => 4\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $max = max($max, dict_depth($v));\n    }\n    return $max + 1;\n}\n\n$d = array(\n    \"key1\" => 1,\n    \"key2\" => array(\n        \"key3\" => 1,\n        \"key4\" => array(\n            \"key5\" => 4\n        ),\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => 2,\n    'c' => array(\n        'd' => 3,\n        'e' => array(\n            'f' => 4,\n            'g' => 5,\n        ),\n        'h' => 6,\n    ),\n);\n\necho dict_depth($d);\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => 4\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc580jl7i.php:33\nStack trace:\n#0 /tmp/tmpc580jl7i.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpc580jl7i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $depth = 0;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = max($depth, dict_depth($v));\n        }\n    }\n    return $depth + 1;\n}\n\n$d = [\n    'a' => 1,\n    'b' => [\n        'c' => 2,\n        'd' => [\n            'e' => 3,\n            'f' => [\n                'g' => 4,\n                'h' => [\n                    'i' => 5,\n                    'j' => [\n                        'k' => 6,\n                        'l' => [\n                            'm' => 7,\n                            'n' => [\n                                'o' => 8,\n                                'p' => [\n                                    'q' => 9,\n                                    'r' => [\n                                        's' => 10,\n                                        't' => [\n                                            'u' => 11,\n                                            'v' => [\n                                                'w' => 12,\n                                                'x' => [\n                                                    'y' => 13,\n                                                    'z' => 14,\n                                                ],\n                                            ],\n                                        ],\n                                    ],\n                                ],\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n];\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "13",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 0;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $max = max($max, dict_depth($v));\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n            ),\n        ),\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max_depth = 1;\n  foreach ($d as $key => $value) {\n    if (is_array($value)) {\n      $depth = dict_depth($value) + 1;\n      if ($depth > $max_depth) {\n        $max_depth = $depth;\n      }\n    }\n  }\n  return $max_depth;\n}\n\n$d = array(\n  'a' => 1,\n  'b' => array(\n    'c' => array(\n      'd' => array(\n        'e' => 1\n      )\n    )\n  )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max_depth = 1;\n    foreach ($d as $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3,\n            'f' => array(\n                'g' => 4,\n                'h' => array(\n                    'i' => 5,\n                    'j' => 6\n                )\n            )\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    if (!is_array($d)) {\n        return 0;\n    }\n    $max = 0;\n    foreach ($d as $v) {\n        $depth = dict_depth($v);\n        if ($depth > $max) {\n            $max = $depth;\n        }\n    }\n    return $max + 1;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => 2,\n        'd' => array(\n            'e' => 3\n        )\n    )\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n  $max = 1;\n  foreach ($d as $k => $v) {\n    if (is_array($v)) {\n      $max = max($max, 1 + dict_depth($v));\n    }\n  }\n  return $max;\n}\n\n$d = array(\n  'a' => array(\n    'b' => array(\n      'c' => array(\n        'd' => array(\n          'e' => array(\n            'f' => array(\n              'g' => array(\n                'h' => array(\n                  'i' => array(\n                    'j' => array(\n                      'k' => array(\n                        'l' => array(\n                          'm' => array(\n                            'n' => array(\n                              'o' => array(\n                                'p' => array(\n                                  'q' => array(\n                                    'r' => array(\n                                      's' => array(\n                                        't' => array(\n                                          'u' => array(\n                                            'v' => array(\n                                              'w' => array(\n                                                'x' => array(\n                                                  'y' => array(\n                                                    'z' => array(\n                                                      'a' => array(\n                                                        'b' => array(\n                                                          'c' => array(\n                                                            'd' => array(\n                                                              'e' => array(\n                                                                'f' => array(\n                                                                  'g' => array(\n                                                                    'h' => array(\n                                                                      'i' => array(\n                                                                        'j' => array(\n                                                                          'k' => array(\n                                                                            'l' => array(\n                                                                              'm' => array(\n                                                                                'n' => array(\n                                                                                  'o' => array(\n                                                                                    'p' => array(\n                                                                                      'q' => array(\n                                                                                        'r' => array(\n                                                                                          's'\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpf7s92n53.php on line 59\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the depth of a dictionary.\nfunction dict_depth($d) {\n    $max = 1;\n    foreach ($d as $k => $v) {\n        if (is_array($v)) {\n            $depth = dict_depth($v) + 1;\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max;\n}\n\n$d = array(\n    'a' => 1,\n    'b' => array(\n        'c' => array(\n            'd' => 3,\n            'e' => 4,\n        ),\n        'f' => 5,\n    ),\n);\n\necho dict_depth($d);\nfunction candidate(...$args) {\n    return dict_depth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => array(\"d\" => array())))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 1, \"b\" => array(\"c\" => \"python\"))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1 => \"Sun\", 2 => array(3 => array(4 => \"Mon\")))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122490,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}