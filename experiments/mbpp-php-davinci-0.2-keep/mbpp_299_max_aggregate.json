{
  "name": "mbpp_299_max_aggregate",
  "language": "php",
  "prompt": "<?php\n// Write a function to calculate the maximum aggregate from the list of tuples.\nfunction max_aggregate($stdata) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return max_aggregate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"Juan Whelan\", 90), array(\"Sabah Colley\", 88), array(\"Peter Nichols\", 7), array(\"Juan Whelan\", 122), array(\"Sabah Colley\", 84))) !== array(\"Juan Whelan\", 212)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Juan Whelan\", 50), array(\"Sabah Colley\", 48), array(\"Peter Nichols\", 37), array(\"Juan Whelan\", 22), array(\"Sabah Colley\", 14))) !== array(\"Juan Whelan\", 72)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Juan Whelan\", 10), array(\"Sabah Colley\", 20), array(\"Peter Nichols\", 30), array(\"Juan Whelan\", 40), array(\"Sabah Colley\", 50))) !== array(\"Sabah Colley\", 70)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $max = 0;\n    foreach ($stdata as $key => $value) {\n        $aggregate = $value[0] + $value[1] + $value[2];\n        if ($aggregate > $max) {\n            $max = $aggregate;\n        }\n    }\n    return $max;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $st) {\n        $agg = $st[1] + $st[2] + $st[3];\n        if ($agg > $max) {\n            $max = $agg;\n        }\n    }\n    return $max;\n}\n",
    "\t$max_aggregate = 0;\n\tforeach ($stdata as $key => $value) {\n\t\t$aggregate = $value[0] + $value[1];\n\t\tif ($aggregate > $max_aggregate) {\n\t\t\t$max_aggregate = $aggregate;\n\t\t}\n\t}\n\treturn $max_aggregate;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $st) {\n        $aggregate = $st[1] + $st[2] + $st[3];\n        if ($aggregate > $max) {\n            $max = $aggregate;\n        }\n    }\n    return $max;\n}\n\n$stdata = array(\n    array(\"Raju\", 80, 75, 85),\n    array(\"Surendra\", 90, 95, 85),\n    array(\"Ravi\", 75, 80, 95),\n    array(\"Sunil\", 100, 100, 100)\n);\n\necho max_aggregate($stdata);",
    "    $max = 0;\n    foreach ($stdata as $st) {\n        $agg = $st[1] + $st[2] + $st[3];\n        if ($agg > $max) {\n            $max = $agg;\n        }\n    }\n    return $max;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $st) {\n        $agg = $st[1] + $st[2] + $st[3];\n        if ($agg > $max) {\n            $max = $agg;\n        }\n    }\n    return $max;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $st) {\n        $agg = $st[1] + $st[2] + $st[3];\n        if ($agg > $max) {\n            $max = $agg;\n        }\n    }\n    return $max;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $st) {\n        $aggregate = $st[1] + $st[2] + $st[3];\n        if ($aggregate > $max) {\n            $max = $aggregate;\n        }\n    }\n    return $max;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $st) {\n        $agg = $st[1] + $st[2] + $st[3];\n        if ($agg > $max) {\n            $max = $agg;\n        }\n    }\n    return $max;\n}\n",
    "  $max = 0;\n  foreach ($stdata as $key => $value) {\n    if ($value['aggregate'] > $max) {\n      $max = $value['aggregate'];\n    }\n  }\n  return $max;\n}\n",
    "    $max_aggregate = 0;\n    foreach ($stdata as $st) {\n        $aggregate = $st[1] + $st[2] + $st[3];\n        if ($aggregate > $max_aggregate) {\n            $max_aggregate = $aggregate;\n        }\n    }\n    return $max_aggregate;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $st) {\n        $agg = $st[1] + $st[2] + $st[3];\n        if ($agg > $max) {\n            $max = $agg;\n        }\n    }\n    return $max;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $st) {\n        $aggregate = $st[1] + $st[2] + $st[3];\n        if ($aggregate > $max) {\n            $max = $aggregate;\n        }\n    }\n    return $max;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $st) {\n        $aggregate = $st[1] + $st[2] + $st[3];\n        if ($aggregate > $max) {\n            $max = $aggregate;\n        }\n    }\n    return $max;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $st) {\n        $agg = $st[0] * $st[1];\n        if ($agg > $max) {\n            $max = $agg;\n        }\n    }\n    return $max;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $st) {\n        $aggregate = $st[1] + $st[2] + $st[3];\n        if ($aggregate > $max) {\n            $max = $aggregate;\n        }\n    }\n    return $max;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $key => $value) {\n        if ($value[0] + $value[1] + $value[2] > $max) {\n            $max = $value[0] + $value[1] + $value[2];\n        }\n    }\n    return $max;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $key => $value) {\n        $aggregate = $value[0] + $value[1] + $value[2];\n        if ($aggregate > $max) {\n            $max = $aggregate;\n        }\n    }\n    return $max;\n}\n",
    "  $max = 0;\n  foreach ($stdata as $st) {\n    $agg = $st[1] + $st[2] + $st[3];\n    if ($agg > $max) {\n      $max = $agg;\n    }\n  }\n  return $max;\n}\n",
    "    $max = 0;\n    foreach ($stdata as $key => $value) {\n        $aggregate = $value[0] + $value[1] + $value[2];\n        if ($aggregate > $max) {\n            $max = $aggregate;\n        }\n    }\n    return $max;\n}\n"
  ]
}