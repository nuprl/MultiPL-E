{
  "name": "mbpp_103_eulerian_num",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num($n, $m) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return eulerian_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 1) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 1) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 26) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    if ($m == 0) {\n        return 1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    return ($m + 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($j = 0; $j <= $m; $j++) {\n        $eulerian[0][$j] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n;\n    }\n    if ($n < $m) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "\tif ($m == 0) {\n\t\treturn 1;\n\t}\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\treturn ($m + 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    $eulerian_num = 0;\n    $eulerian_num = $eulerian_num + (factorial($n + $m) / (factorial($n) * factorial($m)));\n    return $eulerian_num;\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n < $m) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    if ($n == 0 || $m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else if ($m > $n) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n    }\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return $n * eulerian_num($n - 1, $m) + $m * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return eulerian_num($n - 1, $m) + $m * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($m > $n) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    if ($m > $n) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n < $m) {\n        return 0;\n    }\n    if ($n == $m || $m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n < 0 || $m < 0) {\n        return 0;\n    }\n    if ($m == 0) {\n        return 1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    return ($m + 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n\necho eulerian_num(5, 3);",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = ($i - $j) * $eulerian[$i - 1][$j] + $eulerian[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n\n$n = 5;\n$m = 3;\necho eulerian_num($n, $m);",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) return 1;\n    if ($n == 1 || $m == 1) return $n + $m;\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n < $m) {\n        return 0;\n    }\n    if ($m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n < $m) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n}\n\necho eulerian_num(5, 3);",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else if ($n == $m) {\n        return 1;\n    } else {\n        return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0 || $j == 0) {\n                $eulerian_num[$i][$j] = 1;\n            } else {\n                $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1) * $eulerian_num[$i][$j - 1];\n            }\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    if ($n == 0 || $m == 0) {\n        return 0;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($i - $j) * $eulerian_num[$i - 1][$j - 1] + ($j + 1) * $eulerian_num[$i - 1][$j];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - 1) * eulerian_num($n, $m - 1);\n}\n\necho eulerian_num(5, 5);",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n        $eulerian_num[$i][$i] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j < $i; $j++) {\n            $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i - 1) * $eulerian_num[$i - 1][$j];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    $a = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $a[$i] = array();\n        for ($j = 0; $j <= $m; $j++) {\n            $a[$i][$j] = 0;\n        }\n    }\n    $a[0][0] = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $a[$i][$j] = ($a[$i - 1][$j - 1] + ($i - 1) * $a[$i - 1][$j]) / $j;\n        }\n    }\n    return $a[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return eulerian_num($n - 1, $m) + eulerian_num($n, $m - 1);\n}\n",
    "    if ($n < 0 || $m < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    $eulerian_num = 1;\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num *= ($n - $i + 1) / $i;\n    }\n    return $eulerian_num;\n}\n",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    return ($m * eulerian_num($n - 1, $m)) + ($n - $m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n < 0 || $m < 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else if ($n == $m) {\n        return 1;\n    } else {\n        return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n == 0) return 1;\n    if ($m == 0) return 0;\n    return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n < $m) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1 - $m) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($i - $j) * $eulerian_num[$i - 1][$j] + $eulerian_num[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0) {\n                $eulerian_num[$i][$j] = 1;\n            } elseif ($j == 0) {\n                $eulerian_num[$i][$j] = 0;\n            } else {\n                $eulerian_num[$i][$j] = ($eulerian_num[$i - 1][$j - 1] + ($i + 1) * $eulerian_num[$i][$j - 1]);\n            }\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n\necho eulerian_num(5, 3);",
    "    if ($n < $m) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n < $m) return 0;\n    if ($m == 0) return 1;\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($i - $j) * $eulerian_num[$i - 1][$j] + $eulerian_num[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    if ($n == 0 || $m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    if ($m == 1) {\n        return $n;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian_num = array();\n    $eulerian_num[0][0] = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = $eulerian_num[$i - 1][$i - 1] / $i;\n        for ($j = 1; $j <= $i; $j++) {\n            $eulerian_num[$i][$j] = ($eulerian_num[$i - 1][$j - 1] + $eulerian_num[$i][$j - 1]) / $i;\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\tif ($m == 0) {\n\t\treturn 0;\n\t}\n\treturn ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = ($i - $j) * $eulerian[$i - 1][$j] + $eulerian[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n < 0 || $m < 0) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($i - $j) * $eulerian_num[$i - 1][$j] + $eulerian_num[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "  if ($m == 0 || $m == $n) {\n    return 1;\n  }\n  return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $eulerian_num[$i][$j] = 1;\n            } elseif ($i == 0) {\n                $eulerian_num[$i][$j] = 0;\n            } elseif ($j == 0) {\n                $eulerian_num[$i][$j] = 1;\n            } else {\n                $eulerian_num[$i][$j] = ($i - $j + 1) * $eulerian_num[$i - 1][$j - 1] + $j * $eulerian_num[$i - 1][$j];\n            }\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1 - $m) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else if ($n == $m) {\n        return 1;\n    } else {\n        return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n < $m) {\n        return 0;\n    }\n    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n < 0 || $m < 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1 - $m) * eulerian_num($n - 1, $m) + $m * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0 || $n < $m) {\n        return 0;\n    } elseif ($n == $m) {\n        return 1;\n    } else {\n        return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = ($i - $j) * $eulerian[$i - 1][$j] + $eulerian[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0) {\n                $eulerian[$i][$j] = 1;\n            } else {\n                if ($j == 0) {\n                    $eulerian[$i][$j] = 0;\n                } else {\n                    $eulerian[$i][$j] = ($eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1]);\n                }\n            }\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n < $m) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1 - $m) * eulerian_num($n - 1, $m) + $m * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "\tif ($n == 0 || $m == 0) {\n\t\treturn 1;\n\t}\n\treturn ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - 1) * eulerian_num($n, $m - 1);\n}\n\necho eulerian_num(3, 2);",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($eulerian_num[$i - 1][$j - 1] + ($i - 1) * $eulerian_num[$i - 1][$j]);\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0) {\n                $eulerian_num[$i][$j] = 1;\n            } else if ($j == 0) {\n                $eulerian_num[$i][$j] = 0;\n            } else {\n                $eulerian_num[$i][$j] = ($i - $j + 1) * $eulerian_num[$i - 1][$j] + $j * $eulerian_num[$i - 1][$j - 1];\n            }\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n < 0 || $m < 0) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    if ($n == 0 || $m == 0) {\n        return 0;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n < $m) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n < 0 || $m < 0) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n + 1 - $m) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    $eulerian_num = 1;\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num *= ($n + 1 - $i);\n        $eulerian_num /= $i;\n    }\n    return $eulerian_num;\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0 || $j == 0) {\n                $eulerian_num[$i][$j] = 1;\n            } else {\n                $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1) * $eulerian_num[$i][$j - 1];\n            }\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1) * $eulerian_num[$i][$j - 1];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i][$j - 1] * ($n - $i + $j) / $j;\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    return ($n + 1 - $m) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n        $eulerian_num[$i][$i] = 1;\n    }\n    for ($i = 2; $i <= $n; $i++) {\n        for ($j = 1; $j < $i; $j++) {\n            $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i - 1) * $eulerian_num[$i - 1][$j];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    $result = 1;\n    for ($i = 1; $i <= $m; $i++) {\n        $result *= $n - $i + 1;\n        $result /= $i;\n    }\n    return $result;\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return $n * eulerian_num($n - 1, $m) + $m * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n < 0 || $m < 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1 - $m) * eulerian_num($n - 1, $m) + $m * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $arr = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0 || $j == 0) {\n                $arr[$i][$j] = 1;\n            } else {\n                $arr[$i][$j] = $arr[$i - 1][$j - 1] + $arr[$i][$j - 1];\n            }\n        }\n    }\n    return $arr[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($m == 0) {\n        return 0;\n    } elseif ($m == 1) {\n        return 1;\n    } elseif ($m > $n) {\n        return 0;\n    } else {\n        return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else if ($n == $m) {\n        return 1;\n    } else {\n        return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n < 0 || $m < 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian_num = 1;\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num *= ($n + 1 - $i) / $i;\n    }\n    return $eulerian_num;\n}\n",
    "    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1 - $m) * eulerian_num($n - 1, $m) + $m * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0) {\n        return 1;\n    }\n    if ($m == 1) {\n        return $n;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m - 2);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n        $eulerian[0][$i] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian_num = 0;\n    for ($k = 0; $k <= $m; $k++) {\n        $eulerian_num += (-1) ** ($k + $m) * binomial_coefficient($m, $k) * binomial_coefficient($n + $k, $n);\n    }\n    return $eulerian_num;\n}\n",
    "    if ($n == 0 && $m == 0) {\n        return 1;\n    } else if ($n == 0 || $m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n        $eulerian[$i][$i] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j < $i; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i - 1) * $eulerian[$i - 1][$j];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $result = 0;\n    for ($i = 0; $i <= $m; $i++) {\n        $result += pow(-1, $i) * binomial_coefficient($m, $i) * binomial_coefficient($n + $i, $n);\n    }\n    return $result;\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n < $m) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n < $m) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return eulerian_num($n - 1, $m) + $m * eulerian_num($n, $m - 1);\n}\n",
    "\tif ($n < 0 || $m < 0 || $n < $m) {\n\t\treturn 0;\n\t}\n\tif ($n == 0 || $m == 0) {\n\t\treturn 1;\n\t}\n\treturn ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n        $eulerian_num[$i][$i + 1] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $i; $j++) {\n            $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1 - $j) * $eulerian_num[$i - 1][$j];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($m == 0) {\n        return 1;\n    } else if ($n == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i] = array();\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0) {\n                $eulerian[$i][$j] = 1;\n            } elseif ($j == 0) {\n                $eulerian[$i][$j] = 0;\n            } else {\n                $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n            }\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = ($i - $j) * $eulerian[$i - 1][$j] + $eulerian[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0) {\n                $eulerian[$i][$j] = 1;\n            } elseif ($j == 0) {\n                $eulerian[$i][$j] = 0;\n            } else {\n                $eulerian[$i][$j] = ($i - $j + 1) * $eulerian[$i - 1][$j] + $j * $eulerian[$i - 1][$j - 1];\n            }\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n < $m) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return ($n - 1) * eulerian_num($n, $m - 1) + ($m - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - 1) * eulerian_num($n, $m - 1) + ($m - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($j = 1; $j <= $m; $j++) {\n        $eulerian_num[0][$j] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($eulerian_num[$i - 1][$j - 1] + ($i - 1) * $eulerian_num[$i - 1][$j]);\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n < 0 || $m < 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i] = array();\n        for ($j = 0; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = 0;\n        }\n    }\n    $eulerian_num[0][0] = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($eulerian_num[$i - 1][$j - 1] + ($i - 1) * $eulerian_num[$i - 1][$j]);\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else if ($n == $m) {\n        return 1;\n    } else {\n        return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "\t$eulerian = array();\n\tfor ($i = 0; $i <= $n; $i++) {\n\t\t$eulerian[$i] = array();\n\t\tfor ($j = 0; $j <= $m; $j++) {\n\t\t\t$eulerian[$i][$j] = 0;\n\t\t}\n\t}\n\t$eulerian[0][0] = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\tfor ($j = 1; $j <= $m; $j++) {\n\t\t\t$eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i - 1) * $eulerian[$i - 1][$j];\n\t\t}\n\t}\n\treturn $eulerian[$n][$m];\n}\n",
    "    if ($n < 0 || $m < 0) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    if ($n == 0 || $m == 0) {\n        return 0;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return eulerian_num($n - 1, $m) + $m * eulerian_num($n - 1, $m - 1);\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $a = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $a[$i] = array();\n        for ($j = 0; $j <= $m; $j++) {\n            $a[$i][$j] = 0;\n        }\n    }\n    $a[0][0] = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $a[$i][$j] = ($a[$i - 1][$j - 1] + ($i - 1) * $a[$i - 1][$j]) / $j;\n        }\n    }\n    return $a[$n][$m];\n}\n",
    "    $eulerian_num = 0;\n    $eulerian_num = pow(-1, $m) * binomial_coefficient($n + 1, $m);\n    return $eulerian_num;\n}\n",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n\necho eulerian_num(2, 3);",
    "    $eulerian_num = 1;\n    for ($i = 0; $i < $m; $i++) {\n        $eulerian_num = $eulerian_num * ($n - $i) / ($i + 1);\n    }\n    return $eulerian_num;\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return ($n + $m - 1) * eulerian_num($n, $m - 1) / $m;\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n"
  ]
}