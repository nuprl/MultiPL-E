{
  "name": "mbpp_297_flatten_list",
  "language": "php",
  "prompt": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));",
    "    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, [2, 3], [4, [5, 6]], [7, 8, 9]];\n$list2 = flatten_list($list1);\nprint_r($list2);\n",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\n$list2 = [1, [2, [3, 4], [[5]]]];\n$list3 = [[3, 4], 5, [6, [7, 8, [9]]]];\n\nprint_r(flatten_list($list1));\nprint_r(flatten_list($list2));\nprint_r(flatten_list($list3));",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, 3], [4, [5, 6, [7, 8]]]];\nprint_r(flatten_list($list1));",
    "\t$result = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$result = array_merge($result, flatten_list($item));\n\t\t} else {\n\t\t\t$result[] = $item;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n",
    "    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array",
    "    $flat = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $flat = array_merge($flat, flatten_list($item));\n        } else {\n            $flat[] = $item;\n        }\n    }\n    return $flat;\n}\n",
    "    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n",
    "    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = flatten_list($list1);\nprint_r($list2);",
    "    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($list1 as $value) {\n        if (is_array($value)) {\n            $result = array_merge($result, flatten_list($value));\n        } else {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));",
    "    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, array(3, 4), 5);\nprint_r(flatten_list($list1));\n",
    "    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n",
    "    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n"
  ]
}