{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "php",
  "prompt": "<?php\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore($text) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return text_lowercase_underscore(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"aab_cbbbc\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aab_Abbbc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Aaab_abbbc\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $regex = '/^[a-z]+(_[a-z]+)*$/';\n    return preg_match($regex, $text);\n}\n\necho text_lowercase_underscore('abc_def_ghi') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_123') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_123_456') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_123_456_789') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_123_456_789_abc') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_123_456_789_abc_def') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_123_456_789_abc_def_ghi') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_123_456_789_abc_def_ghi_') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_123_456_789_abc_def_ghi_123') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_123_456_789_abc_def_ghi_123_456') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_123_456_789_abc_def_ghi_123_456_789') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_123_456_789_abc_def_ghi_123_456_789_abc') . '<br>';\necho text_lowercase_underscore('abc_def_ghi_123_456_789_abc_def_ghi_123_456_789_abc_def') . '<",
    "    $pattern = '/^[a-z]+(_[a-z]+)*$/';\n    if (preg_match($pattern, $text)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    if (preg_match('/^[a-z]+_[a-z]+$/', $text)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "\t$pattern = '/^[a-z_]+$/';\n\tif (preg_match($pattern, $text)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n",
    "    $pattern = '/^[a-z]+(_[a-z]+)*$/';\n    return preg_match($pattern, $text);\n}\n",
    "    $pattern = '/^[a-z_]+$/';\n    if (preg_match($pattern, $text)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $text = str_split($text);\n    $result = false;\n    for ($i = 0; $i < count($text); $i++) {\n        if (ctype_lower($text[$i]) && $text[$i+1] == '_') {\n            $result = true;\n        }\n    }\n    return $result;\n}\n\necho text_lowercase_underscore('hello_world');\necho '<br>';\necho text_lowercase_underscore('helloWorld');\necho '<br>';\necho text_lowercase_underscore('hello_world_');\necho '<br>';\necho text_lowercase_underscore('hello_world_!');\necho '<br>';\necho text_lowercase_underscore('hello_world_!_');\necho '<br>';\necho text_lowercase_underscore('hello_world_!_1');\necho '<br>';\necho text_lowercase_underscore('hello_world_!_1_');\necho '<br>';\necho text_lowercase_underscore('hello_world_!_1_2');\necho '<br>';\necho text_lowercase_underscore('hello_world_!_1_2_');\necho '<br>';\necho text_lowercase_underscore('hello_world_!_1_2_3');\necho '<br>';\necho text_lowercase_underscore('hello_world_!_1_2_3_');\necho '<br>';\necho text_lowercase_underscore('hello_world_!_1_2_3_4');\necho '<br>';\necho text_lowercase_underscore('hello_world_!_1_2_3_4_');\necho '<br>';\necho text_lowercase_underscore('hello_world_!_1_2_3_4_5');\necho '<br>';\necho text_lowercase_underscore('hello_world_!_1_2_3_4_5_');\necho '<br>';\necho text_lowercase_underscore('hello_world_!_1_2_",
    "    $pattern = '/^[a-z_]+$/';\n    if (preg_match($pattern, $text)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    if (preg_match('/^[a-z]+(_[a-z]+)*$/', $text)) {\n        return true;\n    }\n    return false;\n}\n",
    "    if (preg_match('/^[a-z_]+$/', $text)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $pattern = '/^[a-z]+(_[a-z]+)*$/';\n    return preg_match($pattern, $text);\n}\n",
    "  $text = str_split($text);\n  $result = true;\n  $i = 0;\n  while ($i < count($text)) {\n    if (ctype_lower($text[$i])) {\n      $i++;\n    } elseif ($text[$i] == '_') {\n      $i++;\n    } else {\n      $result = false;\n      break;\n    }\n  }\n  return $result;\n}\n",
    "    $pattern = \"/^[a-z_]+$/\";\n    if (preg_match($pattern, $text)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $pattern = '/^[a-z]+(_[a-z]+)*$/';\n    if (preg_match($pattern, $text)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $text_array = str_split($text);\n    $text_array_length = count($text_array);\n    $text_array_length_minus_one = $text_array_length - 1;\n    $text_array_length_minus_two = $text_array_length - 2;\n    $text_array_length_minus_three = $text_array_length - 3;\n    $text_array_length_minus_four = $text_array_length - 4;\n    $text_array_length_minus_five = $text_array_length - 5;\n    $text_array_length_minus_six = $text_array_length - 6;\n    $text_array_length_minus_seven = $text_array_length - 7;\n    $text_array_length_minus_eight = $text_array_length - 8;\n    $text_array_length_minus_nine = $text_array_length - 9;\n    $text_array_length_minus_ten = $text_array_length - 10;\n    $text_array_length_minus_eleven = $text_array_length - 11;\n    $text_array_length_minus_twelve = $text_array_length - 12;\n    $text_array_length_minus_thirteen = $text_array_length - 13;\n    $text_array_length_minus_fourteen = $text_array_length - 14;\n    $text_array_length_minus_fifteen = $text_array_length - 15;\n    $text_array_length_minus_sixteen = $text_array_length - 16;\n    $text_array_length_minus_seventeen = $text_array_length - 17;\n    $text_array_length_minus_eighteen = $text_array_length - 18;\n    $text_array_length_minus_nineteen = $text_array_length - 19;\n    $text_array_length_minus_twenty = $text_array_length - 20;\n    $text_array_length_minus_twentyone = $text_array_length - 21;\n    $text_array_length_",
    "\t$text = strtolower($text);\n\t$text = str_replace(\"_\", \"\", $text);\n\tif ($text == $text) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho text_lowercase_underscore(\"hello_world\") . \"\\n\";\necho text_lowercase_underscore(\"helloWorld\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_!\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123!\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123_!\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123_!_\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123_!_456\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123_!_456!\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123_!_456!_\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123_!_456!_789\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123_!_456!_789!\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123_!_456!_789!_\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123_!_456!_789!_0\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123_!_456!_789!_0!\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123_!_456!_789!_0!_\") . \"\\n\";\necho text_lowercase_underscore(\"hello_world_123_!_456!_789!_0!_1\") . \"\\n\";\necho text_lowercase",
    "    $text = str_replace('_', '', $text);\n    if (ctype_lower($text)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $text = str_split($text);\n    $result = true;\n    for ($i = 0; $i < count($text); $i++) {\n        if ($text[$i] == \"_\") {\n            if (!ctype_lower($text[$i - 1]) || !ctype_lower($text[$i + 1])) {\n                $result = false;\n            }\n        }\n    }\n    return $result;\n}\n\necho text_lowercase_underscore(\"this_is_a_text\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_2\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_2_\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_2_3\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_2_3_\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_2_3_4\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_2_3_4_\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_2_3_4_5\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_2_3_4_5_\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_2_3_4_5_6\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_2_3_4_5_6_\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_2_3_4_5_6_7\") . \"<br>\";\necho text_lowercase_underscore(\"this_is_a_text_2_3_4_5_6_",
    "    if (preg_match(\"/^[a-z_]+$/\", $text)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    return preg_match(\"/^[a-z_]+$/\", $text);\n}\n"
  ]
}