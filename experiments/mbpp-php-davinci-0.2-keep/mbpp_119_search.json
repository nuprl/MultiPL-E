{
  "name": "mbpp_119_search",
  "language": "php",
  "prompt": "<?php\n// Write a python function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $size = sizeof($arr);\n    for ($i = 0; $i < $size; $i++) {\n        if ($arr[$i] != $arr[$i+1] && $arr[$i] != $arr[$i-1]) {\n            return $arr[$i];\n        }\n    }\n}\n\n$arr = array(1,1,2,2,3,3,4,50,50,65,65);\necho search($arr);",
    "    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);",
    "    $n = count($arr);\n    $start = 0;\n    $end = $n - 1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $start = $mid + 2;\n            } else {\n                $end = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $start = $mid + 1;\n            } else {\n                $end = $mid - 1;\n            }\n        }\n    }\n    return $arr[$start];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);",
    "    $size = sizeof($arr);\n    $low = 0;\n    $high = $size - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $size - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);",
    "    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);",
    "    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8];\necho search($arr);",
    "    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = intval(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 4, 4, 5, 5];\necho search($arr);",
    "    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);",
    "    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);",
    "    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n        if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 4, 4, 5, 5];\necho search($arr);",
    "    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);",
    "    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);",
    "    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);",
    "    $n = count($arr);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $mid = floor(($l + $r) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $l = $mid + 2;\n            } else {\n                $r = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $l = $mid + 1;\n            } else {\n                $r = $mid - 1;\n            }\n        }\n    }\n    return $arr[$l];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);",
    "    $low = 0;\n    $high = count($arr) - 1;\n    $mid = 0;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        } else if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);",
    "\t$low = 0;\n\t$high = count($arr) - 1;\n\t$mid = 0;\n\twhile($low <= $high) {\n\t\t$mid = floor(($low + $high) / 2);\n\t\tif($mid % 2 == 0) {\n\t\t\tif($arr[$mid] == $arr[$mid + 1]) {\n\t\t\t\t$low = $mid + 2;\n\t\t\t} else {\n\t\t\t\t$high = $mid;\n\t\t\t}\n\t\t} else {\n\t\t\tif($arr[$mid] == $arr[$mid - 1]) {\n\t\t\t\t$low = $mid + 1;\n\t\t\t} else {\n\t\t\t\t$high = $mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn $arr[$mid];\n}\n\n$arr = array(1,1,2,2,3,3,4,50,50,65,65);\necho search($arr);",
    "    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n        if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);",
    "    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    if ($low < $n) {\n        return $arr[$low];\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);",
    "    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);",
    "    $low = 0;\n    $high = count($arr) - 1;\n    $mid = 0;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);"
  ]
}