{
  "name": "mbpp_297_flatten_list",
  "language": "php",
  "prompt": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, [2, 3], [4, [5, 6]], [7, 8, 9]];\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\n$list2 = [1, [2, [3, 4], [[5]]]];\n$list3 = [[3, 4], 5, [6, [7, 8, [9]]]];\n\nprint_r(flatten_list($list1));\nprint_r(flatten_list($list2));\nprint_r(flatten_list($list3));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\nArray\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n    [3] => 6\n    [4] => 7\n    [5] => 8\n    [6] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, 3], [4, [5, 6, [7, 8]]]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$result = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$result = array_merge($result, flatten_list($item));\n\t\t} else {\n\t\t\t$result[] = $item;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpedvcz4od.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $flat = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $flat = array_merge($flat, flatten_list($item));\n        } else {\n            $flat[] = $item;\n        }\n    }\n    return $flat;\n}\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $value) {\n        if (is_array($value)) {\n            $result = array_merge($result, flatten_list($value));\n        } else {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, array(3, 4), 5);\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n  $result = [];\n  foreach ($list1 as $item) {\n    if (is_array($item)) {\n      $result = array_merge($result, flatten_list($item));\n    } else {\n      $result[] = $item;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpedvcz4od.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, 3], 4, [5, 6, [7, 8, 9]]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [[1, 2, [3]], 4];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(array(4, 5, 6))));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6], 7], 8];\n$list2 = [1, 2, [3, 4, [5, 6], 7], 8, [9, [10, 11], 12]];\n\nprint_r(flatten_list($list1));\nprint_r(flatten_list($list2));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n    [10] => 11\n    [11] => 12\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2, 3), 8, 100, 4, array(array(array(50)))), -2);\n$list3 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list4 = array(0, 2, array(array(2, 3), 8, 100, 4, array(array(array(50)))), -2);\n$list5 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list6 = array(0, 2, array(array(2, 3), 8, 100, 4, array(array(array(50)))), -2);\n\nprint_r(flatten_list($list1));\nprint_r(flatten_list($list2));\nprint_r(flatten_list($list3));\nprint_r(flatten_list($list4));\nprint_r(flatten_list($list5));\nprint_r(flatten_list($list6));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\nArray\n(\n    [0] => 0\n    [1] => 2\n    [2] => 2\n    [3] => 3\n    [4] => 8\n    [5] => 100\n    [6] => 4\n    [7] => 50\n    [8] => -2\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\nArray\n(\n    [0] => 0\n    [1] => 2\n    [2] => 2\n    [3] => 3\n    [4] => 8\n    [5] => 100\n    [6] => 4\n    [7] => 50\n    [8] => -2\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\nArray\n(\n    [0] => 0\n    [1] => 2\n    [2] => 2\n    [3] => 3\n    [4] => 8\n    [5] => 100\n    [6] => 4\n    [7] => 50\n    [8] => -2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\nprint_r(flatten_list($list));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpedvcz4od.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $value) {\n        if (is_array($value)) {\n            $result = array_merge($result, flatten_list($value));\n        } else {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, 6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, array(3, 4, array(5, 6, array(7, 8, 9))));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, array(3, 4), array(array(5, 6), array(7, 8)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$result = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$result = array_merge($result, flatten_list($item));\n\t\t} else {\n\t\t\t$result[] = $item;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$new_list = [];\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$new_list = array_merge($new_list, flatten_list($item));\n\t\t} else {\n\t\t\t$new_list[] = $item;\n\t\t}\n\t}\n\treturn $new_list;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $value) {\n        if (is_array($value)) {\n            $result = array_merge($result, flatten_list($value));\n        } else {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, 3], [4, [5, 6, [7, 8]]]];\n$list2 = [1, [2, 3], [4, [5, 6, [7, 8]]]];\n\n$result = flatten_list($list1);\n\nprint_r($result);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n  $result = array();\n  foreach ($list1 as $item) {\n    if (is_array($item)) {\n      $result = array_merge($result, flatten_list($item));\n    } else {\n      $result[] = $item;\n    }\n  }\n  return $result;\n}\n\n$list1 = array(1, 2, array(3, 4), array(array(5, 6), array(7, 8)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$list2 = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$list2 = array_merge($list2, flatten_list($item));\n\t\t} else {\n\t\t\t$list2[] = $item;\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, array(3, 4), array(array(5, 6), 7));\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$list2 = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$list2 = array_merge($list2, flatten_list($item));\n\t\t} else {\n\t\t\t$list2[] = $item;\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, array(6))));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, array(6))));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$list2 = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$list2 = array_merge($list2, flatten_list($item));\n\t\t} else {\n\t\t\t$list2[] = $item;\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 2, array(3, 4, array(5, 6, 7)), 8, 9);\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$list2 = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$list2 = array_merge($list2, flatten_list($item));\n\t\t} else {\n\t\t\t$list2[] = $item;\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 2, array(3, 4), 5, array(array(6, 7), 8));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, 3], [4, [5, 6, [7, 8, 9]]]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, array(3, 4), array(array(5, 6), array(7, 8)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, array(3, 4), array(array(5, 6), array(7, 8)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $flat_list = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $flat_list = array_merge($flat_list, flatten_list($item));\n        } else {\n            $flat_list[] = $item;\n        }\n    }\n    return $flat_list;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, 6)));\n$list2 = array(0, 2, array(array(2, 3), 8, 100, 4, array(array(array(50)))), -2);\n$list3 = array(1, array(2, 3), array(array(4, 5, 6)));\n$list4 = array(0, 2, array(array(2, 3), 8, array(array(100)), 4, array(array(array(50)))), -2);\n$list5 = array(1, array(2, 3), array(array(4, 5, 6)));\n$list6 = array(0, 2, array(array(2, 3), 8, array(array(100)), 4, array(array(array(50)))), -2);\n$list7 = array(1, array(2, 3), array(array(4, 5, 6)));\n$list8 = array(0, 2, array(array(2, 3), 8, array(array(100)), 4, array(array(array(50)))), -2);\n$list9 = array(1, array(2, 3), array(array(4, 5, 6)));\n$list10 = array(0, 2, array(array(2, 3), 8, array(array(100)), 4, array(array(array(50)))), -2);\n\nvar_dump(flatten_list($list1));\nvar_dump(flatten_list($list2));\nvar_dump(flatten_list($list3));\nvar_dump(flatten_list($list4));\nvar_dump(flatten_list($list5));\nvar_dump(flatten_list($list6));\nvar_dump(flatten_list($list7));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "array(6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n  [5]=>\n  int(6)\n}\narray(9) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n  int(8)\n  [5]=>\n  int(100)\n  [6]=>\n  int(4)\n  [7]=>\n  int(50)\n  [8]=>\n  int(-2)\n}\narray(6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n  [5]=>\n  int(6)\n}\narray(9) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n  int(8)\n  [5]=>\n  int(100)\n  [6]=>\n  int(4)\n  [7]=>\n  int(50)\n  [8]=>\n  int(-2)\n}\narray(6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n  [5]=>\n  int(6)\n}\narray(9) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n  int(8)\n  [5]=>\n  int(100)\n  [6]=>\n  int(4)\n  [7]=>\n  int(50)\n  [8]=>\n  int(-2)\n}\narray(6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n  [5]=>\n  int(6)\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $value) {\n        if (is_array($value)) {\n            $result = array_merge($result, flatten_list($value));\n        } else {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, array(3, 4), array(array(5, 6), array(7, 8)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n  $list2 = array();\n  foreach ($list1 as $item) {\n    if (is_array($item)) {\n      $list2 = array_merge($list2, flatten_list($item));\n    } else {\n      $list2[] = $item;\n    }\n  }\n  return $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, array(6))));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$result = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$result = array_merge($result, flatten_list($item));\n\t\t} else {\n\t\t\t$result[] = $item;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$new_list = [];\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$new_list = array_merge($new_list, flatten_list($item));\n\t\t} else {\n\t\t\t$new_list[] = $item;\n\t\t}\n\t}\n\treturn $new_list;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\n$list2 = [1, [2, [3, 4], 5], 6, [7, 8]];\n$list3 = [1, [2, [3, 4], 5], 6, [7, 8], 9];\n$list4 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10];\n$list5 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11];\n$list6 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12];\n$list7 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12, 13];\n$list8 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12, 13, 14];\n$list9 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12, 13, 14, 15];\n$list10 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12, 13, 14, 15, 16];\n$list11 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12, 13, 14, 15, 16, 17];\n$list12 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\n$list13 = [1, [2, [\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp9w5yc9f6.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9];\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\n$list2 = [1, [2, [3, 4], [[5]]]];\n$list3 = [[1, [5], [], [[-3, 'abc']]], 10];\n\necho implode(', ', flatten_list($list1)) . PHP_EOL;\necho implode(', ', flatten_list($list2)) . PHP_EOL;\necho implode(', ', flatten_list($list3)) . PHP_EOL;\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "1, 2, 3, 5, 4, 3, 2\n1, 2, 3, 4, 5\n1, 5, -3, abc, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, [2, 3], [4, [5, 6]]];\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, 3], 4, [5, [6, 7], 8], 9, 10];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $flat_list = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $flat_list = array_merge($flat_list, flatten_list($item));\n        } else {\n            $flat_list[] = $item;\n        }\n    }\n    return $flat_list;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, 3], [4, [5, 6, [7, 8]]]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6], 7], 8, [9, 10]];\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, array(3, 4), 5, array(array(6, 7), 8));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $flat_list = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $flat_list = array_merge($flat_list, flatten_list($item));\n        } else {\n            $flat_list[] = $item;\n        }\n    }\n    return $flat_list;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, 6)));\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list = array(1, array(2, 3), array(array(4, 5, array(6))));\nprint_r(flatten_list($list));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$result = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$result = array_merge($result, flatten_list($item));\n\t\t} else {\n\t\t\t$result[] = $item;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, array(3, 4), 5, array(array(6, 7), 8), 9);\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $value) {\n        if (is_array($value)) {\n            $result = array_merge($result, flatten_list($value));\n        } else {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpedvcz4od.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n  $result = [];\n  foreach ($list1 as $item) {\n    if (is_array($item)) {\n      $result = array_merge($result, flatten_list($item));\n    } else {\n      $result[] = $item;\n    }\n  }\n  return $result;\n}\n\n$list1 = [1, [2, 3], 4, [5, 6, [7, 8, [9, 10]]]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpedvcz4od.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, 3, [4, 5, 6], 7], 8, [9, 10]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, 2, 3, [4, 5, 6, [7, 8, 9]]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2, 3), 8, 100, 4, array(array(array(50)))), -2);\n$list3 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list4 = array(0, 2, array(array(2, 3), 8, array(array(100)), 4, array(array(array(50)))), -2);\n$list5 = array( 'a', array('b', array('c', 'd'), 'e'), array(array('f')));\n\necho '<pre>';\nprint_r(flatten_list($list1));\necho '</pre>';\n\necho '<pre>';\nprint_r(flatten_list($list2));\necho '</pre>';\n\necho '<pre>';\nprint_r(flatten_list($list3));\necho '</pre>';\n\necho '<pre>';\nprint_r(flatten_list($list4));\necho '</pre>';\n\necho '<pre>';\nprint_r(flatten_list($list5));\necho '</pre>';\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n</pre><pre>Array\n(\n    [0] => 0\n    [1] => 2\n    [2] => 2\n    [3] => 3\n    [4] => 8\n    [5] => 100\n    [6] => 4\n    [7] => 50\n    [8] => -2\n)\n</pre><pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n</pre><pre>Array\n(\n    [0] => 0\n    [1] => 2\n    [2] => 2\n    [3] => 3\n    [4] => 8\n    [5] => 100\n    [6] => 4\n    [7] => 50\n    [8] => -2\n)\n</pre><pre>Array\n(\n    [0] => a\n    [1] => b\n    [2] => c\n    [3] => d\n    [4] => e\n    [5] => f\n)\n</pre>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$flattened_list = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$flattened_list = array_merge($flattened_list, flatten_list($item));\n\t\t} else {\n\t\t\t$flattened_list[] = $item;\n\t\t}\n\t}\n\treturn $flattened_list;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$list2 = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$list2 = array_merge($list2, flatten_list($item));\n\t\t} else {\n\t\t\t$list2[] = $item;\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\n$list2 = flatten_list($list1);\nvar_dump($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "array(6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n  [5]=>\n  int(6)\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$list2 = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$list2 = array_merge($list2, flatten_list($item));\n\t\t} else {\n\t\t\t$list2[] = $item;\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, 6)));\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach($list1 as $item) {\n        if(is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            array_push($result, $item);\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpu87tyias.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $value) {\n        if (is_array($value)) {\n            $result = array_merge($result, flatten_list($value));\n        } else {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $value) {\n        if (is_array($value)) {\n            $result = array_merge($result, flatten_list($value));\n        } else {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6], 7], 8];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\n$list2 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10, [11, 12, [13, 14, 15], 16], 17, 18];\n\nprint_r(flatten_list($list1));\nprint_r(flatten_list($list2));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n    [10] => 11\n    [11] => 12\n    [12] => 13\n    [13] => 14\n    [14] => 15\n    [15] => 16\n    [16] => 17\n    [17] => 18\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpedvcz4od.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nvar_dump(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "array(6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n  [5]=>\n  int(6)\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, array(3, 4), 5);\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\n$list2 = [1, [2, [3, 4], 5], 6, [7, 8]];\n$list3 = [1, [2, [3, 4], 5], 6, [7, 8], 9];\n$list4 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10];\n$list5 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11];\n$list6 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12];\n$list7 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12, 13];\n$list8 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12, 13, 14];\n$list9 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12, 13, 14, 15];\n$list10 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12, 13, 14, 15, 16];\n$list11 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12, 13, 14, 15, 16, 17];\n$list12 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\n$list13 = [1, [2, [3, 4], 5], 6, [7, 8], 9, 10,\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpyajb7119.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $element) {\n        if (is_array($element)) {\n            $result = array_merge($result, flatten_list($element));\n        } else {\n            $result[] = $element;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach($list1 as $item) {\n        if(is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmptwluj2jl.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, array(6))));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, array(6))));\nvar_dump(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "array(6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n  [5]=>\n  int(6)\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, array(3, 4), 5);\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpedvcz4od.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), 6);\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpedvcz4od.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, 3], [4, [5, 6, [7, 8]]], 9];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, array(3, 4), 5);\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, array(6))));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpedvcz4od.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = flatten_list($list1);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(9)))))));\n\nprint_r(flatten_list($list1));\nprint_r(flatten_list($list2));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\nArray\n(\n    [0] => 0\n    [1] => 2\n    [2] => 2\n    [3] => 8\n    [4] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\n$list2 = [1, [2, [3, 4], [[5]]]];\n$list3 = [1, [2, [3, 4], [[5]]], 6, [[7, 8], 9], 10];\n$list4 = [[[[3]], 2, 1], 0, [[-1, -2], -3]];\n\necho implode(', ', flatten_list($list1)) . PHP_EOL;\necho implode(', ', flatten_list($list2)) . PHP_EOL;\necho implode(', ', flatten_list($list3)) . PHP_EOL;\necho implode(', ', flatten_list($list4)) . PHP_EOL;\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "1, 2, 3, 5, 4, 3, 2\n1, 2, 3, 4, 5\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n3, 2, 1, 0, -1, -2, -3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(array(4))), 5);\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, array(3, 4, array(5, 6, 7, array(8, 9, 10))));\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, 3], [4, [5, 6]], [[7], 8]];\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach($list1 as $item) {\n        if(is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\nprint_r(flatten_list($list1));\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, 3], [4, [5, 6, [7, 8]]]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n\t$list2 = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$list2 = array_merge($list2, flatten_list($item));\n\t\t} else {\n\t\t\t$list2[] = $item;\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), 6);\n$list2 = flatten_list($list1);\nprint_r($list2);\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list2 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list3 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list4 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list5 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list6 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list7 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list8 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list9 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list10 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list11 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list12 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list13 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list14 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list15 = array(1, array(2, 3), array(array(4, 5, array(6))));\n$list16 = array(1, array(2, 3\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpzasn_vf3.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $flat_list = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $flat_list = array_merge($flat_list, flatten_list($item));\n        } else {\n            $flat_list[] = $item;\n        }\n    }\n    return $flat_list;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\n$list2 = [1, [2, [3, 4], [[5]]]];\n$list3 = [[3, 2, 1], 2, 1];\n$list4 = [[[3, 1], 2], 1];\n$list5 = [1, [2, 3], 4, 5];\n$list6 = [1, [2, [3, 4], 5], 6, [7, 8]];\n$list7 = [1, [2, [3, 4, [5]]]];\n$list8 = [1, [2], [3, [[4]]]];\n$list9 = [1, [2], [3, [[4]]], [5, 6]];\n$list10 = [1, [2], [3, [[4]]], [5, 6], [7], 8];\n\necho \"List 1: \" . implode(', ', flatten_list($list1)) . \"\\n\";\necho \"List 2: \" . implode(', ', flatten_list($list2)) . \"\\n\";\necho \"List 3: \" . implode(', ', flatten_list($list3)) . \"\\n\";\necho \"List 4: \" . implode(', ', flatten_list($list4)) . \"\\n\";\necho \"List 5: \" . implode(', ', flatten_list($list5)) . \"\\n\";\necho \"List 6: \" . implode(', ', flatten_list($list6)) . \"\\n\";\necho \"List 7: \" . implode(', ', flatten_list($list7)) . \"\\n\";\necho \"List 8: \" . implode(', ', flatten_list($list8)) . \"\\n\";\necho \"List 9: \" . implode(', ', flatt\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpt0snqsd2.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $flat_list = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $flat_list = array_merge($flat_list, flatten_list($item));\n        } else {\n            $flat_list[] = $item;\n        }\n    }\n    return $flat_list;\n}\n\n$list1 = array(1, array(2, array(3, 4), 5), array(array(6)));\n$list2 = array(0, 2, array(array(2), 8, array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array(array\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpwgfe3akk.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n  $list2 = [];\n  foreach ($list1 as $item) {\n    if (is_array($item)) {\n      $list2 = array_merge($list2, flatten_list($item));\n    } else {\n      $list2[] = $item;\n    }\n  }\n  return $list2;\n}\n\n$list1 = [1, [2, 3], [4, [5, 6, [7, 8]]]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517670,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 4\n    [5] => 3\n    [6] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, [2, [3, 4], 5], 6];\nprint_r(flatten_list($list1));\n\nfunction candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123866,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}