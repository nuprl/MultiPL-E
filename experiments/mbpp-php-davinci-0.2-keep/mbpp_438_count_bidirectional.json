{
  "name": "mbpp_438_count_bidirectional",
  "language": "php",
  "prompt": "<?php\n// Write a function to count bidirectional tuple pairs.\nfunction count_bidirectional($test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return count_bidirectional(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6), array(1, 2), array(6, 5), array(9, 1), array(6, 5), array(2, 1))) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 6), array(1, 3), array(6, 5), array(9, 1), array(6, 5), array(2, 1))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 6), array(1, 2), array(6, 5), array(9, 2), array(6, 5), array(2, 1))) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $count = 0;\n    $test_list_length = count($test_list);\n    for ($i = 0; $i < $test_list_length; $i++) {\n        for ($j = $i + 1; $j < $test_list_length; $j++) {\n            if ($test_list[$i] == $test_list[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n",
    "  $count = 0;\n  foreach ($test_list as $i => $item) {\n    foreach ($test_list as $j => $other_item) {\n      if ($i == $j) {\n        continue;\n      }\n      if ($item == $other_item) {\n        $count++;\n      }\n    }\n  }\n  return $count;\n}\n\n$test_list = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n$count = count_bidirectional($test_list);\nprint \"Count: $count\\n\";\n",
    "    $count = 0;\n    foreach ($test_list as $key => $value) {\n        if (isset($test_list[$value]) && $test_list[$value] == $key) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
    "  $count = 0;\n  foreach ($test_list as $i => $test_item) {\n    foreach ($test_list as $j => $test_item2) {\n      if ($i != $j && $test_item == $test_item2) {\n        $count++;\n      }\n    }\n  }\n  return $count;\n}\n",
    "    $count = 0;\n    $len = count($test_list);\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n            if ($test_list[$i] == $test_list[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n",
    "  $count = 0;\n  $len = count($test_list);\n  for ($i = 0; $i < $len; $i++) {\n    for ($j = $i + 1; $j < $len; $j++) {\n      if ($test_list[$i] == $test_list[$j]) {\n        $count++;\n      }\n    }\n  }\n  return $count;\n}\n",
    "  $count = 0;\n  $test_list_length = count($test_list);\n  for ($i = 0; $i < $test_list_length; $i++) {\n    for ($j = $i + 1; $j < $test_list_length; $j++) {\n      if ($test_list[$i] == $test_list[$j]) {\n        $count++;\n      }\n    }\n  }\n  return $count;\n}\n",
    "    $count = 0;\n    $test_list_size = count($test_list);\n    for ($i = 0; $i < $test_list_size; $i++) {\n        for ($j = $i + 1; $j < $test_list_size; $j++) {\n            if ($test_list[$i] == $test_list[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n",
    "    $count = 0;\n    foreach ($test_list as $i => $value) {\n        foreach ($test_list as $j => $value) {\n            if ($i < $j && $test_list[$i] == $test_list[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n",
    "  $count = 0;\n  for ($i = 0; $i < count($test_list); $i++) {\n    for ($j = $i + 1; $j < count($test_list); $j++) {\n      if ($test_list[$i] == $test_list[$j]) {\n        $count++;\n      }\n    }\n  }\n  return $count;\n}\n",
    "\t$count = 0;\n\tforeach ($test_list as $key => $value) {\n\t\tif (isset($test_list[$value]) && $test_list[$value] == $key) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n",
    "  $count = 0;\n  foreach ($test_list as $key => $value) {\n    if (isset($test_list[$value]) && $test_list[$value] == $key) {\n      $count++;\n    }\n  }\n  return $count;\n}\n",
    "  $count = 0;\n  $len = count($test_list);\n  for ($i = 0; $i < $len; $i++) {\n    for ($j = $i + 1; $j < $len; $j++) {\n      if ($test_list[$i] == $test_list[$j]) {\n        $count++;\n      }\n    }\n  }\n  return $count;\n}\n",
    "  $count = 0;\n  foreach ($test_list as $key => $value) {\n    if (isset($test_list[$value]) && $test_list[$value] == $key) {\n      $count++;\n    }\n  }\n  return $count;\n}\n",
    "    $count = 0;\n    foreach ($test_list as $key => $value) {\n        if (isset($test_list[$value]) && $test_list[$value] == $key) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
    "  $count = 0;\n  foreach ($test_list as $key => $value) {\n    if (isset($test_list[$value]) && $test_list[$value] == $key) {\n      $count++;\n    }\n  }\n  return $count;\n}\n",
    "  $count = 0;\n  foreach ($test_list as $key => $value) {\n    if (isset($test_list[$value]) && $test_list[$value] == $key) {\n      $count++;\n    }\n  }\n  return $count;\n}\n",
    "    $count = 0;\n    for ($i = 0; $i < count($test_list); $i++) {\n        for ($j = 0; $j < count($test_list); $j++) {\n            if ($test_list[$i][0] == $test_list[$j][1] && $test_list[$i][1] == $test_list[$j][0]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n",
    "  $count = 0;\n  foreach ($test_list as $key => $value) {\n    if (array_key_exists($value, $test_list) && $test_list[$value] == $key) {\n      $count++;\n    }\n  }\n  return $count;\n}\n",
    "    $count = 0;\n    $test_list_length = count($test_list);\n    for ($i = 0; $i < $test_list_length; $i++) {\n        for ($j = $i + 1; $j < $test_list_length; $j++) {\n            if ($test_list[$i] == $test_list[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n"
  ]
}