{
  "name": "mbpp_753_min_k",
  "language": "php",
  "prompt": "<?php\n// Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nfunction min_k($test_list, $K) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return min_k(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"Manjeet\", 10), array(\"Akshat\", 4), array(\"Akash\", 2), array(\"Nikhil\", 8)), 2) !== array(array(\"Akash\", 2), array(\"Akshat\", 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Sanjeev\", 11), array(\"Angat\", 5), array(\"Akash\", 3), array(\"Nepin\", 9)), 3) !== array(array(\"Akash\", 3), array(\"Angat\", 5), array(\"Nepin\", 9))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"tanmay\", 14), array(\"Amer\", 11), array(\"Ayesha\", 9), array(\"SKD\", 16)), 1) !== array(array(\"Ayesha\", 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($item) use ($test_list) {\n        foreach ($test_list as $tuple) {\n            if ($tuple[0] == $item) {\n                return $tuple;\n            }\n        }\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(1, 3),\n    array(1, 4),\n    array(2, 3),\n    array(2, 4),\n    array(3, 4),\n    array(3, 5),\n    array(4, 5),\n    array(4, 6),\n    array(5, 6),\n    array(5, 7),\n    array(6, 7),\n    array(6, 8),\n    array(7, 8),\n    array(7, 9),\n    array(8, 9),\n    array(8, 10),\n    array(9, 10),\n    array(9, 11),\n    array(10, 11),\n    array(10, 12),\n    array(11, 12),\n    array(11, 13),\n    array(12, 13),\n    array(12, 14),\n    array(13, 14),\n    array(13, 15),\n    array(14, 15),\n    array(14, 16),\n    array(15, 16),\n    array(15, 17),\n    array(16, 17),\n    array(16, 18),\n    array(17, 18),\n    array(17, 19),\n    array(18, 19),\n    array(18, 20),\n    array(19, 20),\n    array(19, 21),\n    array(20, 21),\n    array(20, 22),\n    array(21, 22),\n    array(",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_column($min_k, 'value');\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_map(function($v) { return $v['value']; }, $min_k);\n    $min_k = array_combine(array_keys($min_k), $min_k);\n    $min_k = array_map(function($v) { return $v['value']; }, $min_k);\n    return $min_k;\n}\n\n$test_list = [\n    ['key' => 'Geeks', 'value' => '5'],\n    ['key' => 'for', 'value' => '15'],\n    ['key' => 'Geeks', 'value' => '2'],\n    ['key' => 'CS', 'value' => '20'],\n    ['key' => 'Geeks', 'value' => '5'],\n    ['key' => 'for', 'value' => '10'],\n    ['key' => 'Geeks', 'value' => '3'],\n    ['key' => 'CS', 'value' => '30'],\n    ['key' => 'Geeks', 'value' => '15'],\n    ['key' => 'for', 'value' => '10'],\n    ['key' => 'Geeks', 'value' => '13'],\n    ['key' => 'CS', 'value' => '20'],\n    ['key' => 'Geeks', 'value' => '9'],\n    ['key' => 'for', 'value' => '10'],\n    ['key' => 'Geeks', 'value' => '10'],\n    ['key' => 'CS', 'value' => '15'],\n    ['key' => 'Geeks', 'value' => '11'],\n    ['key' => 'for', 'value' => '5'],\n    ['key' => 'Geeks', 'value' => '16'],\n    ['key' => 'CS', 'value'",
    "    $min_k = [];\n    $count = 0;\n    foreach ($test_list as $tuple) {\n        if ($count < $K) {\n            $min_k[] = $tuple;\n            $count++;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple < $max_tuple) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5], [8, 9]];\n$K = 4;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5], [8, 9]];\n$K = 3;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5], [8, 9]];\n$K = 2;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5], [8, 9]];\n$K = 1;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5], [8, 9]];\n$K = 0;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5], [8, 9]];\n$K =",
    "    $min_k = [];\n    foreach ($test_list as $test) {\n        if (count($min_k) < $K) {\n            $min_k[] = $test;\n        } else {\n            $max_k = max($min_k);\n            if ($test < $max_k) {\n                $min_k[array_search($max_k, $min_k)] = $test;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 3;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nforeach ($result as $item) {\n    echo \"[\" . $item[0] . \", \" . $item[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 2;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nforeach ($result as $item) {\n    echo \"[\" . $item[0] . \", \" . $item[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 4;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nforeach ($result as $item) {\n    echo \"[\" . $item[0] . \", \" . $item[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 5;\n$result = min_k($",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] <=> $b[0];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] <=> $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 3;\n$result = min_k($test_list, $K);\necho \"The minimum k records from the list are: \";\nforeach ($result as $item) {\n    echo $item[0] . \" \";\n}\necho \"\\n\";\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 5;\n$result = min_k($test_list, $K);\necho \"The minimum k records from the list are: \";\nforeach ($result as $item) {\n    echo $item[0] . \" \";\n}\necho \"\\n\";\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40], ['Geeks', 50]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40], ['Geeks', 50]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40], ['Geeks', 50]];\n$K = 6;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) { return $x[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($x) use ($test_list) {\n        $min_k_item = array_filter($test_list, function($y) use ($x) {\n            return $y[0] == $x;\n        });\n        $min_k_item = array_map(function($y) { return $y[1]; }, $min_k_item);\n        $min_k_item = array_sum($min_k_item);\n        return [$x, $min_k_item];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [2, 4], [3, 6], [4, 8], [5, 10], [6, 12], [7, 14], [8, 16], [9, 18], [10, 20]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [2, 4], [3, 6], [4, 8], [5, 10], [6, 12], [7, 14], [8, 16], [9, 18], [10, 20]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [2, 4], [3, 6], [4, 8], [5, 10], [6, 12], [7, 14], [8, 16], [9, 18], [10, 20]];\n$K = 1;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [2, 4], [3, 6], [4, 8], [5,",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($a) {\n        return $a[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($a) use ($test_list) {\n        return array_filter($test_list, function($b) use ($a) {\n            return $b[0] == $a;\n        });\n    }, $min_k);\n    $min_k = array_map(function($a) {\n        return array_values($a);\n    }, $min_k);\n    $min_k = array_map(function($a) {\n        return $a[0];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(1, 3),\n    array(1, 4),\n    array(2, 3),\n    array(2, 4),\n    array(3, 4),\n    array(3, 5),\n    array(4, 5),\n    array(4, 6),\n    array(5, 6),\n    array(5, 7),\n    array(6, 7),\n    array(6, 8),\n    array(7, 8),\n    array(7, 9),\n    array(8, 9),\n    array(8, 10),\n    array(9, 10),\n    array(9, 11),\n    array(10, 11),\n    array(10, 12),\n    array(11, 12),\n    array(11, 13),\n    array(12, 13),\n    array(12, 14),\n    array(13, 14),\n    array(13, 15),\n    array(14, 15),\n    array(14, 16),\n    array(15, 16),\n    array(15, 17),\n    array(16, 17),\n    array(16, 18),\n    array(17, 18),\n    array(17, 19),\n",
    "    $min_k = [];\n    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 5;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [7, 8], [8, 9], [9, 10], [10, 11], [12, 13]];\n$K = 3;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [2, 3], [4, 5], [6, 7]];\n$K = 3;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [2, 3], [4, 5], [6, 7], [8, 9]];\n$K = 3;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19]];\n$K = 5;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19]];\n$K = 4;\nprint_",
    "    $min_list = [];\n    for ($i = 0; $i < $K; $i++) {\n        $min_list[] = $test_list[$i];\n    }\n    $min_list = min_heapify($min_list);\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i] < $min_list[0]) {\n            $min_list[0] = $test_list[$i];\n            $min_list = min_heapify($min_list);\n        }\n    }\n    return $min_list;\n}\n",
    "    $min_k_list = array();\n    $min_k_list = array_slice($test_list, 0, $K);\n    $min_k_list = array_map(function($x) { return $x[0]; }, $min_k_list);\n    $min_k_list = array_unique($min_k_list);\n    $min_k_list = array_values($min_k_list);\n    $min_k_list = array_map(function($x) use ($test_list) {\n        $min_k_list_item = array_filter($test_list, function($y) use ($x) {\n            return $y[0] == $x;\n        });\n        $min_k_list_item = array_values($min_k_list_item);\n        return $min_k_list_item[0];\n    }, $min_k_list);\n    return $min_k_list;\n}\n\n$test_list = array(\n    array(1, 'geeks'),\n    array(2, 'for'),\n    array(3, 'geeks'),\n    array(4, 'geeks'),\n    array(5, 'geeks'),\n    array(6, 'geeks'),\n    array(7, 'geeks'),\n    array(8, 'geeks'),\n    array(9, 'geeks'),\n    array(10, 'geeks'),\n    array(11, 'geeks'),\n    array(12, 'geeks'),\n    array(13, 'geeks'),\n    array(14, 'geeks'),\n    array(15, 'geeks'),\n    array(16, 'geeks'),\n    array(17, 'geeks'),\n    array(18, 'geeks'),\n    array(19, 'geeks'),\n    array(20, 'geeks'),\n    array(21, 'geeks'),\n    array(22, 'geeks'),\n    array(23, 'geeks'),\n    array(24, 'geeks'),\n    array(25, 'geeks'),\n    array(26, 'geeks'),\n    array(27, 'geeks'),\n    array(28",
    "    $min_list = [];\n    foreach ($test_list as $tuple) {\n        $min_list[] = $tuple[1];\n    }\n    sort($min_list);\n    return array_slice($min_list, 0, $K);\n}\n\n$test_list = [\n    [1, 2],\n    [2, 3],\n    [4, 5],\n    [6, 7],\n    [8, 9],\n    [10, 11],\n    [12, 13],\n    [14, 15],\n    [16, 17],\n    [18, 19],\n    [20, 21],\n    [22, 23],\n    [24, 25],\n    [26, 27],\n    [28, 29],\n    [30, 31],\n    [32, 33],\n    [34, 35],\n    [36, 37],\n    [38, 39],\n    [40, 41],\n    [42, 43],\n    [44, 45],\n    [46, 47],\n    [48, 49],\n    [50, 51],\n    [52, 53],\n    [54, 55],\n    [56, 57],\n    [58, 59],\n    [60, 61],\n    [62, 63],\n    [64, 65],\n    [66, 67],\n    [68, 69],\n    [70, 71],\n    [72, 73],\n    [74, 75],\n    [76, 77],\n    [78, 79],\n    [80, 81],\n    [82, 83],\n    [84, 85],\n    [86, 87],\n    [88, 89],\n    [90, 91],\n    [92, 93],\n    [94, 95],\n    [96, 97],\n    [98, 99],\n    [100, 101],\n    [102, 103],\n    [104, 105],\n    [106, 107],\n    [108, 109],\n    [110, 111],\n    [112, 113],\n    [114, 115],\n    [116, 117],\n    [118, 119],\n    [120, 121],\n    [122, 123],\n    [124,",
    "    $min_list = [];\n    $min_list_size = 0;\n    foreach ($test_list as $test_tuple) {\n        if ($min_list_size < $K) {\n            $min_list[] = $test_tuple;\n            $min_list_size++;\n        } else {\n            $max_index = 0;\n            $max_value = $min_list[0][0];\n            for ($i = 1; $i < $K; $i++) {\n                if ($min_list[$i][0] > $max_value) {\n                    $max_value = $min_list[$i][0];\n                    $max_index = $i;\n                }\n            }\n            if ($test_tuple[0] < $max_value) {\n                $min_list[$max_index] = $test_tuple;\n            }\n        }\n    }\n    return $min_list;\n}\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g']];\n$K = 3;\n$result = min_k($test_list, $K);\necho \"Minimum K records are: \";\nforeach ($result as $item) {\n    echo $item[0] . \" \";\n}\necho \"\\n\";\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g']];\n$K = 5;\n$result = min_k($test_list, $K);\necho \"Minimum K records are: \";\nforeach ($result as $item) {\n    echo $item[0] . \" \";\n}\necho \"\\n\";\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7",
    "    $min_k = array();\n    $min_k_index = array();\n    for ($i = 0; $i < $K; $i++) {\n        $min_k[$i] = $test_list[$i][1];\n        $min_k_index[$i] = $i;\n    }\n    for ($i = $K; $i < count($test_list); $i++) {\n        $max_index = array_search(max($min_k), $min_k);\n        if ($test_list[$i][1] < $min_k[$max_index]) {\n            $min_k[$max_index] = $test_list[$i][1];\n            $min_k_index[$max_index] = $i;\n        }\n    }\n    $min_k_records = array();\n    for ($i = 0; $i < $K; $i++) {\n        $min_k_records[$i] = $test_list[$min_k_index[$i]];\n    }\n    return $min_k_records;\n}\n\n$test_list = array(\n    array(\"geeks\", 10),\n    array(\"for\", 15),\n    array(\"geeks\", 20),\n    array(\"geeks\", 30),\n    array(\"geeks\", 40),\n    array(\"geeks\", 50),\n    array(\"geeks\", 60),\n    array(\"geeks\", 70),\n    array(\"geeks\", 80),\n    array(\"geeks\", 90),\n    array(\"geeks\", 100),\n    array(\"geeks\", 110),\n    array(\"geeks\", 120),\n    array(\"geeks\", 130),\n    array(\"geeks\", 140),\n    array(\"geeks\", 150),\n    array(\"geeks\", 160),\n    array(\"geeks\", 170),\n    array(\"geeks\", 180),\n    array(\"geeks\", 190),\n    array(\"geeks\", 200),\n    array(\"geeks\", 210),\n    array(\"geeks\", 220),\n    array(\"geeks\", 230),\n    array(\"geeks\", 240),\n    array(\"geeks\", 250),",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    for ($i = $K; $i < $n; $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] - $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [5, 6], [7, 8]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [5, 6], [7, 8]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [5, 6], [7, 8]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [5, 6], [7, 8]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [5, 6], [7, 8]];\n$K = 6;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1,",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] - $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j')\n);\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j')\n);\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function ($a, $b) {\n        return $a[0] <=> $b[0];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function ($a, $b) {\n                return $a[0] <=> $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [4, 5]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [4, 5]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [4, 5]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [4, 5]];\n$K = 1;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [4, 5]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n",
    "    $min_k = [];\n    $i = 0;\n    $n = count($test_list);\n    while ($i < $n) {\n        $min_k[] = $test_list[$i];\n        $i += $K;\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 3],\n    [2, 4],\n    [3, 6],\n    [4, 5],\n    [5, 2],\n    [6, 1],\n    [7, 9],\n    [8, 7],\n    [9, 8],\n    [10, 10],\n];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [\n    [1, 3],\n    [2, 4],\n    [3, 6],\n    [4, 5],\n    [5, 2],\n    [6, 1],\n    [7, 9],\n    [8, 7],\n    [9, 8],\n    [10, 10],\n];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [\n    [1, 3],\n    [2, 4],\n    [3, 6],\n    [4, 5],\n    [5, 2],\n    [6, 1],\n    [7, 9],\n    [8, 7],\n    [9, 8],\n    [10, 10],\n];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [\n    [1, 3],\n    [2, 4],\n    [3, 6],\n    [4, 5],\n    [5, 2],\n    [6, 1],\n    [7, 9],\n    [8, 7],\n    [9, 8],\n    [10, 10],\n];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list =",
    "    $n = count($test_list);\n    $min_k_list = array();\n    for ($i = 0; $i < $n; $i++) {\n        $min_k_list[$i] = $test_list[$i][0];\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 1; $j < $K; $j++) {\n            if ($min_k_list[$i] > $test_list[$i][$j]) {\n                $min_k_list[$i] = $test_list[$i][$j];\n            }\n        }\n    }\n    return $min_k_list;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(6, 7, 8, 9, 10),\n    array(11, 12, 13, 14, 15),\n    array(16, 17, 18, 19, 20),\n    array(21, 22, 23, 24, 25)\n);\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8],\n    [8, 9],\n    [9, 10],\n    [10, 11],\n];\n$K = 3;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$test_list = [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8],\n    [8, 9],\n    [9, 10],\n    [10, 11],\n];\n$K = 5;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$test_list = [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8],\n    [8, 9],\n    [9, 10],\n    [10, 11],\n];\n$K = 1;\n$result = min_k($"
  ]
}