{
  "name": "mbpp_753_min_k",
  "language": "php",
  "prompt": "<?php\n// Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nfunction min_k($test_list, $K) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return min_k(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"Manjeet\", 10), array(\"Akshat\", 4), array(\"Akash\", 2), array(\"Nikhil\", 8)), 2) !== array(array(\"Akash\", 2), array(\"Akshat\", 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Sanjeev\", 11), array(\"Angat\", 5), array(\"Akash\", 3), array(\"Nepin\", 9)), 3) !== array(array(\"Akash\", 3), array(\"Angat\", 5), array(\"Nepin\", 9))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"tanmay\", 14), array(\"Amer\", 11), array(\"Ayesha\", 9), array(\"SKD\", 16)), 1) !== array(array(\"Ayesha\", 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($item) use ($test_list) {\n        foreach ($test_list as $tuple) {\n            if ($tuple[0] == $item) {\n                return $tuple;\n            }\n        }\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(1, 3),\n    array(1, 4),\n    array(2, 3),\n    array(2, 4),\n    array(3, 4),\n    array(3, 5),\n    array(4, 5),\n    array(4, 6),\n    array(5, 6),\n    array(5, 7),\n    array(6, 7),\n    array(6, 8),\n    array(7, 8),\n    array(7, 9),\n    array(8, 9),\n    array(8, 10),\n    array(9, 10),\n    array(9, 11),\n    array(10, 11),\n    array(10, 12),\n    array(11, 12),\n    array(11, 13),\n    array(12, 13),\n    array(12, 14),\n    array(13, 14),\n    array(13, 15),\n    array(14, 15),\n    array(14, 16),\n    array(15, 16),\n    array(15, 17),\n    array(16, 17),\n    array(16, 18),\n    array(17, 18),\n    array(17, 19),\n    array(18, 19),\n    array(18, 20),\n    array(19, 20),\n    array(19, 21),\n    array(20, 21),\n    array(20, 22),\n    array(21, 22),\n    array(",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_column($min_k, 'value');\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_map(function($v) { return $v['value']; }, $min_k);\n    $min_k = array_combine(array_keys($min_k), $min_k);\n    $min_k = array_map(function($v) { return $v['value']; }, $min_k);\n    return $min_k;\n}\n\n$test_list = [\n    ['key' => 'Geeks', 'value' => '5'],\n    ['key' => 'for', 'value' => '15'],\n    ['key' => 'Geeks', 'value' => '2'],\n    ['key' => 'CS', 'value' => '20'],\n    ['key' => 'Geeks', 'value' => '5'],\n    ['key' => 'for', 'value' => '10'],\n    ['key' => 'Geeks', 'value' => '3'],\n    ['key' => 'CS', 'value' => '30'],\n    ['key' => 'Geeks', 'value' => '15'],\n    ['key' => 'for', 'value' => '10'],\n    ['key' => 'Geeks', 'value' => '13'],\n    ['key' => 'CS', 'value' => '20'],\n    ['key' => 'Geeks', 'value' => '9'],\n    ['key' => 'for', 'value' => '10'],\n    ['key' => 'Geeks', 'value' => '10'],\n    ['key' => 'CS', 'value' => '15'],\n    ['key' => 'Geeks', 'value' => '11'],\n    ['key' => 'for', 'value' => '5'],\n    ['key' => 'Geeks', 'value' => '16'],\n    ['key' => 'CS', 'value'",
    "    $min_k = [];\n    $count = 0;\n    foreach ($test_list as $tuple) {\n        if ($count < $K) {\n            $min_k[] = $tuple;\n            $count++;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple < $max_tuple) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5], [8, 9]];\n$K = 4;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5], [8, 9]];\n$K = 3;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5], [8, 9]];\n$K = 2;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5], [8, 9]];\n$K = 1;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5], [8, 9]];\n$K = 0;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5], [8, 9]];\n$K =",
    "    $min_k = [];\n    foreach ($test_list as $test) {\n        if (count($min_k) < $K) {\n            $min_k[] = $test;\n        } else {\n            $max_k = max($min_k);\n            if ($test < $max_k) {\n                $min_k[array_search($max_k, $min_k)] = $test;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 3;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nforeach ($result as $item) {\n    echo \"[\" . $item[0] . \", \" . $item[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 2;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nforeach ($result as $item) {\n    echo \"[\" . $item[0] . \", \" . $item[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 4;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nforeach ($result as $item) {\n    echo \"[\" . $item[0] . \", \" . $item[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 5;\n$result = min_k($",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] <=> $b[0];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] <=> $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 3;\n$result = min_k($test_list, $K);\necho \"The minimum k records from the list are: \";\nforeach ($result as $item) {\n    echo $item[0] . \" \";\n}\necho \"\\n\";\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 5;\n$result = min_k($test_list, $K);\necho \"The minimum k records from the list are: \";\nforeach ($result as $item) {\n    echo $item[0] . \" \";\n}\necho \"\\n\";\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40], ['Geeks', 50]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40], ['Geeks', 50]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40], ['Geeks', 50]];\n$K = 6;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) { return $x[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($x) use ($test_list) {\n        $min_k_item = array_filter($test_list, function($y) use ($x) {\n            return $y[0] == $x;\n        });\n        $min_k_item = array_map(function($y) { return $y[1]; }, $min_k_item);\n        $min_k_item = array_sum($min_k_item);\n        return [$x, $min_k_item];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [2, 4], [3, 6], [4, 8], [5, 10], [6, 12], [7, 14], [8, 16], [9, 18], [10, 20]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [2, 4], [3, 6], [4, 8], [5, 10], [6, 12], [7, 14], [8, 16], [9, 18], [10, 20]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [2, 4], [3, 6], [4, 8], [5, 10], [6, 12], [7, 14], [8, 16], [9, 18], [10, 20]];\n$K = 1;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [2, 4], [3, 6], [4, 8], [5,",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($a) {\n        return $a[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($a) use ($test_list) {\n        return array_filter($test_list, function($b) use ($a) {\n            return $b[0] == $a;\n        });\n    }, $min_k);\n    $min_k = array_map(function($a) {\n        return array_values($a);\n    }, $min_k);\n    $min_k = array_map(function($a) {\n        return $a[0];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(1, 3),\n    array(1, 4),\n    array(2, 3),\n    array(2, 4),\n    array(3, 4),\n    array(3, 5),\n    array(4, 5),\n    array(4, 6),\n    array(5, 6),\n    array(5, 7),\n    array(6, 7),\n    array(6, 8),\n    array(7, 8),\n    array(7, 9),\n    array(8, 9),\n    array(8, 10),\n    array(9, 10),\n    array(9, 11),\n    array(10, 11),\n    array(10, 12),\n    array(11, 12),\n    array(11, 13),\n    array(12, 13),\n    array(12, 14),\n    array(13, 14),\n    array(13, 15),\n    array(14, 15),\n    array(14, 16),\n    array(15, 16),\n    array(15, 17),\n    array(16, 17),\n    array(16, 18),\n    array(17, 18),\n    array(17, 19),\n",
    "    $min_k = [];\n    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 5;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [7, 8], [8, 9], [9, 10], [10, 11], [12, 13]];\n$K = 3;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [2, 3], [4, 5], [6, 7]];\n$K = 3;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [2, 3], [4, 5], [6, 7], [8, 9]];\n$K = 3;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19]];\n$K = 5;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19]];\n$K = 4;\nprint_",
    "    $min_list = [];\n    for ($i = 0; $i < $K; $i++) {\n        $min_list[] = $test_list[$i];\n    }\n    $min_list = min_heapify($min_list);\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i] < $min_list[0]) {\n            $min_list[0] = $test_list[$i];\n            $min_list = min_heapify($min_list);\n        }\n    }\n    return $min_list;\n}\n",
    "    $min_k_list = array();\n    $min_k_list = array_slice($test_list, 0, $K);\n    $min_k_list = array_map(function($x) { return $x[0]; }, $min_k_list);\n    $min_k_list = array_unique($min_k_list);\n    $min_k_list = array_values($min_k_list);\n    $min_k_list = array_map(function($x) use ($test_list) {\n        $min_k_list_item = array_filter($test_list, function($y) use ($x) {\n            return $y[0] == $x;\n        });\n        $min_k_list_item = array_values($min_k_list_item);\n        return $min_k_list_item[0];\n    }, $min_k_list);\n    return $min_k_list;\n}\n\n$test_list = array(\n    array(1, 'geeks'),\n    array(2, 'for'),\n    array(3, 'geeks'),\n    array(4, 'geeks'),\n    array(5, 'geeks'),\n    array(6, 'geeks'),\n    array(7, 'geeks'),\n    array(8, 'geeks'),\n    array(9, 'geeks'),\n    array(10, 'geeks'),\n    array(11, 'geeks'),\n    array(12, 'geeks'),\n    array(13, 'geeks'),\n    array(14, 'geeks'),\n    array(15, 'geeks'),\n    array(16, 'geeks'),\n    array(17, 'geeks'),\n    array(18, 'geeks'),\n    array(19, 'geeks'),\n    array(20, 'geeks'),\n    array(21, 'geeks'),\n    array(22, 'geeks'),\n    array(23, 'geeks'),\n    array(24, 'geeks'),\n    array(25, 'geeks'),\n    array(26, 'geeks'),\n    array(27, 'geeks'),\n    array(28",
    "    $min_list = [];\n    foreach ($test_list as $tuple) {\n        $min_list[] = $tuple[1];\n    }\n    sort($min_list);\n    return array_slice($min_list, 0, $K);\n}\n\n$test_list = [\n    [1, 2],\n    [2, 3],\n    [4, 5],\n    [6, 7],\n    [8, 9],\n    [10, 11],\n    [12, 13],\n    [14, 15],\n    [16, 17],\n    [18, 19],\n    [20, 21],\n    [22, 23],\n    [24, 25],\n    [26, 27],\n    [28, 29],\n    [30, 31],\n    [32, 33],\n    [34, 35],\n    [36, 37],\n    [38, 39],\n    [40, 41],\n    [42, 43],\n    [44, 45],\n    [46, 47],\n    [48, 49],\n    [50, 51],\n    [52, 53],\n    [54, 55],\n    [56, 57],\n    [58, 59],\n    [60, 61],\n    [62, 63],\n    [64, 65],\n    [66, 67],\n    [68, 69],\n    [70, 71],\n    [72, 73],\n    [74, 75],\n    [76, 77],\n    [78, 79],\n    [80, 81],\n    [82, 83],\n    [84, 85],\n    [86, 87],\n    [88, 89],\n    [90, 91],\n    [92, 93],\n    [94, 95],\n    [96, 97],\n    [98, 99],\n    [100, 101],\n    [102, 103],\n    [104, 105],\n    [106, 107],\n    [108, 109],\n    [110, 111],\n    [112, 113],\n    [114, 115],\n    [116, 117],\n    [118, 119],\n    [120, 121],\n    [122, 123],\n    [124,",
    "    $min_list = [];\n    $min_list_size = 0;\n    foreach ($test_list as $test_tuple) {\n        if ($min_list_size < $K) {\n            $min_list[] = $test_tuple;\n            $min_list_size++;\n        } else {\n            $max_index = 0;\n            $max_value = $min_list[0][0];\n            for ($i = 1; $i < $K; $i++) {\n                if ($min_list[$i][0] > $max_value) {\n                    $max_value = $min_list[$i][0];\n                    $max_index = $i;\n                }\n            }\n            if ($test_tuple[0] < $max_value) {\n                $min_list[$max_index] = $test_tuple;\n            }\n        }\n    }\n    return $min_list;\n}\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g']];\n$K = 3;\n$result = min_k($test_list, $K);\necho \"Minimum K records are: \";\nforeach ($result as $item) {\n    echo $item[0] . \" \";\n}\necho \"\\n\";\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g']];\n$K = 5;\n$result = min_k($test_list, $K);\necho \"Minimum K records are: \";\nforeach ($result as $item) {\n    echo $item[0] . \" \";\n}\necho \"\\n\";\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7",
    "    $min_k = array();\n    $min_k_index = array();\n    for ($i = 0; $i < $K; $i++) {\n        $min_k[$i] = $test_list[$i][1];\n        $min_k_index[$i] = $i;\n    }\n    for ($i = $K; $i < count($test_list); $i++) {\n        $max_index = array_search(max($min_k), $min_k);\n        if ($test_list[$i][1] < $min_k[$max_index]) {\n            $min_k[$max_index] = $test_list[$i][1];\n            $min_k_index[$max_index] = $i;\n        }\n    }\n    $min_k_records = array();\n    for ($i = 0; $i < $K; $i++) {\n        $min_k_records[$i] = $test_list[$min_k_index[$i]];\n    }\n    return $min_k_records;\n}\n\n$test_list = array(\n    array(\"geeks\", 10),\n    array(\"for\", 15),\n    array(\"geeks\", 20),\n    array(\"geeks\", 30),\n    array(\"geeks\", 40),\n    array(\"geeks\", 50),\n    array(\"geeks\", 60),\n    array(\"geeks\", 70),\n    array(\"geeks\", 80),\n    array(\"geeks\", 90),\n    array(\"geeks\", 100),\n    array(\"geeks\", 110),\n    array(\"geeks\", 120),\n    array(\"geeks\", 130),\n    array(\"geeks\", 140),\n    array(\"geeks\", 150),\n    array(\"geeks\", 160),\n    array(\"geeks\", 170),\n    array(\"geeks\", 180),\n    array(\"geeks\", 190),\n    array(\"geeks\", 200),\n    array(\"geeks\", 210),\n    array(\"geeks\", 220),\n    array(\"geeks\", 230),\n    array(\"geeks\", 240),\n    array(\"geeks\", 250),",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    for ($i = $K; $i < $n; $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] - $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [5, 6], [7, 8]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [5, 6], [7, 8]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [5, 6], [7, 8]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [5, 6], [7, 8]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [5, 6], [7, 8]];\n$K = 6;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1,",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] - $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j')\n);\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j')\n);\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function ($a, $b) {\n        return $a[0] <=> $b[0];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function ($a, $b) {\n                return $a[0] <=> $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [4, 5]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [4, 5]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [4, 5]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [4, 5]];\n$K = 1;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [4, 5]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n",
    "    $min_k = [];\n    $i = 0;\n    $n = count($test_list);\n    while ($i < $n) {\n        $min_k[] = $test_list[$i];\n        $i += $K;\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 3],\n    [2, 4],\n    [3, 6],\n    [4, 5],\n    [5, 2],\n    [6, 1],\n    [7, 9],\n    [8, 7],\n    [9, 8],\n    [10, 10],\n];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [\n    [1, 3],\n    [2, 4],\n    [3, 6],\n    [4, 5],\n    [5, 2],\n    [6, 1],\n    [7, 9],\n    [8, 7],\n    [9, 8],\n    [10, 10],\n];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [\n    [1, 3],\n    [2, 4],\n    [3, 6],\n    [4, 5],\n    [5, 2],\n    [6, 1],\n    [7, 9],\n    [8, 7],\n    [9, 8],\n    [10, 10],\n];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [\n    [1, 3],\n    [2, 4],\n    [3, 6],\n    [4, 5],\n    [5, 2],\n    [6, 1],\n    [7, 9],\n    [8, 7],\n    [9, 8],\n    [10, 10],\n];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list =",
    "    $n = count($test_list);\n    $min_k_list = array();\n    for ($i = 0; $i < $n; $i++) {\n        $min_k_list[$i] = $test_list[$i][0];\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 1; $j < $K; $j++) {\n            if ($min_k_list[$i] > $test_list[$i][$j]) {\n                $min_k_list[$i] = $test_list[$i][$j];\n            }\n        }\n    }\n    return $min_k_list;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(6, 7, 8, 9, 10),\n    array(11, 12, 13, 14, 15),\n    array(16, 17, 18, 19, 20),\n    array(21, 22, 23, 24, 25)\n);\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8],\n    [8, 9],\n    [9, 10],\n    [10, 11],\n];\n$K = 3;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$test_list = [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8],\n    [8, 9],\n    [9, 10],\n    [10, 11],\n];\n$K = 5;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$test_list = [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8],\n    [8, 9],\n    [9, 10],\n    [10, 11],\n];\n$K = 1;\n$result = min_k($",
    "    $min_k = [];\n    $min_k_values = [];\n    $min_k_keys = [];\n    $min_k_values[0] = $test_list[0][1];\n    $min_k_keys[0] = $test_list[0][0];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k_values[0]) {\n            $min_k_values[0] = $test_list[$i][1];\n            $min_k_keys[0] = $test_list[$i][0];\n        }\n    }\n    for ($i = 1; $i < $K; $i++) {\n        $min_k_values[$i] = $test_list[$i][1];\n        $min_k_keys[$i] = $test_list[$i][0];\n        for ($j = $i + 1; $j < count($test_list); $j++) {\n            if ($test_list[$j][1] < $min_k_values[$i]) {\n                $min_k_values[$i] = $test_list[$j][1];\n                $min_k_keys[$i] = $test_list[$j][0];\n            }\n        }\n    }\n    for ($i = 0; $i < $K; $i++) {\n        $min_k[$i] = [$min_k_keys[$i], $min_k_values[$i]];\n    }\n    return $min_k;\n}\n\n$test_list = [['gfg', 1], ['is', 2], ['best', 0], ['for', 1], ['CS', 2]];\n$K = 2;\n$result = min_k($test_list, $K);\necho \"Minimum k records are: \";\nfor ($i = 0; $i < $K; $i++) {\n    echo \"['\" . $result[$i][0] . \"', \" . $result[$i][1] . \"] \";",
    "    $min_list = array();\n    foreach ($test_list as $tuple) {\n        if (count($min_list) < $K) {\n            $min_list[] = $tuple;\n        } else {\n            $max_tuple = max($min_list);\n            if ($tuple < $max_tuple) {\n                $min_list[array_search($max_tuple, $min_list)] = $tuple;\n            }\n        }\n    }\n    return $min_list;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(2, 3),\n    array(3, 4),\n    array(4, 5),\n    array(5, 6),\n    array(6, 7),\n    array(7, 8),\n    array(8, 9),\n    array(9, 10),\n    array(10, 11),\n    array(11, 12),\n    array(12, 13),\n    array(13, 14),\n    array(14, 15),\n    array(15, 16),\n    array(16, 17),\n    array(17, 18),\n    array(18, 19),\n    array(19, 20),\n    array(20, 21),\n    array(21, 22),\n    array(22, 23),\n    array(23, 24),\n    array(24, 25),\n    array(25, 26),\n    array(26, 27),\n    array(27, 28),\n    array(28, 29),\n    array(29, 30),\n    array(30, 31),\n    array(31, 32),\n    array(32, 33),\n    array(33, 34),\n    array(34, 35),\n    array(35, 36),\n    array(36, 37),\n    array(37, 38),\n    array(38, 39),\n    array(39, 40),\n    array(40, 41),\n    array(41, 42),\n    array(42, 43),\n    array(43, 44),\n    array(44, 45),\n    array(45, 46),\n    array(46, 47),\n    array(47, 48",
    "    $min_k = array();\n    $min_k_index = array();\n    $min_k_index_count = 0;\n    $min_k_count = 0;\n    $test_list_count = count($test_list);\n    for ($i = 0; $i < $test_list_count; $i++) {\n        $test_list_i_count = count($test_list[$i]);\n        for ($j = 0; $j < $test_list_i_count; $j++) {\n            if ($min_k_count < $K) {\n                $min_k[$min_k_count] = $test_list[$i][$j];\n                $min_k_index[$min_k_index_count] = $i;\n                $min_k_index_count++;\n                $min_k_count++;\n            } else {\n                $min_k_max = max($min_k);\n                if ($test_list[$i][$j] < $min_k_max) {\n                    $min_k_max_index = array_search($min_k_max, $min_k);\n                    $min_k[$min_k_max_index] = $test_list[$i][$j];\n                    $min_k_index[$min_k_max_index] = $i;\n                }\n            }\n        }\n    }\n    return array($min_k, $min_k_index);\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(6, 7, 8, 9, 10),\n    array(11, 12, 13, 14, 15),\n    array(16, 17, 18, 19, 20),\n    array(21, 22, 23, 24, 25)\n);\n\n$K = 5;\n\n$result = min_k($test_list, $K);\n$min_k = $result[0];\n$min_k_index = $result[1];\n\necho \"Minimum K records are: \";\nfor ($i = 0; $i < count($min_k); $",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    foreach ($test_list as $tuple) {\n        if ($tuple[0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $tuple;\n            usort($min_k, function($a, $b) {\n                return $a[0] - $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(10, 20),\n    array(2, 3),\n    array(30, 400),\n    array(401, 450),\n    array(10, 20)\n);\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = array(\n    array(10, 20),\n    array(2, 3),\n    array(30, 400),\n    array(401, 450),\n    array(10, 20)\n);\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = array(\n    array(10, 20),\n    array(2, 3),\n    array(30, 400),\n    array(401, 450),\n    array(10, 20)\n);\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = array(\n    array(10, 20),\n    array(2, 3),\n    array(30, 400),\n    array(401, 450),\n    array(10, 20)\n);\n$K = 6;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = array(\n    array(10, 20),\n    array(2, 3),\n    array(30, 400),\n    array(401",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K-1][1]) {\n            $min_k[$K-1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 2;\n$result = min_k($test_list, $K);\n$expected = [['Geeks', 10], ['for', 15]];\nassert(count($result) == count($expected));\nfor ($i = 0; $i < count($result); $i++) {\n    assert($result[$i] == $expected[$i]);\n}\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 1;\n$result = min_k($test_list, $K);\n$expected = [['Geeks', 10]];\nassert(count($result) == count($expected));\nfor ($i = 0; $i < count($result); $i++) {\n    assert($result[$i] == $expected[$i]);\n}\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 3;\n$result = min_k($test_list, $K);\n$expected = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\nassert(count($result) == count($expected));\nfor ($i = 0; $i < count($result); $i++) {\n    assert($result[$i] == $expected[$i]);\n}\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($e) { return $e[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = count($min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 5;\necho min_k($test_list, $K);\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [7, 8], [8, 9], [9, 10], [10, 11], [12, 13]];\n$K = 3;\necho min_k($test_list, $K);\n\n$test_list = [[1, 2], [2, 3], [4, 5], [6, 7]];\n$K = 3;\necho min_k($test_list, $K);\n\n$test_list = [[4, 5], [1, 10], [2, 3], [9, 10], [1, 2], [4, 5], [6, 7], [3, 4], [5, 6], [10, 11]];\n$K = 4;\necho min_k($test_list, $K);\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]];\n$K = 3;\necho min_k($test_list, $K);\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]];\n$K = 4;\necho min_k($test",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8],\n    [8, 9],\n    [9, 10],\n    [10, 11],\n    [11, 12],\n    [12, 13],\n    [13, 14],\n    [14, 15],\n    [15, 16],\n    [16, 17],\n    [17, 18],\n    [18, 19],\n    [19, 20],\n    [20, 21],\n    [21, 22],\n    [22, 23],\n    [23, 24],\n    [24, 25],\n    [25, 26],\n    [26, 27],\n    [27, 28],\n    [28, 29],\n    [29, 30],\n    [30, 31],\n    [31, 32],\n    [32, 33],\n    [33, 34],\n    [34, 35],\n    [35, 36],\n    [36, 37],\n    [37, 38],\n    [38, 39],\n    [39, 40],\n    [40, 41],\n    [41, 42],\n    [42, 43],\n    [43, 44],\n    [44, 45],\n    [45, 46],\n    [46, 47],\n    [47, 48],\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] <=> $b[0];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] <=> $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j'),\n    array(11, 'k'),\n    array(12, 'l'),\n    array(13, 'm'),\n    array(14, 'n'),\n    array(15, 'o'),\n    array(16, 'p'),\n    array(17, 'q'),\n    array(18, 'r'),\n    array(19, 's'),\n    array(20, 't'),\n    array(21, 'u'),\n    array(22, 'v'),\n    array(23, 'w'),\n    array(24, 'x'),\n    array(25, 'y'),\n    array(26, 'z')\n);\n\n$K = 5;\n\n$min_k = min_k($test_list, $K);\n\nprint_r($min_k);\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] <=> $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] <=> $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array('gfg', 10),\n    array('is', 15),\n    array('best', 20),\n    array('for', 25),\n    array('CS', 30),\n    array('and', 35),\n    array('IT', 40),\n    array('students', 45),\n    array('from', 50),\n    array('all', 55),\n    array('over', 60),\n    array('the', 65),\n    array('world', 70),\n);\n\n$K = 5;\n\n$min_k = min_k($test_list, $K);\n\nforeach ($min_k as $record) {\n    echo $record[0] . ' ' . $record[1] . \"\\n\";\n}",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($e) { return $e[1]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    for ($i = $K; $i < $n; $i++) {\n        if (in_array($test_list[$i][1], $min_k)) {\n            continue;\n        }\n        $max_k = max($min_k);\n        if ($test_list[$i][1] < $max_k) {\n            $min_k[array_search($max_k, $min_k)] = $test_list[$i][1];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8],\n    [8, 9],\n    [9, 10],\n    [10, 11],\n    [11, 12],\n    [12, 13],\n    [13, 14],\n    [14, 15],\n    [15, 16],\n    [16, 17],\n    [17, 18],\n    [18, 19],\n    [19, 20],\n    [20, 21],\n    [21, 22],\n    [22, 23],\n    [23, 24],\n    [24, 25],\n    [25, 26],\n    [26, 27],\n    [27, 28],\n    [28, 29],\n    [29, 30],\n    [30, 31],\n    [31, 32],\n    [32, 33],\n    [33, 34],\n    [34, 35],\n    [35, 36],\n    [36, 37],\n    [37, 38],\n    [38, 39],\n    [39, 40],\n    [40, 41],\n    [41, 42",
    "    $min_k = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_k) < $K) {\n            $min_k[] = $tuple;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple < $max_tuple) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 1;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 6;\n$result = min",
    "    $min_k = [];\n    foreach ($test_list as $test) {\n        if (count($min_k) < $K) {\n            $min_k[] = $test;\n        } else {\n            $max_k = max($min_k);\n            if ($test < $max_k) {\n                $min_k[array_search($max_k, $min_k)] = $test;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5],\n    [5, 4,",
    "    $result = [];\n    foreach ($test_list as $tuple) {\n        if (count($result) < $K) {\n            $result[] = $tuple;\n        } else {\n            $max_tuple = max($result);\n            if ($max_tuple[0] > $tuple[0]) {\n                $key = array_search($max_tuple, $result);\n                $result[$key] = $tuple;\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [5, 6]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [5, 6]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [5, 6]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [5, 6]];\n$K = 6;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [5, 6]];\n$K = 7;\n$result = min_k($test_list, $K);\nprint_r($result);",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    for ($i = $K; $i < $n; $i++) {\n        $max = max($min_k);\n        if ($test_list[$i] < $max) {\n            $min_k[array_search($max, $min_k)] = $test_list[$i];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(2, 4, 3, 1, 6, 7, 8, 9, 1, 7);\n$K = 4;\n\necho implode(', ', min_k($test_list, $K));\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] <=> $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] <=> $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(\"Geeks\", 10),\n    array(\"for\", 15),\n    array(\"Geeks\", 20),\n    array(\"GeeksforGeeks\", 30),\n    array(\"GFG\", 20),\n    array(\"GeeksforGeeks\", 10),\n    array(\"Geeks\", 30)\n);\n$K = 3;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nfor ($i = 0; $i < count($result); $i++) {\n    echo $result[$i][0] . \" \" . $result[$i][1] . \" \";\n}\necho \"\\n\";\n\n$test_list = array(\n    array(\"Geeks\", 10),\n    array(\"for\", 15),\n    array(\"Geeks\", 20),\n    array(\"GeeksforGeeks\", 30),\n    array(\"GFG\", 20),\n    array(\"GeeksforGeeks\", 10),\n    array(\"Geeks\", 30)\n);\n$K = 4;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nfor ($i = 0; $i < count($result); $i++) {\n    echo $result[$i][0] . \" \" . $result[$i][1] . \" \";\n}\necho \"\\n\";\n\n$test_list = array(\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($a) {\n        return $a[1];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    return $min_k;\n}\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20]];\n$K = 2;\n$expected = [10, 15];\n$result = min_k($test_list, $K);\nassert(json_encode($expected) == json_encode($result));\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20]];\n$K = 1;\n$expected = [10];\n$result = min_k($test_list, $K);\nassert(json_encode($expected) == json_encode($result));\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20]];\n$K = 3;\n$expected = [10, 15, 20];\n$result = min_k($test_list, $K);\nassert(json_encode($expected) == json_encode($result));\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20]];\n$K = 4;\n$expected = [10, 15, 20];\n$result = min_k($test_list, $K);\nassert(json_encode($expected) == json_encode($result));\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20]];\n$K = 0;\n$expected = [];\n$result = min_k($test_list, $K);\nassert(json_encode($expected) == json_encode($result));\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20]];\n$K = -1;\n$expected = [];\n$result = min_k($test_list, $K",
    "    $sorted_list = $test_list;\n    sort($sorted_list);\n    return array_slice($sorted_list, 0, $K);\n}\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 2;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 1;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 3;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 4;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 1;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 0;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = -1;\n$result = min_k($test_list, $K);\nprint_r($result);",
    "    $min_k = [];\n    $min_k_values = [];\n    $min_k_indexes = [];\n    $min_k_values[0] = $test_list[0][1];\n    $min_k_indexes[0] = 0;\n    $min_k[0] = $test_list[0];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k_values[$K - 1]) {\n            $min_k_values[$K - 1] = $test_list[$i][1];\n            $min_k_indexes[$K - 1] = $i;\n            $min_k[$K - 1] = $test_list[$i];\n            for ($j = $K - 1; $j > 0; $j--) {\n                if ($min_k_values[$j] < $min_k_values[$j - 1]) {\n                    $temp = $min_k_values[$j];\n                    $min_k_values[$j] = $min_k_values[$j - 1];\n                    $min_k_values[$j - 1] = $temp;\n                    $temp = $min_k_indexes[$j];\n                    $min_k_indexes[$j] = $min_k_indexes[$j - 1];\n                    $min_k_indexes[$j - 1] = $temp;\n                    $temp = $min_k[$j];\n                    $min_k[$j] = $min_k[$j - 1];\n                    $min_k[$j - 1] = $temp;\n                }\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks',",
    "    $n = count($test_list);\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i < $K) {\n            $result[$i] = $test_list[$i];\n        } else {\n            $max = max($result);\n            if ($test_list[$i] < $max) {\n                $result[array_search($max, $result)] = $test_list[$i];\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(3, 2, 1, 5, 6, 4),\n    array(3, 2, 3, 1, 2, 4, 5, 5, 6),\n    array(2, 4, 3, 5, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\n);\n$K = array(2, 4, 8);\n\n$n = count($test_list);\nfor ($i = 0; $i < $n; $i++) {\n    $result = min_k($test_list[$i], $K[$i]);\n    echo \"K = \" . $K[$i] . \": \";\n    echo implode(\", \", $result) . \"\\n\";\n}\n",
    "    $n = count($test_list);\n    $min_k = [];\n    for ($i = 0; $i < $n; $i++) {\n        $min_k[] = $test_list[$i][1];\n    }\n    sort($min_k);\n    return $min_k[$K - 1];\n}\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, -1],\n    [6, 10],\n    [5, 2],\n    [3, 8],\n    [9, 3]\n];\n$K = 3;\n\necho min_k($test_list, $K);",
    "    $min_k = [];\n    foreach ($test_list as $tuple) {\n        $min_k[] = $tuple[0];\n    }\n    sort($min_k);\n    return array_slice($min_k, 0, $K);\n}\n\n$test_list = [[4, 6], [1, 2], [9, 0], [5, 7]];\n$K = 2;\n$result = min_k($test_list, $K);\necho implode(', ', $result);\necho \"\\n\";\n\n$test_list = [[4, 6], [1, 2], [9, 0], [5, 7]];\n$K = 3;\n$result = min_k($test_list, $K);\necho implode(', ', $result);\necho \"\\n\";\n\n$test_list = [[4, 6], [1, 2], [9, 0], [5, 7]];\n$K = 4;\n$result = min_k($test_list, $K);\necho implode(', ', $result);\necho \"\\n\";\n\n$test_list = [[4, 6], [1, 2], [9, 0], [5, 7]];\n$K = 5;\n$result = min_k($test_list, $K);\necho implode(', ', $result);\necho \"\\n\";\n\n$test_list = [[4, 6], [1, 2], [9, 0], [5, 7]];\n$K = 6;\n$result = min_k($test_list, $K);\necho implode(', ', $result);\necho \"\\n\";\n\n$test_list = [[4, 6], [1, 2], [9, 0], [5, 7]];\n$K = 7;\n$result = min_k($test_list, $K);\necho implode(', ', $result);\necho \"\\n\";\n\n$test_list = [[4, 6], [1, 2], [9, 0], [5, 7]];\n$K = 8;\n$result = min_k($test_list, $K);\necho implode(', ', $result);\necho \"\\n",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) { return $item[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    for ($i = $K; $i < $n; $i++) {\n        if (in_array($test_list[$i][0], $min_k)) {\n            continue;\n        }\n        $max_k = max($min_k);\n        if ($test_list[$i][0] < $max_k) {\n            $min_k = array_diff($min_k, [$max_k]);\n            $min_k[] = $test_list[$i][0];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]];\n$K = 1",
    "    $n = count($test_list);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($test_list[$i][1] < $test_list[$j][1]) {\n                $temp = $test_list[$i];\n                $test_list[$i] = $test_list[$j];\n                $test_list[$j] = $temp;\n            }\n        }\n    }\n    $result = array();\n    for ($i = 0; $i < $K; $i++) {\n        $result[] = $test_list[$i];\n    }\n    return $result;\n}\n\n$test_list = array(\n    array('Geeks', 10),\n    array('for', 15),\n    array('Geeks', 20),\n    array('GeeksforGeeks', 30),\n    array('GFG', 40)\n);\n$K = 3;\n\n$result = min_k($test_list, $K);\n\necho \"The minimum k records are: \";\nforeach ($result as $item) {\n    echo $item[0] . \" \" . $item[1] . \"\\n\";\n}",
    "    $result = [];\n    foreach ($test_list as $tuple) {\n        $result[$tuple[0]] = $tuple[1];\n    }\n    asort($result);\n    $result = array_slice($result, 0, $K, true);\n    return $result;\n}\n\n$test_list = [\n    ['gfg', 10],\n    ['is', 15],\n    ['best', 6],\n    ['for', 12],\n    ['CS', 1]\n];\n$K = 2;\n\nprint_r(min_k($test_list, $K));\n",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] <=> $b[1];\n    });\n    for ($i = $K; $i < $n; $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] <=> $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    ['Geeks', 10],\n    ['for', 15],\n    ['Geeks', 20]\n];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [\n    ['Geeks', 10],\n    ['for', 15],\n    ['Geeks', 20],\n    ['Geeks', 30],\n    ['Geeks', 40],\n    ['Geeks', 50],\n    ['Geeks', 60],\n    ['Geeks', 70],\n    ['Geeks', 80],\n    ['Geeks', 90],\n    ['Geeks', 100]\n];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);",
    "    $min_list = array();\n    $min_list = array_slice($test_list, 0, $K);\n    $min_list = array_map(function($x) {\n        return $x[1];\n    }, $min_list);\n    $min_list = array_unique($min_list);\n    $min_list = array_values($min_list);\n    $min_list = array_map(function($x) use ($test_list) {\n        return array_filter($test_list, function($y) use ($x) {\n            return $y[1] == $x;\n        });\n    }, $min_list);\n    $min_list = array_map(function($x) {\n        return array_shift($x);\n    }, $min_list);\n    return $min_list;\n}\n\n$test_list = array(\n    array(\n        'name' => 'A',\n        'age' => 10\n    ),\n    array(\n        'name' => 'B',\n        'age' => 20\n    ),\n    array(\n        'name' => 'C',\n        'age' => 20\n    ),\n    array(\n        'name' => 'D',\n        'age' => 30\n    ),\n    array(\n        'name' => 'E',\n        'age' => 30\n    ),\n    array(\n        'name' => 'F',\n        'age' => 40\n    ),\n    array(\n        'name' => 'G',\n        'age' => 40\n    ),\n    array(\n        'name' => 'H',\n        'age' => 50\n    ),\n    array(\n        'name' => 'I',\n        'age' => 50\n    ),\n    array(\n        'name' => 'J',\n        'age' => 60\n    ),\n    array(\n        'name' => 'K',\n        'age' => 60\n    ),\n    array(\n        'name' => 'L',\n        'age' => 70\n    ),\n    array(\n        'name' => 'M',\n        'age' => 70\n    ),\n    array(\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] <=> $b[0];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] <=> $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j'),\n    array(11, 'k'),\n    array(12, 'l'),\n    array(13, 'm'),\n    array(14, 'n'),\n    array(15, 'o'),\n    array(16, 'p'),\n    array(17, 'q'),\n    array(18, 'r'),\n    array(19, 's'),\n    array(20, 't'),\n    array(21, 'u'),\n    array(22, 'v'),\n    array(23, 'w'),\n    array(24, 'x'),\n    array(25, 'y'),\n    array(26, 'z')\n);\n\n$K = 5;\n\n$min_k = min_k($test_list, $K);\n\nprint_r($min_k);\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) { return $x[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($x) use ($test_list) {\n        $min_k_item = array_filter($test_list, function($y) use ($x) {\n            return $y[0] == $x;\n        });\n        $min_k_item = array_values($min_k_item);\n        $min_k_item = $min_k_item[0];\n        return $min_k_item;\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [",
    "    $min_k = [];\n    $min_k_index = [];\n    $min_k_index_count = 0;\n    $min_k_count = 0;\n    $min_k_index_count_max = $K;\n    $min_k_count_max = $K;\n    $test_list_count = count($test_list);\n    for ($i = 0; $i < $test_list_count; $i++) {\n        $test_list_i_count = count($test_list[$i]);\n        for ($j = 0; $j < $test_list_i_count; $j++) {\n            if ($min_k_count < $min_k_count_max) {\n                $min_k[] = $test_list[$i][$j];\n                $min_k_index[] = $i;\n                $min_k_index_count++;\n                $min_k_count++;\n            } else {\n                $min_k_index_count_max = $min_k_index_count;\n                $min_k_count_max = $min_k_count;\n                for ($k = 0; $k < $min_k_index_count_max; $k++) {\n                    if ($min_k[$k] > $test_list[$i][$j]) {\n                        $min_k[$k] = $test_list[$i][$j];\n                        $min_k_index[$k] = $i;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2, 3, 4, 5, 6],\n    [7, 8, 9, 10, 11, 12],\n    [13, 14, 15, 16, 17, 18],\n    [19, 20, 21, 22, 23, 24],\n    [25, 26, 27, 28, 29, 30],\n    [31, 32, 33, 34, 35, 36],\n    [37, 38, 39, 40, 41, 42],\n    [43, 44, 45, 46, 47",
    "    $n = count($test_list);\n    if ($n < $K) {\n        return false;\n    }\n    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_column($min_k, 'value');\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    for ($i = $K; $i < $n; $i++) {\n        $max_k = max($min_k);\n        if ($test_list[$i]['value'] < $max_k) {\n            $min_k[$test_list[$i]['key']] = $test_list[$i]['value'];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    ['key' => 'a', 'value' => 1],\n    ['key' => 'b', 'value' => 2],\n    ['key' => 'c', 'value' => 3],\n    ['key' => 'd', 'value' => 4],\n    ['key' => 'e', 'value' => 5],\n    ['key' => 'f', 'value' => 6],\n    ['key' => 'g', 'value' => 7],\n    ['key' => 'h', 'value' => 8],\n    ['key' => 'i', 'value' => 9],\n    ['key' => 'j', 'value' => 10],\n];\n\n$K = 3;\n\n$result = min_k($test_list, $K);\n\nprint_r($result);",
    "    $min_k = array();\n    $min_k_index = array();\n    $min_k_index[0] = 0;\n    $min_k[0] = $test_list[0];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[0][0]) {\n            $min_k[0] = $test_list[$i];\n            $min_k_index[0] = $i;\n        }\n    }\n    for ($i = 1; $i < $K; $i++) {\n        $min_k[$i] = $test_list[$i];\n        $min_k_index[$i] = $i;\n        for ($j = 0; $j < $i; $j++) {\n            if ($min_k[$j][0] > $min_k[$i][0]) {\n                $temp = $min_k[$j];\n                $min_k[$j] = $min_k[$i];\n                $min_k[$i] = $temp;\n                $temp = $min_k_index[$j];\n                $min_k_index[$j] = $min_k_index[$i];\n                $min_k_index[$i] = $temp;\n            }\n        }\n    }\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            $min_k_index[$K - 1] = $i;\n            for ($j = $K - 1; $j > 0; $j--) {\n                if ($min_k[$j][0] < $min_k[$j - 1][0]) {\n                    $temp = $min_k[$j];\n                    $min_k[$j] = $min_k[$j - 1];\n                   ",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_column($min_k, 'value');\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    foreach ($test_list as $key => $value) {\n        if ($key < $K) {\n            continue;\n        }\n        $min = min($min_k);\n        if ($value['value'] > $min) {\n            $min_k[array_search($min, $min_k)] = $value['value'];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array('key' => 1, 'value' => 10),\n    array('key' => 2, 'value' => 20),\n    array('key' => 3, 'value' => 30),\n    array('key' => 4, 'value' => 40),\n    array('key' => 5, 'value' => 50),\n    array('key' => 6, 'value' => 60),\n    array('key' => 7, 'value' => 70),\n    array('key' => 8, 'value' => 80),\n    array('key' => 9, 'value' => 90),\n    array('key' => 10, 'value' => 100),\n);\n\n$K = 3;\n\n$min_k = min_k($test_list, $K);\n\nprint_r($min_k);\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) { return $x[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($x) use ($test_list) { return $test_list[$x]; }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 5;\n$min_k = min_k($test_list, $K);\nassert(count($min_k) == $K);\nassert(array_diff($min_k, [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == []);\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 3;\n$min_k = min_k($test_list, $K);\nassert(count($min_k) == $K);\nassert(array_diff($min_k, [[1, 2], [3, 4], [5, 6]]) == []);\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 2;\n$min_k = min_k($test_list, $K);\nassert(count($min_k) == $K);\nassert(array_diff($min_k, [[1, 2], [3, 4]]) == []);\n\n$test_list = [[1,",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] - $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 'a'],\n    [2, 'b'],\n    [3, 'c'],\n    [4, 'd'],\n    [5, 'e'],\n    [6, 'f'],\n    [7, 'g'],\n    [8, 'h'],\n    [9, 'i'],\n    [10, 'j'],\n    [11, 'k'],\n    [12, 'l'],\n    [13, 'm'],\n    [14, 'n'],\n    [15, 'o'],\n    [16, 'p'],\n    [17, 'q'],\n    [18, 'r'],\n    [19, 's'],\n    [20, 't'],\n    [21, 'u'],\n    [22, 'v'],\n    [23, 'w'],\n    [24, 'x'],\n    [25, 'y'],\n    [26, 'z']\n];\n\n$K = 5;\n\n$result = min_k($test_list, $K);\n\necho \"Minimum K records are: \";\nforeach ($result as $item) {\n    echo \"[{$item[0]}, {$item[1]}] \";\n}\necho \"\\n\";",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    for ($i = $K; $i < $n; $i++) {\n        $max_index = 0;\n        for ($j = 1; $j < $K; $j++) {\n            if ($min_k[$j][0] > $min_k[$max_index][0]) {\n                $max_index = $j;\n            }\n        }\n        if ($test_list[$i][0] < $min_k[$max_index][0]) {\n            $min_k[$max_index] = $test_list[$i];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 2;\n",
    "    $result = [];\n    $min = $test_list[0][0];\n    $max = $test_list[0][0];\n    foreach ($test_list as $tuple) {\n        if ($tuple[0] < $min) {\n            $min = $tuple[0];\n        }\n        if ($tuple[0] > $max) {\n            $max = $tuple[0];\n        }\n    }\n    $counts = array_fill($min, $max - $min + 1, 0);\n    foreach ($test_list as $tuple) {\n        $counts[$tuple[0]]++;\n    }\n    $i = 0;\n    foreach ($counts as $key => $value) {\n        if ($value > 0) {\n            $result[] = [$key, $value];\n            $i++;\n        }\n        if ($i == $K) {\n            break;\n        }\n    }\n    return $result;\n}\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3,",
    "    $n = count($test_list);\n    $min_k = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i < $K) {\n            $min_k[] = $test_list[$i];\n        } else {\n            $max_index = 0;\n            for ($j = 1; $j < $K; $j++) {\n                if ($min_k[$j] > $min_k[$max_index]) {\n                    $max_index = $j;\n                }\n            }\n            if ($test_list[$i] < $min_k[$max_index]) {\n                $min_k[$max_index] = $test_list[$i];\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(1, 2, 3, 4, 5, 6),\n    array(1, 2, 3, 4, 5, 6, 7),\n    array(1, 2, 3, 4, 5, 6, 7, 8),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),\n    array(1",
    "    $min_k = array_slice($test_list, 0, $K);\n    for ($i = $K; $i < count($test_list); $i++) {\n        $max = max($min_k);\n        if ($test_list[$i] < $max) {\n            $min_k[array_search($max, $min_k)] = $test_list[$i];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2",
    "    $len = count($test_list);\n    $result = [];\n    for ($i = 0; $i < $len; $i++) {\n        $result[$i] = $test_list[$i][1];\n    }\n    sort($result);\n    return $result[$K - 1];\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1]];\n$K = 2;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [3, 4], [2, -1]];\n$K = 1;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [3, 4], [2, -1]];\n$K = 3;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [3, 4], [2, -1]];\n$K = 4;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [3, 4], [2, -1]];\n$K = 5;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [3, 4], [2, -1]];\n$K = 6;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [3, 4], [2, -1]];\n$K = 7;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [3, 4], [2, -1]];\n$K = 8;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [3, 4], [2, -1]];\n$K = 9;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [3, 4], [2, -1]];\n$K = 10;\necho min_k($test_list, $K);\n\n$test_list",
    "    $result = [];\n    foreach ($test_list as $tuple) {\n        if (count($result) < $K) {\n            $result[] = $tuple;\n        } else {\n            $max = max($result);\n            if ($tuple < $max) {\n                $result[array_search($max, $result)] = $tuple;\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = [\n    [1, 'a'],\n    [2, 'b'],\n    [3, 'c'],\n    [4, 'd'],\n    [5, 'e'],\n    [6, 'f'],\n    [7, 'g'],\n    [8, 'h'],\n    [9, 'i'],\n    [10, 'j'],\n    [11, 'k'],\n    [12, 'l'],\n    [13, 'm'],\n    [14, 'n'],\n    [15, 'o'],\n    [16, 'p'],\n    [17, 'q'],\n    [18, 'r'],\n    [19, 's'],\n    [20, 't'],\n    [21, 'u'],\n    [22, 'v'],\n    [23, 'w'],\n    [24, 'x'],\n    [25, 'y'],\n    [26, 'z'],\n];\n\n$K = 5;\n\n$result = min_k($test_list, $K);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($item) use ($test_list) {\n        return array_filter($test_list, function($item2) use ($item) {\n            return $item2[0] == $item;\n        });\n    }, $min_k);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 'geeks'),\n    array(2, 'for'),\n    array(3, 'geeks'),\n    array(4, 'geeks'),\n    array(5, 'for'),\n    array(6, 'geeks'),\n    array(7, 'geeks'),\n    array(8, 'for'),\n    array(9, 'geeks'),\n    array(10, 'geeks'),\n    array(11, 'for'),\n    array(12, 'geeks'),\n    array(13, 'geeks'),\n    array(14, 'for'),\n    array(15, 'geeks'),\n    array(16, 'geeks'),\n    array(17, 'for'),\n    array(18, 'geeks'),\n    array(19, 'geeks'),\n    array(20, 'for'),\n    array(21, 'geeks'),\n    array(22, 'geeks'),\n    array(23, 'for'),\n    array(24, 'geeks'),\n    array(25, 'geeks'),\n    array(26, 'for'),\n    array(27, 'geeks'),\n    array(28, 'geeks'),\n    array(29, 'for'),\n    array(30, 'geeks'),\n    array(31, 'geeks'),\n    array(32, 'for'),\n    array",
    "    $min_k = [];\n    $min_k_values = [];\n    $min_k_keys = [];\n    $min_k_values_count = 0;\n    $min_k_keys_count = 0;\n    foreach ($test_list as $key => $value) {\n        if ($min_k_values_count < $K) {\n            $min_k_values[$min_k_values_count] = $value;\n            $min_k_keys[$min_k_keys_count] = $key;\n            $min_k_values_count++;\n            $min_k_keys_count++;\n        } else {\n            $max_value = max($min_k_values);\n            if ($max_value > $value) {\n                $max_value_index = array_search($max_value, $min_k_values);\n                $min_k_values[$max_value_index] = $value;\n                $min_k_keys[$max_value_index] = $key;\n            }\n        }\n    }\n    for ($i = 0; $i < $K; $i++) {\n        $min_k[$min_k_keys[$i]] = $min_k_values[$i];\n    }\n    return $min_k;\n}\n\n$test_list = [\n    'a' => 1,\n    'b' => 2,\n    'c' => 3,\n    'd' => 4,\n    'e' => 5,\n    'f' => 6,\n    'g' => 7,\n    'h' => 8,\n    'i' => 9,\n    'j' => 10,\n    'k' => 11,\n    'l' => 12,\n    'm' => 13,\n    'n' => 14,\n    'o' => 15,\n    'p' => 16,\n    'q' => 17,\n    'r' => 18,\n    's' => 19,\n    't' => 20,\n    'u' => 21,\n    'v' => 22,\n    'w' => 23,\n    'x",
    "    $min_k = array();\n    $min_k_index = array();\n    $min_k_index_count = 0;\n    $min_k_count = 0;\n    $min_k_index_count_max = $K;\n    $min_k_count_max = $K;\n    $test_list_count = count($test_list);\n    for ($i = 0; $i < $test_list_count; $i++) {\n        $test_list_i = $test_list[$i];\n        $test_list_i_count = count($test_list_i);\n        $test_list_i_0 = $test_list_i[0];\n        $test_list_i_1 = $test_list_i[1];\n        if ($min_k_count < $min_k_count_max) {\n            $min_k[$min_k_count] = $test_list_i;\n            $min_k_index[$min_k_index_count] = $i;\n            $min_k_index_count++;\n            $min_k_count++;\n        } else {\n            $min_k_index_count_max_minus_1 = $min_k_index_count_max - 1;\n            $min_k_index_count_max_minus_1_minus_1 = $min_k_index_count_max_minus_1 - 1;\n            $min_k_index_count_max_minus_1_minus_1_minus_1 = $min_k_index_count_max_minus_1_minus_1 - 1;\n            $min_k_index_count_max_minus_1_minus_1_minus_1_minus_1 = $min_k_index_count_max_minus_1_minus_1_minus_1 - 1;\n            $min_k_index_count_max_minus_1_minus_1_minus_1_minus_1_minus_1 = $min_k_index_count_max_minus_1_minus_1_minus_1_minus_1 - 1;\n            $min_k",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($tuple) { return $tuple[0]; }, $min_k);\n    $min_k = min($min_k);\n    $min_k_index = array_search($min_k, array_column($test_list, 0));\n    $min_k_tuple = $test_list[$min_k_index];\n    unset($test_list[$min_k_index]);\n    $test_list = array_values($test_list);\n    return $min_k_tuple;\n}\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j'),\n    array(11, 'k'),\n    array(12, 'l'),\n    array(13, 'm'),\n    array(14, 'n'),\n    array(15, 'o'),\n    array(16, 'p'),\n    array(17, 'q'),\n    array(18, 'r'),\n    array(19, 's'),\n    array(20, 't'),\n    array(21, 'u'),\n    array(22, 'v'),\n    array(23, 'w'),\n    array(24, 'x'),\n    array(25, 'y'),\n    array(26, 'z'),\n);\n\n$K = 5;\n\n$min_k_records = array();\nfor ($i = 0; $i < $K; $i++) {\n    $min_k_records[] = min_k($test_list, $K);\n}\n\nprint_r($min_k_records);\n",
    "    $n = count($test_list);\n    $min_k = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i < $K) {\n            $min_k[$i] = $test_list[$i];\n        } else {\n            $max = max($min_k);\n            if ($test_list[$i] < $max) {\n                $min_k[array_search($max, $min_k)] = $test_list[$i];\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(\n        array(\n            array(1, 2),\n            array(3, 4),\n            array(1, -1),\n            array(6, 10),\n            array(5, 2),\n            array(9, 6),\n            array(7, 12),\n            array(8, 8),\n            array(3, 5),\n            array(2, 9),\n            array(5, 6)\n        ),\n        3\n    ),\n    array(\n        array(\n            array(1, 2),\n            array(3, 4),\n            array(1, -1),\n            array(6, 10),\n            array(5, 2),\n            array(9, 6),\n            array(7, 12),\n            array(8, 8),\n            array(3, 5),\n            array(2, 9),\n            array(5, 6)\n        ),\n        4\n    ),\n    array(\n        array(\n            array(1, 2),\n            array(3, 4),\n            array(1, -1),\n            array(6, 10),\n            array(5, 2),\n            array(9, 6),\n            array(7, 12),\n            array(8, 8),\n            array(3, 5),\n            array(2, 9),\n            array(5, 6)\n        ),\n        5\n    ),\n    array(\n        array(\n            array(1, 2),\n            array(3, 4),\n            array(1, -1),\n            array(6, 10",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) { return $x[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($x) use ($test_list) {\n        $min_k_tuple = array_filter($test_list, function($y) use ($x) {\n            return $y[0] == $x;\n        });\n        $min_k_tuple = array_map(function($y) { return $y[1]; }, $min_k_tuple);\n        $min_k_tuple = min($min_k_tuple);\n        return [$x, $min_k_tuple];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [1, 3], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5], [4, 6], [5, 6], [5, 7], [6, 7], [6, 8], [7, 8], [7, 9], [8, 9], [8, 10], [9, 10], [9, 11], [10, 11], [10, 12], [11, 12], [11, 13], [12, 13], [12, 14], [13, 14], [13, 15], [14, 15], [14, 16], [15, 16], [15, 17], [16, 17], [16, 18], [17, 18], [17, 19], [18, 19], [18, 20], [19, 20], [19, 21], [20, 21], [20, 22], [21, 22], [21, 23], [22, 23], [22, 24], [23, 24], [23, 25], [24, 25], [24, 26], [25, 26], [25, 27], [26, 27], [26, 28], [27, 28], [27, 29], [28, 29], [28",
    "    $min_k_list = [];\n    $min_k_list_size = 0;\n    foreach ($test_list as $test_tuple) {\n        if ($min_k_list_size < $K) {\n            $min_k_list[] = $test_tuple;\n            $min_k_list_size++;\n            if ($min_k_list_size == $K) {\n                sort($min_k_list);\n            }\n        } else {\n            if ($test_tuple[0] < $min_k_list[$K - 1][0]) {\n                $min_k_list[$K - 1] = $test_tuple;\n                sort($min_k_list);\n            }\n        }\n    }\n    return $min_k_list;\n}\n\n$test_list = [\n    [1, 'a'],\n    [2, 'b'],\n    [3, 'c'],\n    [4, 'd'],\n    [5, 'e'],\n    [6, 'f'],\n    [7, 'g'],\n    [8, 'h'],\n    [9, 'i'],\n    [10, 'j'],\n    [11, 'k'],\n    [12, 'l'],\n    [13, 'm'],\n    [14, 'n'],\n    [15, 'o'],\n    [16, 'p'],\n    [17, 'q'],\n    [18, 'r'],\n    [19, 's'],\n    [20, 't'],\n    [21, 'u'],\n    [22, 'v'],\n    [23, 'w'],\n    [24, 'x'],\n    [25, 'y'],\n    [26, 'z'],\n];\n\n$K = 5;\n\n$min_k_list = min_k($test_list, $K);\n\nforeach ($min_k_list as $min_k_tuple) {\n    echo $min_k_tuple[0] . ' ' . $min_k_tuple[1",
    "    $min_k = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_k) < $K) {\n            $min_k[] = $tuple;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple < $max_tuple) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, -1],\n    [6, 10],\n    [5, 2],\n    [9, 6],\n];\n$K = 3;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, -1],\n    [6, 10],\n    [5, 2],\n    [9, 6],\n];\n$K = 4;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, -1],\n    [6, 10],\n    [5, 2],\n    [9, 6],\n];\n$K = 5;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, -1],\n    [6, 10],\n    [5, 2],\n    [9, 6],\n];\n$K = 6;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$test_",
    "    $min_k = array();\n    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) {\n        return $x[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($x) use ($test_list) {\n        $min_k_tuple = array();\n        foreach ($test_list as $tuple) {\n            if ($tuple[0] == $x) {\n                $min_k_tuple[] = $tuple;\n            }\n        }\n        return $min_k_tuple;\n    }, $min_k);\n    $min_k = array_reduce($min_k, 'array_merge', array());\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j'),\n    array(1, 'k'),\n    array(2, 'l'),\n    array(3, 'm'),\n    array(4, 'n'),\n    array(5, 'o'),\n    array(6, 'p'),\n    array(7, 'q'),\n    array(8, 'r'),\n    array(9, 's'),\n    array(10, 't'),\n    array(1, 'u'),\n    array(2, 'v'),\n    array(3, 'w'),\n    array(4, 'x'),\n    array(5, 'y'),\n    array(6, 'z'),\n    array(7, 'aa'),\n    array(8, 'ab'),\n    array(9, 'ac'),\n    array(10, 'ad'),\n    array(1,",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) { return $x[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    for ($i = $K; $i < $n; $i++) {\n        $max_k = max($min_k);\n        if ($test_list[$i][0] < $max_k) {\n            $min_k[array_search($max_k, $min_k)] = $test_list[$i][0];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j'),\n);\n$K = 3;\n$result = min_k($test_list, $K);\nvar_dump($result);\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j'),\n);\n$K = 5;\n$result = min_k($test_list, $K);\nvar_dump($result);",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($e) { return $e[1]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($e) { return [$e, $e]; }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 12], [3, 5]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 12], [3, 5]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 12], [3, 5]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 12], [3, 5]];\n$K = 6;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 12], [3, 5]];\n$K = 7;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 12], [3, 5]];\n$K = 8;\n$result = min_k($test_list, $K);\nprint_r($",
    "    $min_k_list = array();\n    $min_k_list = array_slice($test_list, 0, $K);\n    $min_k_list = array_map(function($item) {\n        return $item[0];\n    }, $min_k_list);\n    $min_k_list = array_unique($min_k_list);\n    $min_k_list = array_values($min_k_list);\n    return $min_k_list;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(1, 3),\n    array(1, 4),\n    array(2, 3),\n    array(2, 4),\n    array(3, 4),\n    array(3, 5),\n    array(4, 5),\n    array(4, 6),\n    array(5, 6),\n    array(5, 7),\n    array(6, 7),\n    array(6, 8),\n    array(7, 8),\n    array(7, 9),\n    array(8, 9),\n    array(8, 10),\n    array(9, 10),\n    array(9, 11),\n    array(10, 11),\n    array(10, 12),\n    array(11, 12),\n    array(11, 13),\n    array(12, 13),\n    array(12, 14),\n    array(13, 14),\n    array(13, 15),\n    array(14, 15),\n    array(14, 16),\n    array(15, 16),\n    array(15, 17),\n    array(16, 17),\n    array(16, 18),\n    array(17, 18),\n    array(17, 19),\n    array(18, 19),\n    array(18, 20),\n    array(19, 20),\n    array(19, 21),\n    array(20, 21),\n    array(20, 22),\n    array(21, 22),\n    array(21, 23),\n    array(22, 23),\n    array(22, 24),\n    array(23, 24),\n    array(23, 25),\n    array(24, 25),",
    "    $min_list = [];\n    for ($i = 0; $i < $K; $i++) {\n        $min_list[] = $test_list[$i];\n    }\n    $min_list = min_heapify($min_list);\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i] < $min_list[0]) {\n            $min_list[0] = $test_list[$i];\n            $min_list = min_heapify($min_list);\n        }\n    }\n    return $min_list;\n}\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_column($min_k, 'value');\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min_k = array_combine(array_column($min_k, 'key'), $min_",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($a) { return $a[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($a) use ($test_list) {\n        $min = null;\n        foreach ($test_list as $tuple) {\n            if ($tuple[0] == $a) {\n                if (is_null($min) || $tuple[1] < $min) {\n                    $min = $tuple[1];\n                }\n            }\n        }\n        return [$a, $min];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]];\n$K = 3;\n$result = min_k($test_list, $K);\nassert(count($result) == 3);\nassert($result[0] == [1, 2]);\nassert($result[1] == [2, 1]);\nassert($result[2] == [3, 1]);\n\n$test_list = [[1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]];\n$K = 4;\n$result = min_k($test_list, $K);\nassert(count($result) == 3);\nassert($result[0] == [1, 2]);\nassert($result[1] == [2, 1]);\nassert($result[2] == [3, 1]);\n\n$test_list = [[1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]];\n$K = 5;\n$",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) {return $x[0];}, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($x) use ($test_list) {\n        $min_k_index = array_search($x, array_column($test_list, 0));\n        return $test_list[$min_k_index];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 10;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'],",
    "    $min_k = [];\n    $min_k_index = [];\n    $min_k_index_count = 0;\n    $min_k_count = 0;\n    $min_k_index_count_max = $K;\n    foreach ($test_list as $key => $value) {\n        if ($min_k_count < $K) {\n            $min_k[] = $value;\n            $min_k_index[] = $key;\n            $min_k_count++;\n            $min_k_index_count++;\n        } else {\n            $min_k_index_count = 0;\n            foreach ($min_k as $min_k_key => $min_k_value) {\n                if ($min_k_value > $value) {\n                    $min_k[$min_k_key] = $value;\n                    $min_k_index[$min_k_key] = $key;\n                    break;\n                }\n                $min_k_index_count++;\n            }\n            if ($min_k_index_count == $min_k_index_count_max) {\n                $min_k[] = $value;\n                $min_k_index[] = $key;\n                $min_k_count++;\n                $min_k_index_count++;\n            }\n        }\n    }\n    return [$min_k, $min_k_index];\n}\n\n$test_list = [\n    [1, 2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9],\n    [6, 7, 8, 9, 10],\n    [7, 8, 9, 10, 11],\n    [8, 9, 10, 11, 12],\n    [9, 10, 11, 12, 13],\n    [10, 11, 12, 13, 14],\n    [11, 12, 13, 14, 15],\n    [12, 13, 14, 15, 16],\n    [13, 14",
    "    $min_k = [];\n    $min_k_index = [];\n    for ($i = 0; $i < $K; $i++) {\n        $min_k[$i] = $test_list[$i][1];\n        $min_k_index[$i] = $i;\n    }\n    $min_k = min($min_k);\n    $min_k_index = array_search($min_k, $min_k);\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k) {\n            $min_k[$min_k_index] = $test_list[$i][1];\n            $min_k_index[$min_k_index] = $i;\n            $min_k = min($min_k);\n            $min_k_index = array_search($min_k, $min_k);\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $K; $i++) {\n        $result[] = $test_list[$min_k_index[$i]];\n    }\n    return $result;\n}\n\n$test_list = [['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5], ['f', 6], ['g', 7], ['h', 8], ['i', 9], ['j', 10]];\n$K = 5;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nforeach ($result as $item) {\n    echo $item[0] . \" \";\n}\necho \"\\n\";\n\n$test_list = [['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5], ['f', 6], ['g', 7], ['h', 8], ['i', 9], ['j', 10]];\n$K = 3;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nforeach ($result",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($e) { return $e[0]; }, $min_k);\n    $min_k = min($min_k);\n    $min_k = array_filter($test_list, function($e) use ($min_k) { return $e[0] == $min_k; });\n    $min_k = array_map(function($e) { return $e[1]; }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 3;\n$min_k = min_k($test_list, $K);\nassert(count($min_k) == $K);\nassert(min($min_k) == 1);\nassert(max($min_k) == 3);\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 5;\n$min_k = min_k($test_list, $K);\nassert(count($min_k) == $K);\nassert(min($min_k) == 1);\nassert(max($min_k) == 5);\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 10;\n$min_k = min_k($test_list, $K);",
    "    $result = [];\n    foreach ($test_list as $tuple) {\n        $result[] = $tuple[0];\n    }\n    sort($result);\n    return array_slice($result, 0, $K);\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = 3;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = 5;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = 1;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = 0;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = -1;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = 7;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = 8;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K-1][1]) {\n            $min_k[$K-1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2],\n    [2, 4],\n    [3, 6],\n    [4, 8],\n    [5, 10],\n    [6, 12],\n    [7, 14],\n    [8, 16],\n    [9, 18],\n    [10, 20],\n];\n$K = 3;\n$min_k = min_k($test_list, $K);\necho \"Minimum K records from tuple list are: \";\nforeach ($min_k as $i) {\n    echo \"(\" . $i[0] . \", \" . $i[1] . \") \";\n}\necho \"\\n\";\n\n$test_list = [\n    [1, 2],\n    [2, 4],\n    [3, 6],\n    [4, 8],\n    [5, 10],\n    [6, 12],\n    [7, 14],\n    [8, 16],\n    [9, 18],\n    [10, 20],\n];\n$K = 5;\n$min_k = min_k($test_list, $K);\necho \"Minimum K records from tuple list are: \";\nforeach ($min_k as $i) {\n    echo \"(\" . $i[0] . \", \" . $i[1] . \") \";\n}\necho \"\\n\";\n\n$test_list = [\n    [1, 2],\n    [",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 2;\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40], ['Geeks', 50]];\n$K = 3;\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40], ['Geeks', 50]];\n$K = 4;\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40], ['Geeks', 50]];\n$K = 5;\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40], ['Geeks', 50]];\n$K = 6;\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40], ['Geeks', 50]];\n$K = 7;\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20], ['Geeks', 30], ['Geeks', 40], ['Geeks', 50]];\n$K = 8;\n\n$test_list",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < $n; $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [['gfg', 5], ['is', 2], ['best', 6], ['for', 4], ['CS', 3]];\n$K = 3;\n$result = min_k($test_list, $K);\n$expected = [['is', 2], ['CS', 3], ['for', 4]];\nassert($result === $expected);\n\n$test_list = [['gfg', 5], ['is', 2], ['best', 6], ['for', 4], ['CS', 3]];\n$K = 2;\n$result = min_k($test_list, $K);\n$expected = [['is', 2], ['CS', 3]];\nassert($result === $expected);\n\n$test_list = [['gfg', 5], ['is', 2], ['best', 6], ['for', 4], ['CS', 3]];\n$K = 4;\n$result = min_k($test_list, $K);\n$expected = [['is', 2], ['CS', 3], ['for', 4], ['gfg', 5]];\nassert($result === $expected);",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) { return $x[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    for ($i = $K; $i < $n; $i++) {\n        $min_k = array_map(function($x) use ($test_list, $i) { return $x[0] < $test_list[$i][0] ? $x[0] : $test_list[$i][0]; }, $min_k);\n        $min_k = array_unique($min_k);\n        $min_k = array_values($min_k);\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [",
    "    $min_k = [];\n    $min_k_index = [];\n    $min_k_index_count = 0;\n    $min_k_count = 0;\n    $min_k_index_count_max = $K;\n    $min_k_count_max = $K;\n    $test_list_count = count($test_list);\n    for ($i = 0; $i < $test_list_count; $i++) {\n        $test_list_i = $test_list[$i];\n        $test_list_i_count = count($test_list_i);\n        for ($j = 0; $j < $test_list_i_count; $j++) {\n            $test_list_i_j = $test_list_i[$j];\n            if ($min_k_count < $min_k_count_max) {\n                $min_k[$min_k_count] = $test_list_i_j;\n                $min_k_index[$min_k_index_count] = $i;\n                $min_k_index_count++;\n                $min_k_count++;\n            } else {\n                $min_k_index_count_max = count($min_k_index);\n                $min_k_count_max = count($min_k);\n                $min_k_index_count_max_minus_1 = $min_k_index_count_max - 1;\n                $min_k_count_max_minus_1 = $min_k_count_max - 1;\n                $min_k_index_count_max_minus_1_value = $min_k_index[$min_k_index_count_max_minus_1];\n                $min_k_count_max_minus_1_value = $min_k[$min_k_count_max_minus_1];\n                if ($test_list_i_j < $min_k_count_max_minus_1_value) {\n                    $min_k[$min_k_count_max_minus_1] = $test_list_i_j;\n                    $",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_column($min_k, 1);\n    $min_k = array_combine(array_column($min_k, 0), $min_k);\n    for ($i = $K; $i < count($test_list); $i++) {\n        $min_k_key = array_keys($min_k, min($min_k));\n        if ($test_list[$i][1] > $min_k[$min_k_key[0]]) {\n            unset($min_k[$min_k_key[0]]);\n            $min_k[$test_list[$i][0]] = $test_list[$i][1];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array('a', 2),\n    array('b', 5),\n    array('c', 1),\n    array('d', 9),\n    array('e', 10),\n    array('f', 7),\n    array('g', 4),\n    array('h', 3),\n    array('i', 8),\n    array('j', 6)\n);\n$K = 3;\n\nprint_r(min_k($test_list, $K));",
    "    $min_k = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_k) < $K) {\n            $min_k[] = $tuple;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple < $max_tuple) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 3;\n\n$result = min_k($test_list, $K);\n\necho \"The minimum k records are: \";\nforeach ($result as $tuple) {\n    echo \"[\" . $tuple[0] . \", \" . $tuple[1] . \"] \";\n}\n\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 2;\n\n$result = min_k($test_list, $K);\n\necho \"The minimum k records are: \";\nforeach ($result as $tuple) {\n    echo \"[\" . $tuple[0] . \", \" . $tuple[1] . \"] \";\n}\n\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [8, 9]];\n$K = 4;\n\n$result = min_k($test_list, $K);\n\necho \"The minimum k records are: \";\nforeach ($result as $tuple) {\n    echo \"[\" . $tuple[0] . \", \" . $tuple[1] . \"] \";\n}\n\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7],",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[1];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($item) use ($test_list) {\n        return array_filter($test_list, function($item2) use ($item) {\n            return $item2[1] == $item;\n        });\n    }, $min_k);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]];\n$K = 9;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]];\n$K = 10;\n$result = min_k($test_list, $K);\nprint_r",
    "    $result = [];\n    foreach ($test_list as $tuple) {\n        if (count($result) < $K) {\n            $result[] = $tuple;\n        } else {\n            $max_tuple = max($result);\n            if ($tuple[0] < $max_tuple[0]) {\n                $result[array_search($max_tuple, $result)] = $tuple;\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = [\n    [1, 'a'],\n    [2, 'b'],\n    [3, 'c'],\n    [4, 'd'],\n    [5, 'e'],\n    [6, 'f'],\n    [7, 'g'],\n    [8, 'h'],\n    [9, 'i'],\n    [10, 'j']\n];\n$K = 3;\n\n$result = min_k($test_list, $K);\n\necho \"Original list:\\n\";\nforeach ($test_list as $tuple) {\n    echo $tuple[0] . ' ' . $tuple[1] . \"\\n\";\n}\n\necho \"Minimum $K records:\\n\";\nforeach ($result as $tuple) {\n    echo $tuple[0] . ' ' . $tuple[1] . \"\\n\";\n}",
    "    $min_k = [];\n    $min_k_count = 0;\n    $min_k_index = 0;\n    $min_k_value = 0;\n    $min_k_value_index = 0;\n    $min_k_value_count = 0;\n    $min_k_value_count_index = 0;\n    $min_k_value_count_index_value = 0;\n    $min_k_value_count_index_value_index = 0;\n    $min_k_value_count_index_value_index_count = 0;\n    $min_k_value_count_index_value_index_count_index = 0;\n    $min_k_value_count_index_value_index_count_index_value = 0;\n    $min_k_value_count_index_value_index_count_index_value_index = 0;\n    $min_k_value_count_index_value_index_count_index_value_index_count = 0;\n    $min_k_value_count_index_value_index_count_index_value_index_count_index = 0;\n    $min_k_value_count_index_value_index_count_index_value_index_count_index_value = 0;\n    $min_k_value_count_index_value_index_count_index_value_index_count_index_value_index = 0;\n    $min_k_value_count_index_value_index_count_index_value_index_count_index_value_index_count = 0;\n    $min_k_value_count_index_value_index_count_index_value_index_count_index_value_index_count_index = 0;\n    $min_k_value_count_index_value_index_count_index_value_index_count_index_value_index_count_index_value = 0;\n    $min_k_value_count_index_value_index_count_index_value_index_count_index_value_index_count_index_value_index = 0;\n    $min_k_value_count",
    "    $result = array();\n    $n = count($test_list);\n    for ($i = 0; $i < $n; $i++) {\n        $result[$i] = $test_list[$i][1];\n    }\n    sort($result);\n    return $result[$K - 1];\n}\n\n$test_list = array(\n    array(1, 5),\n    array(2, 3),\n    array(3, 4),\n    array(4, 5),\n    array(5, 6),\n    array(6, 7),\n    array(7, 8),\n    array(8, 9),\n    array(9, 10),\n    array(10, 11)\n);\n$K = 5;\necho min_k($test_list, $K);\n",
    "    $min_k = [];\n    $min_k_index = [];\n    $min_k_index_count = 0;\n    $min_k_index_count_max = $K;\n    $min_k_index_count_max_minus_one = $K - 1;\n    $min_k_index_count_max_minus_two = $K - 2;\n    $min_k_index_count_max_minus_three = $K - 3;\n    $min_k_index_count_max_minus_four = $K - 4;\n    $min_k_index_count_max_minus_five = $K - 5;\n    $min_k_index_count_max_minus_six = $K - 6;\n    $min_k_index_count_max_minus_seven = $K - 7;\n    $min_k_index_count_max_minus_eight = $K - 8;\n    $min_k_index_count_max_minus_nine = $K - 9;\n    $min_k_index_count_max_minus_ten = $K - 10;\n    $min_k_index_count_max_minus_eleven = $K - 11;\n    $min_k_index_count_max_minus_twelve = $K - 12;\n    $min_k_index_count_max_minus_thirteen = $K - 13;\n    $min_k_index_count_max_minus_fourteen = $K - 14;\n    $min_k_index_count_max_minus_fifteen = $K - 15;\n    $min_k_index_count_max_minus_sixteen = $K - 16;\n    $min_k_index_count_max_minus_seventeen = $K - 17;\n    $min_k_index_count_max_minus_eighteen = $K - 18;\n    $min_k_index_count_max_minus_nineteen = $K - 19;\n    $min_k_index_count_max_minus_twenty = $K - 20;\n    $min_k_index_count_max_minus",
    "    $result = [];\n    $result_index = 0;\n    $test_list_length = count($test_list);\n    for ($i = 0; $i < $test_list_length; $i++) {\n        $result[$result_index] = $test_list[$i];\n        $result_index++;\n        if ($result_index == $K) {\n            break;\n        }\n    }\n    $result = sort_array_by_second_element($result);\n    for ($i = $K; $i < $test_list_length; $i++) {\n        if ($test_list[$i][1] < $result[$K-1][1]) {\n            $result[$K-1] = $test_list[$i];\n            $result = sort_array_by_second_element($result);\n        }\n    }\n    return $result;\n}\n",
    "    $min_list = array();\n    foreach ($test_list as $tuple) {\n        if (count($min_list) < $K) {\n            $min_list[] = $tuple;\n        } else {\n            $max_tuple = max($min_list);\n            if ($tuple[0] < $max_tuple[0]) {\n                $min_list[array_search($max_tuple, $min_list)] = $tuple;\n            }\n        }\n    }\n    return $min_list;\n}\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j'),\n);\n\n$K = 4;\n\n$min_list = min_k($test_list, $K);\n\necho 'Minimum ' . $K . ' records from tuple list: ';\nforeach ($min_list as $tuple) {\n    echo $tuple[0] . ' ';\n}\n",
    "    $min_k = [];\n    $min_k_index = [];\n    $min_k_index_count = 0;\n    $min_k_count = 0;\n    $min_k_index_count_max = $K;\n    $min_k_count_max = $K;\n    $test_list_count = count($test_list);\n    for ($i = 0; $i < $test_list_count; $i++) {\n        $test_list_i_count = count($test_list[$i]);\n        for ($j = 0; $j < $test_list_i_count; $j++) {\n            if ($min_k_index_count < $min_k_index_count_max) {\n                $min_k_index[$min_k_index_count] = $i;\n                $min_k_index_count++;\n            }\n            if ($min_k_count < $min_k_count_max) {\n                $min_k[$min_k_count] = $test_list[$i][$j];\n                $min_k_count++;\n            }\n            if ($min_k_count == $min_k_count_max) {\n                $min_k_max = max($min_k);\n                $min_k_max_index = array_search($min_k_max, $min_k);\n                $min_k_index_max = $min_k_index[$min_k_max_index];\n                if ($test_list[$i][$j] < $min_k_max) {\n                    $min_k[$min_k_max_index] = $test_list[$i][$j];\n                    $min_k_index[$min_k_max_index] = $i;\n                }\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19,",
    "    $min_k = [];\n    $min_k_index = [];\n    $min_k_index_count = 0;\n    $min_k_count = 0;\n    $min_k_index_count_max = $K;\n    $min_k_count_max = $K;\n    $min_k_index_count_min = 0;\n    $min_k_count_min = 0;\n    $min_k_index_count_min_max = $K;\n    $min_k_count_min_max = $K;\n    $min_k_index_count_min_max_index = 0;\n    $min_k_count_min_max_index = 0;\n    $min_k_index_count_min_max_index_count = 0;\n    $min_k_count_min_max_index_count = 0;\n    $min_k_index_count_min_max_index_count_max = $K;\n    $min_k_count_min_max_index_count_max = $K;\n    $min_k_index_count_min_max_index_count_min = 0;\n    $min_k_count_min_max_index_count_min = 0;\n    $min_k_index_count_min_max_index_count_min_max = $K;\n    $min_k_count_min_max_index_count_min_max = $K;\n    $min_k_index_count_min_max_index_count_min_max_index = 0;\n    $min_k_count_min_max_index_count_min_max_index = 0;\n    $min_k_index_count_min_max_index_count_min_max_index_count = 0;\n    $min_k_count_min_max_index_count_min_max_index_count = 0;\n    $min_k_index_count_min_max_index_count_min_max_index_count_max = $K;\n    $min_k_count_min_max_index_count_min_max_index",
    "    $min_k = [];\n    $min_k_heap = new SplMinHeap();\n    foreach ($test_list as $tuple) {\n        if ($min_k_heap->count() < $K) {\n            $min_k_heap->insert($tuple);\n        } else {\n            $min_k_heap->top();\n            if ($tuple[0] < $min_k_heap->top()[0]) {\n                $min_k_heap->extract();\n                $min_k_heap->insert($tuple);\n            }\n        }\n    }\n    while (!$min_k_heap->isEmpty()) {\n        $min_k[] = $min_k_heap->extract();\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 'a'],\n    [2, 'b'],\n    [3, 'c'],\n    [4, 'd'],\n    [5, 'e'],\n    [6, 'f'],\n    [7, 'g'],\n    [8, 'h'],\n    [9, 'i'],\n    [10, 'j'],\n];\n\n$K = 4;\n\n$min_k = min_k($test_list, $K);\n\nvar_dump($min_k);\n\n$test_list = [\n    [1, 'a'],\n    [2, 'b'],\n    [3, 'c'],\n    [4, 'd'],\n    [5, 'e'],\n    [6, 'f'],\n    [7, 'g'],\n    [8, 'h'],\n    [9, 'i'],\n    [10, 'j'],\n];\n\n$K = 3;\n\n$min_k = min_k($test_list, $K);\n\nvar_dump($min_k);\n\n$test_list = [\n    [1, 'a'],\n    [2, 'b'],\n    [3, 'c'],\n    [4, 'd'],\n",
    "    $min_list = array();\n    $min_list = array_slice($test_list, 0, $K);\n    for ($i = $K; $i < count($test_list); $i++) {\n        $max_index = 0;\n        for ($j = 1; $j < count($min_list); $j++) {\n            if ($min_list[$j][1] > $min_list[$max_index][1]) {\n                $max_index = $j;\n            }\n        }\n        if ($min_list[$max_index][1] > $test_list[$i][1]) {\n            $min_list[$max_index] = $test_list[$i];\n        }\n    }\n    return $min_list;\n}\n\n$test_list = array(\n    array(\"Geeks\", 10),\n    array(\"for\", 15),\n    array(\"Geeks\", 20),\n    array(\"GeeksforGeeks\", 30),\n    array(\"GFG\", 40),\n    array(\"GeeksforGeeks\", 50),\n    array(\"Geeks\", 60),\n    array(\"for\", 70),\n    array(\"Geeks\", 80),\n    array(\"GeeksforGeeks\", 90),\n    array(\"GFG\", 100),\n    array(\"GeeksforGeeks\", 110),\n    array(\"Geeks\", 120),\n    array(\"for\", 130),\n    array(\"Geeks\", 140),\n    array(\"GeeksforGeeks\", 150),\n    array(\"GFG\", 160),\n    array(\"GeeksforGeeks\", 170),\n    array(\"Geeks\", 180),\n    array(\"for\", 190),\n    array(\"Geeks\", 200),\n    array(\"GeeksforGeeks\", 210),\n    array(\"GFG\", 220),\n    array(\"GeeksforGeeks\", 230),\n    array(\"Geeks\", 240),\n    array(\"for\", 250),\n    array(\"Geeks\", 260),\n    array(\"GeeksforGeeks\", 270),\n    array(\"GFG\", 280),\n    array(\"GeeksforGeeks\", 290),\n    array(\"Geeks\", 300),\n    array(\"for\", 310),\n    array",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) { return $x[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($x) use ($test_list) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        foreach ($test_list as $index => $tuple) {\n            if ($tuple[0] == $x && $tuple[1] < $min) {\n                $min = $tuple[1];\n                $min_index = $index;\n            }\n        }\n        return $test_list[$min_index];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9], [8, 10], [9, 11], [10, 12]];\n$K = 5;\n$result = min_k($test_list, $K);\nassert(count($result) == $K);\nassert($result[0][0] == 1);\nassert($result[1][0] == 2);\nassert($result[2][0] == 3);\nassert($result[3][0] == 4);\nassert($result[4][0] == 5);\n\n$test_list = [[1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9], [8, 10], [9, 11], [10, 12]];\n$K = 3;\n$result = min_k($test_list, $K);\nassert(count($result) == $K);\nassert($result[0][0] == 1);\nassert($result[1][0] == 2);\nassert($result[2][0] == 3);\n\n$test_list = [[1, 3], [2, 4",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($item) use ($test_list) {\n        return array_filter($test_list, function($item2) use ($item) {\n            return $item2[0] == $item;\n        });\n    }, $min_k);\n    $min_k = array_map(function($item) {\n        return array_shift($item);\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 5),\n    array(2, 3),\n    array(3, 4),\n    array(4, 5),\n    array(5, 6),\n    array(6, 7),\n    array(7, 8),\n    array(8, 9),\n    array(9, 10),\n    array(10, 11),\n    array(11, 12),\n    array(12, 13),\n    array(13, 14),\n    array(14, 15),\n    array(15, 16),\n    array(16, 17),\n    array(17, 18),\n    array(18, 19),\n    array(19, 20),\n    array(20, 21),\n    array(21, 22),\n    array(22, 23),\n    array(23, 24),\n    array(24, 25),\n    array(25, 26),\n    array(26, 27),\n    array(27, 28),\n    array(28, 29),\n    array(29, 30),\n    array(30, 31),\n    array(31, 32),\n    array(32, 33),\n    array(33, 34),\n    array(34, 35),\n    array(35, 36),\n    array(36, 37),\n    array(37, 38),\n    array(38, 39),\n    array(39, 40",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_column($min_k, 1);\n    $min_k = array_combine(array_column($min_k, 0), $min_k);\n    $min_k = array_column($min_k, 1);\n    $min_k = array_combine(array_keys($min_k), $min_k);\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < max($min_k)) {\n            $min_k[$test_list[$i][0]] = $test_list[$i][1];\n            arsort($min_k);\n            array_pop($min_k);\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 5],\n    [2, 6],\n    [3, 7],\n    [4, 8],\n    [5, 1],\n    [6, 2],\n    [7, 3],\n    [8, 4],\n    [9, 5],\n    [10, 6],\n    [11, 7],\n    [12, 8],\n];\n$K = 4;\n$min_k = min_k($test_list, $K);\nprint_r($min_k);",
    "    $min_list = array();\n    $min_list = array_slice($test_list, 0, $K);\n    $min_list = array_map(function($elem) {\n        return $elem[1];\n    }, $min_list);\n    $min_list = array_unique($min_list);\n    $min_list = array_values($min_list);\n    $min_list = array_map(function($elem) use ($test_list) {\n        return $test_list[array_search($elem, array_column($test_list, 1))];\n    }, $min_list);\n    return $min_list;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, 6),\n    array(0, 11),\n    array(5, 2),\n    array(6, 10),\n    array(5, 6)\n);\n$K = 3;\n$result = min_k($test_list, $K);\n$expected = array(\n    array(0, 11),\n    array(1, 2),\n    array(3, 4)\n);\nassert(array_diff($result, $expected) == array());\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, 6),\n    array(0, 11),\n    array(5, 2),\n    array(6, 10),\n    array(5, 6)\n);\n$K = 4;\n$result = min_k($test_list, $K);\n$expected = array(\n    array(0, 11),\n    array(1, 2),\n    array(3, 4),\n    array(5, 2)\n);\nassert(array_diff($result, $expected) == array());\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, 6),\n    array(0, 11),\n    array(5, 2),\n    array(6, 10),\n    array(5, 6)\n);\n$K = 5;\n",
    "    $min_k = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_k) < $K) {\n            $min_k[] = $tuple;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple < $max_tuple) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5]];\n$K = 6;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5]];\n$K = 7;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 5]];\n$K = 8;\n$result = min",
    "    $result = [];\n    $n = count($test_list);\n    for ($i = 0; $i < $n; $i++) {\n        $result[$i] = $test_list[$i][1];\n    }\n    sort($result);\n    return $result[$K - 1];\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1]];\n$K = 2;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [2, 4], [4, 3], [2, 1]];\n$K = 3;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [2, 4], [4, 3], [2, 1]];\n$K = 1;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [2, 4], [4, 3], [2, 1]];\n$K = 5;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [2, 4], [4, 3], [2, 1]];\n$K = 0;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [2, 4], [4, 3], [2, 1]];\n$K = -1;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [2, 4], [4, 3], [2, 1]];\n$K = 6;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [2, 4], [4, 3], [2, 1]];\n$K = 7;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [2, 4], [4, 3], [2, 1]];\n$K = 8;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [2, 4",
    "    $min_list = array();\n    $min_list = array_slice($test_list, 0, $K);\n    for ($i = $K; $i < count($test_list); $i++) {\n        $max_index = array_search(max($min_list), $min_list);\n        if ($test_list[$i] < $min_list[$max_index]) {\n            $min_list[$max_index] = $test_list[$i];\n        }\n    }\n    return $min_list;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(5, 4, 3, 2, 1),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),\n    array(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20),\n    array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25),\n    array(25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,",
    "    $min_k = array();\n    foreach ($test_list as $tuple) {\n        $min_k[] = $tuple[1];\n    }\n    sort($min_k);\n    return array_slice($min_k, 0, $K);\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, -1),\n    array(4, -1),\n    array(10, 12)\n);\n$K = 3;\n$min_k = min_k($test_list, $K);\necho implode(',', $min_k);\necho \"\\n\";\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, -1),\n    array(4, -1),\n    array(10, 12)\n);\n$K = 2;\n$min_k = min_k($test_list, $K);\necho implode(',', $min_k);\necho \"\\n\";\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, -1),\n    array(4, -1),\n    array(10, 12)\n);\n$K = 1;\n$min_k = min_k($test_list, $K);\necho implode(',', $min_k);\necho \"\\n\";\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, -1),\n    array(4, -1),\n    array(10, 12)\n);\n$K = 5;\n$min_k = min_k($test_list, $K);\necho implode(',', $min_k);\necho \"\\n\";\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, -1),\n    array(4, -1),\n    array(10, 12)\n);\n$K = 6;\n$min_k = min_k($test_list, $",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    ['a', 2],\n    ['b', 5],\n    ['c', 1],\n    ['d', 9],\n    ['e', 10],\n    ['f', 7],\n    ['g', 4],\n    ['h', 8],\n    ['i', 3],\n    ['j', 6]\n];\n$K = 3;\n$min_k = min_k($test_list, $K);\nprint_r($min_k);\n\n$test_list = [\n    ['a', 2],\n    ['b', 5],\n    ['c', 1],\n    ['d', 9],\n    ['e', 10],\n    ['f', 7],\n    ['g', 4],\n    ['h', 8],\n    ['i', 3],\n    ['j', 6]\n];\n$K = 5;\n$min_k = min_k($test_list, $K);\nprint_r($min_k);\n\n$test_list = [\n    ['a', 2],\n    ['b', 5],\n    ['c', 1],\n    ['d', 9],\n    ['e', 10],\n    ['f', 7],\n    ['g', 4],\n    ['h', 8],\n    ['i', 3],\n    ['j', 6]\n];\n$K = 1;\n$min_k = min_k($test_list, $K);\nprint_r($min_k);\n\n",
    "    $min_list = [];\n    foreach ($test_list as $tuple) {\n        $min_list[] = $tuple[1];\n    }\n    sort($min_list);\n    return array_slice($min_list, 0, $K);\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9]];\n$K = 6;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9]];\n$K = 7;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9]];\n$K = 8;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K-1][1]) {\n            $min_k[$K-1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array('a', 1),\n    array('b', 2),\n    array('c', 3),\n    array('d', 4),\n    array('e', 5),\n    array('f', 6),\n    array('g', 7),\n    array('h', 8),\n    array('i', 9),\n    array('j', 10),\n);\n$K = 3;\n$min_k = min_k($test_list, $K);\nforeach ($min_k as $item) {\n    echo $item[0] . ' ' . $item[1] . \"\\n\";\n}\n\n$test_list = array(\n    array('a', 1),\n    array('b', 2),\n    array('c', 3),\n    array('d', 4),\n    array('e', 5),\n    array('f', 6),\n    array('g', 7),\n    array('h', 8),\n    array('i', 9),\n    array('j', 10),\n);\n$K = 5;\n$min_k = min_k($test_list, $K);\nforeach ($min_k as $item) {\n    echo $item[0] . ' ' . $item[1] . \"\\n\";\n}\n\n$test_list = array(\n    array('a', 1),\n    array('b', 2),\n    array('c', 3),\n    array('d', 4",
    "    $result = [];\n    for ($i = 0; $i < count($test_list); $i++) {\n        $result[$i] = $test_list[$i][1];\n    }\n    sort($result);\n    return array_slice($result, 0, $K);\n}\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20]];\n$K = 2;\nprint_r(min_k($test_list, $K));\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20], ['geeks', 30], ['geeks', 40]];\n$K = 3;\nprint_r(min_k($test_list, $K));\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20], ['geeks', 30], ['geeks', 40]];\n$K = 4;\nprint_r(min_k($test_list, $K));\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20], ['geeks', 30], ['geeks', 40]];\n$K = 5;\nprint_r(min_k($test_list, $K));\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20], ['geeks', 30], ['geeks', 40]];\n$K = 6;\nprint_r(min_k($test_list, $K));\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20], ['geeks', 30], ['geeks', 40]];\n$K = 7;\nprint_r(min_k($test_list, $K));\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20], ['geeks', 30], ['geeks', 40]];\n$K = 8;\nprint_r(min_k($test_list, $K));\n\n$test_list = [['geeks', 10], ['for', 15], ['geeks', 20], ['geeks', 30], ['ge",
    "    $min_k = array();\n    foreach ($test_list as $tuple) {\n        if (count($min_k) < $K) {\n            $min_k[] = $tuple;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple < $max_tuple) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, -1),\n    array(6, 10),\n    array(5, 10),\n    array(5, -1),\n    array(6, -1),\n    array(5, 6),\n    array(6, 12)\n);\n$K = 3;\n\n$result = min_k($test_list, $K);\n\necho \"The minimum k records from tuple list are : \";\nforeach ($result as $tuple) {\n    echo \"(\" . $tuple[0] . \", \" . $tuple[1] . \") \";\n}\necho \"\\n\";\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, -1),\n    array(6, 10),\n    array(5, 10),\n    array(5, -1),\n    array(6, -1),\n    array(5, 6),\n    array(6, 12)\n);\n$K = 4;\n\n$result = min_k($test_list, $K);\n\necho \"The minimum k records from tuple list are : \";\nforeach ($result as $tuple) {\n    echo \"(\" . $tuple[0] . \", \" . $tuple[1] . \") \";\n}\necho \"\\n\";\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, -1),\n    array(6, 10),\n    array(5,",
    "    $min_k = [];\n    $min_k_index = [];\n    $min_k_index_count = 0;\n    $min_k_count = 0;\n    $min_k_index_count_max = $K;\n    $min_k_count_max = $K;\n    $min_k_index_count_max_minus_1 = $K - 1;\n    $min_k_count_max_minus_1 = $K - 1;\n    $min_k_index_count_max_minus_2 = $K - 2;\n    $min_k_count_max_minus_2 = $K - 2;\n    $min_k_index_count_max_minus_3 = $K - 3;\n    $min_k_count_max_minus_3 = $K - 3;\n    $min_k_index_count_max_minus_4 = $K - 4;\n    $min_k_count_max_minus_4 = $K - 4;\n    $min_k_index_count_max_minus_5 = $K - 5;\n    $min_k_count_max_minus_5 = $K - 5;\n    $min_k_index_count_max_minus_6 = $K - 6;\n    $min_k_count_max_minus_6 = $K - 6;\n    $min_k_index_count_max_minus_7 = $K - 7;\n    $min_k_count_max_minus_7 = $K - 7;\n    $min_k_index_count_max_minus_8 = $K - 8;\n    $min_k_count_max_minus_8 = $K - 8;\n    $min_k_index_count_max_minus_9 = $K - 9;\n    $min_k_count_max_minus_9 = $K - 9;\n    $min_k_index_count_max_minus_10 = $K - 10;\n    $min_k_count_max_minus_10 = $K - 10;\n    $min_k_index_count_max_minus_11 = $K -",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_column($min_k, 'value');\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    foreach ($test_list as $key => $value) {\n        if ($key < $K) {\n            continue;\n        }\n        $min_k_key = array_search(min($min_k), $min_k);\n        if ($min_k[$min_k_key] > $value['value']) {\n            unset($min_k[$min_k_key]);\n            $min_k[$value['key']] = $value['value'];\n        }\n    }\n    return $min_k;\n}\n",
    "    $min_list = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_list) < $K) {\n            $min_list[] = $tuple;\n        } else {\n            $max_tuple = max($min_list);\n            if ($tuple < $max_tuple) {\n                $min_list[array_search($max_tuple, $min_list)] = $tuple;\n            }\n        }\n    }\n    return $min_list;\n}\n\n$test_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12],\n    [13, 14, 15],\n    [16, 17, 18],\n    [19, 20, 21],\n    [22, 23, 24],\n    [25, 26, 27],\n    [28, 29, 30],\n];\n$K = 5;\n\nvar_dump(min_k($test_list, $K));",
    "    $result = [];\n    foreach ($test_list as $tuple) {\n        if (count($result) < $K) {\n            $result[] = $tuple;\n        } else {\n            $max = max($result);\n            if ($tuple < $max) {\n                $result[array_search($max, $result)] = $tuple;\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [5, 6]];\n$K = 3;\n\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [5, 6]];\n$K = 4;\n\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [5, 6]];\n$K = 5;\n\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [5, 6]];\n$K = 6;\n\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [5, 6]];\n$K = 7;\n\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [5, 6]];\n$K = 8;\n\n$result = min_k($test_list, $K);\nprint_r($result);",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    ['a', 2],\n    ['b', 5],\n    ['c', 1],\n    ['d', 9],\n    ['e', 10],\n    ['f', 7],\n    ['g', 4],\n    ['h', 8],\n    ['i', 3],\n    ['j', 6]\n];\n\n$K = 3;\n\n$result = min_k($test_list, $K);\n\nprint_r($result);\n",
    "    $min_k_list = array();\n    $min_k_list = array_slice($test_list, 0, $K);\n    $min_k_list = array_map(function($item) {\n        return $item[1];\n    }, $min_k_list);\n    $min_k_list = array_unique($min_k_list);\n    $min_k_list = array_values($min_k_list);\n    $min_k_list = array_map(function($item) use ($test_list) {\n        return array_filter($test_list, function($item2) use ($item) {\n            return $item2[1] == $item;\n        });\n    }, $min_k_list);\n    $min_k_list = array_map(function($item) {\n        return array_values($item);\n    }, $min_k_list);\n    $min_k_list = array_map(function($item) {\n        return $item[0];\n    }, $min_k_list);\n    return $min_k_list;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(2, 3),\n    array(3, 4),\n    array(4, 5),\n    array(5, 6),\n    array(6, 7),\n    array(7, 8),\n    array(8, 9),\n    array(9, 10),\n    array(10, 11),\n);\n$K = 3;\n$result = min_k($test_list, $K);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$test_list = array(\n    array(1, 2),\n    array(2, 3),\n    array(3, 4),\n    array(4, 5),\n    array(5, 6),\n    array(6, 7),\n    array(7, 8),\n    array(8, 9),\n    array(9, 10),\n    array(10, 11),\n);\n$K = 5;\n$result = min_k($test_list, $K);\necho '<",
    "    $min_list = array();\n    $min_list_size = 0;\n    foreach ($test_list as $tuple) {\n        if ($min_list_size < $K) {\n            $min_list[] = $tuple;\n            $min_list_size++;\n        } else {\n            $max = $min_list[0];\n            $max_index = 0;\n            for ($i = 1; $i < $K; $i++) {\n                if ($min_list[$i][1] > $max[1]) {\n                    $max = $min_list[$i];\n                    $max_index = $i;\n                }\n            }\n            if ($max[1] > $tuple[1]) {\n                $min_list[$max_index] = $tuple;\n            }\n        }\n    }\n    return $min_list;\n}\n\n$test_list = array(\n    array(\"Geeks\", 10),\n    array(\"for\", 15),\n    array(\"Geeks\", 20),\n    array(\"GeeksforGeeks\", 30),\n    array(\"Geeks\", 40),\n    array(\"Geeks\", 50),\n    array(\"Geeks\", 60),\n    array(\"Geeks\", 70),\n    array(\"Geeks\", 80),\n    array(\"Geeks\", 90),\n    array(\"Geeks\", 100),\n    array(\"Geeks\", 110),\n    array(\"Geeks\", 120),\n    array(\"Geeks\", 130),\n    array(\"Geeks\", 140),\n    array(\"Geeks\", 150),\n    array(\"Geeks\", 160),\n    array(\"Geeks\", 170),\n    array(\"Geeks\", 180),\n    array(\"Geeks\", 190),\n    array(\"Geeks\", 200),\n    array(\"Geeks\", 210),\n    array(\"Geeks\", 220),\n    array(\"Geeks\", 230),\n    array(\"Geeks\", 240),\n    array(\"Geeks\", 250),\n    array(\"Geeks\", 260),\n    array(\"Geeks\", 270),\n    array(\"Geeks\", 280),\n    array(\"Geeks\", 290),\n    array(\"Geeks\", 300),\n    array(\"Geeks\", 310",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    foreach ($test_list as $i => $tuple) {\n        if ($i < $K) {\n            continue;\n        }\n        if ($tuple[1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $tuple;\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    ['a', 2],\n    ['b', 5],\n    ['c', 1],\n    ['d', 9],\n    ['e', 10],\n    ['f', 7],\n    ['g', 4],\n    ['h', 8],\n    ['i', 3],\n    ['j', 6],\n];\n\n$K = 4;\n\n$result = min_k($test_list, $K);\n\n$expected = [\n    ['c', 1],\n    ['a', 2],\n    ['i', 3],\n    ['g', 4],\n];\n\nassert($result === $expected);",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_column($min_k, 'age');\n    $min_k = array_flip($min_k);\n    $min_k = array_flip($min_k);\n    $min_k = array_map(function($v) { return (int)$v; }, $min_k);\n    $min_k = array_combine($min_k, array_fill(0, count($min_k), 0));\n    foreach ($test_list as $v) {\n        if (isset($min_k[$v['age']])) {\n            $min_k[$v['age']]++;\n        }\n    }\n    $min_k = array_filter($min_k, function($v) { return $v > 0; });\n    $min_k = array_keys($min_k);\n    sort($min_k);\n    return $min_k;\n}\n\n$test_list = [\n    ['name' => 'Ram', 'age' => 10],\n    ['name' => 'Shyam', 'age' => 5],\n    ['name' => 'Mohan', 'age' => 12],\n    ['name' => 'Sohan', 'age' => 5],\n    ['name' => 'Karan', 'age' => 10],\n    ['name' => 'Baran', 'age' => 12],\n    ['name' => 'Sukan', 'age' => 12],\n];\n$K = 3;\n$result = min_k($test_list, $K);\nvar_dump($result);\n\n$test_list = [\n    ['name' => 'Ram', 'age' => 10],\n    ['name' => 'Shyam', 'age' => 5],\n    ['name' => 'Mohan', 'age' => 12],\n    ['name' => 'Sohan', 'age' => 5],\n    ['name' => 'Karan', 'age' => 10],\n    ['name' => 'Baran', 'age' => 12],\n    ['name' => 'Sukan', 'age' => 12",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($item) use ($test_list) {\n        return array_filter($test_list, function($item2) use ($item) {\n            return $item2[0] == $item;\n        });\n    }, $min_k);\n    $min_k = array_map(function($item) {\n        return array_values($item);\n    }, $min_k);\n    $min_k = array_reduce($min_k, function($carry, $item) {\n        return array_merge($carry, $item);\n    }, []);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [1, 3], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5], [4, 6], [5, 6], [5, 7], [6, 7], [6, 8], [7, 8], [7, 9], [8, 9], [8, 10], [9, 10], [9, 11], [10, 11], [10, 12], [11, 12], [11, 13], [12, 13], [12, 14], [13, 14], [13, 15], [14, 15], [14, 16], [15, 16], [15, 17], [16, 17], [16, 18], [17, 18], [17, 19], [18, 19], [18, 20], [19, 20], [19, 21], [20, 21], [20, 22], [21, 22], [21, 23], [22, 23], [22, 24], [23, 24], [23, 25], [24, 25], [24, 26], [25, 26], [25, 27], [26, 27], [26, 28], [27, 28], [27, 29], [",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) { return $item[1]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($item) use ($test_list) {\n        foreach ($test_list as $test_item) {\n            if ($test_item[1] == $item) {\n                return $test_item;\n            }\n        }\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 5], [6, 8], [1, 8], [9, 11]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 5], [6, 8], [1, 8], [9, 11]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 5], [6, 8], [1, 8], [9, 11]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) { return $x[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($x) use ($test_list) { return $test_list[$x]; }, $min_k);\n    return $min_k;\n}\n\n$test_list = [\n    [1, 'a'],\n    [2, 'b'],\n    [3, 'c'],\n    [4, 'd'],\n    [5, 'e'],\n    [6, 'f'],\n    [7, 'g'],\n    [8, 'h'],\n    [9, 'i'],\n    [10, 'j'],\n    [1, 'k'],\n    [2, 'l'],\n    [3, 'm'],\n    [4, 'n'],\n    [5, 'o'],\n    [6, 'p'],\n    [7, 'q'],\n    [8, 'r'],\n    [9, 's'],\n    [10, 't'],\n];\n\n$K = 5;\n\n$result = min_k($test_list, $K);\n\nprint_r($result);\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($e) { return $e[1]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($e) use ($test_list) {\n        foreach($test_list as $t) {\n            if ($t[1] == $e) {\n                return $t;\n            }\n        }\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 12], [3, 5]];\n$K = 2;\n$result = min_k($test_list, $K);\necho json_encode($result) . \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 12], [3, 5]];\n$K = 3;\n$result = min_k($test_list, $K);\necho json_encode($result) . \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 12], [3, 5]];\n$K = 4;\n$result = min_k($test_list, $K);\necho json_encode($result) . \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 12], [3, 5]];\n$K = 5;\n$result = min_k($test_list, $K);\necho json_encode($result) . \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, 6], [0, 10], [3, 12], [3, 5]];\n$K = 6;\n$result = min_k($test_list, $K);\necho json_encode($result)",
    "    $result = [];\n    foreach ($test_list as $tuple) {\n        if (count($result) < $K) {\n            $result[] = $tuple;\n            continue;\n        }\n        $max = max($result);\n        if ($tuple < $max) {\n            $result = array_diff($result, [$max]);\n            $result[] = $tuple;\n        }\n    }\n    return $result;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2]];\n$K = 3;\n$result = min_k($test_list, $K);\n$expected = [[1, -1], [6, 0], [0, 9]];\nassert($result === $expected);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2]];\n$K = 2;\n$result = min_k($test_list, $K);\n$expected = [[1, -1], [6, 0]];\nassert($result === $expected);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2]];\n$K = 4;\n$result = min_k($test_list, $K);\n$expected = [[1, -1], [6, 0], [0, 9], [1, 2]];\nassert($result === $expected);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2]];\n$K = 5;\n$result = min_k($test_list, $K);\n$expected = [[1, -1], [6, 0], [0, 9], [1, 2], [3, 4]];\nassert($result === $expected);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K-1][1]) {\n            $min_k[$K-1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [['gfg', 10], ['is', 15], ['best', 13], ['for', 20], ['CS', 25]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [['gfg', 10], ['is', 15], ['best', 13], ['for', 20], ['CS', 25]];\n$K = 2;\n$result = min_k($test_list, $K);\nprint_r($result);",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($item) use ($test_list) {\n        return array_filter($test_list, function($item2) use ($item) {\n            return $item2[0] == $item;\n        });\n    }, $min_k);\n    $min_k = array_map(function($item) {\n        return array_values($item);\n    }, $min_k);\n    $min_k = array_map(function($item) {\n        return array_map(function($item2) {\n            return $item2[1];\n        }, $item);\n    }, $min_k);\n    $min_k = array_map(function($item) {\n        return implode(',', $item);\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 'a'),\n    array(1, 'b'),\n    array(1, 'c'),\n    array(2, 'd'),\n    array(2, 'e'),\n    array(2, 'f'),\n    array(3, 'g'),\n    array(3, 'h'),\n    array(3, 'i'),\n    array(4, 'j'),\n    array(4, 'k'),\n    array(4, 'l'),\n    array(5, 'm'),\n    array(5, 'n'),\n    array(5, 'o'),\n    array(6, 'p'),\n    array(6, 'q'),\n    array(6, 'r'),\n    array(7, 's'),\n    array(7, 't'),\n    array(7, 'u'),\n    array(8, 'v'),\n    array(8, 'w'),\n    array(8, 'x'),\n    array(9, 'y",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($item) use ($test_list) {\n        return array_filter($test_list, function($item2) use ($item) {\n            return $item2[0] == $item;\n        });\n    }, $min_k);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 'geeks'),\n    array(2, 'for'),\n    array(3, 'geeks'),\n    array(4, 'geeks'),\n    array(5, 'geeks'),\n    array(6, 'geeks'),\n    array(7, 'geeks'),\n    array(8, 'geeks'),\n    array(9, 'geeks'),\n    array(10, 'geeks'),\n    array(11, 'geeks'),\n    array(12, 'geeks'),\n    array(13, 'geeks'),\n    array(14, 'geeks'),\n    array(15, 'geeks'),\n    array(16, 'geeks'),\n    array(17, 'geeks'),\n    array(18, 'geeks'),\n    array(19, 'geeks'),\n    array(20, 'geeks'),\n    array(21, 'geeks'),\n    array(22, 'geeks'),\n    array(23, 'geeks'),\n    array(24, 'geeks'),\n    array(25, 'geeks'),\n    array(26, 'geeks'),\n    array(27, 'geeks'),\n    array(28, 'geeks'),\n    array(29, 'geeks'),\n    array(30, 'geeks'),\n    array(31, 'geeks'),\n    array",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] <=> $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] <=> $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    ['a', 1],\n    ['b', 2],\n    ['c', 3],\n    ['d', 4],\n    ['e', 5],\n    ['f', 6],\n    ['g', 7],\n    ['h', 8],\n    ['i', 9],\n    ['j', 10],\n];\n\n$K = 5;\n\n$result = min_k($test_list, $K);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $min_k = array();\n    $min_k_index = array();\n    $min_k_index[0] = 0;\n    $min_k[0] = $test_list[0];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i] < $min_k[0]) {\n            $min_k[0] = $test_list[$i];\n            $min_k_index[0] = $i;\n        }\n    }\n    for ($i = 1; $i < $K; $i++) {\n        $min_k[$i] = $test_list[$i];\n        $min_k_index[$i] = $i;\n        for ($j = 0; $j < $i; $j++) {\n            if ($min_k[$j] < $min_k[$i]) {\n                $temp = $min_k[$j];\n                $min_k[$j] = $min_k[$i];\n                $min_k[$i] = $temp;\n                $temp = $min_k_index[$j];\n                $min_k_index[$j] = $min_k_index[$i];\n                $min_k_index[$i] = $temp;\n            }\n        }\n    }\n    return $min_k_index;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1),\n    array(1, 2, 3, 4, 5, 6",
    "    $min_k_list = array();\n    $min_k_list = array_slice($test_list, 0, $K);\n    $min_k_list = array_map(function($x) { return $x[0]; }, $min_k_list);\n    $min_k_list = array_unique($min_k_list);\n    $min_k_list = array_values($min_k_list);\n    $min_k_list = array_map(function($x) use ($test_list) {\n        $min_k_list = array_filter($test_list, function($y) use ($x) {\n            return $y[0] == $x;\n        });\n        return $min_k_list;\n    }, $min_k_list);\n    $min_k_list = array_map(function($x) {\n        return array_pop($x);\n    }, $min_k_list);\n    return $min_k_list;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(1, 3),\n    array(1, 4),\n    array(2, 5),\n    array(2, 6),\n    array(2, 7),\n    array(3, 8),\n    array(3, 9),\n    array(3, 10),\n    array(4, 11),\n    array(4, 12),\n    array(4, 13),\n    array(5, 14),\n    array(5, 15),\n    array(5, 16),\n    array(6, 17),\n    array(6, 18),\n    array(6, 19),\n    array(7, 20),\n    array(7, 21),\n    array(7, 22),\n    array(8, 23),\n    array(8, 24),\n    array(8, 25),\n    array(9, 26),\n    array(9, 27),\n    array(9, 28),\n    array(10, 29),\n    array(10, 30),\n    array(10, 31),\n);\n\n$K = 5;\n$min_k_list = min_k($test_list, $",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($tuple) {\n        return $tuple[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($value) use ($test_list) {\n        return array_filter($test_list, function($tuple) use ($value) {\n            return $tuple[0] == $value;\n        });\n    }, $min_k);\n    $min_k = array_map(function($tuples) {\n        return array_map(function($tuple) {\n            return $tuple[1];\n        }, $tuples);\n    }, $min_k);\n    $min_k = array_map(function($tuples) {\n        return array_sum($tuples) / count($tuples);\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1,2], [3,4], [1,6], [0,10], [1,8], [0,12], [3,5]];\n$K = 3;\n$result = min_k($test_list, $K);\necho implode(', ', $result) . \"\\n\";\n\n$test_list = [[1,2], [3,4], [1,6], [0,10], [1,8], [0,12], [3,5]];\n$K = 4;\n$result = min_k($test_list, $K);\necho implode(', ', $result) . \"\\n\";\n\n$test_list = [[1,2], [3,4], [1,6], [0,10], [1,8], [0,12], [3,5]];\n$K = 5;\n$result = min_k($test_list, $K);\necho implode(', ', $result) . \"\\n\";\n\n$test_list = [[1,2], [3,4], [1,6],",
    "    $n = count($test_list);\n    if ($K > $n) {\n        return false;\n    }\n    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($e) { return $e[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    sort($min_k);\n    for ($i = $K; $i < $n; $i++) {\n        $e = $test_list[$i][0];\n        if ($e > $min_k[$K - 1]) {\n            continue;\n        }\n        $min_k[$K - 1] = $e;\n        sort($min_k);\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 10;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 15;\n$result = min_k($test",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) { return $x[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($x) use ($test_list) {\n        $min_k_item = array_filter($test_list, function($y) use ($x) {\n            return $y[0] == $x;\n        });\n        $min_k_item = array_values($min_k_item);\n        return $min_k_item[0];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5], [4, 6], [5, 6]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5], [4, 6], [5, 6]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5], [4, 6], [5, 6]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5], [4, 6], [5, 6]];\n$K = 6;",
    "    $min_k_list = array();\n    $min_k_list = array_slice($test_list, 0, $K);\n    $min_k_list = array_map(function($x) { return $x[0]; }, $min_k_list);\n    $min_k_list = array_unique($min_k_list);\n    $min_k_list = array_values($min_k_list);\n    $min_k_list = array_map(function($x) use ($test_list) {\n        return array_filter($test_list, function($y) use ($x) {\n            return $y[0] == $x;\n        });\n    }, $min_k_list);\n    $min_k_list = array_map(function($x) {\n        return array_values($x);\n    }, $min_k_list);\n    $min_k_list = array_map(function($x) {\n        return array_map(function($y) {\n            return $y[1];\n        }, $x);\n    }, $min_k_list);\n    $min_k_list = array_map(function($x) {\n        return array_sum($x);\n    }, $min_k_list);\n    $min_k_list = array_map(function($x) {\n        return array($x);\n    }, $min_k_list);\n    return $min_k_list;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(1, 3),\n    array(1, 4),\n    array(2, 2),\n    array(2, 3),\n    array(2, 4),\n    array(3, 2),\n    array(3, 3),\n    array(3, 4),\n    array(4, 2),\n    array(4, 3),\n    array(4, 4),\n    array(5, 2),\n    array(5, 3),\n    array(5, 4),\n    array(6, 2),\n    array(6, 3),\n    array(6, 4),\n    array(7, 2),\n    array(",
    "    $result = array();\n    $len = count($test_list);\n    for ($i = 0; $i < $len; $i++) {\n        $result[$i] = $test_list[$i][1];\n    }\n    sort($result);\n    $min_k = array_slice($result, 0, $K);\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, -1),\n    array(6, 0),\n    array(0, 9),\n    array(-2, -3),\n    array(-4, 1),\n    array(-1, 11),\n    array(-2, 0),\n    array(5, -1),\n);\n$K = 3;\n$result = min_k($test_list, $K);\necho implode(',', $result);\n",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($v) { return $v[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    for ($i = $K; $i < $n; $i++) {\n        $max_k = max($min_k);\n        if ($test_list[$i][0] < $max_k) {\n            $min_k[array_search($max_k, $min_k)] = $test_list[$i][0];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(4, 'd'),\n    array(5, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j'),\n    array(11, 'k'),\n    array(12, 'l'),\n    array(13, 'm'),\n    array(14, 'n'),\n    array(15, 'o'),\n    array(16, 'p'),\n    array(17, 'q'),\n    array(18, 'r'),\n    array(19, 's'),\n    array(20, 't'),\n    array(21, 'u'),\n    array(22, 'v'),\n    array(23, 'w'),\n    array(24, 'x'),\n    array(25, 'y'),\n    array(26, 'z'),\n);\n\n$K = 5;\n\n$result = min_k($test_list, $K);\n\necho implode(', ', $result);",
    "    $min_k = [];\n    $min_k_index = [];\n    $min_k_index_count = 0;\n    $min_k_count = 0;\n    $min_k_value = PHP_INT_MAX;\n    $test_list_count = count($test_list);\n    $test_list_index = 0;\n    while ($test_list_index < $test_list_count) {\n        $test_list_value = $test_list[$test_list_index];\n        if ($test_list_value < $min_k_value) {\n            $min_k_value = $test_list_value;\n            $min_k_index[$min_k_index_count] = $test_list_index;\n            $min_k_index_count++;\n        }\n        if ($min_k_index_count == $K) {\n            $min_k[$min_k_count] = $min_k_value;\n            $min_k_count++;\n            $min_k_index_count = 0;\n            $min_k_value = PHP_INT_MAX;\n        }\n        $test_list_index++;\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [\n        [1, 2, 3, 4, 5],\n        2\n    ],\n    [\n        [1, 2, 3, 4, 5],\n        3\n    ],\n    [\n        [1, 2, 3, 4, 5],\n        4\n    ],\n    [\n        [1, 2, 3, 4, 5],\n        5\n    ],\n    [\n        [1, 2, 3, 4, 5],\n        6\n    ],\n    [\n        [1, 2, 3, 4, 5],\n        7\n    ],\n    [\n        [1, 2, 3, 4, 5],\n        8\n    ],\n    [\n        [1, 2, 3, 4, 5],\n        9\n    ],\n    [\n        [1, 2, 3, 4, 5],\n        10\n    ],\n    [\n        [1, 2,",
    "    $n = count($test_list);\n    $min_k = array();\n    for ($i = 0; $i < $n; $i++) {\n        $min_k[] = $test_list[$i];\n        if (count($min_k) > $K) {\n            $min_k = array_slice($min_k, 1);\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12),\n    array(13, 14, 15),\n    array(16, 17, 18),\n    array(19, 20, 21),\n    array(22, 23, 24),\n    array(25, 26, 27),\n    array(28, 29, 30)\n);\n$K = 5;\n$result = min_k($test_list, $K);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';\n",
    "    $min_k = array();\n    $min_k_index = array();\n    $min_k_index[0] = 0;\n    $min_k[0] = $test_list[0];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i] < $min_k[0]) {\n            $min_k[0] = $test_list[$i];\n            $min_k_index[0] = $i;\n        }\n        elseif ($test_list[$i] > $min_k[$K-1]) {\n            continue;\n        }\n        else {\n            $min_k[$K-1] = $test_list[$i];\n            $min_k_index[$K-1] = $i;\n            for ($j = $K-2; $j >= 0; $j--) {\n                if ($min_k[$j] > $min_k[$j+1]) {\n                    $temp = $min_k[$j];\n                    $min_k[$j] = $min_k[$j+1];\n                    $min_k[$j+1] = $temp;\n                    $temp = $min_k_index[$j];\n                    $min_k_index[$j] = $min_k_index[$j+1];\n                    $min_k_index[$j+1] = $temp;\n                }\n            }\n        }\n    }\n    return $min_k_index;\n}\n\n$test_list = array(\n    array(\n        'test_list' => array(\n            (object) array('name' => 'a', 'value' => 1),\n            (object) array('name' => 'b', 'value' => 2),\n            (object) array('name' => 'c', 'value' => 3),\n            (object) array('name' => 'd', 'value' => 4),\n            (object) array('name' => 'e', 'value' => 5),\n            (object) array('name' => 'f', 'value'",
    "    $min_k = array();\n    foreach ($test_list as $tuple) {\n        if (count($min_k) < $K) {\n            $min_k[] = $tuple;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple < $max_tuple) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, -1),\n    array(6, 10),\n    array(5, 10),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n    array(5, -1),\n",
    "    $result = [];\n    foreach ($test_list as $tuple) {\n        if (count($result) < $K) {\n            $result[] = $tuple;\n        } else {\n            $max_tuple = max($result);\n            if ($tuple < $max_tuple) {\n                $result[array_search($max_tuple, $result)] = $tuple;\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2]];\n$K = 3;\n$result = min_k($test_list, $K);\necho \"The minimum K records are: \";\nforeach ($result as $tuple) {\n    echo \"[\" . $tuple[0] . \", \" . $tuple[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2]];\n$K = 2;\n$result = min_k($test_list, $K);\necho \"The minimum K records are: \";\nforeach ($result as $tuple) {\n    echo \"[\" . $tuple[0] . \", \" . $tuple[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2]];\n$K = 4;\n$result = min_k($test_list, $K);\necho \"The minimum K records are: \";\nforeach ($result as $tuple) {\n    echo \"[\" . $tuple[0] . \", \" . $tuple[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2]];\n$K = 5;\n$result = min_",
    "    $min_k = array();\n    foreach ($test_list as $test_case) {\n        if (count($min_k) < $K) {\n            $min_k[] = $test_case;\n        } else {\n            $max_k = max($min_k);\n            if ($test_case < $max_k) {\n                $min_k[array_search($max_k, $min_k)] = $test_case;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(2, 4, 6, 8, 10),\n    array(3, 6, 9, 12, 15),\n    array(4, 8, 12, 16, 20),\n    array(5, 10, 15, 20, 25),\n);\n$K = 3;\n$result = min_k($test_list, $K);\necho implode(', ', $result);",
    "    $min_k_list = array();\n    $min_k_list = array_slice($test_list, 0, $K);\n    $min_k_list = array_map(function($x) { return $x[0]; }, $min_k_list);\n    $min_k_list = array_unique($min_k_list);\n    $min_k_list = array_values($min_k_list);\n    $min_k_list = array_map(function($x) use ($test_list) {\n        $y = array_filter($test_list, function($z) use ($x) { return $z[0] == $x; });\n        $y = array_values($y);\n        return $y[0];\n    }, $min_k_list);\n    return $min_k_list;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, 2),\n    array(5, 6),\n    array(7, 8),\n    array(1, 2),\n    array(3, 4),\n    array(3, 4),\n    array(7, 8),\n    array(9, 10)\n);\n$K = 5;\n$min_k_list = min_k($test_list, $K);\necho \"Minimum K records from tuple list: \";\nforeach ($min_k_list as $tuple) {\n    echo \"(\" . $tuple[0] . \", \" . $tuple[1] . \") \";\n}\necho \"\\n\";\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, 2),\n    array(5, 6),\n    array(7, 8),\n    array(1, 2),\n    array(3, 4),\n    array(3, 4),\n    array(7, 8),\n    array(9, 10)\n);\n$K = 2;\n$min_k_list = min_k($test_list, $K);\necho \"Minimum K records from tuple list: \";\nforeach ($min_",
    "    $min_k = [];\n    $min_k_values = [];\n    $min_k_values_index = [];\n    $min_k_values_index_count = 0;\n    $min_k_values_index_count_max = $K;\n    $min_k_values_index_count_max_minus_one = $K - 1;\n    $min_k_values_index_count_max_minus_two = $K - 2;\n    $min_k_values_index_count_max_minus_three = $K - 3;\n    $min_k_values_index_count_max_minus_four = $K - 4;\n    $min_k_values_index_count_max_minus_five = $K - 5;\n    $min_k_values_index_count_max_minus_six = $K - 6;\n    $min_k_values_index_count_max_minus_seven = $K - 7;\n    $min_k_values_index_count_max_minus_eight = $K - 8;\n    $min_k_values_index_count_max_minus_nine = $K - 9;\n    $min_k_values_index_count_max_minus_ten = $K - 10;\n    $min_k_values_index_count_max_minus_eleven = $K - 11;\n    $min_k_values_index_count_max_minus_twelve = $K - 12;\n    $min_k_values_index_count_max_minus_thirteen = $K - 13;\n    $min_k_values_index_count_max_minus_fourteen = $K - 14;\n    $min_k_values_index_count_max_minus_fifteen = $K - 15;\n    $min_k_values_index_count_max_minus_sixteen = $K - 16;\n    $min_k_values_index_count_max_minus_seventeen = $K - 17;\n    $min_k_values_index_count_max_minus_eighteen = $K - 18;\n    $min_k_values",
    "    $n = count($test_list);\n    $min_k = array_fill(0, $K, 0);\n    for ($i = 0; $i < $K; $i++) {\n        $min_k[$i] = $test_list[$i];\n    }\n    for ($i = $K; $i < $n; $i++) {\n        $max = $min_k[0];\n        $max_index = 0;\n        for ($j = 1; $j < $K; $j++) {\n            if ($min_k[$j] > $max) {\n                $max = $min_k[$j];\n                $max_index = $j;\n            }\n        }\n        if ($test_list[$i] < $max) {\n            $min_k[$max_index] = $test_list[$i];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(\n        'test_list' => array(\n            array(\n                'name' => 'A',\n                'age' => 10,\n                'score' => 90\n            ),\n            array(\n                'name' => 'B',\n                'age' => 20,\n                'score' => 80\n            ),\n            array(\n                'name' => 'C',\n                'age' => 30,\n                'score' => 70\n            ),\n            array(\n                'name' => 'D',\n                'age' => 40,\n                'score' => 60\n            ),\n            array(\n                'name' => 'E',\n                'age' => 50,\n                'score' => 50\n            ),\n            array(\n                'name' => 'F',\n                'age' => 60,\n                'score' => 40\n            ),\n            array(\n                'name' => 'G',\n                'age' => 70,\n                'score' => 30\n            ),\n            array(\n                'name' => 'H',\n                'age' => 80,\n                'score' => 20\n            ),\n            array(\n                'name' => 'I',\n                '",
    "    $n = count($test_list);\n    $min_k = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i < $K) {\n            $min_k[$i] = $test_list[$i];\n        } else {\n            $max = max($min_k);\n            if ($test_list[$i] < $max) {\n                $min_k[array_search($max, $min_k)] = $test_list[$i];\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(\n        \"test_list\" => array(\n            array(1, 2),\n            array(2, 3),\n            array(3, 4),\n            array(4, 5),\n            array(5, 6),\n            array(6, 7),\n            array(7, 8),\n            array(8, 9),\n            array(9, 10),\n            array(10, 11)\n        ),\n        \"K\" => 3,\n        \"expected\" => array(\n            array(1, 2),\n            array(2, 3),\n            array(3, 4)\n        )\n    ),\n    array(\n        \"test_list\" => array(\n            array(1, 2),\n            array(2, 3),\n            array(3, 4),\n            array(4, 5),\n            array(5, 6),\n            array(6, 7),\n            array(7, 8),\n            array(8, 9),\n            array(9, 10),\n            array(10, 11)\n        ),\n        \"K\" => 5,\n        \"expected\" => array(\n            array(1, 2),\n            array(2, 3),\n            array(3, 4),\n            array(4, 5),\n            array(5, 6)\n        )\n    ),\n    array(\n        \"test_list\" => array(\n            array(1, 2),\n            array(2, 3),\n            array(3, 4),\n            array(4, 5),\n            array(5, 6),\n           ",
    "    $min_k = [];\n    $min_k_index = [];\n    $min_k_index_count = 0;\n    $min_k_count = 0;\n    $test_list_count = count($test_list);\n    for ($i = 0; $i < $test_list_count; $i++) {\n        if ($min_k_count < $K) {\n            $min_k[] = $test_list[$i];\n            $min_k_index[] = $i;\n            $min_k_index_count++;\n            $min_k_count++;\n        } else {\n            $max_min_k = max($min_k);\n            $max_min_k_index = array_search($max_min_k, $min_k);\n            if ($test_list[$i] < $max_min_k) {\n                $min_k[$max_min_k_index] = $test_list[$i];\n                $min_k_index[$max_min_k_index] = $i;\n            }\n        }\n    }\n    return $min_k_index;\n}\n\n$test_list = [\n    [1, 2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9],\n    [6, 7, 8, 9, 10],\n    [7, 8, 9, 10, 11],\n    [8, 9, 10, 11, 12],\n    [9, 10, 11, 12, 13],\n    [10, 11, 12, 13, 14],\n    [11, 12, 13, 14, 15],\n    [12, 13, 14, 15, 16],\n    [13, 14, 15, 16, 17],\n    [14, 15, 16, 17, 18],\n    [15, 16, 17, 18, 19],\n    [16, 17, 18, 19, 20],\n    [17, 18, 19, 20, 21],\n    [18, 19,",
    "    $min_k = [];\n    $min_k_index = [];\n    for ($i = 0; $i < $K; $i++) {\n        $min_k[$i] = $test_list[$i];\n        $min_k_index[$i] = $i;\n    }\n    for ($i = $K; $i < count($test_list); $i++) {\n        $max_index = 0;\n        for ($j = 1; $j < $K; $j++) {\n            if ($min_k[$j] > $min_k[$max_index]) {\n                $max_index = $j;\n            }\n        }\n        if ($min_k[$max_index] > $test_list[$i]) {\n            $min_k[$max_index] = $test_list[$i];\n            $min_k_index[$max_index] = $i;\n        }\n    }\n    return $min_k_index;\n}\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10), ('k', 11), ('l', 12), ('m', 13), ('n', 14), ('o', 15), ('p', 16), ('q', 17), ('r', 18), ('s', 19), ('t', 20), ('u', 21), ('v', 22), ('w', 23), ('x', 24), ('y', 25), ('z', 26)];\n$K = 5;\n$min_k_index = min_k($test_list, $K);\nfor ($i = 0; $i < $K; $i++) {\n    print($test_list[$min_k_index[$i]]);\n}",
    "    $min_k = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_k) < $K) {\n            $min_k[] = $tuple;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple[1] < $max_tuple[1]) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5], ['f', 6], ['g', 7], ['h', 8], ['i', 9], ['j', 10]];\n$K = 3;\n\n$result = min_k($test_list, $K);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $min_k = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_k) < $K) {\n            $min_k[] = $tuple;\n            continue;\n        }\n        $max_tuple = max($min_k);\n        if ($tuple < $max_tuple) {\n            $min_k[array_search($max_tuple, $min_k)] = $tuple;\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, -1],\n    [6, 10],\n    [5, 10],\n    [6, 9],\n];\n$K = 3;\n\necho '<pre>';\nprint_r(min_k($test_list, $K));\necho '</pre>';",
    "    $min_k = array();\n    $min_k_index = array();\n    $min_k_count = 0;\n    $min_k_index_count = 0;\n    $min_k_index_max = $K - 1;\n    $test_list_count = count($test_list);\n    for ($i = 0; $i < $test_list_count; $i++) {\n        if ($min_k_count < $K) {\n            $min_k[$min_k_count] = $test_list[$i][1];\n            $min_k_index[$min_k_index_count] = $i;\n            $min_k_count++;\n            $min_k_index_count++;\n        } else {\n            $max_k = max($min_k);\n            if ($test_list[$i][1] < $max_k) {\n                $max_k_index = array_search($max_k, $min_k);\n                $min_k[$max_k_index] = $test_list[$i][1];\n                $min_k_index[$max_k_index] = $i;\n            }\n        }\n    }\n    $min_k_index_count = count($min_k_index);\n    for ($i = 0; $i < $min_k_index_count; $i++) {\n        $min_k_index[$i] = $test_list[$min_k_index[$i]];\n    }\n    return $min_k_index;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(2, 3),\n    array(3, 4),\n    array(4, 5),\n    array(5, 6),\n    array(6, 7),\n    array(7, 8),\n    array(8, 9),\n    array(9, 10),\n    array(10, 11)\n);\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = array(\n    array(1",
    "    $min_k = [];\n    $min_k_index = [];\n    $min_k_count = 0;\n    foreach ($test_list as $index => $tuple) {\n        if ($min_k_count < $K) {\n            $min_k[] = $tuple;\n            $min_k_index[] = $index;\n            $min_k_count++;\n        } else {\n            $max_index = array_search(max($min_k), $min_k);\n            if ($tuple < $min_k[$max_index]) {\n                $min_k[$max_index] = $tuple;\n                $min_k_index[$max_index] = $index;\n            }\n        }\n    }\n    return [$min_k, $min_k_index];\n}\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);",
    "    $min_k = array();\n    foreach ($test_list as $tuple) {\n        if (count($min_k) < $K) {\n            $min_k[] = $tuple;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple < $max_tuple) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n",
    "    $min_list = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_list) < $K) {\n            $min_list[] = $tuple;\n        } else {\n            $max_tuple = max($min_list);\n            if ($tuple < $max_tuple) {\n                $min_list[array_search($max_tuple, $min_list)] = $tuple;\n            }\n        }\n    }\n    return $min_list;\n}\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, -1],\n    [6, 10],\n    [5, 2],\n    [9, 6],\n    [4, 5],\n    [2, 3],\n    [8, 1],\n    [7, 7],\n];\n$K = 3;\n\n$result = min_k($test_list, $K);\necho implode(', ', $result);",
    "    $result = array();\n    $min_k = array();\n    $min_k_index = array();\n    $min_k_index[0] = 0;\n    $min_k[0] = $test_list[0][1];\n    $result[0] = $test_list[0];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[0]) {\n            $min_k[0] = $test_list[$i][1];\n            $min_k_index[0] = $i;\n            $result[0] = $test_list[$i];\n        }\n    }\n    for ($i = 1; $i < $K; $i++) {\n        $min_k[$i] = $test_list[$i][1];\n        $min_k_index[$i] = $i;\n        $result[$i] = $test_list[$i];\n        for ($j = $i + 1; $j < count($test_list); $j++) {\n            if ($test_list[$j][1] < $min_k[$i] && $min_k_index[$i - 1] != $j) {\n                $min_k[$i] = $test_list[$j][1];\n                $min_k_index[$i] = $j;\n                $result[$i] = $test_list[$j];\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(\"Alex\", \"12\"),\n    array(\"Ben\", \"10\"),\n    array(\"David\", \"15\"),\n    array(\"Dinesh\", \"13\"),\n    array(\"John\", \"11\"),\n    array(\"Mark\", \"11\"),\n    array(\"Steve\", \"12\"),\n    array(\"Travis\", \"14\")\n);\n$K = 3;\n$result = min_k($test_list, $K);\nfor ($i = 0; $i < count($result); $i++) {\n    echo $result",
    "    $result = [];\n    foreach($test_list as $tuple) {\n        $result[] = $tuple[0];\n    }\n    sort($result);\n    return array_slice($result, 0, $K);\n}\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 5;\n\nprint_r(min_k($test_list, $K));\n",
    "    $n = count($test_list);\n    $min_k = array();\n    for($i=0; $i<$n; $i++) {\n        $min_k[] = $test_list[$i][1];\n    }\n    sort($min_k);\n    return $min_k[$K-1];\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(1, -1),\n    array(4, -1),\n    array(10, 12)\n);\n$K = 3;\necho min_k($test_list, $K);",
    "    $min_k = [];\n    $min_k_index = [];\n    $min_k_index_count = 0;\n    $min_k_index_count_max = $K;\n    $min_k_index_count_max_minus_one = $K - 1;\n    $test_list_count = count($test_list);\n    $test_list_count_minus_one = $test_list_count - 1;\n    $test_list_count_minus_one_minus_k = $test_list_count - $K - 1;\n    for ($i = 0; $i < $test_list_count; $i++) {\n        $test_list_i = $test_list[$i];\n        $test_list_i_count = count($test_list_i);\n        $test_list_i_count_minus_one = $test_list_i_count - 1;\n        $test_list_i_count_minus_one_minus_k = $test_list_i_count - $K - 1;\n        for ($j = 0; $j < $test_list_i_count; $j++) {\n            $test_list_i_j = $test_list_i[$j];\n            if ($min_k_index_count < $min_k_index_count_max) {\n                $min_k[] = $test_list_i_j;\n                $min_k_index[] = $i;\n                $min_k_index_count++;\n            } else {\n                if ($j < $test_list_i_count_minus_one_minus_k) {\n                    $test_list_i_j_plus_k = $test_list_i[$j + $K];\n                    $min_k_index_count_max_minus_one_plus_j = $min_k_index_count_max_minus_one + $j;\n                    $min_k_index_count_max_minus_one_plus_j_plus_k = $min_k_index_count_max_minus_one + $j + $K;\n                    if ($test_list_",
    "    $n = count($test_list);\n    $min_k = array();\n    for ($i = 0; $i < $n; $i++) {\n        $min_k[] = $test_list[$i][1];\n    }\n    sort($min_k);\n    return $min_k[$K - 1];\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1]];\n$K = 2;\necho min_k($test_list, $K);\n\n$test_list = [[1, 3], [2, 0], [5, 10], [6, -10]];\n$K = 3;\necho min_k($test_list, $K);\n\n$test_list = [[0, 2], [1, 3], [2, 0]];\n$K = 1;\necho min_k($test_list, $K);",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[1];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($item) use ($test_list) {\n        return $test_list[$item];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5], ['f', 6], ['g', 7], ['h', 8], ['i', 9], ['j', 10]];\n$K = 3;\n$expected = [['a', 1], ['b', 2], ['c', 3]];\n$result = min_k($test_list, $K);\nassert($result == $expected);\n\n$test_list = [['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5], ['f', 6], ['g', 7], ['h', 8], ['i', 9], ['j', 10]];\n$K = 4;\n$expected = [['a', 1], ['b', 2], ['c', 3], ['d', 4]];\n$result = min_k($test_list, $K);\nassert($result == $expected);\n\n$test_list = [['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5], ['f', 6], ['g', 7], ['h', 8], ['i', 9], ['j', 10]];\n$K = 5;\n$expected = [['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5]];\n$result = min_k($test_list, $K);\nassert($result == $expected);\n\n$test_list = [['a', 1], ['b', 2], ['c', 3], ['d',",
    "    $min_k = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_k) < $K) {\n            $min_k[] = $tuple;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple < $max_tuple) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12],\n    [13, 14, 15],\n    [16, 17, 18],\n    [19, 20, 21],\n    [22, 23, 24],\n    [25, 26, 27],\n    [28, 29, 30],\n    [31, 32, 33],\n    [34, 35, 36],\n    [37, 38, 39],\n    [40, 41, 42],\n    [43, 44, 45],\n    [46, 47, 48],\n    [49, 50, 51],\n    [52, 53, 54],\n    [55, 56, 57],\n    [58, 59, 60],\n    [61, 62, 63],\n    [64, 65, 66],\n    [67, 68, 69],\n    [70, 71, 72],\n    [73, 74, 75],\n    [76, 77, 78],\n    [79, 80, 81],\n    [82, 83, 84],\n    [85, 86, 87],\n    [88, 89, 90],\n    [91, 92, 93],\n    [94, 95, 96],\n    [97, 98, 99],\n    [100, 101, 102],\n    [103, 104, 105],\n    [106, 107, 108],\n    [109, 110, 111],\n    [112, 113, 114],\n    [115, 116, 117],\n    [118, 119, 120],\n    [121, 122, 123],\n    [124, 125, 126",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    for ($i = $K; $i < $n; $i++) {\n        $max_element = max($min_k);\n        if ($test_list[$i] < $max_element) {\n            $min_k[array_search($max_element, $min_k)] = $test_list[$i];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)];\n$K = 10;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)];\n$K = 15;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6),",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    return count($min_k);\n}\n\n$test_list = [[1, 2], [3, 4], [1, 2], [5, 6], [7, 8], [1, 2], [3, 4], [3, 4], [7, 8], [9, 10]];\n$K = 5;\necho min_k($test_list, $K);\n\n$test_list = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]];\n$K = 4;\necho min_k($test_list, $K);\n\n$test_list = [[4, 5], [2, 3], [4, 5], [9, 10], [11, 12], [1, 2], [5, 6], [8, 9], [3, 4], [11, 12]];\n$K = 3;\necho min_k($test_list, $K);\n\n$test_list = [[4, 6], [1, 2], [4, 5], [3, 4], [1, 2], [4, 5]];\n$K = 3;\necho min_k($test_list, $K);",
    "    $result = [];\n    foreach ($test_list as $tuple) {\n        if (count($result) < $K) {\n            $result[] = $tuple;\n        } else {\n            $max_tuple = max($result);\n            if ($tuple[0] < $max_tuple[0]) {\n                $result[array_search($max_tuple, $result)] = $tuple;\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = [\n    [1, 'geeks'],\n    [2, 'for'],\n    [3, 'geeks'],\n    [4, 'geeks'],\n    [5, 'geeks'],\n    [6, 'geeks'],\n    [7, 'geeks'],\n    [8, 'geeks'],\n    [9, 'geeks'],\n    [10, 'geeks'],\n    [11, 'geeks'],\n    [12, 'geeks'],\n    [13, 'geeks'],\n    [14, 'geeks'],\n    [15, 'geeks'],\n    [16, 'geeks'],\n    [17, 'geeks'],\n    [18, 'geeks'],\n    [19, 'geeks'],\n    [20, 'geeks'],\n    [21, 'geeks'],\n    [22, 'geeks'],\n    [23, 'geeks'],\n    [24, 'geeks'],\n    [25, 'geeks'],\n    [26, 'geeks'],\n    [27, 'geeks'],\n    [28, 'geeks'],\n    [29, 'geeks'],\n    [30, 'geeks'],\n    [31, 'geeks'],\n    [32, 'geeks'],\n    [33, 'geeks'],\n    [34, 'geeks'],\n    [35, 'geeks'],\n    [36, 'geeks'],\n    [37, 'geeks'],\n    [38, 'geeks'],\n    [39, 'ge",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($e) { return $e[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($e) use ($test_list) {\n        $min = PHP_INT_MAX;\n        foreach ($test_list as $t) {\n            if ($t[0] == $e && $t[1] < $min) {\n                $min = $t[1];\n            }\n        }\n        return [$e, $min];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10]];\n$K = 3;\n$result = min_k($test_list, $K);\nassert($result == [[1, 2], [2, 5], [3, 7]]);\n\n$test_list = [[1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10]];\n$K = 4;\n$result = min_k($test_list, $K);\nassert($result == [[1, 2], [2, 5], [3, 7], [4, 9]]);\n\n$test_list = [[1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10]];\n$K = 5;\n$result = min_k($test_list, $K);\nassert($result == [[1, 2], [2, 5], [3, 7], [4, 9]]);\n\n$test_list = [[1, 2], [1, 3], [1, 4], [2, 5],",
    "    $min_list = [];\n    $min_list_len = 0;\n    $test_list_len = count($test_list);\n    for ($i = 0; $i < $test_list_len; $i++) {\n        $test_list_item = $test_list[$i];\n        $test_list_item_len = count($test_list_item);\n        if ($test_list_item_len < $K) {\n            $min_list = array_merge($min_list, $test_list_item);\n            $min_list_len += $test_list_item_len;\n        } else {\n            $min_list = array_merge($min_list, array_slice($test_list_item, 0, $K));\n            $min_list_len += $K;\n        }\n    }\n    sort($min_list);\n    return array_slice($min_list, 0, $K);\n}\n\n$test_list = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]];\n$K = 5;\n$result = min_k($test_list, $K);\necho implode(', ', $result);\necho \"\\n\";\n\n$test_list = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]];\n$K = 10;\n$result = min_k($test_list, $K);\necho implode(', ', $result);\necho \"\\n\";\n\n$test_list = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]];\n$K = 15;\n$result = min_k($test_list, $K);\necho implode(', ', $result);\necho \"\\n\";\n\n$test_list = [[1, 2, 3, 4, 5], [",
    "    $min_k = [];\n    $min_k_index = [];\n    for ($i = 0; $i < $K; $i++) {\n        $min_k[$i] = $test_list[$i];\n        $min_k_index[$i] = $i;\n    }\n    for ($i = $K; $i < count($test_list); $i++) {\n        $max_index = max($min_k_index);\n        if ($test_list[$i] < $min_k[$max_index]) {\n            $min_k[$max_index] = $test_list[$i];\n            $min_k_index[$max_index] = $i;\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)];\n$K = 5;\n$min_k = min_k($test_list, $K);\nprint_r($min_k);\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)];\n$K = 3;\n$min_k = min_k($test_list, $K);\nprint_r($min_k);\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)];\n$K = 1;\n$min_k = min_k($test_list, $K);\nprint_r($min_k);\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i",
    "    $min_k = [];\n    $min = $test_list[0];\n    $min_k[] = $min;\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i] < $min) {\n            $min = $test_list[$i];\n            $min_k = [];\n            $min_k[] = $min;\n        } elseif ($test_list[$i] == $min) {\n            $min_k[] = $min;\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)];\n$K = 3;\n$min_k = min_k($test_list, $K);\nprint_r($min_k);\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)];\n$K = 5;\n$min_k = min_k($test_list, $K);\nprint_r($min_k);\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)];\n$K = 1;\n$min_k = min_k($test_list, $K);\nprint_r($min_k);\n\n$test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)];\n$K = 10;\n$min_k = min_k($test_list, $K);\nprint_r($min_k);\n\n$",
    "    $result = [];\n    $n = count($test_list);\n    for ($i = 0; $i < $n; $i++) {\n        $result[$i] = $test_list[$i][1];\n    }\n    sort($result);\n    return $result[$K - 1];\n}\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, -1],\n    [6, 0],\n    [0, 9],\n    [7, 8],\n];\n$K = 3;\necho min_k($test_list, $K);\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($item) use ($test_list) {\n        return array_filter($test_list, function($item2) use ($item) {\n            return $item2[0] == $item;\n        });\n    }, $min_k);\n    $min_k = array_map(function($item) {\n        return array_values($item);\n    }, $min_k);\n    $min_k = array_map(function($item) {\n        return array_map(function($item2) {\n            return $item2[1];\n        }, $item);\n    }, $min_k);\n    $min_k = array_map(function($item) {\n        return array_values($item);\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 4;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 'a'], [2, 'b'], [3, '",
    "    $min_list = array();\n    foreach ($test_list as $tuple) {\n        if (count($min_list) < $K) {\n            $min_list[] = $tuple;\n        } else {\n            $max_tuple = max($min_list);\n            if ($tuple < $max_tuple) {\n                $min_list[array_search($max_tuple, $min_list)] = $tuple;\n            }\n        }\n    }\n    return $min_list;\n}\n\n$test_list = array(\n    array(5, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(1, 'd'),\n    array(4, 'e')\n);\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = array(\n    array(5, 'a'),\n    array(2, 'b'),\n    array(3, 'c'),\n    array(1, 'd'),\n    array(4, 'e'),\n    array(6, 'f'),\n    array(7, 'g'),\n    array(8, 'h'),\n    array(9, 'i'),\n    array(10, 'j')\n);\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);",
    "    $min_k_list = array();\n    $min_k_list = array_slice($test_list, 0, $K);\n    $min_k_list = array_map(function($x) {return $x[0];}, $min_k_list);\n    $min_k_list = array_unique($min_k_list);\n    $min_k_list = array_values($min_k_list);\n    $min_k_list = array_map(function($x) use ($test_list) {\n        $result = array();\n        foreach ($test_list as $y) {\n            if ($y[0] == $x) {\n                $result[] = $y;\n            }\n        }\n        return $result;\n    }, $min_k_list);\n    $min_k_list = array_map(function($x) {\n        return array_reduce($x, function($acc, $y) {\n            return $acc + $y[1];\n        }, 0);\n    }, $min_k_list);\n    $min_k_list = array_map(function($x) use ($test_list) {\n        $result = array();\n        foreach ($test_list as $y) {\n            if ($y[1] == $x) {\n                $result[] = $y;\n            }\n        }\n        return $result;\n    }, $min_k_list);\n    $min_k_list = array_map(function($x) {\n        return array_reduce($x, function($acc, $y) {\n            return $acc + $y[2];\n        }, 0);\n    }, $min_k_list);\n    $min_k_list = array_map(function($x) use ($test_list) {\n        $result = array();\n        foreach ($test_list as $y) {\n            if ($y[2] == $x) {\n                $result[] = $y;\n            }\n        }\n        return $result;\n    }, $min_k_list);\n    $min_k_list = array_map(function($x) {\n        return",
    "    $min_list = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_list) < $K) {\n            $min_list[] = $tuple;\n        } else {\n            $max_tuple = max($min_list);\n            if ($tuple[1] < $max_tuple[1]) {\n                $min_list[array_search($max_tuple, $min_list)] = $tuple;\n            }\n        }\n    }\n    return $min_list;\n}\n\n$test_list = [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8],\n    [8, 9],\n    [9, 10],\n    [10, 11]\n];\n\n$K = 3;\n\n$result = min_k($test_list, $K);\n\nvar_dump($result);",
    "    $min_k_list = [];\n    $min_k_list = array_slice($test_list, 0, $K);\n    $min_k_list = array_map(function($item) {\n        return $item[1];\n    }, $min_k_list);\n    $min_k_list = array_unique($min_k_list);\n    $min_k_list = array_values($min_k_list);\n    return $min_k_list;\n}\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, 2],\n    [5, 6],\n    [7, 8],\n    [1, 2],\n    [3, 4],\n    [3, 4],\n    [7, 8],\n    [9, 10]\n];\n$K = 5;\n$min_k_list = min_k($test_list, $K);\nprint_r($min_k_list);\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, 2],\n    [5, 6],\n    [7, 8],\n    [1, 2],\n    [3, 4],\n    [3, 4],\n    [7, 8],\n    [9, 10]\n];\n$K = 2;\n$min_k_list = min_k($test_list, $K);\nprint_r($min_k_list);\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, 2],\n    [5, 6],\n    [7, 8],\n    [1, 2],\n    [3, 4],\n    [3, 4],\n    [7, 8],\n    [9, 10]\n];\n$K = 4;\n$min_k_list = min_k($test_list, $K);\nprint_r($min_k_list);\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, 2],\n    [5, 6],\n    [7, 8],\n    [",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($e) {\n        return $e[1];\n    }, $min_k);\n    for ($i = $K; $i < count($test_list); $i++) {\n        $max_k = max($min_k);\n        if ($test_list[$i][1] < $max_k) {\n            $min_k[array_search($max_k, $min_k)] = $test_list[$i][1];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(2, 3),\n    array(3, 4),\n    array(4, 5),\n    array(5, 6),\n    array(6, 7),\n    array(7, 8),\n    array(8, 9),\n    array(9, 10),\n    array(10, 11),\n);\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = array(\n    array(1, 2),\n    array(2, 3),\n    array(3, 4),\n    array(4, 5),\n    array(5, 6),\n    array(6, 7),\n    array(7, 8),\n    array(8, 9),\n    array(9, 10),\n    array(10, 11),\n);\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = array(\n    array(1, 2),\n    array(2, 3),\n    array(3, 4),\n    array(4, 5),\n    array(5, 6),\n    array(6, 7),\n    array(7, 8),\n    array(8, 9),\n    array(9, 10),\n    array(10, 11),\n);\n$K = 7;\n$result = min_k($test_list, $K);\nprint_r($result);\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] - $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 5;\necho json_encode(min_k($test_list, $K)) . \"\\n\";\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 3;\necho json_encode(min_k($test_list, $K)) . \"\\n\";\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 1;\necho json_encode(min_k($test_list, $K)) . \"\\n\";\n\n$test_list = [[1, 'a'], [2, 'b'], [3",
    "    $n = count($test_list);\n    $min_k = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i < $K) {\n            $min_k[] = $test_list[$i];\n        } else {\n            $max_index = 0;\n            for ($j = 1; $j < $K; $j++) {\n                if ($min_k[$j][1] > $min_k[$max_index][1]) {\n                    $max_index = $j;\n                }\n            }\n            if ($test_list[$i][1] < $min_k[$max_index][1]) {\n                $min_k[$max_index] = $test_list[$i];\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array('Geeks', 20),\n    array('for', 15),\n    array('Geeks', 10),\n    array('GeeksforGeeks', 30),\n    array('Geeks', 40),\n    array('Geeks', 35),\n    array('Geeks', 50),\n    array('Geeks', 45),\n    array('Geeks', 55),\n    array('Geeks', 60),\n    array('Geeks', 65),\n    array('Geeks', 70),\n    array('Geeks', 75),\n    array('Geeks', 80),\n    array('Geeks', 85),\n    array('Geeks', 90),\n    array('Geeks', 95),\n    array('Geeks', 100),\n    array('Geeks', 105),\n    array('Geeks', 110),\n    array('Geeks', 115),\n    array('Geeks', 120),\n    array('Geeks', 125),\n    array('Geeks', 130),\n    array('Geeks', 135),\n    array('Geeks', 140),\n    array('Geeks', 145),\n    array('Geeks', 150),\n    array('Geeks', 155),\n    array('Geeks', 160),\n    array('Geeks', 165),\n    array('Geeks', 170),\n    array('Geeks',",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_column($min_k, 'value');\n    $min_k = array_combine(array_column($min_k, 'key'), $min_k);\n    $min = min($min_k);\n    $min_k = array_filter($min_k, function($v) use ($min) {\n        return $v == $min;\n    });\n    $min_k = array_keys($min_k);\n    $min_k = array_map(function($v) use ($test_list) {\n        return $test_list[$v];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = array(\n    array('key' => 1, 'value' => 10),\n    array('key' => 2, 'value' => 20),\n    array('key' => 3, 'value' => 30),\n    array('key' => 4, 'value' => 40),\n    array('key' => 5, 'value' => 50),\n    array('key' => 6, 'value' => 60),\n    array('key' => 7, 'value' => 70),\n    array('key' => 8, 'value' => 80),\n    array('key' => 9, 'value' => 90),\n    array('key' => 10, 'value' => 100),\n);\n\n$K = 3;\n$min_k = min_k($test_list, $K);\nvar_dump($min_k);\n\n$K = 5;\n$min_k = min_k($test_list, $K);\nvar_dump($min_k);\n\n$K = 7;\n$min_k = min_k($test_list, $K);\nvar_dump($min_k);\n\n$K = 9;\n$min_k = min_k($test_list, $K);\nvar_dump($min_k);\n\n$K = 11;\n$min_k = min_k($test_list, $K);\nvar_dump($min_k);\n\n$test_list =",
    "    $result = [];\n    $min_k = [];\n    foreach ($test_list as $key => $value) {\n        $result[$key] = $value[0];\n    }\n    asort($result);\n    $i = 0;\n    foreach ($result as $key => $value) {\n        if ($i < $K) {\n            $min_k[$key] = $value;\n            $i++;\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = 3;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = 5;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = 1;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = 0;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = -1;\n$result = min_k($test_list, $K);\nprint_r($result);\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 0], [5, 6]];\n$K = 7;\n$result = min_k($test_list",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] <=> $b[0];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] <=> $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 'a'],\n    [2, 'b'],\n    [3, 'c'],\n    [4, 'd'],\n    [5, 'e'],\n    [6, 'f'],\n    [7, 'g'],\n    [8, 'h'],\n    [9, 'i'],\n    [10, 'j'],\n];\n\n$K = 3;\n\n$result = min_k($test_list, $K);\n\nprint_r($result);\n",
    "    $min_list = [];\n    $min_list_size = 0;\n    foreach ($test_list as $tuple) {\n        if ($min_list_size < $K) {\n            $min_list[] = $tuple;\n            $min_list_size++;\n            continue;\n        }\n        $max_tuple = max($min_list);\n        if ($tuple < $max_tuple) {\n            $min_list[array_search($max_tuple, $min_list)] = $tuple;\n        }\n    }\n    return $min_list;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 10], [5, 2], [9, 10]];\n$K = 3;\nprint_r(min_k($test_list, $K));\n",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < $n; $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array('Geeks', 10),\n    array('for', 15),\n    array('Geeks', 20),\n    array('GeeksforGeeks', 30),\n    array('GFG', 50),\n    array('Geeks', 40),\n    array('Geeks', 35),\n    array('Geeks', 45),\n    array('Geeks', 25),\n);\n$K = 3;\n$result = min_k($test_list, $K);\n$expected = array(\n    array('Geeks', 10),\n    array('for', 15),\n    array('Geeks', 20),\n);\nassert(count($result) == $K);\nassert($result == $expected);\n\n$test_list = array(\n    array('Geeks', 10),\n    array('for', 15),\n    array('Geeks', 20),\n    array('GeeksforGeeks', 30),\n    array('GFG', 50),\n    array('Geeks', 40),\n    array('Geeks', 35),\n    array('Geeks', 45),\n    array('Geeks', 25),\n);\n$K = 5;\n$result = min_k($test_list, $K);\n$expected = array(\n    array('Geeks', 10),\n    array('for', 15),\n    array('Geeks', 20),\n    array('Geeks', 25),\n    array('Geeks",
    "    $min_k_list = [];\n    $min_k_list_size = 0;\n    foreach ($test_list as $test_tuple) {\n        if ($min_k_list_size < $K) {\n            $min_k_list[] = $test_tuple;\n            $min_k_list_size++;\n            if ($min_k_list_size == $K) {\n                sort($min_k_list);\n            }\n        } else {\n            if ($test_tuple[1] < $min_k_list[$min_k_list_size - 1][1]) {\n                $min_k_list[$min_k_list_size - 1] = $test_tuple;\n                sort($min_k_list);\n            }\n        }\n    }\n    return $min_k_list;\n}\n\n$test_list = [\n    ['a', 1],\n    ['b', 2],\n    ['c', 3],\n    ['d', 4],\n    ['e', 5],\n    ['f', 6],\n    ['g', 7],\n    ['h', 8],\n    ['i', 9],\n    ['j', 10],\n];\n\n$K = 3;\n\n$result = min_k($test_list, $K);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $result = [];\n    foreach ($test_list as $tuple) {\n        if (count($result) < $K) {\n            $result[] = $tuple;\n        } else {\n            $max_tuple = max($result);\n            if ($tuple < $max_tuple) {\n                $result[array_search($max_tuple, $result)] = $tuple;\n            }\n        }\n    }\n    return $result;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2]];\n$K = 3;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nforeach ($result as $tuple) {\n    echo \"[\" . $tuple[0] . \", \" . $tuple[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2]];\n$K = 4;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nforeach ($result as $tuple) {\n    echo \"[\" . $tuple[0] . \", \" . $tuple[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2]];\n$K = 5;\n$result = min_k($test_list, $K);\necho \"The minimum k records are: \";\nforeach ($result as $tuple) {\n    echo \"[\" . $tuple[0] . \", \" . $tuple[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 0], [0, 9], [5, 2]];\n$K = 6;\n$result = min_",
    "    $n = count($test_list);\n    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    for ($i = $K; $i < $n; $i++) {\n        if ($test_list[$i][0] < $min_k[$K - 1][0]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] - $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 9], [2, 3]];\n$K = 3;\n$result = min_k($test_list, $K);\necho \"The minimum K records are: \";\nforeach ($result as $item) {\n    echo \"(\" . $item[0] . \", \" . $item[1] . \") \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 9], [2, 3]];\n$K = 2;\n$result = min_k($test_list, $K);\necho \"The minimum K records are: \";\nforeach ($result as $item) {\n    echo \"(\" . $item[0] . \", \" . $item[1] . \") \";\n}\necho \"\\n\";\n\n$test_list = [[1, 2], [3, 4], [1, -1], [6, 7], [0, 9], [2, 3]];\n$K = 4;\n$result = min_k($test_list, $K);\necho \"The minimum K records are: \";\nforeach ($result as $item) {\n    echo \"(\" . $item[0] . \", \" . $item[1] . \")",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($e) {\n        return $e[0];\n    }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($e) use ($test_list) {\n        return array_filter($test_list, function($e2) use ($e) {\n            return $e2[0] == $e;\n        });\n    }, $min_k);\n    $min_k = array_map(function($e) {\n        return array_values($e);\n    }, $min_k);\n    $min_k = array_map(function($e) {\n        return array_map(function($e2) {\n            return $e2[1];\n        }, $e);\n    }, $min_k);\n    $min_k = array_map(function($e) {\n        return array_values($e);\n    }, $min_k);\n    $min_k = array_map(function($e) {\n        return implode(',', $e);\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = [\n    [1, 'a'],\n    [1, 'b'],\n    [2, 'c'],\n    [2, 'd'],\n    [2, 'e'],\n    [3, 'f'],\n    [3, 'g'],\n    [4, 'h'],\n    [4, 'i'],\n    [4, 'j'],\n    [4, 'k'],\n    [4, 'l'],\n    [5, 'm'],\n    [5, 'n'],\n    [5, 'o'],\n    [5, 'p'],\n    [5, 'q'],\n    [5, 'r'],\n    [5, 's'],\n    [5, 't'],\n    [5, 'u'],\n    [",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][0] < $min_k[$K-1][0]) {\n            $min_k[$K-1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[0] - $b[0];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 5;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 3;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 1;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'",
    "    $min_k = [];\n    $min_k_index = [];\n    for ($i = 0; $i < $K; $i++) {\n        $min_k[$i] = $test_list[$i][1];\n        $min_k_index[$i] = $i;\n    }\n    $min_k_index = min_heapify($min_k_index, $min_k, $K);\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[0]) {\n            $min_k[0] = $test_list[$i][1];\n            $min_k_index[0] = $i;\n            $min_k_index = min_heapify($min_k_index, $min_k, $K);\n        }\n    }\n    return $min_k_index;\n}\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    foreach ($test_list as $tuple) {\n        if ($tuple[1] < $min_k[$K-1][1]) {\n            $min_k[$K-1] = $tuple;\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(2, 3),\n    array(3, 4),\n    array(4, 5),\n    array(5, 6),\n    array(6, 7),\n    array(7, 8),\n    array(8, 9),\n    array(9, 10),\n    array(10, 11),\n);\n\n$K = 3;\n\n$min_k = min_k($test_list, $K);\n\nprint_r($min_k);\n",
    "    $n = count($test_list);\n    $min_k = array();\n    $min_k_index = array();\n    $min_k_index[0] = 0;\n    $min_k[0] = $test_list[0];\n    for ($i = 1; $i < $n; $i++) {\n        if ($test_list[$i] < $min_k[0]) {\n            $min_k[0] = $test_list[$i];\n            $min_k_index[0] = $i;\n        }\n    }\n    for ($i = 1; $i < $K; $i++) {\n        $min_k[$i] = $test_list[$i];\n        $min_k_index[$i] = $i;\n        for ($j = 0; $j < $i; $j++) {\n            if ($min_k[$j] > $min_k[$i]) {\n                $temp = $min_k[$j];\n                $min_k[$j] = $min_k[$i];\n                $min_k[$i] = $temp;\n                $temp = $min_k_index[$j];\n                $min_k_index[$j] = $min_k_index[$i];\n                $min_k_index[$i] = $temp;\n            }\n        }\n    }\n    for ($i = $K; $i < $n; $i++) {\n        if ($test_list[$i] < $min_k[$K - 1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            $min_k_index[$K - 1] = $i;\n            for ($j = $K - 1; $j > 0; $j--) {\n                if ($min_k[$j] < $min_k[$j - 1]) {\n                    $temp = $min_k[$j];\n                    $min_k[$j] = $min_k[$j - 1];\n                    $min_k[$j - 1] =",
    "    $min_k = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_k) < $K) {\n            $min_k[] = $tuple;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple < $max_tuple) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, -1],\n    [6, 10],\n    [5, 2],\n    [3, 9],\n    [1, 6],\n    [5, 3],\n    [6, 8],\n    [7, 10],\n    [2, 4],\n    [8, 9],\n];\n$K = 4;\n\n$result = min_k($test_list, $K);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $min_list = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_list) < $K) {\n            $min_list[] = $tuple;\n        } else {\n            $max_tuple = max($min_list);\n            if ($tuple < $max_tuple) {\n                $min_list[array_search($max_tuple, $min_list)] = $tuple;\n            }\n        }\n    }\n    return $min_list;\n}\n\n$test_list = [\n    [1, 2],\n    [3, 4],\n    [1, -1],\n    [6, 10],\n    [5, 2],\n    [3, 9],\n    [1, 7],\n    [8, 2],\n    [9, 3],\n    [2, 5],\n    [3, 6],\n    [1, 3],\n    [5, 3],\n    [7, 4],\n    [10, 2],\n    [6, 9],\n    [1, 2],\n    [3, 4],\n    [1, -1],\n    [6, 10],\n    [5, 2],\n    [3, 9],\n    [1, 7],\n    [8, 2],\n    [9, 3],\n    [2, 5],\n    [3, 6],\n    [1, 3],\n    [5, 3],\n    [7, 4],\n    [10, 2],\n    [6, 9],\n];\n\n$K = 5;\n\n$result = min_k($test_list, $K);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $min_k = [];\n    foreach ($test_list as $tuple) {\n        if (count($min_k) < $K) {\n            $min_k[] = $tuple;\n        } else {\n            $max_tuple = max($min_k);\n            if ($tuple < $max_tuple) {\n                $min_k[array_search($max_tuple, $min_k)] = $tuple;\n            }\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n    [4, 5, 6],\n    [5, 6, 7],\n    [6, 7, 8],\n    [7, 8, 9],\n    [8, 9, 10],\n    [9, 10, 11],\n    [10, 11, 12],\n    [11, 12, 13],\n    [12, 13, 14],\n    [13, 14, 15],\n    [14, 15, 16],\n    [15, 16, 17],\n    [16, 17, 18],\n    [17, 18, 19],\n    [18, 19, 20],\n    [19, 20, 21],\n    [20, 21, 22],\n    [21, 22, 23],\n    [22, 23, 24],\n    [23, 24, 25],\n    [24, 25, 26],\n    [25, 26, 27],\n    [26, 27, 28],\n    [27, 28, 29],\n    [28, 29, 30],\n    [29, 30, 31],\n    [30, 31, 32],\n    [31, 32, 33],\n    [32, 33, 34],\n    [33, 34, 35],\n    [34, 35, 36],\n    [35, 36, 37],\n    [36, 37, 38],\n    [37, 38, 39],\n    [38, 39, 40],\n    [39, 40, 41],\n    [40, 41, 42],\n    [41, 42, 43],\n    [42, 43, 44",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($x) { return $x[0]; }, $min_k);\n    $min_k = array_unique($min_k);\n    $min_k = array_values($min_k);\n    $min_k = array_map(function($x) use ($test_list) {\n        $y = array_filter($test_list, function($z) use ($x) {\n            return $z[0] == $x;\n        });\n        return $y[0];\n    }, $min_k);\n    return $min_k;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(2, 3),\n    array(3, 4),\n    array(4, 5),\n    array(5, 6),\n    array(6, 7),\n    array(7, 8),\n    array(8, 9),\n    array(9, 10),\n    array(10, 11),\n    array(11, 12),\n    array(12, 13),\n    array(13, 14),\n    array(14, 15),\n    array(15, 16),\n    array(16, 17),\n    array(17, 18),\n    array(18, 19),\n    array(19, 20),\n    array(20, 21),\n    array(21, 22),\n    array(22, 23),\n    array(23, 24),\n    array(24, 25),\n    array(25, 26),\n    array(26, 27),\n    array(27, 28),\n    array(28, 29),\n    array(29, 30),\n    array(30, 31),\n    array(31, 32),\n    array(32, 33),\n    array(33, 34),\n    array(34, 35),\n    array(35, 36),\n    array(36, 37),\n    array(37, 38),\n    array(38, 39),\n    array(39, 40),\n    array(40, 41),\n    array(41, 42),\n    array(42, 43),\n    array(",
    "    $min_k = [];\n    $min_k_index = [];\n    $min_k_index_count = 0;\n    $min_k_count = 0;\n    $min_k_value = PHP_INT_MAX;\n    $min_k_index_value = PHP_INT_MAX;\n    $test_list_count = count($test_list);\n    for ($i = 0; $i < $test_list_count; $i++) {\n        if ($test_list[$i][1] < $min_k_value) {\n            $min_k_value = $test_list[$i][1];\n            $min_k_index_value = $test_list[$i][0];\n        }\n    }\n    $min_k[$min_k_count] = $min_k_value;\n    $min_k_index[$min_k_index_count] = $min_k_index_value;\n    $min_k_count++;\n    $min_k_index_count++;\n    $K--;\n    while ($K > 0) {\n        $min_k_value = PHP_INT_MAX;\n        $min_k_index_value = PHP_INT_MAX;\n        for ($i = 0; $i < $test_list_count; $i++) {\n            if ($test_list[$i][1] < $min_k_value && !in_array($test_list[$i][0], $min_k_index)) {\n                $min_k_value = $test_list[$i][1];\n                $min_k_index_value = $test_list[$i][0];\n            }\n        }\n        $min_k[$min_k_count] = $min_k_value;\n        $min_k_index[$min_k_index_count] = $min_k_index_value;\n        $min_k_count++;\n        $min_k_index_count++;\n        $K--;\n    }\n    return $min_k;\n}\n\n$test_list = [\n    [1, 3],\n",
    "    $min_k = [];\n    $min_k_set = [];\n    $min_k_set_size = 0;\n    foreach ($test_list as $test_tuple) {\n        if ($min_k_set_size < $K) {\n            $min_k_set[$test_tuple[0]] = $test_tuple[1];\n            $min_k_set_size++;\n        } else {\n            $max_key = max(array_keys($min_k_set));\n            if ($test_tuple[1] < $min_k_set[$max_key]) {\n                unset($min_k_set[$max_key]);\n                $min_k_set[$test_tuple[0]] = $test_tuple[1];\n            }\n        }\n    }\n    foreach ($min_k_set as $key => $value) {\n        $min_k[] = [$key, $value];\n    }\n    return $min_k;\n}\n\n$test_list = [\n    ['a', 1],\n    ['b', 2],\n    ['c', 3],\n    ['d', 4],\n    ['e', 5],\n    ['f', 6],\n    ['g', 7],\n    ['h', 8],\n    ['i', 9],\n    ['j', 10],\n    ['k', 11],\n    ['l', 12],\n    ['m', 13],\n    ['n', 14],\n    ['o', 15],\n    ['p', 16],\n    ['q', 17],\n    ['r', 18],\n    ['s', 19],\n    ['t', 20],\n    ['u', 21],\n    ['v', 22],\n    ['w', 23],\n    ['x', 24],\n    ['y', 25],\n    ['z', 26],\n];\n\n$K = 5;\n\n$min_k = min_k($test_list, $K);\n\nprint_r($min_k);\n",
    "    $min_k = array_slice($test_list, 0, $K);\n    usort($min_k, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    for ($i = $K; $i < count($test_list); $i++) {\n        if ($test_list[$i][1] < $min_k[$K - 1][1]) {\n            $min_k[$K - 1] = $test_list[$i];\n            usort($min_k, function($a, $b) {\n                return $a[1] - $b[1];\n            });\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 2;\n$result = min_k($test_list, $K);\necho \"Minimum K records from tuple list are: \";\nforeach ($result as $item) {\n    echo \"['\" . $item[0] . \"', \" . $item[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 1;\n$result = min_k($test_list, $K);\necho \"Minimum K records from tuple list are: \";\nforeach ($result as $item) {\n    echo \"['\" . $item[0] . \"', \" . $item[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K = 3;\n$result = min_k($test_list, $K);\necho \"Minimum K records from tuple list are: \";\nforeach ($result as $item) {\n    echo \"['\" . $item[0] . \"', \" . $item[1] . \"] \";\n}\necho \"\\n\";\n\n$test_list = [['Geeks', 10], ['for', 15], ['Geeks', 20]];\n$K",
    "    $min_k = array_slice($test_list, 0, $K);\n    $min_k = array_map(function($item) {\n        return $item[0];\n    }, $min_k);\n    $min_k = array_combine(range(1, count($min_k)), $min_k);\n    $min_k = array_map(function($item) {\n        return [$item, $item];\n    }, $min_k);\n    $min_k = array_values($min_k);\n    for ($i = $K; $i < count($test_list); $i++) {\n        $max = max($min_k);\n        if ($test_list[$i][0] < $max[0]) {\n            $min_k[array_search($max, $min_k)] = $test_list[$i];\n        }\n    }\n    return $min_k;\n}\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 3;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 5;\nprint_r(min_k($test_list, $K));\n\n$test_list = [[1, 'a'], [2, 'b'], [3, 'c'], [4, 'd'], [5, 'e'], [6, 'f'], [7, 'g'], [8, 'h'], [9, 'i'], [10, 'j']];\n$K = 8;\nprint_r(min_"
  ]
}