{
  "name": "mbpp_754_extract_index_list",
  "language": "php",
  "prompt": "<?php\n// We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nfunction extract_index_list($l1, $l2, $l3) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return extract_index_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 3, 4, 5, 6, 7), array(0, 1, 2, 3, 4, 5, 7), array(0, 1, 2, 3, 4, 5, 7)) !== array(1, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 4, 5, 6, 7), array(0, 1, 2, 3, 4, 6, 5), array(0, 1, 2, 3, 4, 6, 7)) !== array(1, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 4, 6, 5, 6), array(0, 1, 2, 3, 4, 5, 7), array(0, 1, 2, 3, 4, 5, 7)) !== array(1, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 6, 6, 6), array(0, 1, 2, 3, 4, 5, 7), array(0, 1, 2, 3, 4, 5, 7)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = array();\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = array(1, 2, 3, 4, 5);\n$l2 = array(2, 3, 4, 5, 6);\n$l3 = array(3, 4, 5, 6, 7);\n\nprint_r(extract_index_list($l1, $l2, $l3));\n",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l1[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [1, 2, 3, 4, 5];\n$l3 = [1, 2, 3, 4, 5];\n\nprint_r(extract_index_list($l1, $l2, $l3));",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$l3 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nprint_r(extract_index_list($l1, $l2, $l3));\n",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [1, 2, 3, 4, 5];\n$l3 = [1, 2, 3, 4, 5];\n\nprint_r(extract_index_list($l1, $l2, $l3));\n",
    "    $result = [];\n    $length = count($l1);\n    for ($i = 0; $i < $length; $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$l3 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nprint_r(extract_index_list($l1, $l2, $l3));\n",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l1[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [1, 2, 3, 4, 5];\n$l3 = [1, 2, 3, 4, 5];\n\nprint_r(extract_index_list($l1, $l2, $l3));",
    "\t$common_elements = array();\n\tfor ($i = 0; $i < count($l1); $i++) {\n\t\tif ($l1[$i] == $l2[$i] && $l1[$i] == $l3[$i]) {\n\t\t\t$common_elements[] = $l1[$i];\n\t\t}\n\t}\n\treturn $common_elements;\n}\n\n$l1 = array(1,2,3,4,5);\n$l2 = array(1,2,3,4,5);\n$l3 = array(1,2,3,4,5);\n\nprint_r(extract_index_list($l1, $l2, $l3));",
    "\t$result = array();\n\tfor ($i = 0; $i < count($l1); $i++) {\n\t\tif ($l1[$i] == $l2[$i] && $l1[$i] == $l3[$i]) {\n\t\t\t$result[] = $l1[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\n$l1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$l2 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$l3 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n\nprint_r(extract_index_list($l1, $l2, $l3));",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [2, 3, 4, 5, 6];\n$l3 = [3, 4, 5, 6, 7];\n\nprint_r(extract_index_list($l1, $l2, $l3));",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [2, 3, 4, 5, 6];\n$l3 = [3, 4, 5, 6, 7];\n\nprint_r(extract_index_list($l1, $l2, $l3));",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5, 6];\n$l2 = [2, 3, 4, 5, 6, 7];\n$l3 = [3, 4, 5, 6, 7, 8];\n\nprint_r(extract_index_list($l1, $l2, $l3));",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [2, 3, 4, 5, 6];\n$l3 = [3, 4, 5, 6, 7];\n\nprint_r(extract_index_list($l1, $l2, $l3));",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [1, 2, 3, 4, 5];\n$l3 = [1, 2, 3, 4, 5];\n\nprint_r(extract_index_list($l1, $l2, $l3));",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [2, 3, 4, 5, 6];\n$l3 = [3, 4, 5, 6, 7];\n\nprint_r(extract_index_list($l1, $l2, $l3));\n",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [1, 2, 3, 4, 5];\n$l3 = [1, 2, 3, 4, 5];\n\nprint_r(extract_index_list($l1, $l2, $l3));",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l1[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [1, 2, 3, 4, 5];\n$l3 = [1, 2, 3, 4, 5];\n\nprint_r(extract_index_list($l1, $l2, $l3));",
    "    $result = [];\n    $l1_size = count($l1);\n    $l2_size = count($l2);\n    $l3_size = count($l3);\n    $min_size = min($l1_size, $l2_size, $l3_size);\n    for ($i = 0; $i < $min_size; $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$l3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\necho implode(', ', extract_index_list($l1, $l2, $l3));\n",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [2, 3, 4, 5, 6];\n$l3 = [3, 4, 5, 6, 7];\n\nprint_r(extract_index_list($l1, $l2, $l3));",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [1, 2, 3, 4, 5];\n$l3 = [1, 2, 3, 4, 5];\n\nprint_r(extract_index_list($l1, $l2, $l3));\n",
    "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if ($l1[$i] == $l2[$i] && $l2[$i] == $l3[$i]) {\n            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n$l1 = [1, 2, 3, 4, 5];\n$l2 = [1, 2, 3, 4, 5];\n$l3 = [1, 2, 3, 4, 5];\n\nprint_r(extract_index_list($l1, $l2, $l3));"
  ]
}