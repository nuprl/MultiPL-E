{
  "name": "mbpp_292_find",
  "language": "php",
  "prompt": "<?php\n// Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find($n, $m) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return find(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10, 3) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 5) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $quotient = floor($n/$m);\n    return $quotient;\n}\n\necho find(5, 2);",
    "    return floor($n/$m);\n}\necho find(5, 2);",
    "    return floor($n / $m);\n}\n\necho find(5, 2);",
    "    return floor($n / $m);\n}\n\necho find(7, 2);",
    "    return floor($n / $m);\n}\n\necho find(5, 2);",
    "    return floor($n / $m);\n}\n\necho find(5, 2);",
    "    return floor($n/$m);\n}\necho find(5, 2);",
    "    return floor($n / $m);\n}\n\necho find(5, 2);",
    "    return floor($n / $m);\n}\n\necho find(5, 2);",
    "    return floor($n/$m);\n}\necho find(5, 2);",
    "    $q = floor($n / $m);\n    return $q;\n}\n\necho find(5, 2);",
    "    $quotient = floor($n/$m);\n    return $quotient;\n}\n\n$n = 10;\n$m = 3;\necho find($n, $m);",
    "    $q = floor($n / $m);\n    return $q;\n}\n\n$n = 10;\n$m = 3;\n$result = find($n, $m);\necho \"Quotient of {$n} and {$m} is {$result}\";",
    "    $quotient = floor($n / $m);\n    return $quotient;\n}\n\necho find(5, 2);",
    "    $quotient = floor($n / $m);\n    return $quotient;\n}\n\necho find(5, 2);",
    "    $quotient = floor($n/$m);\n    return $quotient;\n}\n\n$n = 10;\n$m = 3;\necho find($n, $m);",
    "    return floor($n/$m);\n}\n\n$n = 10;\n$m = 3;\necho find($n, $m);",
    "    return floor($n / $m);\n}\n\necho find(5, 2);\necho \"\\n\";\necho find(5, 3);\necho \"\\n\";\necho find(5, 4);\necho \"\\n\";\necho find(5, 5);\necho \"\\n\";\necho find(5, 6);\necho \"\\n\";\necho find(5, 7);\necho \"\\n\";\necho find(5, 8);\necho \"\\n\";\necho find(5, 9);\necho \"\\n\";\necho find(5, 10);\necho \"\\n\";\necho find(5, 11);\necho \"\\n\";\necho find(5, 12);\necho \"\\n\";\necho find(5, 13);\necho \"\\n\";\necho find(5, 14);\necho \"\\n\";\necho find(5, 15);\necho \"\\n\";\necho find(5, 16);\necho \"\\n\";\necho find(5, 17);\necho \"\\n\";\necho find(5, 18);\necho \"\\n\";\necho find(5, 19);\necho \"\\n\";\necho find(5, 20);\necho \"\\n\";\necho find(5, 21);\necho \"\\n\";\necho find(5, 22);\necho \"\\n\";\necho find(5, 23);\necho \"\\n\";\necho find(5, 24);\necho \"\\n\";\necho find(5, 25);\necho \"\\n\";\necho find(5, 26);\necho \"\\n\";\necho find(5, 27);\necho \"\\n\";\necho find(5, 28);\necho \"\\n\";\necho find(5, 29);\necho \"\\n\";\necho find(5, 30);\necho \"\\n\";\necho find(5, 31);\necho \"\\n\";\necho find(5, 32);\necho \"\\n\";\necho find(5, 33);\necho \"\\n\";\necho find(5, 34);\necho \"\\n\";\necho find(5, 35);\necho \"\\n\";\necho find(5, 36);\necho \"\\n\";\necho find(5, 37);\necho \"\\n\";\necho find(5, 38);\necho \"\\n\";\necho find(5, 39);\necho \"\\n\";\necho find(5",
    "    return floor($n / $m);\n}\n\necho find(5, 2);",
    "    return (int)($n/$m);\n}\n\necho find(5, 2);"
  ]
}