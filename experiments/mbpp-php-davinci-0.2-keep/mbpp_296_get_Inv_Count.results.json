{
  "name": "mbpp_296_get_Inv_Count",
  "language": "php",
  "prompt": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    $n = count($arr);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho(get_Inv_Count($arr));\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n\t$inv_count = 0;\n\tfor($i = 0; $i < count($arr); $i++) {\n\t\tfor($j = $i + 1; $j < count($arr); $j++) {\n\t\t\tif($arr[$i] > $arr[$j]) {\n\t\t\t\t$inv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n\t$inv_count = 0;\n\tfor ($i = 0; $i < count($arr) - 1; $i++) {\n\t\tfor ($j = $i + 1; $j < count($arr); $j++) {\n\t\t\tif ($arr[$i] > $arr[$j]) {\n\t\t\t\t$inv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $count = 0;\n    for ($i=0; $i < count($arr); $i++) { \n        for ($j=$i+1; $j < count($arr); $j++) { \n            if ($arr[$i] > $arr[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\n\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = [1, 20, 6, 4, 5];\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    $n = count($arr);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    $n = count($arr);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\n$result = get_Inv_Count($arr);\necho $result;\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n\t$inv_count = 0;\n\tfor ($i = 0; $i < count($arr) - 1; $i++) {\n\t\tfor ($j = $i + 1; $j < count($arr); $j++) {\n\t\t\tif ($arr[$i] > $arr[$j]) {\n\t\t\t\t$inv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n\t$inv_count = 0;\n\tfor($i = 0; $i < count($arr); $i++) {\n\t\tfor($j = $i + 1; $j < count($arr); $j++) {\n\t\t\tif($arr[$i] > $arr[$j]) {\n\t\t\t\t$inv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = [1, 20, 6, 4, 5];\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(8, 4, 2, 1);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    $n = count($arr);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\n\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(2, 4, 1, 3, 5);\necho get_Inv_Count($arr);\n\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    $n = count($arr);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = [1, 20, 6, 4, 5];\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    $n = count($arr);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n\t$count = 0;\n\tfor ($i=0; $i < count($arr); $i++) { \n\t\tfor ($j=$i+1; $j < count($arr); $j++) { \n\t\t\tif ($arr[$i] > $arr[$j]) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j])\n                $inv_count++;\n        }\n    }\n    return $inv_count;\n}\n\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n\t$count = 0;\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tfor ($j = $i + 1; $j < count($arr); $j++) {\n\t\t\tif ($arr[$i] > $arr[$j]) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $count = 0;\n    for($i = 0; $i < count($arr); $i++) {\n        for($j = $i + 1; $j < count($arr); $j++) {\n            if($arr[$i] > $arr[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n\t$inv_count = 0;\n\tfor ($i = 0; $i < count($arr) - 1; $i++) {\n\t\tfor ($j = $i + 1; $j < count($arr); $j++) {\n\t\t\tif ($arr[$i] > $arr[$j]) {\n\t\t\t\t$inv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(2, 4, 1, 3, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    $n = count($arr);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = [1, 20, 6, 4, 5];\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124101,
      "stdout": "Number of inversions are 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n    $inv_count = 0;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}\n\n$arr = array(1, 20, 6, 4, 5);\necho \"Number of inversions are: \" . get_Inv_Count($arr);\nfunction candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517677,
      "stdout": "Number of inversions are: 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}