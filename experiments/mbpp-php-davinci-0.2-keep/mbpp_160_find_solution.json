{
  "name": "mbpp_160_find_solution",
  "language": "php",
  "prompt": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution($a, $b, $n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        if (($n - ($x * $a)) % $b == 0) {\n            $y = ($n - ($x * $a)) / $b;\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n",
    "    for ($x = 0; $x * $a <= $n; $x++) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n",
    "    if ($a == 0) {\n        if ($b == 0) {\n            return null;\n        } else {\n            return array(0, $n / $b);\n        }\n    } else {\n        $x = $n / $a;\n        $y = ($n - $a * $x) / $b;\n        if ($y < 0) {\n            return null;\n        } else {\n            return array($x, $y);\n        }\n    }\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n",
    "    if ($a == 0) {\n        if ($n == 0) {\n            return [0, 0];\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0) {\n        return null;\n    }\n    return [$x, $y];\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n",
    "  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y == (int)$y) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n",
    "    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y == (int) $y) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n",
    "    for ($x=0; $x<=$n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return [$x, $y];\n            }\n        }\n    }\n    return null;\n}\n\nvar_dump(find_solution(3, 5, 10));\nvar_dump(find_solution(3, 5, 11));",
    "    for ($x = 0; $x * $a <= $n; $x++) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n",
    "  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y == (int)$y) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return NULL;\n}\n\n$a = 3;\n$b = 5;\n$n = 16;\n\n$solution = find_solution($a, $b, $n);\nif ($solution == NULL) {\n  echo \"No solution found.\\n\";\n} else {\n  echo \"x = $solution[0], y = $solution[1]\\n\";\n}",
    "  for ($x = 0; $x <= $n; $x++) {\n    for ($y = 0; $y <= $n; $y++) {\n      if ($a * $x + $b * $y == $n) {\n        return array($x, $y);\n      }\n    }\n  }\n  return null;\n}\n\n$a = 3;\n$b = 5;\n$n = 7;\n\n$solution = find_solution($a, $b, $n);\n\nif ($solution != null) {\n  echo \"x = $solution[0], y = $solution[1]\";\n} else {\n  echo \"No solution\";\n}",
    "    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y == (int)$y) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n"
  ]
}