{
  "name": "mbpp_390_add_string",
  "language": "php",
  "prompt": "<?php\n// Write a function to apply a given format string to all of the elements in a list.\nfunction add_string($list_, $string) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return add_string(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4), \"temp{0}\") !== array(\"temp1\", \"temp2\", \"temp3\", \"temp4\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), \"python{0}\") !== array(\"pythona\", \"pythonb\", \"pythonc\", \"pythond\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8), \"string{0}\") !== array(\"string5\", \"string6\", \"string7\", \"string8\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c', 'd'];\n$new_list = add_string($list, '*');\nprint_r($new_list);\n",
    "    $new_list = array();\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = array(\"a\", \"b\", \"c\");\n$new_list = add_string($list, \"d\");\nprint_r($new_list);",
    "\t$list = array();\n\tforeach ($list_ as $value) {\n\t\t$list[] = $string . $value;\n\t}\n\treturn $list;\n}\n\n$list = array(1, 2, 3, 4, 5);\n$list = add_string($list, \"a\");\nprint_r($list);\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, '*');\nprint_r($new_list);\n",
    "    $result = [];\n    foreach ($list_ as $item) {\n        $result[] = $string . $item;\n    }\n    return $result;\n}\n\n$list_ = ['a', 'b', 'c'];\n$string = '-';\n$result = add_string($list_, $string);\nprint_r($result);\n",
    "  $list_ = array_map(function($item) use ($string) {\n    return $string . $item;\n  }, $list_);\n  return $list_;\n}\n\n$list_ = array(1, 2, 3, 4, 5);\n$string = '$';\n\nprint_r(add_string($list_, $string));",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, '*');\nprint_r($new_list);\n",
    "\t$new_list = array();\n\tforeach ($list_ as $item) {\n\t\tarray_push($new_list, $string . $item);\n\t}\n\treturn $new_list;\n}\n\n$list = array(\"a\", \"b\", \"c\");\n$new_list = add_string($list, \"x\");\nprint_r($new_list);\n",
    "    foreach ($list_ as $key => $value) {\n        $list_[$key] = $string . $value;\n    }\n    return $list_;\n}\n\n$list_ = array(\"a\", \"b\", \"c\");\n$string = \"d\";\n$list_ = add_string($list_, $string);\nprint_r($list_);\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$format = '%s%s';\n$new_list = add_string($list, $format);\nprint_r($new_list);\n",
    "    $result = [];\n    foreach ($list_ as $item) {\n        $result[] = $string . $item;\n    }\n    return $result;\n}\n\n$list = [1, 2, 3, 4];\n$result = add_string($list, 'a');\nprint_r($result);\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['cat', 'dog', 'fish'];\n$new_list = add_string($list, 'I love ');\nprint_r($new_list);\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = [1, 2, 3, 4, 5];\n$new_list = add_string($list, 'a');\nprint_r($new_list);\n",
    "    $new_list = array();\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = array(1, 2, 3, 4, 5);\n$list = add_string($list, '$');\nprint_r($list);\n",
    "    $list_ = array_map(function($item) use ($string) {\n        return $item . $string;\n    }, $list_);\n    return $list_;\n}\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, 'd');\nprint_r($new_list);\n",
    "\t$new_list = array();\n\tforeach ($list_ as $item) {\n\t\tarray_push($new_list, $string . $item);\n\t}\n\treturn $new_list;\n}\n\n$list = array(\"a\", \"b\", \"c\");\n$new_list = add_string($list, \"d\");\nprint_r($new_list);",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = [\"a\", \"b\", \"c\"];\n$new_list = add_string($list, \"!\");\nprint_r($new_list);\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, '*');\nprint_r($new_list);\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n"
  ]
}