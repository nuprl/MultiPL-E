{
  "name": "mbpp_279_is_num_decagonal",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the nth decagonal number.\nfunction is_num_decagonal($n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return is_num_decagonal(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 27) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 175) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 370) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "  $num = $n * (3 * $n - 2);\n  $num_sqrt = sqrt($num);\n  if (floor($num_sqrt) == $num_sqrt) {\n    return true;\n  }\n  return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int) $x;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    if ($num % 2 == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == intval($x);\n}\n",
    "  $num = $n * (3 * $n - 2);\n  $num_sqrt = sqrt($num);\n  return $num_sqrt == floor($num_sqrt);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $root = sqrt($num);\n    return floor($root) == $root;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n\treturn $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num_sqrt = sqrt($num);\n\tif (floor($num_sqrt) == $num_sqrt) {\n\t\t$num_sqrt = (int)$num_sqrt;\n\t\tif ($num_sqrt % 6 == 5) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n",
    "  $n = (int)$n;\n  $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n  return $x == (int)$x;\n}\n"
  ]
}