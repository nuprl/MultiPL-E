{
  "name": "mbpp_279_is_num_decagonal",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the nth decagonal number.\nfunction is_num_decagonal($n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return is_num_decagonal(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 27) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 175) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 370) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "  $num = $n * (3 * $n - 2);\n  $num_sqrt = sqrt($num);\n  if (floor($num_sqrt) == $num_sqrt) {\n    return true;\n  }\n  return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int) $x;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    if ($num % 2 == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == intval($x);\n}\n",
    "  $num = $n * (3 * $n - 2);\n  $num_sqrt = sqrt($num);\n  return $num_sqrt == floor($num_sqrt);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $root = sqrt($num);\n    return floor($root) == $root;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n\treturn $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num_sqrt = sqrt($num);\n\tif (floor($num_sqrt) == $num_sqrt) {\n\t\t$num_sqrt = (int)$num_sqrt;\n\t\tif ($num_sqrt % 6 == 5) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n",
    "  $n = (int)$n;\n  $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n  return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $i = 1;\n    while (true) {\n        $num = $i * (3 * $i - 1) / 2;\n        if ($num == $n) {\n            return true;\n        } elseif ($num > $n) {\n            return false;\n        }\n        $i++;\n    }\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int) $x;\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "\t$test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $test == round($test);\n}\n",
    "    $test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $test == round($test);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if (is_int($num_sqrt) && $num_sqrt % 6 == 5) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 1) / 2;\n    $num_sqrt = sqrt($num);\n    $num_sqrt_int = floor($num_sqrt);\n    if ($num_sqrt == $num_sqrt_int) {\n        $num_sqrt_int = ($num_sqrt_int + 1) / 3;\n        $num_sqrt_int_int = floor($num_sqrt_int);\n        if ($num_sqrt_int == $num_sqrt_int_int) {\n            return true;\n        }\n    }\n    return false;\n}\n",
    "    $test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $test == round($test);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_floor = floor($num_sqrt);\n    if ($num_floor * ($num_floor + 1) == $num) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    $num = $num + 1;\n    $num = $num / 3;\n    if (is_int($num)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) + 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int) $x;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num_sqrt = sqrt($num);\n\t$num_sqrt_int = intval($num_sqrt);\n\tif ($num_sqrt == $num_sqrt_int) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n",
    "    $test = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return ($test == round($test));\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $test == round($test);\n}\n",
    "    $root = sqrt(1 + 4 * 2 * $n);\n    return $root == floor($root) && ($root - 1) % 4 == 0;\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 1) / 2;\n    $num_sqrt = sqrt($num);\n    return $num_sqrt == floor($num_sqrt);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 1) / 2;\n    $num_sqrt = sqrt($num);\n    $num_sqrt_int = intval($num_sqrt);\n    if ($num_sqrt_int * $num_sqrt_int == $num) {\n        $num_sqrt_int_plus_1 = $num_sqrt_int + 1;\n        if ($num_sqrt_int_plus_1 % 3 == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if (floor($num_sqrt) == $num_sqrt) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == (int)$x;\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if (floor($num_sqrt) == $num_sqrt) {\n        return true;\n    }\n    return false;\n}\n",
    "    $i = 1;\n    $decagonal = 1;\n    while ($decagonal < $n) {\n        $i++;\n        $decagonal = $i * (3 * $i - 1) / 2;\n    }\n    return $decagonal == $n;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num /= 2;\n\treturn is_int($num);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int) $x;\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "  $nth_decagonal = (3 * $n * $n - $n) / 2;\n  return $nth_decagonal;\n}\n\necho is_num_decagonal(5);\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "    $n = (int) $n;\n    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int) $x;\n}\n",
    "    $m = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $m == floor($m);\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == (int) $x;\n}\n",
    "  $num = $n * (3 * $n - 2);\n  $num_sqrt = sqrt($num);\n  $num_sqrt_int = intval($num_sqrt);\n  if ($num_sqrt == $num_sqrt_int) {\n    return true;\n  } else {\n    return false;\n  }\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "  $num = $n * (3 * $n - 2);\n  $root = sqrt($num);\n  if (floor($root) == $root) {\n    return true;\n  }\n  return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_int = intval($num_sqrt);\n    if ($num_sqrt_int * $num_sqrt_int == $num) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        $num_sqrt = floor($num_sqrt);\n        if (($num_sqrt + 1) % 6 == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == round($x);\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num_sqrt = sqrt($num);\n\tif ($num_sqrt == floor($num_sqrt)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_floor = floor($num_sqrt);\n    if ($num_floor * $num_floor == $num) {\n        return true;\n    }\n    return false;\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == round($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num /= 2;\n\treturn is_int($num);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) + 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_int = intval($num_sqrt);\n    if ($num_sqrt == $num_sqrt_int && $num_sqrt_int % 10 == 3) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == floor($x);\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return floor($num) == $num;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 1) / 2;\n    $num_sqrt = sqrt($num);\n    $num_sqrt_int = (int)$num_sqrt;\n    if ($num_sqrt_int == $num_sqrt) {\n        $num_sqrt_int_plus_one = $num_sqrt_int + 1;\n        if ($num_sqrt_int_plus_one % 3 == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == (int)$x;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    return $num;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_floor = floor($num_sqrt);\n    if ($num_sqrt_floor * ($num_sqrt_floor + 1) == $num) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if (is_int($num_sqrt) && $num_sqrt % 6 == 5) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $root = sqrt($num);\n    return $root == floor($root);\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    if ($num % 2 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 1) / 2;\n    $root = sqrt($num);\n    return floor($root) * ceil($root) == $num;\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "  $num = $n * (3 * $n - 2);\n  $num_sqrt = sqrt($num);\n  $num_sqrt_int = intval($num_sqrt);\n  if ($num_sqrt == $num_sqrt_int) {\n    if ($num_sqrt_int % 6 == 5) {\n      return true;\n    }\n  }\n  return false;\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num_sqrt = sqrt($num);\n\tif (floor($num_sqrt) == $num_sqrt) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_int = floor($num_sqrt);\n    if ($num_sqrt_int * $num_sqrt_int == $num) {\n        return true;\n    }\n    return false;\n}\n",
    "    $test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $test == round($test);\n}\n",
    "  $num = $n * (3 * $n - 2);\n  $num_sqrt = sqrt($num);\n  if ($num_sqrt == floor($num_sqrt)) {\n    return true;\n  }\n  return false;\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == (int)$x;\n}\n",
    "  $n = (int)$n;\n  $x = (sqrt(1 + 4 * 3 * 2 * ($n * 2)) - 1) / 6;\n  return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $root = sqrt($num);\n    if ($root == floor($root)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if (is_int($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if (floor($num_sqrt) == $num_sqrt) {\n        return true;\n    }\n    return false;\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    $num = $num + 1;\n    $num = $num / 3;\n    if (is_int($num)) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $num == floor($num);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == floor($x);\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num_sqrt = sqrt($num);\n\tif ($num_sqrt == floor($num_sqrt)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n",
    "    $test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $test == floor($test);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if (floor($num_sqrt) == $num_sqrt) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $n_decagonal = 0;\n    $i = 1;\n    while ($n_decagonal < $n) {\n        $n_decagonal = $i * (3 * $i - 1) / 2;\n        $i++;\n    }\n    if ($n_decagonal == $n) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == round($x);\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_floor = floor($num_sqrt);\n    if ($num_sqrt == $num_sqrt_floor) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "  $root = sqrt(1 + 4 * 2 * $n);\n  return $root == floor($root) && ($root - 1) % 4 == 0;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "  $num = $n * (3 * $n - 2);\n  $num_sqrt = sqrt($num);\n  return (floor($num_sqrt) == $num_sqrt);\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    $num = $num + 1;\n    $num = $num / 3;\n    if (is_int($num)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_root = sqrt($num);\n    if ($num_root == floor($num_root)) {\n        return true;\n    }\n    return false;\n}\n",
    "  $num = $n * (3 * $n - 2);\n  $num_sqrt = sqrt($num);\n  if ($num_sqrt == floor($num_sqrt)) {\n    return true;\n  }\n  return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_int = intval($num_sqrt);\n    if ($num_sqrt == $num_sqrt_int) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $n == floor($n);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    if (is_int($num)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    return is_int($num);\n}\n",
    "    $x = (1 + sqrt(1 + 4 * 2 * $n)) / 2;\n    return $x == floor($x);\n}\n",
    "\t$n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $n == floor($n);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    if ($num == floor($num)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_floor = floor($num_sqrt);\n    if ($num_sqrt_floor * ($num_sqrt_floor + 1) == $num) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 1) / 2;\n    $n = (sqrt(1 + 24 * $num) + 1) / 6;\n    return $n == (int)$n;\n}\n",
    "    $num = 1;\n    $i = 1;\n    while ($num < $n) {\n        $i++;\n        $num = $i * (3 * $i - 1) / 2;\n    }\n    if ($num == $n) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    if (is_int($num)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    $num = $num + 1;\n    $num = $num / 3;\n    if (is_int($num)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    $num = $num + 1;\n    $num = $num / 3;\n    if (is_int($num)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    if ($num == floor($num)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return ($test == round($test)) ? true : false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$n = (int)$n;\n\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == (int)$x;\n}\n"
  ]
}