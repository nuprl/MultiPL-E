{
  "name": "mbpp_272_rear_extract",
  "language": "php",
  "prompt": "<?php\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract($test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return rear_extract(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, \"Rash\", 21), array(2, \"Varsha\", 20), array(3, \"Kil\", 19))) !== array(21, 20, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, \"Sai\", 36), array(2, \"Ayesha\", 25), array(3, \"Salman\", 45))) !== array(36, 25, 45)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, \"Sudeep\", 14), array(2, \"Vandana\", 36), array(3, \"Dawood\", 56))) !== array(14, 36, 56)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = $tuple[1];\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(5, 6),\n    array(7, 8),\n    array(9, 10),\n    array(11, 12),\n    array(13, 14),\n    array(15, 16),\n    array(17, 18),\n    array(19, 20),\n);\n\nprint_r(rear_extract($test_list));",
    "    $rear_list = array();\n    foreach ($test_list as $tuple) {\n        $rear_list[] = $tuple[1];\n    }\n    return $rear_list;\n}\n",
    "\t$result = array();\n\tforeach ($test_list as $tuple) {\n\t\tarray_push($result, $tuple[1]);\n\t}\n\treturn $result;\n}\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = $tuple[1];\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(5, 6),\n    array(7, 8),\n    array(9, 10),\n    array(11, 12),\n    array(13, 14),\n    array(15, 16),\n    array(17, 18),\n    array(19, 20),\n);\n\nprint_r(rear_extract($test_list));\n",
    "\t$result = array();\n\tforeach($test_list as $tuple) {\n\t\tarray_push($result, $tuple[1]);\n\t}\n\treturn $result;\n}\n",
    "\t$result = array();\n\tforeach ($test_list as $tuple) {\n\t\t$result[] = $tuple[1];\n\t}\n\treturn $result;\n}\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = $tuple[1];\n    }\n    return $result;\n}\n",
    "    $new_list = array();\n    foreach ($test_list as $tuple) {\n        array_push($new_list, $tuple[1]);\n    }\n    return $new_list;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(5, 6),\n    array(7, 8),\n    array(9, 10)\n);\n\nprint_r(rear_extract($test_list));",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = $tuple[1];\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(5, 6),\n    array(7, 8),\n    array(9, 10),\n    array(11, 12),\n);\n\nprint_r(rear_extract($test_list));",
    "  $result = array();\n  foreach ($test_list as $tuple) {\n    $result[] = $tuple[1];\n  }\n  return $result;\n}\n",
    "  $result = array();\n  foreach ($test_list as $tuple) {\n    $result[] = $tuple[1];\n  }\n  return $result;\n}\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = $tuple[1];\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(5, 6),\n    array(7, 8),\n    array(9, 10)\n);\n\nprint_r(rear_extract($test_list));",
    "\t$result = array();\n\tforeach ($test_list as $tuple) {\n\t\t$result[] = $tuple[1];\n\t}\n\treturn $result;\n}\n",
    "    $rear_list = array();\n    foreach ($test_list as $tuple) {\n        $rear_list[] = $tuple[1];\n    }\n    return $rear_list;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(5, 6),\n    array(7, 8),\n    array(9, 10)\n);\n\nprint_r(rear_extract($test_list));",
    "\t$result = array();\n\tforeach ($test_list as $tuple) {\n\t\t$result[] = $tuple[1];\n\t}\n\treturn $result;\n}\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = $tuple[1];\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(5, 6),\n    array(7, 8),\n    array(9, 10),\n    array(11, 12),\n    array(13, 14),\n    array(15, 16),\n    array(17, 18),\n    array(19, 20),\n);\n\nprint_r(rear_extract($test_list));\n",
    "\t$result = array();\n\tforeach ($test_list as $tuple) {\n\t\t$result[] = $tuple[1];\n\t}\n\treturn $result;\n}\n",
    "\t$result = array();\n\tforeach ($test_list as $tuple) {\n\t\t$result[] = $tuple[1];\n\t}\n\treturn $result;\n}\n",
    "\t$result = array();\n\tforeach ($test_list as $tuple) {\n\t\t$result[] = $tuple[1];\n\t}\n\treturn $result;\n}\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = $tuple[1];\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2),\n    array(3, 4),\n    array(5, 6),\n    array(7, 8),\n    array(9, 10),\n);\n\nprint_r(rear_extract($test_list));"
  ]
}