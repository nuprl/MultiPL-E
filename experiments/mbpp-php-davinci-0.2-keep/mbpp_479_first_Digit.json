{
  "name": "mbpp_479_first_Digit",
  "language": "php",
  "prompt": "<?php\n// Write a python function to find the first digit of a given number.\nfunction first_Digit($n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return first_Digit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(123) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(456) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n\n$n = -543;\necho first_Digit($n);",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n\necho first_Digit(1234);",
    "    $n = (string)$n;\n    $n = str_split($n);\n    return $n[0];\n}\n",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n",
    "    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if (is_numeric($n[$i])) {\n            return $n[$i];\n        }\n    }\n}\n\necho first_Digit(1234);",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n\necho first_Digit(1234);\necho \"\\n\";\necho first_Digit(-1234);\necho \"\\n\";\necho first_Digit(0);\necho \"\\n\";\necho first_Digit(123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);\necho \"\\n\";\necho first_Digit(123456789.123456789);",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n\n$n = -54321;\necho first_Digit($n);",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n\n$n = -567;\necho first_Digit($n);",
    "    $n = abs($n);\n    while ($n >= 10) {\n        $n /= 10;\n    }\n    return $n;\n}\n"
  ]
}