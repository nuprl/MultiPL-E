{
  "name": "mbpp_228_all_Bits_Set_In_The_Given_Range",
  "language": "php",
  "prompt": "<?php\n// Write a python function to check whether all the bits are unset in the given range or not.\nfunction all_Bits_Set_In_The_Given_Range($n, $l, $r) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return all_Bits_Set_In_The_Given_Range(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4, 1, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17, 2, 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(39, 4, 6) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    for ($i = $l; $i <= $r; $i++) {\n        if (($n & (1 << $i)) == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$n = 7;\n$l = 1;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) & $x;\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 5;\n$l = 1;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $count = 0;\n    for ($i = $l; $i <= $r; $i++) {\n        $count += $n & (1 << $i);\n    }\n    if ($count == 0) {\n        return \"All bits are unset in the given range\";\n    } else {\n        return \"All bits are not unset in the given range\";\n    }\n}\n\necho all_Bits_Set_In_The_Given_Range(10, 2, 3);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    return $x == 0;\n}\n\n$n = 15;\n$l = 1;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    for ($i = $l; $i <= $r; $i++) {\n        if (!($n & (1 << $i))) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    $x = pow(2, $r) - pow(2, $l - 1);\n    return ($n & $x) == $x;\n}\n\n$n = 15;\n$l = 2;\n$r = 4;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n$n = 10;\n$l = 2;\n$r = 6;\n$result = all_Bits_Set_In_The_Given_Range($n, $l, $r);\nif ($result == 1) {\n    echo \"All bits are unset in the given range\";\n} else {\n    echo \"All bits are not unset in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    $y = $n;\n    $x = $x >> $l;\n    $y = $y << (32 - $r);\n    $x = $x & $y;\n    if ($x == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n$n = 10;\n$l = 2;\n$r = 6;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    $y = $n;\n    $x = $x >> $l;\n    $y = $y << (32 - $r);\n    $x = $x & $y;\n    $x = $x << ($r - $l);\n    if ($x == 0) {\n        return \"True\";\n    } else {\n        return \"False\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 6;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    if ($x == ((1 << ($r - $l + 1)) - 1)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = intval(fgets(STDIN));\n$l = intval(fgets(STDIN));\n$r = intval(fgets(STDIN));\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 6;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = $n;\n    $l = $l - 1;\n    $r = $r - 1;\n    $x = $x >> $l;\n    $x = $x << $l;\n    $x = $x >> $r;\n    $x = $x << $r;\n    if ($x == $n) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = intval(fgets(STDIN));\n$l = intval(fgets(STDIN));\n$r = intval(fgets(STDIN));\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == (1 << ($r - $l + 1)) - 1;\n}\n",
    "    $x = $n >> $l;\n    $y = $n >> $r;\n    $x = $x & $y;\n    if ($x == 0) {\n        echo \"All bits are unset in the given range\";\n    } else {\n        echo \"All bits are not unset in the given range\";\n    }\n}\n$n = 5;\n$l = 1;\n$r = 3;\nall_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    if ($x == ((1 << ($r - $l + 1)) - 1)) {\n        return true;\n    }\n    return false;\n}\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = $n;\n    $y = $n;\n    $z = $n;\n    $x = $x >> $l;\n    $y = $y << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 6;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    $y = (1 << ($r - $l + 1)) - 1;\n    return $x == $y;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "  $x = $n >> $l;\n  $y = $n << (32 - $r);\n  $z = $x & $y;\n  if ($z == 0) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n$n = 10;\n$l = 2;\n$r = 6;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    return $x == 0;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) & $x;\n}\necho all_Bits_Set_In_The_Given_Range(7, 1, 2);",
    "\t$x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n\treturn $x == ((1 << ($r - $l + 1)) - 1);\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n\techo \"Yes\";\n} else {\n\techo \"No\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    if ($x == ((1 << ($r - $l + 1)) - 1)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = intval(fgets(STDIN));\n$l = intval(fgets(STDIN));\n$r = intval(fgets(STDIN));\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    $y = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x | (1 << $i);\n        $y = $y & ~(1 << $i);\n    }\n    if ($x == $n || $y == $n) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 6;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if($z == 0) {\n        echo \"All bits are unset in the given range\";\n    } else {\n        echo \"All bits are not unset in the given range\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nall_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        echo \"All bits are unset in the given range\";\n    } else {\n        echo \"All bits are not unset in the given range\";\n    }\n}\n$n = 10;\n$l = 2;\n$r = 4;\nall_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 6;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return true;\n    }\n    return false;\n}\n\n$n = 5;\n$l = 1;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    return $x == 0;\n}\n\n$n = 10;\n$l = 1;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "\t$x = $n;\n\tfor ($i = $l; $i <= $r; $i++) {\n\t\t$x = $x & ~(1 << $i);\n\t}\n\tif ($x == 0) {\n\t\treturn \"Yes\";\n\t} else {\n\t\treturn \"No\";\n\t}\n}\necho all_Bits_Set_In_The_Given_Range(7, 1, 2);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        echo \"All bits are unset in the given range\";\n    } else {\n        echo \"All bits are not unset in the given range\";\n    }\n}\nall_Bits_Set_In_The_Given_Range(10, 2, 3);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == ((1 << ($r - $l + 1)) - 1);\n}\n\n$n = 7;\n$l = 1;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return \"All bits are unset in the given range\";\n    } else {\n        return \"All bits are not unset in the given range\";\n    }\n}\n\necho all_Bits_Set_In_The_Given_Range(5, 1, 2);",
    "    $mask = (1 << ($r - $l + 1)) - 1;\n    $mask = $mask << ($l - 1);\n    if (($n & $mask) == $mask) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = intval(fgets(STDIN));\n$l = intval(fgets(STDIN));\n$r = intval(fgets(STDIN));\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $mask = (1 << $r) - 1;\n    $mask = $mask ^ ((1 << ($l - 1)) - 1);\n    return ($n & $mask) == $mask;\n}\n\n$n = 5;\n$l = 2;\n$r = 4;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 5;\n$l = 1;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\necho all_Bits_Set_In_The_Given_Range(7, 1, 2) ? \"Yes\" : \"No\";\necho \"\\n\";\necho all_Bits_Set_In_The_Given_Range(14, 1, 3) ? \"Yes\" : \"No\";\necho \"\\n\";\necho all_Bits_Set_In_The_Given_Range(7, 2, 3) ? \"Yes\" : \"No\";\necho \"\\n\";\necho all_Bits_Set_In_The_Given_Range(56, 3, 5) ? \"Yes\" : \"No\";\necho \"\\n\";\necho all_Bits_Set_In_The_Given_Range(63, 1, 5) ? \"Yes\" : \"No\";\necho \"\\n\";\necho all_Bits_Set_In_The_Given_Range(31, 1, 3) ? \"Yes\" : \"No\";\necho \"\\n\";\necho all_Bits_Set_In_The_Given_Range(63, 2, 5) ? \"Yes\" : \"No\";\necho \"\\n\";\necho all_Bits_Set_In_The_Given_Range(31, 2, 5) ? \"Yes\" : \"No\";\necho \"\\n\";\necho all_Bits_Set_In_The_Given_Range(15, 1, 4) ? \"Yes\" : \"No\";\necho \"\\n\";\necho all_Bits_Set_In_The_Given_Range(15, 1, 5) ? \"Yes\" : \"No\";\necho \"\\n\";\necho all_Bits_Set_In_The_Given_Range(63, 1, 6) ? \"Yes\" : \"No\";\necho \"\\n\";\necho all_Bits_Set_In_The_Given_Range(31, 2, 4) ? \"Yes\" : \"No\";\necho \"\\n\";\necho all_Bits_Set_In_The_Given_Range(63, 2, 6) ? \"Yes\" : \"No\";",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    return $x == 0;\n}\n\n$n = 15;\n$l = 1;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    return $x == 0;\n}\n\n$n = 7;\n$l = 1;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "\t$x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n\treturn ($x + 1) == (1 << ($r - $l + 1));\n}\n\necho all_Bits_Set_In_The_Given_Range(7, 1, 2);",
    "    $count = 0;\n    for ($i = $l; $i <= $r; $i++) {\n        if ($n & (1 << $i)) {\n            $count++;\n        }\n    }\n    if ($count == ($r - $l + 1)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    for ($i = $l; $i <= $r; $i++) {\n        if (($n & (1 << $i)) == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == ((1 << ($r - $l + 1)) - 1);\n}\n\n$n = intval(readline());\n$l = intval(readline());\n$r = intval(readline());\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 5;\n$l = 1;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    if ($x == ((1 << ($r - $l + 1)) - 1)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\n$result = all_Bits_Set_In_The_Given_Range($n, $l, $r);\nif ($result) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "\t$range = $r - $l + 1;\n\t$x = pow(2, $range) - 1;\n\t$x = $x << ($l - 1);\n\tif (($n & $x) == $x) {\n\t\treturn \"Yes\";\n\t} else {\n\t\treturn \"No\";\n\t}\n}\n\necho all_Bits_Set_In_The_Given_Range(10, 2, 3);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    }\n    return false;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == (1 << ($r - $l + 1)) - 1;\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    $y = $n;\n    $x = $x >> $l;\n    $y = $y << (31 - $r);\n    $x = $x & $y;\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n$result = all_Bits_Set_In_The_Given_Range($n, $l, $r);\nif ($result) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r - 1);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"All Bits are unset in the given range\";\n    } else {\n        return \"All Bits are not unset in the given range\";\n    }\n}\n\necho all_Bits_Set_In_The_Given_Range(5, 1, 2);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == (1 << ($r - $l + 1)) - 1;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 5;\n$l = 1;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == ((1 << ($r - $l + 1)) - 1);\n}\n",
    "    $x = $n;\n    $y = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == $y) {\n        return \"All bits are set in the given range\";\n    } else {\n        return \"All bits are not set in the given range\";\n    }\n}\n\n$n = 10;\n$l = 1;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    if ($x == ((1 << ($r - $l + 1)) - 1)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n$n = intval(fgets(STDIN));\n$l = intval(fgets(STDIN));\n$r = intval(fgets(STDIN));\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 15;\n$l = 1;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n$n = intval(fgets(STDIN));\n$l = intval(fgets(STDIN));\n$r = intval(fgets(STDIN));\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"All bits are set\";\nelse\n    echo \"All bits are not set\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == (1 << ($r - $l + 1)) - 1;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);\n",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return \"All bits are set in the given range\";\n    } else {\n        return \"All bits are not set in the given range\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) & $x;\n}\n\n$n = 5;\n$l = 1;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r) == 0) {\n    echo \"All bits are unset in the given range\";\n} else {\n    echo \"All bits are not unset in the given range\";\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == ((1 << ($r - $l + 1)) - 1);\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == ((1 << ($r - $l + 1)) - 1);\n}\n\n$n = 5;\n$l = 1;\n$r = 4;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    for ($i = $l; $i <= $r; $i++) {\n        if (($n & (1 << $i)) == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 1;\n$r = 2;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\necho all_Bits_Set_In_The_Given_Range(7, 1, 2) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(14, 0, 1) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(4, 0, 2) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(7, 2, 2) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(8, 1, 3) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(15, 0, 3) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(8, 2, 3) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(8, 1, 2) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(15, 0, 4) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(8, 0, 4) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(7, 0, 1) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(7, 0, 0) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(8, 0, 0) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(7, 1, 1) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(7, 2, 2) . \"\\n\";\necho all_Bits_Set_In_The_Given_Range(8, 2, 2) . \"\\n\";\necho all_B",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << ($i - 1));\n    }\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n$result = all_Bits_Set_In_The_Given_Range($n, $l, $r);\nif ($result) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"All bits are set in the given range\";\nelse\n    echo \"All bits are not set in the given range\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << ($i - 1));\n    }\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 5;\n$l = 1;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $mask = (1 << $r) - 1;\n    $mask = ~($mask << $l);\n    return ($n & $mask) == 0;\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $num = $n;\n    $count = 0;\n    for ($i = $l; $i <= $r; $i++) {\n        $num = $num >> $i;\n        if ($num & 1) {\n            $count++;\n        }\n    }\n    if ($count == ($r - $l + 1)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        echo \"All bits are unset in the given range\";\n    } else {\n        echo \"All bits are not unset in the given range\";\n    }\n}\n$n = 10;\n$l = 1;\n$r = 3;\nall_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    return $x == 0;\n}\n\n$n = 10;\n$l = 1;\n$r = 2;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) & $x;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = 10;\n$l = 1;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = pow(2, $r) - pow(2, $l - 1);\n    return ($n & $x) == $x;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << ($i - 1));\n    }\n    if ($x == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    if ($x == ((1 << ($r - $l + 1)) - 1)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = intval(readline());\n$l = intval(readline());\n$r = intval(readline());\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 5;\n$l = 1;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> ($l - 1)) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == pow(2, ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range.\";\n} else {\n    echo \"All bits are not set in the given range.\";\n}",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x | (1 << $i);\n    }\n    if ($x == $n) {\n        return \"True\";\n    } else {\n        return \"False\";\n    }\n}\n\necho all_Bits_Set_In_The_Given_Range(7, 1, 2);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    if ($x == ((1 << ($r - $l + 1)) - 1)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n$n = intval(fgets(STDIN));\n$l = intval(fgets(STDIN));\n$r = intval(fgets(STDIN));\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    if ($x == ((1 << ($r - $l + 1)) - 1)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = 10;\n$l = 1;\n$r = 2;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"YES\";\nelse\n    echo \"NO\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    if ($x == ((1 << ($r - $l + 1)) - 1)) {\n        return true;\n    }\n    return false;\n}\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\necho all_Bits_Set_In_The_Given_Range(10, 2, 3);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"All bits are set in the given range\";\nelse\n    echo \"All bits are not set in the given range\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == ((1 << ($r - $l + 1)) - 1);\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $num = $n;\n    $count = 0;\n    for ($i = $l; $i <= $r; $i++) {\n        $num = $num >> $i;\n        if ($num & 1) {\n            $count++;\n        }\n    }\n    if ($count == ($r - $l + 1)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return \"All bits are unset in the given range\";\n    } else {\n        return \"All bits are not unset in the given range\";\n    }\n}\n\n$n = 15;\n$l = 1;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 12;\n$l = 1;\n$r = 2;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are unset in the given range\";\n} else {\n    echo \"All bits are not unset in the given range\";\n}",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    return $x == 0;\n}\n\n$n = 5;\n$l = 1;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 7;\n$l = 0;\n$r = 2;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    }\n    return false;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are unset in the given range\";\n} else {\n    echo \"All bits are not unset in the given range\";\n}",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = intval(readline(\"Enter the number: \"));\n$l = intval(readline(\"Enter the left range: \"));\n$r = intval(readline(\"Enter the right range: \"));\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 6;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "  $x = $n >> $l;\n  $y = $n << (32 - $r);\n  $z = $x & $y;\n  if ($z == 0) {\n    echo \"All bits are unset in the given range\";\n  } else {\n    echo \"All bits are not unset in the given range\";\n  }\n}\nall_Bits_Set_In_The_Given_Range(5, 1, 3);",
    "    $x = ($n >> ($l - 1)) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) & $x;\n}\n\n$n = 5;\n$l = 2;\n$r = 4;\n$result = all_Bits_Set_In_The_Given_Range($n, $l, $r);\nif ($result == 0) {\n    echo \"All bits are unset in the given range\";\n} else {\n    echo \"All bits are not unset in the given range\";\n}",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    }\n    return false;\n}\n$n = 11;\n$l = 1;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are unset in the given range\";\n} else {\n    echo \"All bits are not unset in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $x = $n;\n    $y = $n;\n    $x >>= $l;\n    $y <<= (32 - $r - 1);\n    $x &= $y;\n    if ($x == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) & $x;\n}\n\n$n = intval(fgets(STDIN));\n$l = intval(fgets(STDIN));\n$r = intval(fgets(STDIN));\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    }\n    return false;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are unset in the given range\";\n} else {\n    echo \"All bits are not unset in the given range\";\n}",
    "    for ($i = $l; $i <= $r; $i++) {\n        if (($n & (1 << $i)) == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == ((1 << ($r - $l + 1)) - 1);\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"All bits are set\";\nelse\n    echo \"All bits are not set\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == ((1 << ($r - $l + 1)) - 1);\n}\n\n$n = 7;\n$l = 0;\n$r = 2;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n$n = 5;\n$l = 1;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    $y = $n;\n    $x = $x >> $l;\n    $y = $y << (32 - $r);\n    $x = $x & $y;\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 6;\n$result = all_Bits_Set_In_The_Given_Range($n, $l, $r);\nif ($result) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    }\n    return false;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r - 1);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = intval(fgets(STDIN));\n$l = intval(fgets(STDIN));\n$r = intval(fgets(STDIN));\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r - 1);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\necho all_Bits_Set_In_The_Given_Range(10, 2, 3);",
    "    $x = $n;\n    $y = $n;\n    $x = $x >> ($l - 1);\n    $y = $y << (32 - $r);\n    $x = $x & $y;\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 6;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    return $x == 0;\n}\n",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        echo \"All bits are unset in the given range\";\n    } else {\n        echo \"All bits are not unset in the given range\";\n    }\n}\n\n$n = 10;\n$l = 1;\n$r = 3;\nall_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n$n = 5;\n$l = 1;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n",
    "    $x = $n >> $l;\n    $y = $n >> $r;\n    $z = $x ^ $y;\n    if ($z == 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n$n = intval(fgets(STDIN));\n$l = intval(fgets(STDIN));\n$r = intval(fgets(STDIN));\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == (1 << ($r - $l + 1)) - 1;\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 12;\n$l = 1;\n$r = 2;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 5;\n$l = 1;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == (1 << ($r - $l + 1)) - 1;\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 5;\n$l = 1;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"All bits are set\";\nelse\n    echo \"All bits are not set\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 15;\n$l = 1;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"All bits are set\";\nelse\n    echo \"All bits are not set\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    if ($x == ((1 << ($r - $l + 1)) - 1)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$n = intval(fgets(STDIN));\n$l = intval(fgets(STDIN));\n$r = intval(fgets(STDIN));\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    if ($x == ((1 << ($r - $l + 1)) - 1)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "\t$x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n\treturn ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 15;\n$l = 1;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n\techo \"Yes\";\n} else {\n\techo \"No\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == ((1 << ($r - $l + 1)) - 1);\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "\t$x = $n >> $l;\n\t$y = $n >> $r;\n\t$z = $x ^ $y;\n\t$z = $z & 1;\n\tif ($z == 1) {\n\t\techo \"All bits are unset in the given range\";\n\t} else {\n\t\techo \"All bits are not unset in the given range\";\n\t}\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nall_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return !$x;\n}\n\n$n = 15;\n$l = 1;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $x = $n;\n    $y = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x | (1 << $i);\n    }\n    $y = $y & $x;\n    if ($y == $x) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x == ((1 << ($r - $l + 1)) - 1));\n}\n",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"All bits are set\";\nelse\n    echo \"All bits are not set\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 5;\n$l = 1;\n$r = 3;\n\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    $y = $n;\n    $x = $x >> $l;\n    $y = $y << (32 - $r);\n    $x = $x & $y;\n    $x = $x << $l;\n    $x = $x >> $l;\n    if ($x == $n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 6;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "\t$x = 1 << $l;\n\tfor ($i = $l; $i <= $r; $i++) {\n\t\tif (($n & $x) == 0) {\n\t\t\treturn false;\n\t\t}\n\t\t$x = $x << 1;\n\t}\n\treturn true;\n}\n\n$n = 10;\n$l = 1;\n$r = 2;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n\techo \"All bits are set in the given range\";\n} else {\n\techo \"All bits are not set in the given range\";\n}",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 7;\n$l = 1;\n$r = 2;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = $n;\n    for ($i = $l; $i <= $r; $i++) {\n        $x = $x & ~(1 << $i);\n    }\n    if ($x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}",
    "    $x = $n >> $l;\n    $y = $n << (32 - $r);\n    $z = $x & $y;\n    if ($z == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n$n = 10;\n$l = 2;\n$r = 3;\necho all_Bits_Set_In_The_Given_Range($n, $l, $r);",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return $x == ((1 << ($r - $l + 1)) - 1);\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $x = ($n >> $l) & ((1 << ($r - $l + 1)) - 1);\n    return ($x + 1) == (1 << ($r - $l + 1));\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\n\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $x = $n;\n    $x = $x >> $l;\n    $x = $x << $l;\n    $x = $x << (32 - $r);\n    $x = $x >> (32 - $r);\n    if ($x == $n) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 10;\n$l = 2;\n$r = 3;\nif (all_Bits_Set_In_The_Given_Range($n, $l, $r)) {\n    echo \"All bits are set in the given range\";\n} else {\n    echo \"All bits are not set in the given range\";\n}"
  ]
}