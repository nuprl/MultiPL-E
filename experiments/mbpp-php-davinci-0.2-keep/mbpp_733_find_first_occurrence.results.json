{
  "name": "mbpp_733_find_first_occurrence",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } elseif ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcee87sz3.php:29\nStack trace:\n#0 /tmp/tmpcee87sz3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcee87sz3.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } elseif ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpxpxu3ax7.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp03a71_cj.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $n = count($A);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($A[$m] < $x) {\n            $l = $m + 1;\n        } elseif ($A[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            if ($m == 0 || $A[$m - 1] < $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfij1z4qp.php:32\nStack trace:\n#0 /tmp/tmpfij1z4qp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfij1z4qp.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + (($high - $low) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp2usv66u1.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp2usv66u1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp2usv66u1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp2usv66u1.php on line 12\n1.75\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp2usv66u1.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp2usv66u1.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp2usv66u1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp2usv66u1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp2usv66u1.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2usv",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1; // search left\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1; // search left\n        } else {\n            $low = $mid + 1; // search right\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46mvpcka.php:29\nStack trace:\n#0 /tmp/tmp46mvpcka.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp46mvpcka.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $n = count($A);\n    $low = 0;\n    $high = $n - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgvp19oy.php:30\nStack trace:\n#0 /tmp/tmpvgvp19oy.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvgvp19oy.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n\n    return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x);\n\necho \"\\n\";\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 8;\necho find_first_occurrence($A, $x);\n\necho \"\\n\";\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 1;\necho find_first_occurrence($A, $x);\n\necho \"\\n\";\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 10;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\n8\n0\n-1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkwfr7ned.php:26\nStack trace:\n#0 /tmp/tmpkwfr7ned.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkwfr7ned.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2pc_zpf.php:29\nStack trace:\n#0 /tmp/tmpb2pc_zpf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb2pc_zpf.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacm62md7.php:29\nStack trace:\n#0 /tmp/tmpacm62md7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpacm62md7.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp293opvs_.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n\n        if ($A[$mid] == $x && ($mid == 0 || $A[$mid - 1] < $x)) {\n            return $mid;\n        } else if ($A[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n\n    return -1;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgn1nqw7.php:31\nStack trace:\n#0 /tmp/tmpdgn1nqw7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdgn1nqw7.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvepgqvp.php:26\nStack trace:\n#0 /tmp/tmphvepgqvp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphvepgqvp.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcm_x1vwv.php:31\nStack trace:\n#0 /tmp/tmpcm_x1vwv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcm_x1vwv.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vq_po0m.php:29\nStack trace:\n#0 /tmp/tmp1vq_po0m.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1vq_po0m.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvphyab.php:29\nStack trace:\n#0 /tmp/tmp_mvphyab.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_mvphyab.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . \"\\n\";\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_m04khy.php:29\nStack trace:\n#0 /tmp/tmp3_m04khy.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3_m04khy.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wligdry.php:29\nStack trace:\n#0 /tmp/tmp2wligdry.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2wligdry.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $left = 0;\n  $right = count($A) - 1;\n  $result = -1;\n  while ($left <= $right) {\n    $mid = floor(($left + $right) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $right = $mid - 1;\n    } elseif ($x < $A[$mid]) {\n      $right = $mid - 1;\n    } else {\n      $left = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [-14, -10, 2, 108, 108, 243, 285, 285, 285, 401];\n$x = 108;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [-14, -10, 2, 108, 108, 243, 285, 285, 285, 401];\n$x = 285;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [-14, -10, 2, 108, 108, 243, 285, 285, 285, 401];\n$x = -14;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [-14, -10, 2, 108, 108, 243, 285, 285, 285, 401];\n$x = 401;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [-14, -10, 2, 108, 108, 243, 285, 285, 285, 401];\n$x = -10;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [-14, -10, 2, 108, 108, 243, 285, 285, 285, 401];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [-14, -10, 2, 108, 108, 243, 285, 285, 285, 401];\n$x = 243;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "3\n6\n0\n9\n1\n2\n5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wbhc4il.php:54\nStack trace:\n#0 /tmp/tmp1wbhc4il.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp1wbhc4il.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72y4x0ep.php:29\nStack trace:\n#0 /tmp/tmp72y4x0ep.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp72y4x0ep.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($A[$mid] == $x) {\n            if ($mid == 0 || $A[$mid - 1] != $x) {\n                return $mid;\n            } else {\n                $right = $mid - 1;\n            }\n        } else if ($A[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return -1;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpp8yycgfw.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2pc_zpf.php:29\nStack trace:\n#0 /tmp/tmpb2pc_zpf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb2pc_zpf.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiv2qgkgq.php:29\nStack trace:\n#0 /tmp/tmpiv2qgkgq.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpiv2qgkgq.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10];\n$x = 4;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7ejh5c2.php:29\nStack trace:\n#0 /tmp/tmph7ejh5c2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph7ejh5c2.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = array(1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9);\n$x = 5;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplln_5vuo.php:30\nStack trace:\n#0 /tmp/tmplln_5vuo.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplln_5vuo.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2y4cy755.php:30\nStack trace:\n#0 /tmp/tmp2y4cy755.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2y4cy755.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmprfwbakdq.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 3, 4, 7, 8, 9];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4s0ou9f.php:29\nStack trace:\n#0 /tmp/tmpd4s0ou9f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpd4s0ou9f.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9gsq62r.php:29\nStack trace:\n#0 /tmp/tmpq9gsq62r.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq9gsq62r.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 9, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzzuq9kh9.php:29\nStack trace:\n#0 /tmp/tmpzzuq9kh9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzzuq9kh9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmphf7seqjg.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9gsq62r.php:29\nStack trace:\n#0 /tmp/tmpq9gsq62r.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq9gsq62r.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n\t$low = 0;\n\t$high = count($A) - 1;\n\t$result = -1;\n\twhile ($low <= $high) {\n\t\t$mid = floor(($low + $high) / 2);\n\t\tif ($x == $A[$mid]) {\n\t\t\t$result = $mid;\n\t\t\t$high = $mid - 1;\n\t\t} else if ($x < $A[$mid]) {\n\t\t\t$high = $mid - 1;\n\t\t} else {\n\t\t\t$low = $mid + 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6xos_qe.php:29\nStack trace:\n#0 /tmp/tmpk6xos_qe.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpk6xos_qe.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $start = 0;\n    $end = count($A) - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $end = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wd8_dhc.php:29\nStack trace:\n#0 /tmp/tmp3wd8_dhc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3wd8_dhc.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyv_c1ih7.php:29\nStack trace:\n#0 /tmp/tmpyv_c1ih7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyv_c1ih7.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = (int)(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = $left + ($right - $left) / 2;\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpjsmk3g8n.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmp4ey__rnk.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [-14, -10, 2, 108, 108, 243, 285, 285, 285, 401];\n$x = 108;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9n7heazh.php:29\nStack trace:\n#0 /tmp/tmp9n7heazh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9n7heazh.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $n = count($A);\n    $low = 0;\n    $high = $n - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpha__sw75.php:30\nStack trace:\n#0 /tmp/tmpha__sw75.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpha__sw75.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvyyaeu4.php:29\nStack trace:\n#0 /tmp/tmpxvyyaeu4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxvyyaeu4.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd19ixvtt.php:29\nStack trace:\n#0 /tmp/tmpd19ixvtt.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpd19ixvtt.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmubmgb8q.php:29\nStack trace:\n#0 /tmp/tmpmubmgb8q.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmubmgb8q.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpso7raiwa.php:29\nStack trace:\n#0 /tmp/tmpso7raiwa.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpso7raiwa.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5s6t361.php:29\nStack trace:\n#0 /tmp/tmpn5s6t361.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn5s6t361.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + (($high - $low) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmprri_ytrw.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmprri_ytrw.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprri_ytrw.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprri_ytrw.php on line 12\n1.75\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmprri_ytrw.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmprri_ytrw.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmprri_ytrw.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprri_ytrw.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprri_ytrw.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprri_",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($A[$mid] == $x) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($A[$mid] > $x) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmtcfds_.php:30\nStack trace:\n#0 /tmp/tmpgmtcfds_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpgmtcfds_.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } elseif ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1rkkgb4u.php:29\nStack trace:\n#0 /tmp/tmp1rkkgb4u.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1rkkgb4u.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + (($high - $low) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmprri_ytrw.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmprri_ytrw.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprri_ytrw.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprri_ytrw.php on line 12\n1.75\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmprri_ytrw.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmprri_ytrw.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmprri_ytrw.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprri_ytrw.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprri_ytrw.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprri_",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacm62md7.php:29\nStack trace:\n#0 /tmp/tmpacm62md7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpacm62md7.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10];\n$x = 4;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaecmlet6.php:29\nStack trace:\n#0 /tmp/tmpaecmlet6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpaecmlet6.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            if ($mid == 0 || $A[$mid - 1] != $x) {\n                return $mid;\n            } else {\n                $high = $mid - 1;\n            }\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return -1;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t30ggj_.php:31\nStack trace:\n#0 /tmp/tmp6t30ggj_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6t30ggj_.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvfhjw6y.php:29\nStack trace:\n#0 /tmp/tmpdvfhjw6y.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdvfhjw6y.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $start = 0;\n    $end = count($A) - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $end = $mid - 1;\n        } else if ($A[$mid] < $x) {\n            $start = $mid + 1;\n        } else {\n            $end = $mid - 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_4ys68m8.php:29\nStack trace:\n#0 /tmp/tmp_4ys68m8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_4ys68m8.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $n = count($A);\n    $start = 0;\n    $end = $n - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $end = $mid - 1; // search left\n        } elseif ($x < $A[$mid]) {\n            $end = $mid - 1; // search left\n        } else {\n            $start = $mid + 1; // search right\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3t5on0pl.php:30\nStack trace:\n#0 /tmp/tmp3t5on0pl.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3t5on0pl.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wligdry.php:29\nStack trace:\n#0 /tmp/tmp2wligdry.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2wligdry.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . \"\\n\";\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_m04khy.php:29\nStack trace:\n#0 /tmp/tmp3_m04khy.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3_m04khy.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbyunmri.php:29\nStack trace:\n#0 /tmp/tmpbbyunmri.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbbyunmri.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmphf7seqjg.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpk4bt_o_7.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl0x4tfi5.php:29\nStack trace:\n#0 /tmp/tmpl0x4tfi5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpl0x4tfi5.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($A[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\necho find_first_occurrence($A, 2) . PHP_EOL;\necho find_first_occurrence($A, 8) . PHP_EOL;\necho find_first_occurrence($A, 1) . PHP_EOL;\necho find_first_occurrence($A, 5) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\n8\n1\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9z16xx83.php:31\nStack trace:\n#0 /tmp/tmp9z16xx83.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9z16xx83.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72y4x0ep.php:29\nStack trace:\n#0 /tmp/tmp72y4x0ep.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp72y4x0ep.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx5i51_v9.php:29\nStack trace:\n#0 /tmp/tmpx5i51_v9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpx5i51_v9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1v737yn0.php:30\nStack trace:\n#0 /tmp/tmp1v737yn0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1v737yn0.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 7, 8, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp6tztv9u6.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpyhvmh_iw.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvphyab.php:29\nStack trace:\n#0 /tmp/tmp_mvphyab.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_mvphyab.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvyyaeu4.php:29\nStack trace:\n#0 /tmp/tmpxvyyaeu4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxvyyaeu4.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpie3zx1im.php:30\nStack trace:\n#0 /tmp/tmpie3zx1im.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpie3zx1im.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } elseif ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 3, 4, 7, 8, 9];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dusaq9w.php:29\nStack trace:\n#0 /tmp/tmp6dusaq9w.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6dusaq9w.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\n\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv212h1o9.php:30\nStack trace:\n#0 /tmp/tmpv212h1o9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpv212h1o9.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + (($high - $low) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmprg3tw94w.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmprg3tw94w.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmprg3tw94w.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprg3tw94w.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprg3tw94w.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprg3tw94w.php:26\nStack trace:\n#0 /tmp/tmprg3tw94w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprg3tw94w.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacm62md7.php:29\nStack trace:\n#0 /tmp/tmpacm62md7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpacm62md7.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 8;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 1;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 10;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n8\n0\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpletn5ter.php:41\nStack trace:\n#0 /tmp/tmpletn5ter.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpletn5ter.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvphyab.php:29\nStack trace:\n#0 /tmp/tmp_mvphyab.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_mvphyab.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72y4x0ep.php:29\nStack trace:\n#0 /tmp/tmp72y4x0ep.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp72y4x0ep.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7nhmev0.php:29\nStack trace:\n#0 /tmp/tmpz7nhmev0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpz7nhmev0.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9];\n$x = 4;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7wyc633z.php:30\nStack trace:\n#0 /tmp/tmp7wyc633z.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7wyc633z.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmprfwbakdq.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10];\n$x = 4;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7ejh5c2.php:29\nStack trace:\n#0 /tmp/tmph7ejh5c2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph7ejh5c2.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmprfwbakdq.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpu2lv3960.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmprfwbakdq.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp03a71_cj.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2pc_zpf.php:29\nStack trace:\n#0 /tmp/tmpb2pc_zpf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb2pc_zpf.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvfhjw6y.php:29\nStack trace:\n#0 /tmp/tmpdvfhjw6y.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdvfhjw6y.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } elseif ($x > $A[$mid]) {\n            $low = $mid + 1;\n        } else {\n            if ($mid == 0 || $A[$mid - 1] != $x) {\n                return $mid;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdvcbkwg.php:31\nStack trace:\n#0 /tmp/tmpkdvcbkwg.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkdvcbkwg.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbfuplhca.php:29\nStack trace:\n#0 /tmp/tmpbfuplhca.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbfuplhca.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_ouujcr.php:29\nStack trace:\n#0 /tmp/tmpa_ouujcr.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpa_ouujcr.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzacxog7x.php:29\nStack trace:\n#0 /tmp/tmpzacxog7x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzacxog7x.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = $low + (($high - $low) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp6suhmy5i.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp6suhmy5i.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp6suhmy5i.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp6suhmy5i.php on line 12\n1.75\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp6suhmy5i.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp6suhmy5i.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp6suhmy5i.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp6suhmy5i.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp6suhmy5i.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6su",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wligdry.php:29\nStack trace:\n#0 /tmp/tmp2wligdry.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2wligdry.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7y_h2ok.php:29\nStack trace:\n#0 /tmp/tmpd7y_h2ok.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpd7y_h2ok.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + (($high - $low) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp09jtadz1.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp09jtadz1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp09jtadz1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp09jtadz1.php on line 12\n1.75\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp09jtadz1.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp09jtadz1.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp09jtadz1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp09jtadz1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp09jtadz1.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp09jt",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = $low + (($high - $low) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpodcr8yg2.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmpodcr8yg2.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpodcr8yg2.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpodcr8yg2.php on line 12\n1.75\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpodcr8yg2.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpodcr8yg2.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmpodcr8yg2.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpodcr8yg2.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpodcr8yg2.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodcr",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            if ($mid == 0 || $A[$mid - 1] < $x) {\n                return $mid;\n            } else {\n                $high = $mid - 1;\n            }\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return -1;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgdexsz86.php:31\nStack trace:\n#0 /tmp/tmpgdexsz86.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgdexsz86.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qrhc_5u.php:29\nStack trace:\n#0 /tmp/tmp6qrhc_5u.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6qrhc_5u.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp03a71_cj.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $start = 0;\n    $end = count($A) - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $end = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpldi5m9as.php:29\nStack trace:\n#0 /tmp/tmpldi5m9as.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpldi5m9as.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoopqwss0.php:29\nStack trace:\n#0 /tmp/tmpoopqwss0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpoopqwss0.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n\t$low = 0;\n\t$high = count($A) - 1;\n\t$result = -1;\n\twhile ($low <= $high) {\n\t\t$mid = floor(($low + $high) / 2);\n\t\tif ($x == $A[$mid]) {\n\t\t\t$result = $mid;\n\t\t\t$high = $mid - 1;\n\t\t} else if ($x < $A[$mid]) {\n\t\t\t$high = $mid - 1;\n\t\t} else {\n\t\t\t$low = $mid + 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$A = array(1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpas2vfyxr.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wligdry.php:29\nStack trace:\n#0 /tmp/tmp2wligdry.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2wligdry.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $start = 0;\n    $end = count($A) - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $end = $mid - 1;\n        } elseif ($A[$mid] > $x) {\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9cwlnl1.php:29\nStack trace:\n#0 /tmp/tmpc9cwlnl1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpc9cwlnl1.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpix2viyo0.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + (($high - $low) >> 1);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp6bhn9twm.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor($low + ($high - $low) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn2x335p.php:30\nStack trace:\n#0 /tmp/tmpkn2x335p.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpkn2x335p.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $left = 0;\n  $right = count($A) - 1;\n  $result = -1;\n  while ($left <= $right) {\n    $mid = floor(($left + $right) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $right = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $right = $mid - 1;\n    } else {\n      $left = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 3, 4, 7, 8, 9];\necho find_first_occurrence($A, 2) . PHP_EOL;\necho find_first_occurrence($A, 3) . PHP_EOL;\necho find_first_occurrence($A, 10) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\n5\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwimaeyo.php:30\nStack trace:\n#0 /tmp/tmpzwimaeyo.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzwimaeyo.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmao41gw.php:26\nStack trace:\n#0 /tmp/tmpbmao41gw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbmao41gw.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2pc_zpf.php:29\nStack trace:\n#0 /tmp/tmpb2pc_zpf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb2pc_zpf.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmao41gw.php:26\nStack trace:\n#0 /tmp/tmpbmao41gw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbmao41gw.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $start = 0;\n    $end = count($A) - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $end = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpvcs795wi.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvphyab.php:29\nStack trace:\n#0 /tmp/tmp_mvphyab.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_mvphyab.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n\n        if ($A[$mid] == $x) {\n            if ($mid == 0 || $A[$mid - 1] != $x) {\n                return $mid;\n            } else {\n                $high = $mid - 1;\n            }\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n\n    return -1;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpef9zktep.php:35\nStack trace:\n#0 /tmp/tmpef9zktep.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpef9zktep.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkwfr7ned.php:26\nStack trace:\n#0 /tmp/tmpkwfr7ned.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkwfr7ned.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1q6s_rzj.php:30\nStack trace:\n#0 /tmp/tmp1q6s_rzj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1q6s_rzj.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + (($high - $low) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmprg3tw94w.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmprg3tw94w.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmprg3tw94w.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprg3tw94w.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprg3tw94w.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprg3tw94w.php:26\nStack trace:\n#0 /tmp/tmprg3tw94w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprg3tw94w.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvfhjw6y.php:29\nStack trace:\n#0 /tmp/tmpdvfhjw6y.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdvfhjw6y.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = $left + ($right - $left) / 2;\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmpdn2kcdcs.php on line 9\n\nDeprecated: Implicit conversion from float 2.75 to int loses precision in /tmp/tmpdn2kcdcs.php on line 9\n\nDeprecated: Implicit conversion from float 0.875 to int loses precision in /tmp/tmpdn2kcdcs.php on line 9\n\nDeprecated: Implicit conversion from float 0.875 to int loses precision in /tmp/tmpdn2kcdcs.php on line 12\n2.75\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpdn2kcdcs.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpdn2kcdcs.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmpdn2kcdcs.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpdn2kcdcs.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpdn2kcdcs.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn2k",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxypts_8.php:29\nStack trace:\n#0 /tmp/tmpjxypts_8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjxypts_8.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 8;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 1;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 10;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = -1;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\n8\n1\n-1\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlt0os_0.php:45\nStack trace:\n#0 /tmp/tmpdlt0os_0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpdlt0os_0.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 3, 4, 7, 8, 9];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45d0oe78.php:29\nStack trace:\n#0 /tmp/tmp45d0oe78.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp45d0oe78.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyv_c1ih7.php:29\nStack trace:\n#0 /tmp/tmpyv_c1ih7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyv_c1ih7.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp68vs73g.php:30\nStack trace:\n#0 /tmp/tmpp68vs73g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpp68vs73g.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4xukt08c.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wligdry.php:29\nStack trace:\n#0 /tmp/tmp2wligdry.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2wligdry.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpix2viyo0.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $left = 0;\n  $right = count($A) - 1;\n  $result = -1;\n  while ($left <= $right) {\n    $mid = floor(($left + $right) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $right = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $right = $mid - 1;\n    } else {\n      $left = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5];\n$x = 3;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpea25akm8.php:30\nStack trace:\n#0 /tmp/tmpea25akm8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpea25akm8.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x) . \"\\n\";\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 8;\necho find_first_occurrence($A, $x) . \"\\n\";\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 1;\necho find_first_occurrence($A, $x) . \"\\n\";\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 10;\necho find_first_occurrence($A, $x) . \"\\n\";\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\n8\n0\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphv32zaij.php:41\nStack trace:\n#0 /tmp/tmphv32zaij.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphv32zaij.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpkvop6169.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $l = 0;\n    $r = count($A) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($A[$m] == $x) {\n            if ($m == 0 || $A[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        } else if ($A[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return -1;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . \"\\n\";\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxe6sb7p.php:30\nStack trace:\n#0 /tmp/tmpzxe6sb7p.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzxe6sb7p.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    // Implement this placeholder.\n    return 0;\n}\n\n$A = [0, 1, 2, 3, 3, 3, 3, 4, 5, 6];\n$x = 3;\necho find_first_occurrence($A, $x);\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqyasa4mt.php:17\nStack trace:\n#0 /tmp/tmpqyasa4mt.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpqyasa4mt.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmp4ey__rnk.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmphf7seqjg.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4vedb7ia.php:29\nStack trace:\n#0 /tmp/tmp4vedb7ia.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4vedb7ia.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } elseif ($x > $A[$mid]) {\n            $low = $mid + 1;\n        } else {\n            if ($mid == 0 || $A[$mid - 1] != $x) {\n                return $mid;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdzfbq9m_.php:32\nStack trace:\n#0 /tmp/tmpdzfbq9m_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdzfbq9m_.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}