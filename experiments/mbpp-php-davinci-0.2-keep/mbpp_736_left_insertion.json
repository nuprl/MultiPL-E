{
  "name": "mbpp_736_left_insertion",
  "language": "php",
  "prompt": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $a[$mid]) {\n            return $mid;\n        } else if ($x < $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 6, 7, 8, 9, 11, 13, 16, 18, 19, 20, 22, 24, 26, 28, 30, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99);\n$x = intval(fgets(STDIN));\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\n$result = left_insertion($a, $x);\necho \"The left insertion point for $x is $result\";",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 4, 5];\n$x = 3;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5);\n$x = 3;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left < $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left < $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99];\n$x = $argv[1];\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 5, 6, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $a[$mid]) {\n            return $mid;\n        } elseif ($x < $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 5, 6);\n$x = 3;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left < $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(2, 4, 5, 6, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x > $a[$m]) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 4, 5];\n$x = 3;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);",
    "    $i = 0;\n    while ($i < count($a) && $a[$i] < $x) {\n        $i++;\n    }\n    return $i;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8);\n$x = 5;\necho left_insertion($a, $x);",
    "    $i = 0;\n    while ($i < count($a) && $a[$i] < $x) {\n        $i++;\n    }\n    return $i;\n}\n\n$a = array(1, 2, 4, 5);\n$x = 3;\necho left_insertion($a, $x);",
    "    $l = count($a);\n    $i = 0;\n    while ($i < $l) {\n        if ($a[$i] >= $x) {\n            return $i;\n        }\n        $i++;\n    }\n    return $i;\n}\n\n$a = [1, 2, 4, 5];\n$x = 3;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = (int) (($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5, 6);\n$x = 3;\necho left_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho left_insertion($a, $x);"
  ]
}