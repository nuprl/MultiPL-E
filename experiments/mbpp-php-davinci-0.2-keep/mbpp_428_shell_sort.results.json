{
  "name": "mbpp_428_shell_sort",
  "language": "php",
  "prompt": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 3, 2, 5, 8, 4, 3, 1, 2, 9, 7, 8);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510141,
      "stdout": "Original Array :\n10, 3, 2, 5, 8, 4, 3, 1, 2, 9, 7, 8\nSorted Array :\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $length = count($my_list);\n    $gap = floor($length / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $length; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 4, 3, 2, 1);\necho \"Unsorted Array\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510141,
      "stdout": "Unsorted Array\n5, 4, 3, 2, 1\nSorted Array\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 2, 5, 1, 9, 6, 3, 4, 7, 8);\necho \"Unsorted Array\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Unsorted Array\n10, 2, 5, 1, 9, 6, 3, 4, 7, 8\nSorted Array\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = (int) ($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = (int) ($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Unsorted array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Unsorted array :\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 4, 3, 2, 1);\necho \"Unsorted Array\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Unsorted Array\n5, 4, 3, 2, 1\nSorted Array\n1, 2, 3, 4, 5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nshuffle($my_list);\necho \"Unsorted array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted array :\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Unsorted array :\n7, 5, 2, 6, 9, 8, 10, 4, 3, 1\nSorted array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Original Array :\n10, 5, 3, 8, 2, 6, 4, 7, 9, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n\t$gap = round(count($my_list) / 2);\n\twhile ($gap > 0) {\n\t\tfor ($i = $gap; $i < count($my_list); $i++) {\n\t\t\t$temp = $my_list[$i];\n\t\t\t$j = $i;\n\t\t\twhile ($j >= $gap && $my_list[$j - $gap] > $temp) {\n\t\t\t\t$my_list[$j] = $my_list[$j - $gap];\n\t\t\t\t$j -= $gap;\n\t\t\t}\n\t\t\t$my_list[$j] = $temp;\n\t\t}\n\t\t$gap = round($gap / 2);\n\t}\n\treturn $my_list;\n}\n\n$my_list = array(10, 5, 3, 7, 1, 2, 4, 6, 9, 8);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510141,
      "stdout": "Original Array :\n10, 5, 3, 7, 1, 2, 4, 6, 9, 8\nSorted Array :\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 2, 7, 1, 9, 3, 8, 4, 6);\necho \"Unsorted array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted array :\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Unsorted array :\n10, 5, 2, 7, 1, 9, 3, 8, 4, 6\nSorted array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $n = count($my_list);\n    $gap = $n / 2;\n    while ($gap > 0) {\n        for ($i = $gap; $i < $n; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 2, 4, 6, 1, 3);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Original Array :\n5, 2, 4, 6, 1, 3\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpm6ifyrcw.php on line 8\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpm6ifyrcw.php on line 14\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpm6ifyrcw.php on line 8\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpm6ifyrcw.php on line 14\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmpm6ifyrcw.php on line 8\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmpm6ifyrcw.php on line 14\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmpm6ifyrcw.php on line 8\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmpm6ifyrcw.php on line 14\n\nDeprecated: Implicit conversion from float",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 1, 4, 2, 8);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\necho implode(', ', shell_sort($my_list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Original Array :\n5, 1, 4, 2, 8\nSorted Array :\n1, 2, 4, 5, 8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = count($my_list) / 2;\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp732l_8_q.php on line 7\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp732l_8_q.php on line 13\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp732l_8_q.php on line 7\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp732l_8_q.php on line 10\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmp732l_8_q.php on line 7\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmp732l_8_q.php on line 13\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmp732l_8_q.php on line 7\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmp732l_8_q.php on line 10\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n\nDeprecated: Implicit con",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(9, 8, 7, 6, 5, 4, 3, 2, 1, 0);\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5] => 5\n    [6] => 6\n    [7] => 7\n    [8] => 8\n    [9] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n5, 4, 3, 2, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 2, 3, 1, 4);\necho \"Unsorted array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted array :\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted array :\n5, 2, 3, 1, 4\nSorted array :\n1, 2, 3, 4, 5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 3, 7, 6, 2, 1, 4);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n5, 3, 7, 6, 2, 1, 4\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122534,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\n$result = shell_sort($my_list);\necho \"Sorted list: \";\nforeach ($result as $value) {\n    echo $value . \" \";\n}\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Sorted list: 1 2 3 4 5 6 7 8 9 10 ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n\t$n = count($my_list);\n\t$gap = $n / 2;\n\twhile ($gap > 0) {\n\t\tfor ($i = $gap; $i < $n; $i++) {\n\t\t\t$temp = $my_list[$i];\n\t\t\t$j = $i;\n\t\t\twhile ($j >= $gap && $my_list[$j - $gap] > $temp) {\n\t\t\t\t$my_list[$j] = $my_list[$j - $gap];\n\t\t\t\t$j -= $gap;\n\t\t\t}\n\t\t\t$my_list[$j] = $temp;\n\t\t}\n\t\t$gap = floor($gap / 2);\n\t}\n\treturn $my_list;\n}\n\n$my_list = array(10, 5, 8, 2, 1, 4, 6, 9, 3, 7);\necho \"Unsorted array: \";\necho implode(\", \", $my_list);\necho \"\\n\";\necho \"Sorted array: \";\necho implode(\", \", shell_sort($my_list));\necho \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted array: 10, 5, 8, 2, 1, 4, 6, 9, 3, 7\nSorted array: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp1j11emhq.php on line 8\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp1j11emhq.php on line 14\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp1j11emhq.php on line 8\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp1j11emhq.php on line 14\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmp1j11emhq.php on line 8\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmp1j11emhq.php on line 14\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmp1j11emhq.php on line 8\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmp1j11emhq.php on line 14\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp1j11emhq",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(2, 3, 4, 1, 5);\necho \"Unsorted Array\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted Array\n2, 3, 4, 1, 5\nSorted Array\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = $len / 2;\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 1, 5, 8, 7, 6, 4, 3, 2, 9);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 1, 5, 8, 7, 6, 4, 3, 2, 9\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpfnueuq_g.php on line 8\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpfnueuq_g.php on line 14\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpfnueuq_g.php on line 8\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpfnueuq_g.php on line 14\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmpfnueuq_g.php on line 8\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmpfnueuq_g.php on line 14\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmpfnueuq_g.php on line 8\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmpf",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 2, 4, 6, 1, 3);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n5, 2, 4, 6, 1, 3\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 2, 5, 1, 7, 3, 8, 4, 9, 6);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 2, 5, 1, 7, 3, 8, 4, 9, 6\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Unsorted Array\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted Array\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 3, 4, 5, 1, 2, 9, 8, 7, 6);\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = round($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len/2);\n    while($gap > 0) {\n        for($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap/2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\necho \"Unsorted Array\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array\\n\";\necho implode(', ',shell_sort($my_list)).\"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted Array\n10, 5, 3, 8, 2, 6, 4, 7, 9, 1\nSorted Array\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $length = count($my_list);\n    $gap = floor($length / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $length; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 2, 7, 1, 3, 4, 6, 9, 8);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 5, 2, 7, 1, 3, 4, 6, 9, 8\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n\t$gap = round(count($my_list) / 2);\n\twhile ($gap > 0) {\n\t\tfor ($i = $gap; $i < count($my_list); $i++) {\n\t\t\t$temp = $my_list[$i];\n\t\t\t$j = $i;\n\t\t\twhile ($j >= $gap && $my_list[$j - $gap] > $temp) {\n\t\t\t\t$my_list[$j] = $my_list[$j - $gap];\n\t\t\t\t$j -= $gap;\n\t\t\t}\n\t\t\t$my_list[$j] = $temp;\n\t\t}\n\t\t$gap = round($gap / 2);\n\t}\n\treturn $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122551,
      "stdout": "Original Array :\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(100, 54, 7, 2, 5, 4, 1, 3, 19);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n100, 54, 7, 2, 5, 4, 1, 3, 19\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 7\n    [6] => 19\n    [7] => 54\n    [8] => 100\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Unsorted array :\\n\";\necho implode(', ', $my_list);\necho \"\\n\";\n$my_list = shell_sort($my_list);\necho \"Sorted array :\\n\";\necho implode(', ', $my_list);\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted array :\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = $len / 2;\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp0tv99ie0.php on line 8\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp0tv99ie0.php on line 14\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp0tv99ie0.php on line 8\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp0tv99ie0.php on line 14\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmp0tv99ie0.php on line 8\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmp0tv99ie0.php on line 14\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmp0tv99ie0.php on line 8\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmp0tv99ie0.php on line 14\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp0tv99ie0.php on line 8\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(100, 54, 7, 2, 5, 4, 1, 3, 19);\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $n = count($my_list);\n    $gap = floor($n / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $n; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 4, 3, 2, 1);\necho \"Unsorted Array\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122550,
      "stdout": "Unsorted Array\n5, 4, 3, 2, 1\nSorted Array\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 2, 4, 6, 1, 3);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n5, 2, 4, 6, 1, 3\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Unsorted array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted array :\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 2, 4, 6, 1, 3);\necho \"Unsorted Array\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted Array\n5, 2, 4, 6, 1, 3\nSorted Array\n1, 2, 3, 4, 5, 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = count($my_list) / 2;\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpb8e_yg50.php on line 7\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpb8e_yg50.php on line 10\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmpb8e_yg50.php on line 7\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmpb8e_yg50.php on line 10\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmpb8e_yg50.php on line 7\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmpb8e_yg50.php on line 10\n\nDeprecated: Implicit conversion from float 7.5 to int loses precision in /tmp/tmpb8e_yg50.php on line 7\n\nDeprecated: Implicit conversion from float 7.5 to int loses precision in /tmp/tmpb8e_yg50.php on line 10\n\nDeprecated: Implicit conversion from float 8.5 to int loses precision in /tmp/tmpb8e_yg50.php on line 7\n\nDeprecated: Impl",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\necho implode(', ',shell_sort($my_list)). PHP_EOL;\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 5, 3, 8, 2, 6, 4, 7, 9, 1\nSorted Array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\necho implode(', ', shell_sort($my_list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 5, 3, 8, 2, 6, 4, 7, 9, 1\nSorted Array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $n = count($my_list);\n    $gap = $n / 2;\n    while ($gap > 0) {\n        for ($i = $gap; $i < $n; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = (int) ($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbob0rp_w.php:28\nStack trace:\n#0 /tmp/tmpbob0rp_w.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbob0rp_w.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\necho \"Unsorted list: \" . implode(', ', $my_list) . \"\\n\";\n$my_list = shell_sort($my_list);\necho \"Sorted list: \" . implode(', ', $my_list) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122551,
      "stdout": "Unsorted list: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = array(10, 5, 6, 3, 2, 8, 9, 4, 7, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 5, 6, 3, 2, 8, 9, 4, 7, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $length = count($my_list);\n    $gap = floor($length / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $length; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = (int) ($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = (int) ($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 6, 3, 2, 8, 9, 4, 7, 1);\n$my_list = shell_sort($my_list);\necho implode(', ', $my_list);\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = count($my_list) / 2;\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = array(9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp1qi9kbuo.php on line 7\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp1qi9kbuo.php on line 10\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmp1qi9kbuo.php on line 7\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmp1qi9kbuo.php on line 10\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmp1qi9kbuo.php on line 7\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmp1qi9kbuo.php on line 10\n\nDeprecated: Implicit conversion from float 7.5 to int loses precision in /tmp/tmp1qi9kbuo.php on line 7\n\nDeprecated: Implicit conversion from float 7.5 to int loses precision in /tmp/tmp1qi9kbuo.php on line 10\n\nDeprecated: Implicit conversion from float 8.5 to int loses precision in /tmp/tmp1qi9kbuo.php on line 7\n\nDeprecated: Implicit conversion from float 8.5 to int loses precision in /",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 8, 3, 6, 2, 9, 4, 7, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 5, 8, 3, 6, 2, 9, 4, 7, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122534,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = round($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(100, 54, 7, 2, 5, 4, 1, 3, 19);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n100, 54, 7, 2, 5, 4, 1, 3, 19\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 7\n    [6] => 19\n    [7] => 54\n    [8] => 100\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $n = count($my_list);\n    $gap = $n / 2;\n    while ($gap > 0) {\n        for ($i = $gap; $i < $n; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 3, 4, 5, 6, 7, 8, 9, 1, 2);\necho \"Unsorted list: \";\necho implode(\", \", $my_list);\necho \"\\n\";\necho \"Sorted list: \";\necho implode(\", \", shell_sort($my_list));\necho \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted list: 10, 3, 4, 5, 6, 7, 8, 9, 1, 2\nSorted list: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpuqb42_5o.php on line 8\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpuqb42_5o.php on line 14\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpuqb42_5o.php on line 8\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpuqb42_5o.php on line 14\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmpuqb42_5o.php on line 8\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmpuqb42_5o.php on line 14\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmpuqb42_5o.php on line 8\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmpuqb42_5o.php on line 14\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpuqb42_5o.p",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = count($my_list) / 2;\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(1, 3, 5, 7, 9, 2, 4, 6, 8, 10);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n1, 3, 5, 7, 9, 2, 4, 6, 8, 10\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmphj8nzgnz.php on line 7\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmphj8nzgnz.php on line 13\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmphj8nzgnz.php on line 7\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmphj8nzgnz.php on line 13\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmphj8nzgnz.php on line 7\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmphj8nzgnz.php on line 13\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmphj8nzgnz.php on line 7\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmph",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 2, 7, 1, 9, 4, 3, 6, 8);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 5, 2, 7, 1, 9, 4, 3, 6, 8\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Unsorted list: \";\necho implode(\", \", $my_list);\necho \"\\n\";\necho \"Sorted list: \";\necho implode(\", \", shell_sort($my_list));\necho \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122551,
      "stdout": "Unsorted list: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted list: ",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 2, 7, 1, 9, 3, 8, 4, 6);\necho \"Unsorted Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted Array :\n10, 5, 2, 7, 1, 9, 3, 8, 4, 6\nSorted Array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(1, 3, 5, 7, 9, 2, 4, 6, 8, 10);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n1, 3, 5, 7, 9, 2, 4, 6, 8, 10\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Unsorted Array\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Unsorted Array\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = intval($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = intval($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 2, 4, 6, 1, 3);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n5, 2, 4, 6, 1, 3\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = count($my_list) / 2;\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 3, 7, 6, 2, 1, 4);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n5, 3, 7, 6, 2, 1, 4\nSorted Array :\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmphyg9zcbo.php on line 7\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmphyg9zcbo.php on line 13\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmphyg9zcbo.php on line 7\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmphyg9zcbo.php on line 10\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmphyg9zcbo.php on line 7\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmphyg9zcbo.php on line 10\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmphyg9zcbo.php on line 7\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmphyg9zcbo.php on line 10\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n)\n\nDeprecated: Implicit conve",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = count($my_list) / 2;\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\n$my_list = shell_sort($my_list);\nprint_r($my_list);\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmptl3xgiq7.php on line 7\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmptl3xgiq7.php on line 13\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmptl3xgiq7.php on line 7\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmptl3xgiq7.php on line 13\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmptl3xgiq7.php on line 7\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmptl3xgiq7.php on line 13\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmptl3xgiq7.php on line 7\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmptl3xgiq7.php on line 13\n\nDeprecated: Implicit conversion from f",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\n$my_list = shell_sort($my_list);\necho \"Sorted list: \";\nforeach ($my_list as $value) {\n    echo $value . \" \";\n}\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Sorted list: 1 2 3 4 5 6 7 8 9 10 ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 2, 5, 7, 1, 3, 4, 9, 8, 6);\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122519,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = $len / 2;\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(11, -2, 4, 35, 0, 8, -9);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n11, -2, 4, 35, 0, 8, -9\nSorted Array :\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp7oebr5ei.php on line 8\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp7oebr5ei.php on line 14\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp7oebr5ei.php on line 8\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp7oebr5ei.php on line 14\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmp7oebr5ei.php on line 8\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmp7oebr5ei.php on line 14\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmp7oebr5ei.php on line 8\n\nDeprecated: Implicit conversion from float 6.5 to int loses precision in /tmp/tmp7oebr5ei.php on line 11\nArray\n(\n    [0] => -9\n    [1] => -2\n    [2] => 0\n    [3] => 4\n    [4] => 8\n    [5] => 11\n    [6] => 35\n)\n\nDeprecated: Implic",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $n = count($my_list);\n    $gap = floor($n / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $n; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(1, 3, 2, 5, 4);\necho \"Unsorted Array\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122551,
      "stdout": "Unsorted Array\n1, 3, 2, 5, 4\nSorted Array\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 6, 3, 2, 8, 9, 4, 7, 1);\necho \"Unsorted List :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted List :\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted List :\n10, 5, 6, 3, 2, 8, 9, 4, 7, 1\nSorted List :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(4, 9, 7, 1, 3, 6, 5);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n4, 9, 7, 1, 3, 6, 5\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n    [3] => 5\n    [4] => 6\n    [5] => 7\n    [6] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n$my_list = array(10, 2, 78, 4, 45, 32, 7, 11);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 2, 78, 4, 45, 32, 7, 11\nSorted Array :\nArray\n(\n    [0] => 2\n    [1] => 4\n    [2] => 7\n    [3] => 10\n    [4] => 11\n    [5] => 32\n    [6] => 45\n    [7] => 78\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122551,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(4, 2, 5, 1, 3);\necho \"Unsorted Array\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted Array\n4, 2, 5, 1, 3\nSorted Array\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122551,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Unsorted array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted array :\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted array :\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 3, 5, 7, 1, 2, 4, 6, 8, 9);\necho \"Unsorted array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted array :\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted array :\n10, 3, 5, 7, 1, 2, 4, 6, 8, 9\nSorted array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Unsorted list: \";\necho implode(', ', $my_list);\necho \"\\n\";\necho \"Sorted list: \";\necho implode(', ', shell_sort($my_list));\necho \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted list: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted list: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(9, 2, 4, 6, 1, 3, 7, 5, 8);\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = array(10, 2, 78, 4, 45, 32, 7, 11);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\necho implode(', ',shell_sort($my_list)).\"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 2, 78, 4, 45, 32, 7, 11\nSorted Array :\n2, 4, 7, 10, 11, 32, 45, 78\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = intval($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = intval($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 2, 4, 6, 1, 3);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\necho implode(', ', shell_sort($my_list)) . PHP_EOL;\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n5, 2, 4, 6, 1, 3\nSorted Array :\n1, 2, 3, 4, 5, 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 3, 8, 2, 9, 1, 4, 7, 6);\necho \"Unsorted Array\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted Array\n5, 3, 8, 2, 9, 1, 4, 7, 6\nSorted Array\n1, 2, 3, 4, 5, 6, 7, 8, 9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $n = count($my_list);\n    $gap = floor($n / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $n; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Unsorted array: \";\necho implode(', ', $my_list);\necho \"\\n\";\n$my_list = shell_sort($my_list);\necho \"Sorted array: \";\necho implode(', ', $my_list);\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted array: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted array: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122534,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(5, 2, 1, 3, 8, 6, 9, 4, 7, 0);\necho \"Unsorted array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted array :\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122551,
      "stdout": "Unsorted array :\n5, 2, 1, 3, 8, 6, 9, 4, 7, 0\nSorted array :\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(100, 54, 7, 2, 5, 4, 1, 3, 19);\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 7\n    [6] => 19\n    [7] => 54\n    [8] => 100\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 6, 3, 2, 20, 100, 80);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 5, 6, 3, 2, 20, 100, 80\nSorted Array :\n2, 3, 5, 6, 10, 20, 80, 100\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = round($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122551,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 2, 5, 4, 1, 3, 7, 6, 9, 8);\necho \"Unsorted Array\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted Array\n10, 2, 5, 4, 1, 3, 7, 6, 9, 8\nSorted Array\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len/2);\n    while($gap > 0) {\n        for($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap/2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len/2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap/2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 5, 3, 8, 2, 6, 4, 7, 9, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n\t$gap = floor(count($my_list) / 2);\n\twhile ($gap > 0) {\n\t\tfor ($i = $gap; $i < count($my_list); $i++) {\n\t\t\t$temp = $my_list[$i];\n\t\t\t$j = $i;\n\t\t\twhile ($j >= $gap && $my_list[$j - $gap] > $temp) {\n\t\t\t\t$my_list[$j] = $my_list[$j - $gap];\n\t\t\t\t$j -= $gap;\n\t\t\t}\n\t\t\t$my_list[$j] = $temp;\n\t\t}\n\t\t$gap = floor($gap / 2);\n\t}\n\treturn $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = [5, 2, 4, 6, 1, 3];\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Original Array :\n10, 5, 3, 8, 2, 6, 4, 7, 9, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 5, 3, 8, 2, 6, 4, 7, 9, 1\nSorted Array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n  $n = count($my_list);\n  $gap = floor($n / 2);\n  while ($gap > 0) {\n    for ($i = $gap; $i < $n; $i++) {\n      $temp = $my_list[$i];\n      $j = $i;\n      while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n        $my_list[$j] = $my_list[$j - $gap];\n        $j -= $gap;\n      }\n      $my_list[$j] = $temp;\n    }\n    $gap = floor($gap / 2);\n  }\n  return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 3, 2, 4, 1, 9, 8, 7, 6);\necho \"Unsorted Array\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array\\n\";\necho implode(', ',shell_sort($my_list)). PHP_EOL;\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted Array\n10, 5, 3, 2, 4, 1, 9, 8, 7, 6\nSorted Array\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 2, 3, 1, 4, 7, 6, 9, 8);\necho \"Unsorted array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted array :\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted array :\n10, 5, 2, 3, 1, 4, 7, 6, 9, 8\nSorted array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 6, 3, 2, 8, 9, 4, 7, 1);\necho \"Unsorted Array\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Unsorted Array\n10, 5, 6, 3, 2, 8, 9, 4, 7, 1\nSorted Array\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $n = count($my_list);\n    $gap = floor($n / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $n; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 3, 4, 2, 1, 9, 8, 7, 6);\necho \"Unsorted array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted array :\\n\";\necho implode(', ', shell_sort($my_list)) . \"\\n\";\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted array :\n10, 5, 3, 4, 2, 1, 9, 8, 7, 6\nSorted array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "Original Array :\n10, 5, 3, 8, 2, 6, 4, 7, 9, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(1, 3, 5, 7, 9, 2, 4, 6, 8, 10);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n1, 3, 5, 7, 9, 2, 4, 6, 8, 10\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\n$my_list = array(100, 54, 7, 2, 5, 4, 1, 3, 19);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n100, 54, 7, 2, 5, 4, 1, 3, 19\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 7\n    [6] => 19\n    [7] => 54\n    [8] => 100\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $count = count($my_list);\n    $gap = floor($count / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $count; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = round(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = round($gap / 2.2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122519,
      "stdout": "Original Array :\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n\t$gap = round(count($my_list) / 2);\n\twhile ($gap > 0) {\n\t\tfor ($i = $gap; $i < count($my_list); $i++) {\n\t\t\t$temp = $my_list[$i];\n\t\t\t$j = $i;\n\t\t\twhile ($j >= $gap && $my_list[$j - $gap] > $temp) {\n\t\t\t\t$my_list[$j] = $my_list[$j - $gap];\n\t\t\t\t$j -= $gap;\n\t\t\t}\n\t\t\t$my_list[$j] = $temp;\n\t\t}\n\t\t$gap = round($gap / 2.2);\n\t}\n\treturn $my_list;\n}\n$my_list = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\nArray\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $my_list);\necho \"\\nSorted Array :\\n\";\nprint_r(shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "Original Array :\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $len = count($my_list);\n    $gap = floor($len / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < $len; $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 5, 3, 7, 1, 9, 4, 2, 8, 6);\necho \"Unsorted array :\\n\";\necho implode(', ',$my_list );\necho \"\\nSorted array :\\n\";\necho implode(', ',shell_sort($my_list)). PHP_EOL;\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Unsorted array :\n10, 5, 3, 7, 1, 9, 4, 2, 8, 6\nSorted array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n    $gap = floor(count($my_list) / 2);\n    while ($gap > 0) {\n        for ($i = $gap; $i < count($my_list); $i++) {\n            $temp = $my_list[$i];\n            $j = $i;\n            while ($j >= $gap && $my_list[$j - $gap] > $temp) {\n                $my_list[$j] = $my_list[$j - $gap];\n                $j -= $gap;\n            }\n            $my_list[$j] = $temp;\n        }\n        $gap = floor($gap / 2);\n    }\n    return $my_list;\n}\n\n$my_list = array(10, 3, 2, 7, 5, 1, 4, 9, 8, 6);\necho \"Before sorting : \";\necho implode(', ', $my_list);\necho \"\\n\";\necho \"After sorting : \";\necho implode(', ', shell_sort($my_list));\nfunction candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "Before sorting : 10, 3, 2, 7, 5, 1, 4, 9, 8, 6\nAfter sorting : 1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}