{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "php",
  "prompt": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $i = $j = 0;\n    while ($i < $len1 && $j < $len2 && count($result) < $k) {\n        $sum = $nums1[$i] + $nums2[$j];\n        if ($sum < 0) {\n            $i++;\n        } else if ($sum > 0) {\n            $j++;\n        } else {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $i++;\n            $j++;\n        }\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    if ($count * $count2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $count; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $count; $i++) {\n            if ($index[$i] < $count2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($nums1) && $j < count($nums2) && $count < $k) {\n        if ($nums1[$i] < $nums2[$j]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $i++;\n            $count++;\n        } else {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $j++;\n            $count++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    for ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = 0;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = $j;\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[0]];\n        array_splice($nums1, $min_index, 1);\n        array_splice($nums2, 0, 1);\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $res = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $res;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $res[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $res;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for($i = 0; $i < $count; $i++) {\n        for($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) return $result;\n    $index = [];\n    for ($i = 0; $i < $size1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) break;\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    $result = array_map(function($item) {\n        return $item[0] + $item[1];\n    }, $result);\n    asort($result);\n    $result = array_keys($result);\n    $result = array_slice($result, 0, $k);\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $pq = new SplPriorityQueue();\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pq->insert([$n1, $n2], $n1 + $n2);\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        if ($pq->isEmpty()) {\n            break;\n        }\n        $result[] = $pq->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n            }\n        }\n    } else {\n        $nums1 = array_unique($nums1);\n        $nums2 = array_unique($nums2);\n        $count = count($nums1) * count($nums2);\n        if ($count <= $k) {\n            for ($i = 0; $i < count($nums1); $i++) {\n                for ($j = 0; $j < count($nums2); $j++) {\n                    $result[] = [$nums1[$i], $nums2[$j]];\n                }\n            }\n        } else {\n            $count = count($nums1) * count($nums2);\n            $temp = [];\n            for ($i = 0; $i < count($nums1); $i++) {\n                for ($j = 0; $j < count($nums2); $j++) {\n                    $temp[] = $nums1[$i] + $nums2[$j];\n                }\n            }\n            sort($temp);\n            $temp = array_unique($temp);\n            $temp = array_slice($temp, 0, $k);\n            for ($i = 0; $i < count($nums1); $i++) {\n                for ($j = 0; $j < count($nums2); $j++) {\n                    if (in_array($nums1[$i] + $nums2[$j], $temp)) {\n                        $result[] = [$nums1[$i], $nums2[$j]];\n                    }\n                }\n            }\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k-- > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] >= $size2) {\n                continue;\n            }\n            if ($nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $result[] = [$num1, $num2];\n            }\n        }\n    } else {\n        $i = 0;\n        while ($i < $k) {\n            $min = PHP_INT_MAX;\n            $min_index = 0;\n            foreach ($nums1 as $key => $num1) {\n                foreach ($nums2 as $num2) {\n                    if ($num1 + $num2 < $min) {\n                        $min = $num1 + $num2;\n                        $min_index = $key;\n                    }\n                }\n            }\n            $result[] = [$nums1[$min_index], $nums2[0]];\n            unset($nums1[$min_index]);\n            $i++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = [$j, $l];\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index[0]], $nums2[$min_index[1]]];\n        unset($nums1[$min_index[0]]);\n        unset($nums2[$min_index[1]]);\n        $nums1 = array_values($nums1);\n        $nums2 = array_values($nums2);\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = sizeof($nums1);\n    $size2 = sizeof($nums2);\n    for ($i = 0; $i < $size1; $i++) {\n        for ($j = 0; $j < $size2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $len = min($len1, $len2);\n    if ($len == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    for ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    for ($i = 0; $i < $size1; $i++) {\n        for ($j = 0; $j < $size2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    $queue = new SplPriorityQueue();\n    $queue->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $queue->insert([$n1, $n2], -($n1 + $n2));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < count($nums1) && $j < count($nums2)) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($i == count($nums1) - 1) {\n            $j++;\n        } else if ($j == count($nums2) - 1) {\n            $i++;\n        } else if ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    $count = count($nums1) * count($nums2);\n    if($k > $count) {\n        $k = $count;\n    }\n    for($i = 0; $i < count($nums1); $i++) {\n        for($j = 0; $j < count($nums2); $j++) {\n            $pairs[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        $sum1 = $a[0] + $a[1];\n        $sum2 = $b[0] + $b[1];\n        if($sum1 == $sum2) {\n            return 0;\n        }\n        return $sum1 > $sum2 ? 1 : -1;\n    });\n    $result = [];\n    for($i = 0; $i < $k; $i++) {\n        $result[] = $pairs[$i];\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    $queue = new SplPriorityQueue();\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $queue->insert([$num1, $num2], -($num1 + $num2));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $nums1_len = count($nums1);\n    $nums2_len = count($nums2);\n    if ($nums1_len == 0 || $nums2_len == 0 || $k <= 0) {\n        return $result;\n    }\n    $indexes = array_fill(0, $nums1_len, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $nums1_len; $i++) {\n            if ($indexes[$i] < $nums2_len && $nums1[$i] + $nums2[$indexes[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$indexes[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$indexes[$min_index]]];\n        $indexes[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < count($nums1) && $j < count($nums2)) {\n        if ($nums1[$i] < $nums2[$j]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $i++;\n        } else {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] >= $size2) {\n                continue;\n            }\n            if ($nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $pairs[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    for ($i = 0; $i < $size1; $i++) {\n        for ($j = 0; $j < $size2; $j++) {\n            $pairs[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] > $b[0] + $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $len = min($len1, $len2);\n    for ($i = 0; $i < $len; $i++) {\n        $result[] = [$nums1[$i], $nums2[$i]];\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $result[] = [$num1, $num2];\n            }\n        }\n    } else {\n        $temp = [];\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $temp[] = [$num1, $num2];\n            }\n        }\n        $temp = array_map(function ($v) {\n            return $v[0] + $v[1];\n        }, $temp);\n        sort($temp);\n        $temp = array_slice($temp, 0, $k);\n        foreach ($temp as $t) {\n            foreach ($nums1 as $num1) {\n                foreach ($nums2 as $num2) {\n                    if ($num1 + $num2 == $t) {\n                        $result[] = [$num1, $num2];\n                    }\n                }\n            }\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0) {\n        return $result;\n    }\n    $arr = [];\n    for ($i = 0; $i < $size1; $i++) {\n        $arr[$i] = $nums1[$i] + $nums2[0];\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = min($arr);\n        $index = array_search($min, $arr);\n        $result[] = [$nums1[$index], $nums2[0]];\n        $arr[$index] = PHP_INT_MAX;\n        if ($nums2[0] < $nums2[1]) {\n            $arr[$index] = $nums1[$index] + $nums2[1];\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $result[] = [$n1, $n2];\n        }\n    }\n\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n\n    return array_slice($result, 0, $k);\n}\n\nprint_r(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] > $b[0] + $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pairs[] = [$n1, $n2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] > $b[0] + $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    $index = [];\n    for ($i = 0; $i < $size1; $i++) {\n        $index[$i] = 0;\n    }\n    while (count($result) < $k && count($result) < $size1 * $size2) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    for ($i = 0; $i < $size1; $i++) {\n        for ($j = 0; $j < $size2; $j++) {\n            $pairs[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < count($nums1) && $j < count($nums2)) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($i == count($nums1) - 1) {\n            $j++;\n        } else if ($j == count($nums2) - 1) {\n            $i++;\n        } else if ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n            }\n        }\n    } else {\n        $temp = [];\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $temp[] = [$nums1[$i], $nums2[$j]];\n            }\n        }\n        for ($i = 0; $i < $k; $i++) {\n            $min = $temp[0];\n            $index = 0;\n            for ($j = 1; $j < count($temp); $j++) {\n                if ($temp[$j][0] + $temp[$j][1] < $min[0] + $min[1]) {\n                    $min = $temp[$j];\n                    $index = $j;\n                }\n            }\n            $result[] = $min;\n            array_splice($temp, $index, 1);\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count == 0) return $result;\n    if ($k > $count) $k = $count;\n    $pairs = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $pairs[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $pairs[$i];\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < count($nums1) && $j < count($nums2)) {\n        if ($nums1[$i] + $nums2[$j] < $nums1[$i + 1] + $nums2[$j]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $j++;\n            $count++;\n        } else {\n            $result[] = [$nums1[$i + 1], $nums2[$j]];\n            $i++;\n            $count++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (count($nums1) == 0 || count($nums2) == 0 || $k == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([$nums1[0] + $nums2[0], 0, 0], -($nums1[0] + $nums2[0]));\n    $visited = [];\n    $visited[0] = [0 => true];\n    while (!$pq->isEmpty() && count($result) < $k) {\n        $top = $pq->extract();\n        $result[] = [$nums1[$top['data'][1]], $nums2[$top['data'][2]]];\n        if ($top['data'][1] + 1 < count($nums1) && !isset($visited[$top['data'][1] + 1][$top['data'][2]])) {\n            $pq->insert([$nums1[$top['data'][1] + 1] + $nums2[$top['data'][2]], $top['data'][1] + 1, $top['data'][2]], -($nums1[$top['data'][1] + 1] + $nums2[$top['data'][2]]));\n            $visited[$top['data'][1] + 1][$top['data'][2]] = true;\n        }\n        if ($top['data'][2] + 1 < count($nums2) && !isset($visited[$top['data'][1]][$top['data'][2] + 1])) {\n            $pq->insert([$nums1[$top['data'][1]] + $nums2[$top['data'][2] + 1], $top['data'][1], $top['data'][2] + 1], -($nums1[$top['data'][1]] + $nums2[$top['data",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    if ($count == 0 || $count2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $count; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $count; $i++) {\n            if ($index[$i] < $count2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $length1 = count($nums1);\n    $length2 = count($nums2);\n    if ($length1 == 0 || $length2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $length1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $length1; $i++) {\n            if ($index[$i] < $length2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n",
    "    $res = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $res[] = [$num1, $num2];\n        }\n    }\n    usort($res, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($res, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count < $k) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = $j;\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[0]];\n        array_splice($nums1, $min_index, 1);\n        array_splice($nums2, 0, 1);\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $i = 0;\n    $j = 0;\n    while ($i < count($nums1) && $j < count($nums2) && count($result) < $k) {\n        if ($nums1[$i] + $nums2[$j] < $nums1[$i + 1] + $nums2[$j]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $j++;\n        } else {\n            $result[] = [$nums1[$i + 1], $nums2[$j]];\n            $i++;\n        }\n    }\n    return $result;\n}\n\nprint_r(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = 0;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = $j;\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[0]];\n        array_splice($nums1, $min_index, 1);\n        array_splice($nums2, 0, 1);\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] > $b[0] + $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $res = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $res[] = [$n1, $n2];\n        }\n    }\n    usort($res, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($res, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return ($a[0] + $a[1]) - ($b[0] + $b[1]);\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    while ($k > 0 && !$pq->isEmpty()) {\n        $k--;\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < $len1) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < $len2) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for($i = 0; $i < $count; $i++) {\n        for($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n\n        if ($min_index == -1) {\n            break;\n        }\n\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $length1 = count($nums1);\n    $length2 = count($nums2);\n    for ($i = 0; $i < $length1; $i++) {\n        for ($j = 0; $j < $length2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    while ($k > 0 && !$pq->isEmpty()) {\n        $k--;\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < $len1) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < $len2) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $heap = new SplMinHeap();\n    $heap->insert([$nums1[0] + $nums2[0], 0, 0]);\n    while ($k > 0 && $heap->count() > 0) {\n        $node = $heap->extract();\n        $result[] = [$nums1[$node[1]], $nums2[$node[2]]];\n        if ($node[1] + 1 < $len1) {\n            $heap->insert([$nums1[$node[1] + 1] + $nums2[$node[2]], $node[1] + 1, $node[2]]);\n        }\n        if ($node[1] == 0 && $node[2] + 1 < $len2) {\n            $heap->insert([$nums1[$node[1]] + $nums2[$node[2] + 1], $node[1], $node[2] + 1]);\n        }\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n",
    "    $pairs = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pairs[] = [$n1, $n2];\n        }\n    }\n\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n\n    return array_slice($pairs, 0, $k);\n}\n",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while (count($result) < $k) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    while ($k > 0 && !$pq->isEmpty()) {\n        $k--;\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < $len1) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < $len2) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\nprint_r(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n",
    "    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $size1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    while ($k > 0 && !$pq->isEmpty()) {\n        $k--;\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < $len1) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < $len2) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    for ($i = 0; $i < $size1; $i++) {\n        $pq->insert([$nums1[$i], $nums2[0], 0], -$nums1[$i] - $nums2[0]);\n    }\n    while ($k > 0 && !$pq->isEmpty()) {\n        $top = $pq->extract();\n        $result[] = [$top[0], $top[1]];\n        $index = $top[2];\n        if ($index == $size2 - 1) {\n            continue;\n        }\n        $pq->insert([$top[0], $nums2[$index + 1], $index + 1], -$top[0] - $nums2[$index + 1]);\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    while ($k > 0 && !$pq->isEmpty()) {\n        $k--;\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < $len1) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < $len2) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < count($nums1) && $j < count($nums2)) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($nums1[$i] < $nums2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = 0;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $result[] = [$n1, $n2];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min && !in_array([$nums1[$j], $nums2[$l]], $result)) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = [$j, $l];\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index[0]], $nums2[$min_index[1]]];\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = $j;\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$l]];\n        unset($nums1[$min_index]);\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (count($nums1) == 0 || count($nums2) == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pq->insert([$n1, $n2], -($n1 + $n2));\n            if ($pq->count() > $k) {\n                $pq->extract();\n            }\n        }\n    }\n    while (!$pq->isEmpty()) {\n        $result[] = $pq->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $result[] = [$num1, $num2];\n            }\n        }\n    } else {\n        $minHeap = new SplMinHeap();\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $minHeap->insert([$num1, $num2]);\n            }\n        }\n        for ($i = 0; $i < $k; $i++) {\n            $result[] = $minHeap->extract();\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index1 = 0;\n    $index2 = 0;\n    for ($i = 0; $i < $k; $i++) {\n        if ($index1 < $len1 && $index2 < $len2) {\n            if ($nums1[$index1] < $nums2[$index2]) {\n                $result[] = [$nums1[$index1], $nums2[$index2]];\n                $index1++;\n            } else {\n                $result[] = [$nums1[$index1], $nums2[$index2]];\n                $index2++;\n            }\n        } elseif ($index1 < $len1) {\n            $result[] = [$nums1[$index1], $nums2[$index2]];\n            $index1++;\n        } elseif ($index2 < $len2) {\n            $result[] = [$nums1[$index1], $nums2[$index2]];\n            $index2++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (count($nums1) == 0 || count($nums2) == 0 || $k == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    while ($k > 0 && !$pq->isEmpty()) {\n        $k--;\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < count($nums1)) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < count($nums2)) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < count($nums1) && $j < count($nums2)) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        $count++;\n        if ($i == count($nums1) - 1) {\n            $j++;\n        } else if ($j == count($nums2) - 1) {\n            $i++;\n        } else if ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    if ($count == 0 || $count2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $count; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $minIndex = -1;\n        for ($i = 0; $i < $count; $i++) {\n            if ($index[$i] < $count2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $minIndex = $i;\n            }\n        }\n        $result[] = [$nums1[$minIndex], $nums2[$index[$minIndex]]];\n        $index[$minIndex]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    for ($i = 0; $i < $size1; $i++) {\n        for ($j = 0; $j < $size2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $result[] = [$num1, $num2];\n            }\n        }\n    } else {\n        $count = 0;\n        $nums = [];\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $nums[] = [$num1, $num2];\n            }\n        }\n        $nums = quick_sort($nums);\n        foreach ($nums as $num) {\n            if ($count == $k) {\n                break;\n            }\n            $result[] = $num;\n            $count++;\n        }\n    }\n    return $result;\n}\n",
    "    $pairs = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pairs[] = [$n1, $n2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    for ($i = 0; $i < $k; $i++) {\n        if ($pq->isEmpty()) {\n            break;\n        }\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < $len1) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < $len2) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $result[] = [$n1, $n2];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] >= $len2) {\n                continue;\n            }\n            if ($nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    for ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < count($nums1) && $j < count($nums2)) {\n        if ($nums1[$i] + $nums2[$j] < $nums1[$i + 1] + $nums2[$j]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $j++;\n        } else {\n            $result[] = [$nums1[$i + 1], $nums2[$j]];\n            $i++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    $queue = new SplPriorityQueue();\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $queue->insert([$num1, $num2], -($num1 + $num2));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    while ($k > 0 && !$pq->isEmpty()) {\n        $k--;\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < $len1) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < $len2) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k <= 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $length1 = count($nums1);\n    $length2 = count($nums2);\n    if ($length1 == 0 || $length2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $length1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $length1; $i++) {\n            if ($index[$i] < $length2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k) {\n        if ($nums1[$i] + $nums2[$j] < $nums1[$i + 1] + $nums2[$j + 1]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $i++;\n            $j++;\n        } else {\n            $result[] = [$nums1[$i + 1], $nums2[$j + 1]];\n            $i++;\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count < $k) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $index = [];\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $index = [$j, $l];\n                }\n            }\n        }\n        $result[] = [$nums1[$index[0]], $nums2[$index[1]]];\n        unset($nums1[$index[0]]);\n        unset($nums2[$index[1]]);\n        $nums1 = array_values($nums1);\n        $nums2 = array_values($nums2);\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k >= $count) {\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n            }\n        }\n    } else {\n        $queue = new SplPriorityQueue();\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $queue->insert([$nums1[$i], $nums2[$j]], -($nums1[$i] + $nums2[$j]));\n            }\n        }\n        for ($i = 0; $i < $k; $i++) {\n            $result[] = $queue->extract();\n        }\n    }\n    return $result;\n}\n",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $m = count($nums1);\n    $n = count($nums2);\n    if ($m == 0 || $n == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $m; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $m; $i++) {\n            if ($index[$i] < $n && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    while ($k > 0 && $pq->count() > 0) {\n        $k--;\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < $size1) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < $size2) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $nums1_len = count($nums1);\n    $nums2_len = count($nums2);\n    if ($nums1_len == 0 || $nums2_len == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $nums1_len; $i++) {\n        $index[$i] = 0;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($j = 0; $j < $nums1_len; $j++) {\n            if ($index[$j] >= $nums2_len) {\n                continue;\n            }\n            if ($nums1[$j] + $nums2[$index[$j]] < $min_val) {\n                $min_val = $nums1[$j] + $nums2[$index[$j]];\n                $min_index = $j;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $size1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $result = [];\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < count($nums1) && $j < count($nums2)) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($i + 1 < count($nums1) && $nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k >= $count) {\n        foreach ($nums1 as $n1) {\n            foreach ($nums2 as $n2) {\n                $result[] = [$n1, $n2];\n            }\n        }\n        return $result;\n    }\n    $queue = new SplPriorityQueue();\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $queue->insert([$n1, $n2], -($n1 + $n2));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pq->insert([$num1, $num2], -($num1 + $num2));\n        }\n    }\n    for ($i = 0; $i < $k && !$pq->isEmpty(); $i++) {\n        $result[] = $pq->extract()['data'];\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    for ($i = 0; $i < $len1; $i++) {\n        $pq->insert([$nums1[$i], $nums2[0], 0], -$nums1[$i] - $nums2[0]);\n    }\n    while ($k > 0 && !$pq->isEmpty()) {\n        $k--;\n        $cur = $pq->extract();\n        $result[] = [$cur[0], $cur[1]];\n        if ($cur[2] == $len2 - 1) {\n            continue;\n        }\n        $pq->insert([$cur[0], $nums2[$cur[2] + 1], $cur[2] + 1], -$cur[0] - $nums2[$cur[2] + 1]);\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $result[] = [$n1, $n2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $result[] = [$n1, $n2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < count($nums1) && $j < count($nums2)) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($i == count($nums1) - 1) {\n            $j++;\n        } else if ($j == count($nums2) - 1) {\n            $i++;\n        } else if ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    while ($k > 0 && !$pq->isEmpty()) {\n        $k--;\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < $len1) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < $len2) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $result[] = [$n1, $n2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\nprint_r(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3));\nprint_r(k_smallest_pairs([1, 1, 2], [1, 2, 3], 2));\nprint_r(k_smallest_pairs([1, 2], [3], 3));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = $j * count($nums2) + $l;\n                }\n            }\n        }\n        $result[] = [$nums1[floor($min_index / count($nums2))], $nums2[$min_index % count($nums2)]];\n        $nums1[floor($min_index / count($nums2))] = PHP_INT_MAX;\n        $nums2[$min_index % count($nums2)] = PHP_INT_MAX;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    $result = array_map(function($item) {\n        return $item[0] + $item[1];\n    }, $result);\n    sort($result);\n    $result = array_slice($result, 0, $k);\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    if ($count * $count2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $count; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $count; $i++) {\n            if ($index[$i] < $count2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $size1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pairs[] = [$n1, $n2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i=0; $i<$count; $i++) {\n        for ($j=0; $j<$count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pairs[] = [$n1, $n2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n",
    "    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $result[] = [$n1, $n2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (count($nums1) == 0 || count($nums2) == 0 || $k == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $pq->insert([$nums1[$i], $nums2[$j]], -($nums1[$i] + $nums2[$j]));\n            if ($pq->count() > $k) {\n                $pq->extract();\n            }\n        }\n    }\n    while (!$pq->isEmpty()) {\n        $result[] = $pq->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pq->insert([$n1, $n2], -($n1 + $n2));\n        }\n    }\n    while ($k-- > 0 && !$pq->isEmpty()) {\n        $result[] = $pq->extract();\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    for ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $i = 0;\n    $j = 0;\n    while ($i < $len1 && $j < $len2 && count($result) < $k) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($i < $len1 - 1 && $j < $len2 - 1) {\n            if ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n                $i++;\n            } else {\n                $j++;\n            }\n        } elseif ($i < $len1 - 1) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    for ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    for ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n",
    "    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    $queue = new SplPriorityQueue();\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $queue->insert([$nums1[$i], $nums2[$j]], -($nums1[$i] + $nums2[$j]));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n            }\n        }\n    } else {\n        $heap = new SplMinHeap();\n        $visited = [];\n        $heap->insert([$nums1[0] + $nums2[0], 0, 0]);\n        $visited[] = [0, 0];\n        for ($i = 0; $i < $k; $i++) {\n            $current = $heap->extract();\n            $result[] = [$nums1[$current[1]], $nums2[$current[2]]];\n            if ($current[1] + 1 < count($nums1) && !in_array([$current[1] + 1, $current[2]], $visited)) {\n                $heap->insert([$nums1[$current[1] + 1] + $nums2[$current[2]], $current[1] + 1, $current[2]]);\n                $visited[] = [$current[1] + 1, $current[2]];\n            }\n            if ($current[2] + 1 < count($nums2) && !in_array([$current[1], $current[2] + 1], $visited)) {\n                $heap->insert([$nums1[$current[1]] + $nums2[$current[2] + 1], $current[1], $current[2] + 1]);\n                $visited[] = [$current[1], $current[2] + 1];\n            }\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));"
  ]
}