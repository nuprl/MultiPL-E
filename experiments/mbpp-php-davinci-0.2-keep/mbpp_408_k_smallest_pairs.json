{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "php",
  "prompt": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $i = $j = 0;\n    while ($i < $len1 && $j < $len2 && count($result) < $k) {\n        $sum = $nums1[$i] + $nums2[$j];\n        if ($sum < 0) {\n            $i++;\n        } else if ($sum > 0) {\n            $j++;\n        } else {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $i++;\n            $j++;\n        }\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    if ($count * $count2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $count; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $count; $i++) {\n            if ($index[$i] < $count2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($nums1) && $j < count($nums2) && $count < $k) {\n        if ($nums1[$i] < $nums2[$j]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $i++;\n            $count++;\n        } else {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $j++;\n            $count++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    for ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = 0;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = $j;\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[0]];\n        array_splice($nums1, $min_index, 1);\n        array_splice($nums2, 0, 1);\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $res = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $res;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $res[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $res;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for($i = 0; $i < $count; $i++) {\n        for($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) return $result;\n    $index = [];\n    for ($i = 0; $i < $size1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) break;\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    $result = array_map(function($item) {\n        return $item[0] + $item[1];\n    }, $result);\n    asort($result);\n    $result = array_keys($result);\n    $result = array_slice($result, 0, $k);\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $pq = new SplPriorityQueue();\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pq->insert([$n1, $n2], $n1 + $n2);\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        if ($pq->isEmpty()) {\n            break;\n        }\n        $result[] = $pq->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n            }\n        }\n    } else {\n        $nums1 = array_unique($nums1);\n        $nums2 = array_unique($nums2);\n        $count = count($nums1) * count($nums2);\n        if ($count <= $k) {\n            for ($i = 0; $i < count($nums1); $i++) {\n                for ($j = 0; $j < count($nums2); $j++) {\n                    $result[] = [$nums1[$i], $nums2[$j]];\n                }\n            }\n        } else {\n            $count = count($nums1) * count($nums2);\n            $temp = [];\n            for ($i = 0; $i < count($nums1); $i++) {\n                for ($j = 0; $j < count($nums2); $j++) {\n                    $temp[] = $nums1[$i] + $nums2[$j];\n                }\n            }\n            sort($temp);\n            $temp = array_unique($temp);\n            $temp = array_slice($temp, 0, $k);\n            for ($i = 0; $i < count($nums1); $i++) {\n                for ($j = 0; $j < count($nums2); $j++) {\n                    if (in_array($nums1[$i] + $nums2[$j], $temp)) {\n                        $result[] = [$nums1[$i], $nums2[$j]];\n                    }\n                }\n            }\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k-- > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] >= $size2) {\n                continue;\n            }\n            if ($nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $result[] = [$num1, $num2];\n            }\n        }\n    } else {\n        $i = 0;\n        while ($i < $k) {\n            $min = PHP_INT_MAX;\n            $min_index = 0;\n            foreach ($nums1 as $key => $num1) {\n                foreach ($nums2 as $num2) {\n                    if ($num1 + $num2 < $min) {\n                        $min = $num1 + $num2;\n                        $min_index = $key;\n                    }\n                }\n            }\n            $result[] = [$nums1[$min_index], $nums2[0]];\n            unset($nums1[$min_index]);\n            $i++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = [$j, $l];\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index[0]], $nums2[$min_index[1]]];\n        unset($nums1[$min_index[0]]);\n        unset($nums2[$min_index[1]]);\n        $nums1 = array_values($nums1);\n        $nums2 = array_values($nums2);\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = sizeof($nums1);\n    $size2 = sizeof($nums2);\n    for ($i = 0; $i < $size1; $i++) {\n        for ($j = 0; $j < $size2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $len = min($len1, $len2);\n    if ($len == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    for ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n"
  ]
}