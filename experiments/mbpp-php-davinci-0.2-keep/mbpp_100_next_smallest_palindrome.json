{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunction next_smallest_palindrome($num) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return next_smallest_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(99) !== 101) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1221) !== 1331) { throw new Exception(\"Test failed!\"); }\n    if (candidate(120) !== 121) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    $new_num = $left . $right;\n    if ($new_num > $num) {\n        return (int)$new_num;\n    } else {\n        if ($len % 2 == 0) {\n            $left = substr($num, 0, $mid);\n            $right = strrev($left);\n            $right = substr($right, 0, $len - $mid);\n            $new_num = $left . $right;\n            if ($new_num > $num) {\n                return (int)$new_num;\n            } else {\n                $left = substr($num, 0, $mid);\n                $left = (int)$left + 1;\n                $right = strrev($left);\n                $right = substr($right, 0, $len - $mid);\n                $new_num = $left . $right;\n                return (int)$new_num;\n            }\n        } else {\n            $left = substr($num, 0, $mid);\n            $right = strrev($left);\n            $right = substr($right, 0, $len - $mid);\n            $new_num = $left . $right;\n            if ($new_num > $num) {\n                return (int)$new_num;\n            } else {\n                $left = substr($num, 0, $mid);\n                $left = (int)$left + 1;\n                $right = strrev($left);\n                $right = substr($right, 0, $len - $mid);\n                $new_num = $left . $right;\n                return (int)$new_num;\n            }\n        }\n    }\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev(intval(strrev($left)) + 1);\n    $right = strrev($left);\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(99999) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123421) . \"\\n\";\necho next_smallest_palindrome(1234567899) . \"\\n\";\necho next_smallest_palindrome(12343210) . \"\\n\";\necho next_smallest_palindrome(12343211) . \"\\n\";\necho next_smallest_palindrome(12343212) . \"\\n\";\necho next_smallest_palindrome(12343213) . \"\\n\";\necho next_smallest_palindrome(12343214) . \"\\n\";\necho next_smallest_palindrome(12343215) . \"\\n\";\necho next_smallest_palindrome(12343216) . \"\\n\";\necho next_smallest_palindrome(12343217) . \"\\n\";\necho next_smallest_palindrome(12343218) . \"\\n\";\necho next_smallest_palindrome(12343219) . \"\\n\";\necho next_",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev(($len % 2 ? $left[0] : '') . (int) substr($left, $len % 2) + 1);\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n\necho next_smallest_palindrome(1234); // 1331\necho next_smallest_palindrome(12345); // 12421\necho next_smallest_palindrome(99); // 101\necho next_smallest_palindrome(99999); // 100001\necho next_smallest_palindrome(213312); // 213412\necho next_smallest_palindrome(12); // 22\necho next_smallest_palindrome(123456789); // 123457641\necho next_smallest_palindrome(1234567899); // 1234567909\necho next_smallest_palindrome(12345678999); // 12345679009\necho next_smallest_palindrome(123456789999); // 123456790109\necho next_smallest_palindrome(1234567899999); // 1234567900019\necho next_smallest_palindrome(12345678999999); // 12345679000001\necho next_smallest_palindrome(123456789999999); // 123456790000001\necho next_smallest_palindrome(1234567899999999); // 1234567900000001\necho next_smallest_palindrome(12345678999999999); // 12345679000000001\necho next_smallest_palindrome(123456789999999999); // 123456790000000001",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev(($len % 2 ? $left[0] : '') . ($left + 1));\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $is_odd = $len % 2;\n  $left = substr($num, 0, $half);\n  $right = strrev($left);\n  if ($is_odd) {\n    $mid = substr($num, $half, 1);\n  }\n  $palindrome = $left . $mid . $right;\n  if ($palindrome > $num) {\n    return $palindrome;\n  }\n  if ($is_odd) {\n    if ($mid != 9) {\n      $mid = $mid + 1;\n      $palindrome = $left . $mid . $right;\n      return $palindrome;\n    } else {\n      $mid = 0;\n      $left = increment($left);\n      $right = strrev($left);\n      $palindrome = $left . $mid . $right;\n      return $palindrome;\n    }\n  } else {\n    $left = increment($left);\n    $right = strrev($left);\n    $palindrome = $left . $right;\n    return $palindrome;\n  }\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $mid, 1);\n    }\n    $next = $left . $mid . $right;\n    if ($next > $num) {\n        return (int)$next;\n    }\n    if ($mid != 9) {\n        $mid = (int)$mid + 1;\n        $next = $left . $mid . $right;\n        return (int)$next;\n    }\n    $left = (int)$left + 1;\n    $right = strrev($left);\n    $next = $left . $right;\n    return (int)$next;\n}\n",
    "    $num_str = strval($num);\n    $len = strlen($num_str);\n    $mid = floor($len / 2);\n    $left = substr($num_str, 0, $mid);\n    $right = substr($num_str, $mid + $len % 2);\n    $right = strrev($left);\n    $next_palindrome = $left . $right;\n    if ($next_palindrome > $num) {\n        return $next_palindrome;\n    }\n    if ($len % 2 == 1) {\n        $left_mid = substr($left, 0, $mid);\n        $right_mid = substr($right, 0, $mid);\n        $left_mid = strval(intval($left_mid) + 1);\n        $right_mid = strval(intval($right_mid) + 1);\n        $left = $left_mid . substr($left, $mid);\n        $right = $right_mid . substr($right, $mid);\n        $right = strrev($left);\n        $next_palindrome = $left . $right;\n        return $next_palindrome;\n    }\n    $left = strval(intval($left) + 1);\n    $right = strval(intval($right) + 1);\n    $right = strrev($left);\n    $next_palindrome = $left . $right;\n    return $next_palindrome;\n}\n\necho next_smallest_palindrome(1234);\necho next_smallest_palindrome(1221);\necho next_smallest_palindrome(1233);\necho next_smallest_palindrome(1243);\necho next_smallest_palindrome(1253);\necho next_smallest_palindrome(1263);\necho next_smallest_palindrome(1273);\necho next_smallest_palindrome(1283);\necho next_smallest_palindrome(1293);\necho next_smallest_palindrome(1213);\necho next_smallest_palindrome(1223);\necho next_smallest_palindrome(",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right >= $left) {\n        $left = str_pad((string)($left + 1), $mid, '0', STR_PAD_LEFT);\n        $right = strrev($left);\n    }\n    return (int)$left . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $i = 0;\n    $j = $len - 1;\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = substr($num, $mid + ($len % 2));\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($left_rev > $right) {\n        $num = $left . ($len % 2 ? $num[$mid] : '') . $left_rev;\n    } else {\n        $num = $left . ($len % 2 ? $num[$mid] : '') . $left_rev;\n        $num = (string)($num + 1);\n        $num = substr($num, 0, $mid) . ($len % 2 ? $num[$mid] : '') . substr($num, $mid);\n    }\n    return $num;\n}\n\necho next_smallest_palindrome(11) . PHP_EOL;\necho next_smallest_palindrome(12) . PHP_EOL;\necho next_smallest_palindrome(13) . PHP_EOL;\necho next_smallest_palindrome(14) . PHP_EOL;\necho next_smallest_palindrome(15) . PHP_EOL;\necho next_smallest_palindrome(16) . PHP_EOL;\necho next_smallest_palindrome(17) . PHP_EOL;\necho next_smallest_palindrome(18) . PHP_EOL;\necho next_smallest_palindrome(19) . PHP_EOL;\necho next_smallest_palindrome(20) . PHP_EOL;\necho next_smallest_palindrome(21) . PHP_EOL;\necho next_smallest_palindrome(22) . PHP_EOL;\necho next_smallest_palindrome(23) . PHP_EOL;\necho next_smallest_palindrome(24) . PHP_EOL;\necho next_smallest_",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = (int)($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + $len % 2);\n  $left_rev = strrev($left);\n  if ($left_rev > $right) {\n    $right = $left_rev;\n  } else {\n    $left = strrev(++$left);\n    $right = $left;\n  }\n  return (int)($left . $right);\n}\n\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(12) . PHP_EOL;\necho next_smallest_palindrome(1) . PHP_EOL;\necho next_smallest_palindrome(1221) . PHP_EOL;\necho next_smallest_palindrome(1231) . PHP_EOL;\necho next_smallest_palindrome(123321) . PHP_EOL;\necho next_smallest_palindrome(123331) . PHP_EOL;\necho next_smallest_palindrome(1233331) . PHP_EOL;\necho next_smallest_palindrome(12333331) . PHP_EOL;\necho next_smallest_palindrome(123333331) . PHP_EOL;\necho next_smallest_palindrome(1233333331) . PHP_EOL;\necho next_smallest_palindrome(12333333331) . PHP_EOL;\necho next_smallest_palindrome(123333333331) . PHP_EOL;\necho next_smallest_palindrome(1233333333331) . PHP_EOL;\necho next_smallest_palindrome(12333333333331) . PHP_EOL;\necho next_smallest_palindrome(123333333333331)",
    "    $num_str = strval($num);\n    $len = strlen($num_str);\n    $half_len = floor($len / 2);\n    $left_half = substr($num_str, 0, $half_len);\n    $right_half = substr($num_str, $half_len + $len % 2);\n    $left_half_rev = strrev($left_half);\n    if ($left_half_rev > $right_half) {\n        $right_half = $left_half_rev;\n    } else {\n        $left_half = strval(intval($left_half) + 1);\n        $left_half_rev = strrev($left_half);\n        $right_half = $left_half_rev;\n    }\n    return intval($left_half . substr($right_half, $len % 2));\n}\n",
    "    $num++;\n    while (true) {\n        if (is_palindrome($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $new_num = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    $left = strrev((string)((int)$left + 1));\n    $right = strrev($left);\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1233) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(1231) . \"\\n\";\necho next_smallest_palindrome(1222) . \"\\n\";\necho next_smallest_palindrome(1232) . \"\\n\";\necho next_smallest_palindrome(1223) . \"\\n\";\necho next_smallest_palindrome(1233) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1235) . \"\\n\";\necho next_smallest_palindrome(1236) . \"\\n\";\necho next_smallest_palindrome(1237) . \"\\n\";\necho next_smallest_palindrome(1238) . \"\\n\";\necho next_smallest_palindrome(1239) . \"\\n\";\necho next_smallest_palindrome(1240) . \"\\n\";\necho next_smallest_palindrome(1241) . \"\\n\";\necho next_smallest_palindrome(1242) . \"\\n\";\necho next_smallest_palindrome(1243) . \"\\n\";\necho next_",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $i = 0;\n    $j = $len - 1;\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = substr($num, $mid + ($len % 2));\n    $left = strrev($left);\n    if ($left > $right) {\n        $num = substr($num, 0, $mid) . $left;\n        return $num;\n    }\n    $num = substr($num, 0, $mid) . $left;\n    $num = (int)$num + 1;\n    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = substr($num, $mid + ($len % 2));\n    $left = strrev($left);\n    $num = substr($num, 0, $mid) . $left;\n    return $num;\n}\n\n$num = 1234;\necho next_smallest_palindrome($num);\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = (int)($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = substr($num, $mid + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(($left + 1));\n        $right = $left;\n    }\n    return (int)($left . $right);\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $next = $left . ($len % 2 ? $num[$half] : '') . strrev($left);\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev((string)((int)strrev($left) + 1));\n    return $left . ($len % 2 ? $num[$half] : '') . strrev($left);\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123322) . \"\\n\";\necho next_smallest_palindrome(123320) . \"\\n\";\necho next_smallest_palindrome(123310) . \"\\n\";\necho next_smallest_palindrome(123300) . \"\\n\";\necho next_smallest_palindrome(123200) . \"\\n\";\necho next_smallest_palindrome(122200) . \"\\n\";\necho next_smallest_palindrome(122000) . \"\\n\";\necho next_smallest_palindrome(120000) . \"\\n\";\necho next_smallest_palindrome(100000) . \"\\n\";\necho next_smallest_palindrome(99999) . \"\\n\";\necho next_smallest_palindrome(99998) . \"\\n\";\necho next_smallest_palindrome(99997) . \"\\n\";\necho next_smallest_palindrome(99996) . \"\\n\";\necho next_smallest_palindrome(99995) . \"\\n\";\necho next_small",
    "  $num = (string) $num;\n  $len = strlen($num);\n  $mid = floor($len/2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid = substr($num, $mid, 1);\n  }\n  $next = $left . $mid . $right;\n  if ($next > $num) {\n    return $next;\n  }\n  if ($mid != 9) {\n    $mid = $mid + 1;\n    $next = $left . $mid . $right;\n    return $next;\n  }\n  $left = $left + 1;\n  $right = strrev($left);\n  $next = $left . $mid . $right;\n  return $next;\n}\n\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(99);\necho \"\\n\";\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(1234321);\necho \"\\n\";\necho next_smallest_palindrome(123321);\necho \"\\n\";\necho next_smallest_palindrome(123322);\necho \"\\n\";\necho next_smallest_palindrome(123421);\necho \"\\n\";\necho next_smallest_palindrome(123422);\necho \"\\n\";\necho next_smallest_palindrome(123521);\necho \"\\n\";\necho next_smallest_palindrome(123522);\necho \"\\n\";\necho next_smallest_palindrome(123621);\necho \"\\n\";\necho next_smallest_palindrome(123622);\necho \"\\n\";\necho next_smallest_palindrome(123721);\necho \"\\n\";\necho next_smallest_palindrome(123722);\necho \"\\n\";\necho next_smallest_palindrome(123821);\necho \"\\n\";\necho next_smallest_palindrome(123822",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "  $num++;\n  while (!is_palindrome($num)) {\n    $num++;\n  }\n  return $num;\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = $num + 1;\n    while (true) {\n        if (is_palindrome($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "    if ($num < 0) {\n        return -1;\n    }\n    $num_str = (string) $num;\n    $len = strlen($num_str);\n    if ($len === 1) {\n        return $num;\n    }\n    $half_len = floor($len / 2);\n    $left_half = substr($num_str, 0, $half_len);\n    $right_half = substr($num_str, $len - $half_len);\n    $left_half_int = (int) $left_half;\n    $right_half_int = (int) $right_half;\n    if ($left_half_int === $right_half_int) {\n        return $num;\n    }\n    $left_half_int++;\n    $left_half = (string) $left_half_int;\n    $right_half = strrev($left_half);\n    if ($len % 2 === 1) {\n        $right_half = substr($right_half, 1);\n    }\n    return (int) ($left_half . $right_half);\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len%2);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . substr($left_rev, $len%2);\n    } else {\n        $left = (string)((int)$left + 1);\n        $left_rev = strrev($left);\n        $num = $left . substr($left_rev, $len%2);\n    }\n    return (int)$num;\n}\n\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(99999) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123421) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $mid, 1);\n    }\n    if ($len == 1) {\n        return $num;\n    }\n    if ($left.$mid.$right > $num) {\n        return $left.$mid.$right;\n    }\n    if ($mid != 9) {\n        $mid = $mid + 1;\n        return $left.$mid.$right;\n    }\n    $left = $left + 1;\n    $right = strrev($left);\n    return $left.$right;\n}\n\necho next_smallest_palindrome(1);\necho \"\\n\";\necho next_smallest_palindrome(2);\necho \"\\n\";\necho next_smallest_palindrome(3);\necho \"\\n\";\necho next_smallest_palindrome(9);\necho \"\\n\";\necho next_smallest_palindrome(11);\necho \"\\n\";\necho next_smallest_palindrome(99);\necho \"\\n\";\necho next_smallest_palindrome(101);\necho \"\\n\";\necho next_smallest_palindrome(111);\necho \"\\n\";\necho next_smallest_palindrome(121);\necho \"\\n\";\necho next_smallest_palindrome(202);\necho \"\\n\";\necho next_smallest_palindrome(212);\necho \"\\n\";\necho next_smallest_palindrome(222);\necho \"\\n\";\necho next_smallest_palindrome(909);\necho \"\\n\";\necho next_smallest_palindrome(919);\necho \"\\n\";\necho next_smallest_palindrome(929);\necho \"\\n\";\necho next_smallest_palindrome(939);\necho \"\\n\";\necho next_smallest_palindrome(949);\necho \"\\n\";\necho next_smallest_palindrome(",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(strval(intval($left_rev) + 1));\n        $right = $left;\n    }\n    return intval($left . $right);\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1233) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(1231) . \"\\n\";\necho next_smallest_palindrome(123421) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(12345654321) . \"\\n\";",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = strval($num);\n    $length = strlen($num);\n    $mid = floor($length / 2);\n    $left = substr($num, 0, $mid);\n    $right = substr($num, $mid + ($length % 2));\n    $right = strrev($left) . ($length % 2 ? $num[$mid] : '') . $right;\n    if ($right <= $num) {\n        $left = strval(intval($left) + 1);\n        $right = strrev($left);\n        $right = $left . ($length % 2 ? $num[$mid] : '') . $right;\n    }\n    return intval($right);\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    $num = $left . substr($num, $mid, 1) . $right;\n    if ($num < $num + 1) {\n        return $num + 1;\n    }\n    $left = (int)$left;\n    $right = (int)$right;\n    $left += 1;\n    $right = strrev((string)$left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    return (int)($left . substr($num, $mid, 1) . $right);\n}\n\necho next_smallest_palindrome(1) . \"\\n\";\necho next_smallest_palindrome(2) . \"\\n\";\necho next_smallest_palindrome(3) . \"\\n\";\necho next_smallest_palindrome(9) . \"\\n\";\necho next_smallest_palindrome(11) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(101) . \"\\n\";\necho next_smallest_palindrome(111) . \"\\n\";\necho next_smallest_palindrome(121) . \"\\n\";\necho next_smallest_palindrome(202) . \"\\n\";\necho next_smallest_palindrome(212) . \"\\n\";\necho next_smallest_palindrome(222) . \"\\n\";\necho next_smallest_palindrome(909) . \"\\n\";\necho next_smallest_palindrome(919) . \"\\n\";\necho next_smallest_palindrome(929) . \"\\n\";\necho next_smallest_palindrome(939) . \"\\n\";\necho next_smallest_palindrome(949) . \"\\n\";\necho next",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $left = substr($num, 0, $len / 2);\n    $right = substr($num, $len / 2 + $len % 2);\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(($left_rev + 1));\n        $right = $left_rev;\n    }\n    return (int)($left . $right);\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $mid = floor($len / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid = substr($num, $mid, 1);\n  }\n  $next_palindrome = $left . $mid . $right;\n  if ($next_palindrome > $num) {\n    return (int)$next_palindrome;\n  }\n  if ($mid != 9) {\n    $mid = (int)$mid + 1;\n    $next_palindrome = $left . $mid . $right;\n    return (int)$next_palindrome;\n  }\n  $left = (int)$left + 1;\n  $left = (string)$left;\n  $right = strrev($left);\n  $next_palindrome = $left . $right;\n  return (int)$next_palindrome;\n}\n\necho next_smallest_palindrome(11) . \"\\n\";\necho next_smallest_palindrome(188) . \"\\n\";\necho next_smallest_palindrome(191) . \"\\n\";\necho next_smallest_palindrome(2541) . \"\\n\";\necho next_smallest_palindrome(9999) . \"\\n\";",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev($left);\n    $left = $left + 1;\n    $left = strrev($left);\n    $right = substr($left, 0, $half);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    return $next;\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1243) . \"\\n\";\necho next_smallest_palindrome(1331) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(12321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(1233211) . \"\\n\";\necho next_smallest_palindrome(1233211) . \"\\n\";\necho next_smallest_palindrome(1233211) . \"\\n\";\necho next_smallest_palindrome(1233211) . \"\\n\";\necho next_smallest_palindrome(1233211) . \"\\n\";\necho next_smallest_palindrome(1233211) . \"\\n\";\necho next_smallest_palindrome(1233211) . \"\\n\";\necho next_smallest_palindrome(1233211) . \"\\n\";\necho next_smallest_palindrome(1233211)",
    "    $num++;\n    while (true) {\n        $num_str = strval($num);\n        $num_str_rev = strrev($num_str);\n        if ($num_str == $num_str_rev) {\n            return $num;\n        }\n        $num++;\n    }\n}\n\necho next_smallest_palindrome(1234);",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev(strval(intval($left) + 1));\n    $right = strrev($left);\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123322) . \"\\n\";\necho next_smallest_palindrome(123323) . \"\\n\";\necho next_smallest_palindrome(123324) . \"\\n\";\necho next_smallest_palindrome(123325) . \"\\n\";\necho next_smallest_palindrome(123326) . \"\\n\";\necho next_smallest_palindrome(123327) . \"\\n\";\necho next_smallest_palindrome(123328) . \"\\n\";\necho next_smallest_palindrome(123329) . \"\\n\";\necho next_smallest_palindrome(123330) . \"\\n\";\necho next_smallest_palindrome(123331) . \"\\n\";\necho next_smallest_palindrome(123332) . \"\\n\";\necho next_smallest_palindrome(123333) . \"\\n\";\necho next_smallest_palindrome(123334)",
    "    $num_str = strval($num);\n    $len = strlen($num_str);\n    $half_len = floor($len / 2);\n    $left_half = substr($num_str, 0, $half_len);\n    $right_half = substr($num_str, $half_len + $len % 2);\n    $left_half_rev = strrev($left_half);\n    if ($left_half_rev > $right_half) {\n        return intval($left_half . substr($left_half_rev, $len % 2));\n    }\n    $left_half_int = intval($left_half);\n    $left_half_int++;\n    $left_half = strval($left_half_int);\n    $left_half_rev = strrev($left_half);\n    return intval($left_half . substr($left_half_rev, $len % 2));\n}\n",
    "    $num++;\n    while (true) {\n        if (is_palindrome($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $right = $mid_char . $right;\n    }\n    if ($right > substr($num, $mid)) {\n        return $left . $right;\n    }\n    $left = str_pad((string)($left + 1), $mid, '0', STR_PAD_LEFT);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = $mid_char . $right;\n    }\n    return $left . $right;\n}\n",
    "    $num = $num + 1;\n    while (true) {\n        if ($num == strrev($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n\necho next_smallest_palindrome(1234);",
    "    $num++;\n    while (true) {\n        if ($num == strrev($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $mid_num++;\n    }\n    if ($len == 1) {\n        return $num + 1;\n    }\n    if ($left . $mid_num . $right > $num) {\n        return $left . $mid_num . $right;\n    }\n    if ($mid_num != '9' + 1) {\n        $mid_num = '0';\n        $left = str_pad((string)($left + 1), $mid, '0', STR_PAD_LEFT);\n        $right = strrev($left);\n    } else {\n        $left = str_pad((string)($left + 1), $mid, '0', STR_PAD_LEFT);\n        $right = strrev($left);\n        $mid_num = '0';\n    }\n    return $left . $mid_num . $right;\n}\n\necho next_smallest_palindrome(1) . \"\\n\";\necho next_smallest_palindrome(9) . \"\\n\";\necho next_smallest_palindrome(10) . \"\\n\";\necho next_smallest_palindrome(11) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(101) . \"\\n\";\necho next_smallest_palindrome(111) . \"\\n\";\necho next_smallest_palindrome(121) . \"\\n\";\necho next_smallest_palindrome(202) . \"\\n\";\necho next_smallest_palindrome(212) . \"\\n\";\necho next_smallest_palindrome(1001) . \"\\n\";\necho next_smallest_palindrome(1111) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_small",
    "  $num = (string) $num;\n  $len = strlen($num);\n  $mid = floor($len / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  $right = substr($right, 0, $len - $mid);\n  $palindrome = $left . $right;\n  if ($palindrome > $num) {\n    return $palindrome;\n  }\n  if ($left[0] != 9) {\n    $left = (string) ((int) $left + 1);\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    return $left . $right;\n  }\n  $left = str_repeat('0', $mid) . '1';\n  $right = strrev($left);\n  $right = substr($right, 0, $len - $mid);\n  return $left . $right;\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = substr($num, $mid, 1);\n        $left = substr($num, 0, $mid);\n        $right = strrev($left);\n    }\n    if ($num < $left . $mid_char . $right) {\n        return $left . $mid_char . $right;\n    }\n    $left = (int) $left;\n    $left++;\n    $left = (string) $left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        return $left . $mid_char . $right;\n    }\n    return $left . $right;\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234567) . \"\\n\";\necho next_smallest_palindrome(12345678) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567890) . \"\\n\";\necho next_smallest_palindrome(12345678901) . \"\\n\";\necho next_smallest_palindrome(123456789012) . \"\\n\";\necho next_smallest_palindrome(1234567890123) . \"\\n\";\necho next_smallest_palindrome(12345678901234) . \"\\n\";\necho next_smallest_palindrome(123456789012345) . \"\\n\";\necho next_smallest_palindrome(1234567890123456) . \"\\n\";\necho next_smallest_palindrome(12345678901234567) . \"\\n\";\necho next",
    "    $num_str = (string)$num;\n    $num_len = strlen($num_str);\n    $num_half = floor($num_len / 2);\n    $num_left = substr($num_str, 0, $num_half);\n    $num_right = substr($num_str, $num_half + ($num_len % 2));\n    $num_left_rev = strrev($num_left);\n    $num_right_rev = strrev($num_right);\n    $num_left_rev_int = (int)$num_left_rev;\n    $num_right_rev_int = (int)$num_right_rev;\n    $num_left_int = (int)$num_left;\n    $num_right_int = (int)$num_right;\n    if ($num_left_rev_int > $num_right_rev_int) {\n        $num_right_rev_int = $num_left_rev_int;\n    } else {\n        $num_left_rev_int = $num_right_rev_int;\n    }\n    if ($num_left_rev_int > $num_left_int) {\n        $num_left_int = $num_left_rev_int;\n    }\n    if ($num_right_rev_int > $num_right_int) {\n        $num_right_int = $num_right_rev_int;\n    }\n    $num_left_str = (string)$num_left_int;\n    $num_right_str = (string)$num_right_int;\n    $num_left_len = strlen($num_left_str);\n    $num_right_len = strlen($num_right_str);\n    if ($num_left_len < $num_half) {\n        $num_left_str = str_pad($num_left_str, $num_half, '0', STR_PAD_LEFT);\n    }\n    if ($num_right_len < $num_half) {\n        $num_right_str = str_pad($num_right_str, $num",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($left_rev > $right) {\n        return $left . $right_rev;\n    } else {\n        $left = (string)((int)$left + 1);\n        $left_rev = strrev($left);\n        return $left . $right_rev;\n    }\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(123456788) . \"\\n\";\necho next_smallest_palindrome(123456787) . \"\\n\";\necho next_smallest_palindrome(123456786) . \"\\n\";\necho next_smallest_palindrome(123456785) . \"\\n\";\necho next_smallest_palindrome(123456784) . \"\\n\";\necho next_smallest_palindrome(123456783) . \"\\n\";\necho next_smallest_palindrome(123456782) . \"\\n\";\necho next_smallest_palindrome(123456781) . \"\\n\";\necho next_smallest_palindrome(123456780) . \"\\n\";\necho next_smallest_palindrome(123456779) . \"\\n\";\necho next_smallest_palindrome(123456778) . \"\\n\";\necho next_smallest_palindrome(123456777) . \"\\",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    if ($palin > $num) {\n        return (int)$palin;\n    }\n    if ($mid_char != 9) {\n        $mid_char = $mid_char + 1;\n        $palin = $left.$mid_char.$right;\n        return (int)$palin;\n    }\n    $palin = $left.\"0\".$right;\n    $carry = 1;\n    for ($i = $mid - 1; $i >= 0; $i--) {\n        $digit = $left[$i] + $carry;\n        $carry = $digit > 9 ? 1 : 0;\n        $digit = $digit % 10;\n        $palin[$i] = $digit;\n        $palin[$len - $i - 1] = $digit;\n    }\n    if ($carry == 1) {\n        $palin = \"1\".$palin.\"1\";\n    }\n    return (int)$palin;\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1233) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(1231) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1239) . \"\\n\";\necho next_smallest_palindrome(1299) . \"\\n\";\necho next_smallest",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_digit = $num[$mid];\n        $right = $mid_digit . $right;\n    }\n    if ($right > $left) {\n        $left = $right;\n    } else {\n        $left = increment_string($left);\n        $right = strrev($left);\n    }\n    return (int)($left . $right);\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half_len = floor($len / 2);\n    $is_even = $len % 2 == 0;\n    $left = substr($num, 0, $half_len);\n    $right = substr($num, $half_len + ($is_even ? 0 : 1));\n    $right = strrev($left);\n    $new_num = $left . ($is_even ? '' : $num[$half_len]) . $right;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    $left = strrev((string)((int)$left + 1));\n    $right = substr($left, 1);\n    return $left . $right;\n}\n\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(99999) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123499999) . \"\\n\";",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $mid_num++;\n        if ($mid_num > 9) {\n            $mid_num = 0;\n            $left = next_palindrome($left);\n        }\n    }\n    return (int)$left . $mid_num . $right;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len - $half);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . $left_rev;\n    } else {\n        $left = strrev(strval(intval($left) + 1));\n        $num = $left . $left_rev;\n    }\n    return intval($num);\n}\n\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(99);\necho \"\\n\";\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(1221);\necho \"\\n\";\necho next_smallest_palindrome(123321);\necho \"\\n\";\necho next_smallest_palindrome(123421);\necho \"\\n\";\necho next_smallest_palindrome(1234321);\necho \"\\n\";\necho next_smallest_palindrome(123454321);\necho \"\\n\";\necho next_smallest_palindrome(1234554321);\necho \"\\n\";\necho next_smallest_palindrome(12345654321);\necho \"\\n\";\necho next_smallest_palindrome(123456654321);\necho \"\\n\";\necho next_smallest_palindrome(1234567654321);\necho \"\\n\";\necho next_smallest_palindrome(12345676654321);\necho \"\\n\";\necho next_smallest_palindrome(123456767654321);\necho \"\\n\";\necho next_smallest_palindrome(1234567676654321);\necho \"\\n\";\necho next_smallest_palindrome(12345676767654321);\necho \"\\n\";\necho next_smallest_palindrome(123456767676654321);\necho \"\\",
    "  $num++;\n  while(!is_palindrome($num)) {\n    $num++;\n  }\n  return $num;\n}\n",
    "    $num++;\n    while (true) {\n        $num_str = (string) $num;\n        $num_str_rev = strrev($num_str);\n        if ($num_str == $num_str_rev) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return (int) $next;\n    }\n    if ($len % 2 && $num[$half] < 9) {\n        $next = $left . ($num[$half] + 1) . $right;\n        return (int) $next;\n    }\n    $left = strrev((string) ((int) strrev($left) + 1));\n    $next = $left . ($len % 2 ? 0 : '') . $left;\n    return (int) $next;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123322) . \"\\n\";\necho next_smallest_palindrome(123320) . \"\\n\";\necho next_smallest_palindrome(123330) . \"\\n\";\necho next_smallest_palindrome(123333) . \"\\n\";\necho next_smallest_palindrome(123334) . \"\\n\";\necho next_smallest_palindrome(123335) . \"\\n\";\necho next_smallest_palindrome(123336) . \"\\n\";\necho next_smallest_palindrome(123337) . \"\\n\";\necho next_smallest_palindrome(123338) . \"\\n\";\necho next_smallest_palindrome(123339) . \"\\n\";\necho next_smallest",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_element = $num[$mid];\n        $left = substr($num, 0, $mid);\n        $right = strrev($left);\n    }\n    if ($left . $mid_element . $right > $num) {\n        return $left . $mid_element . $right;\n    }\n    $carry = 1;\n    for ($i = $mid - 1; $i >= 0; $i--) {\n        $sum = (int) $left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = $sum > 9 ? 1 : 0;\n    }\n    if ($carry == 1) {\n        $left = '1' . $left;\n        $right = strrev($left);\n        $left = substr($left, 0, $mid);\n        $right = substr($right, 0, $mid);\n        return $left . $mid_element . $right;\n    }\n    $right = strrev($left);\n    return $left . $mid_element . $right;\n}\n\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1243) . PHP_EOL;\necho next_smallest_palindrome(1213) . PHP_EOL;\necho next_smallest_palindrome(1233) . PHP_EOL;\necho next_smallest_palindrome(1222) . PHP_EOL;\necho next_smallest_palindrome(1221) . PHP_EOL;\necho next_smallest_palindrome(999) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(9) . PHP_EOL;\necho next_smallest_palindrome(1)",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    if ($palin > $num) {\n        return $palin;\n    }\n    $k = ($len % 2 == 1) ? $mid - 1 : $mid;\n    $carry = 1;\n    while ($k >= 0 && $carry > 0) {\n        $sum = (int)$left[$k] + $carry;\n        $carry = floor($sum / 10);\n        $left[$k] = $sum % 10;\n        $k--;\n    }\n    if ($carry > 0) {\n        $left = '1'.$left;\n    }\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    return $palin;\n}\n\n$num = 1234;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 12345;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 123454321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 1234321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 12999;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 999;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 9999;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 99999;\necho next_",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 == 0 ? $half : $half + 1);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . $right;\n        return (int)$num;\n    }\n    $left = strrev($left);\n    $left = (int)$left;\n    $left += 1;\n    $left = (string)$left;\n    $left = strrev($left);\n    $num = $left . $right;\n    return (int)$num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $num = $left.$right;\n    if ($num > $num) {\n        return $num;\n    }\n    $left = strrev((string)($left + 1));\n    $num = $left.$right;\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_element = $num[$mid];\n        $right = $mid_element . $right;\n    }\n    if ($right > $left) {\n        $left = strrev($right);\n    } else {\n        $left = strrev(strval(intval($left) + 1));\n        $right = strrev($left);\n    }\n    return intval($left . $right);\n}\n\n$num = 123;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 999;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 1234;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 1221;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 1234;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 12345;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 123454321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 123432;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 1234321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 123432321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 123321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 12332321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 1233321;\necho next_smallest_palindrome($num);\necho \"\\n\";",
    "    $num_str = strval($num);\n    $len = strlen($num_str);\n    $half_len = floor($len / 2);\n    $left_half = substr($num_str, 0, $half_len);\n    $right_half = substr($num_str, $len - $half_len);\n    $left_half_int = intval($left_half);\n    $right_half_int = intval($right_half);\n    if ($left_half_int > $right_half_int) {\n        return intval($left_half . strrev($left_half));\n    } else {\n        $left_half_int++;\n        $left_half = strval($left_half_int);\n        return intval($left_half . strrev($left_half));\n    }\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123421) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(12345654321) . \"\\n\";\necho next_smallest_palindrome(1234567654321) . \"\\n\";\necho next_smallest_palindrome(123456787654321) . \"\\n\";\necho next_smallest_palindrome(12345678987654321) . \"\\n\";\necho next_smallest_palindrome(12345678910987654321) . \"\\n\";\necho next_smallest_palindrome(123456789101210987654321) . \"\\n\";\necho next_smallest_palindrome(1234567891012131210987654321) . \"\\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $left = (string) ((int) $left + 1);\n        $left_rev = strrev($left);\n    }\n    return (int) $left . $left_rev;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        return $left . $right;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $left_rev = strrev($left);\n    return $left . $left_rev;\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1243) . \"\\n\";\necho next_smallest_palindrome(1331) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(99999) . \"\\n\";\necho next_smallest_palindrome(999999) . \"\\n\";\necho next_smallest_palindrome(9999999) . \"\\n\";\necho next_smallest_palindrome(99999999) . \"\\n\";\necho next_smallest_palindrome(999999999) . \"\\n\";\necho next_smallest_palindrome(9999999999) . \"\\n\";\necho next_smallest_palindrome(99999999999) . \"\\n\";\necho next_smallest_palindrome(999999999999) . \"\\n\";\necho next_smallest_palindrome(9999999999999) . \"\\n\";\necho next_smallest_palindrome(99999999999999) . \"\\n\";\necho next_smallest_palindrome(999999999999999) . \"\\n\";\necho next_smallest_palindrome(9999999999999999) . \"\\n\";\necho next_smallest_palindrome(99999999999999999) . \"\\n\";\necho next",
    "\t$num = (string)$num;\n\t$len = strlen($num);\n\t$half = floor($len/2);\n\t$left = substr($num, 0, $half);\n\t$right = substr($num, $half + ($len % 2));\n\t$right = strrev($left);\n\t$next = $left.$right;\n\tif ($next > $num) {\n\t\treturn $next;\n\t}\n\t$left = (string)((int)$left + 1);\n\t$right = strrev($left);\n\treturn $left.$right;\n}\n\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(1221);\necho \"\\n\";\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(123421);\necho \"\\n\";\necho next_smallest_palindrome(123321);\necho \"\\n\";\necho next_smallest_palindrome(123322);\necho \"\\n\";\necho next_smallest_palindrome(123323);\necho \"\\n\";\necho next_smallest_palindrome(123324);\necho \"\\n\";\necho next_smallest_palindrome(123325);\necho \"\\n\";\necho next_smallest_palindrome(123326);\necho \"\\n\";\necho next_smallest_palindrome(123327);\necho \"\\n\";\necho next_smallest_palindrome(123328);\necho \"\\n\";\necho next_smallest_palindrome(123329);\necho \"\\n\";\necho next_smallest_palindrome(123330);\necho \"\\n\";\necho next_smallest_palindrome(123331);\necho \"\\n\";\necho next_smallest_palindrome(123332);\necho \"\\n\";\necho next_smallest_palindrome(123333);\necho \"\\n\";\necho next_smallest_palindrome(123334);\necho \"\\n\";\necho next_smallest_palindrome(123335);\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev(($left + 1));\n    $right = strrev($left);\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len%2);\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else if ($left_rev < $right) {\n        $left = strrev(($left_rev + 1));\n        $right = $left;\n    } else {\n        $left = strrev(($left_rev + 1));\n        $right = $left;\n    }\n    return (int)$left.$right;\n}\n\necho next_smallest_palindrome(1234); // 1331\necho \"\\n\";\necho next_smallest_palindrome(12345); // 12421\necho \"\\n\";\necho next_smallest_palindrome(99); // 101\necho \"\\n\";\necho next_smallest_palindrome(6789); // 6996\necho \"\\n\";\necho next_smallest_palindrome(5); // 6\necho \"\\n\";\necho next_smallest_palindrome(181); // 202\necho \"\\n\";\necho next_smallest_palindrome(25); // 33\necho \"\\n\";\necho next_smallest_palindrome(999); // 1001\necho \"\\n\";\necho next_smallest_palindrome(2133); // 2222\necho \"\\n\";\necho next_smallest_palindrome(11); // 22\necho \"\\n\";\necho next_smallest_palindrome(99999); // 100001\necho \"\\n\";\necho next_smallest_palindrome(1213); // 1331\necho \"\\n\";\necho next_smallest_palindrome(11011); // 11111\necho \"\\n\";\necho next_smallest_palindrome(9988); // 10101\necho \"\\n\";\necho next_smallest_palindrome(9889); // 9911\necho \"\\n\";\necho",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    if ($len % 2 && $num[$half] < 9) {\n        $next = $left . ($num[$half] + 1) . $right;\n        return $next;\n    }\n    $left = strrev((string)((int)strrev($left) + 1));\n    $next = $left . ($len % 2 ? 0 : '') . $left;\n    return $next;\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = strrev($left);\n    if ($len % 2) {\n        $middle = substr($num, $half, 1);\n        $right = $middle . $right;\n    }\n    if ($num < $left . $right) {\n        return $left . $right;\n    }\n    $left = (int) $left;\n    $left += 1;\n    $left = (string) $left;\n    $right = strrev($left);\n    return $left . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $i = 0;\n    $j = $len - 1;\n    $mid = (int)($len / 2);\n    while ($i < $mid) {\n        if ($num[$i] < $num[$j]) {\n            $num[$j] = $num[$i];\n        } else if ($num[$i] > $num[$j]) {\n            $num[$j] = $num[$i];\n            $num[$mid]++;\n            $k = $mid - 1;\n            while ($num[$k] == '9') {\n                $num[$k] = '0';\n                $num[$len - $k - 1] = '0';\n                $k--;\n            }\n            $num[$k]++;\n            $num[$len - $k - 1] = $num[$k];\n        }\n        $i++;\n        $j--;\n    }\n    return (int)$num;\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right >= $left) {\n        $left = str_pad((string) (++$left), $mid, '0', STR_PAD_LEFT);\n        $right = strrev($left);\n    }\n    return (int) ($left . $right);\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev(($len % 2 ? $left[0] : '') . (int)substr($left, 1) + 1);\n    return $left . ($len % 2 ? '0' : '') . $left;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right > substr($num, $mid)) {\n        return $left . $right;\n    }\n    $left = (string)((int)$left + 1);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = $mid_num . $right;\n    }\n    return $left . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    $new_num = $left . $right;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    if ($len % 2 == 0) {\n        $left = substr($num, 0, $mid - 1);\n        $right = strrev($left);\n        $right = substr($right, 0, $len - $mid + 1);\n        $new_num = $left . $right;\n        if ($new_num > $num) {\n            return $new_num;\n        }\n    }\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    $new_num = $left . $right;\n    $new_num = (int)$new_num + 1;\n    $new_num = (string)$new_num;\n    $len = strlen($new_num);\n    $mid = floor($len / 2);\n    $left = substr($new_num, 0, $mid);\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    $new_num = $left . $right;\n    return $new_num;\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = strrev($left);\n    $next_palindrome = $left . ($len % 2 == 0 ? '' : $num[$half]) . $right;\n    if ($next_palindrome > $num) {\n        return (int) $next_palindrome;\n    }\n    $left = strrev((string) ((int) $left + 1));\n    $right = strrev($left);\n    return (int) $left . ($len % 2 == 0 ? '' : $num[$half]) . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 == 0 ? $half : $half + 1);\n    $right = strrev($left);\n    $new = $left . $right;\n    if ($new > $num) {\n        return (int)$new;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $right = substr($left, 0, $half);\n    $right = strrev($right);\n    $new = $left . $right;\n    return (int)$new;\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "  $num = (string) $num;\n  $length = strlen($num);\n  $mid = floor($length / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  $right = substr($right, 0, $length - $mid);\n  if ($length % 2 == 1) {\n    $mid = substr($num, $mid, 1);\n  }\n  $test = $left . $mid . $right;\n  if ($test > $num) {\n    return $test;\n  }\n  if ($mid != 9) {\n    $mid = $mid + 1;\n    $test = $left . $mid . $right;\n    return $test;\n  }\n  $test = $left . 0 . $right;\n  $carry = 1;\n  for ($i = $mid - 1; $i >= 0; $i--) {\n    $digit = substr($left, $i, 1);\n    $digit = $digit + $carry;\n    $carry = 0;\n    if ($digit == 10) {\n      $digit = 0;\n      $carry = 1;\n    }\n    $test = substr_replace($test, $digit, $i, 1);\n  }\n  if ($carry == 1) {\n    $test = 1 . $test;\n  }\n  return $test;\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num_str = strval($num);\n    $len = strlen($num_str);\n    $mid = floor($len / 2);\n    $left = substr($num_str, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num_str[$mid];\n        $mid_char = intval($mid_char);\n        if ($mid_char < 9) {\n            $mid_char++;\n            $mid_char = strval($mid_char);\n            $num_str = $left . $mid_char . $right;\n            return intval($num_str);\n        } else {\n            $mid_char = 0;\n            $mid_char = strval($mid_char);\n            $num_str = $left . $mid_char . $right;\n            $left = substr($num_str, 0, $mid);\n            $right = strrev($left);\n            $num_str = $left . $right;\n            $num_str = intval($num_str);\n            $num_str++;\n            return $num_str;\n        }\n    } else {\n        $num_str = $left . $right;\n        $num_str = intval($num_str);\n        $num_str++;\n        return $num_str;\n    }\n}\n",
    "  $num_str = strval($num);\n  $num_len = strlen($num_str);\n  $num_arr = str_split($num_str);\n  $num_arr_rev = array_reverse($num_arr);\n  $num_arr_rev_str = implode($num_arr_rev);\n  $num_arr_rev_int = intval($num_arr_rev_str);\n  if ($num_arr_rev_int > $num) {\n    return $num_arr_rev_int;\n  }\n  $num_arr_rev_int = $num_arr_rev_int + 1;\n  $num_arr_rev_str = strval($num_arr_rev_int);\n  $num_arr_rev = str_split($num_arr_rev_str);\n  $num_arr_rev_len = count($num_arr_rev);\n  $num_arr_rev_len_diff = $num_len - $num_arr_rev_len;\n  if ($num_arr_rev_len_diff > 0) {\n    for ($i = 0; $i < $num_arr_rev_len_diff; $i++) {\n      array_unshift($num_arr_rev, '0');\n    }\n  }\n  $num_arr_rev_str = implode($num_arr_rev);\n  $num_arr_rev_int = intval($num_arr_rev_str);\n  return $num_arr_rev_int;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = substr($right, 1);\n    }\n    if ($left.$mid_num.$right > $num) {\n        return $left.$mid_num.$right;\n    }\n    if ($mid_num != 9) {\n        $mid_num = $mid_num + 1;\n        return $left.$mid_num.$right;\n    }\n    $left = $left + 1;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    return $left.$right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right > $left) {\n        $left = strrev($right);\n        return (int)$left . $right;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $right = strrev($left);\n    return (int)$left . $right;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(123432) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(1233211) . \"\\n\";\necho next_smallest_palindrome(12332211) . \"\\n\";\necho next_smallest_palindrome(123322111) . \"\\n\";\necho next_smallest_palindrome(1233221111) . \"\\n\";\necho next_smallest_palindrome(12332211111) . \"\\n\";\necho next_smallest_palindrome(123322111111) . \"\\n\";\necho next_smallest_palindrome(1233221111111) . \"\\n\";\necho next_smallest_palindrome(12332211111111) . \"\\n\";\necho next_smallest_palindrome(123322111111111",
    "    $num++;\n    while (true) {\n        $num_str = (string)$num;\n        $num_str_len = strlen($num_str);\n        $num_str_half_len = floor($num_str_len / 2);\n        $num_str_half = substr($num_str, 0, $num_str_half_len);\n        $num_str_half_rev = strrev($num_str_half);\n        if ($num_str_len % 2 == 0) {\n            $num_str_half_rev = $num_str_half_rev . $num_str_half_rev;\n        } else {\n            $num_str_half_rev = $num_str_half_rev . substr($num_str_half, 0, $num_str_half_len - 1) . $num_str_half_rev;\n        }\n        if ($num_str_half_rev > $num_str) {\n            $num++;\n        } else {\n            return $num_str_half_rev;\n        }\n    }\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    $left_rev_int = (int) $left_rev;\n    $right_rev_int = (int) $right_rev;\n    if ($left_rev_int > $right_rev_int) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(++$left_rev);\n        $right = $left;\n    }\n    return (int) $left . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 == 0 ? $half : $half + 1);\n    $right = strrev($left);\n    $next = $left . $right;\n    if ($next > $num) {\n        return (int)$next;\n    }\n    $left = str_split($left);\n    $carry = 1;\n    for ($i = $half - 1; $i >= 0; $i--) {\n        $left[$i] += $carry;\n        if ($left[$i] == 10) {\n            $left[$i] = 0;\n            $carry = 1;\n        } else {\n            $carry = 0;\n            break;\n        }\n    }\n    if ($carry == 1) {\n        $left = array_merge([1], $left);\n    }\n    $left = implode('', $left);\n    $right = strrev($left);\n    return (int)$left . $right;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = (int)($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len%2 ? $half+1 : $half);\n    $right = strrev($left);\n    $new_num = $left.$right;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    if ($len%2) {\n        $mid = $num[$half];\n        if ($mid != 9) {\n            $mid = $mid + 1;\n            $new_num = $left.$mid.$right;\n            return $new_num;\n        }\n        $mid = 0;\n        $left = str_pad((string)((int)$left+1), $half, 0, STR_PAD_LEFT);\n        $new_num = $left.$mid.$right;\n        return $new_num;\n    }\n    $left = str_pad((string)((int)$left+1), $half, 0, STR_PAD_LEFT);\n    $new_num = $left.$right;\n    return $new_num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $right = $mid_char . $right;\n    }\n    if ($right >= $left) {\n        $left = (int)$left + 1;\n        $left = (string)$left;\n        $right = strrev($left);\n    }\n    return (int)$left . $right;\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1331) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(6789) . \"\\n\";\necho next_smallest_palindrome(12345678987654321) . \"\\n\";",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len/2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $len-$half);\n  $left_rev = strrev($left);\n  if ($left_rev > $right) {\n    $right = $left_rev;\n  } else {\n    $left = strrev(strval(intval($left_rev) + 1));\n    $right = $left;\n  }\n  return intval($left.$right);\n}\n\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(1221);\necho \"\\n\";\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(12321);\necho \"\\n\";\necho next_smallest_palindrome(123321);\necho \"\\n\";\necho next_smallest_palindrome(123322);\necho \"\\n\";\necho next_smallest_palindrome(123323);\necho \"\\n\";\necho next_smallest_palindrome(123324);\necho \"\\n\";\necho next_smallest_palindrome(123325);\necho \"\\n\";\necho next_smallest_palindrome(123326);\necho \"\\n\";\necho next_smallest_palindrome(123327);\necho \"\\n\";\necho next_smallest_palindrome(123328);\necho \"\\n\";\necho next_smallest_palindrome(123329);\necho \"\\n\";\necho next_smallest_palindrome(123330);\necho \"\\n\";\necho next_smallest_palindrome(123331);\necho \"\\n\";\necho next_smallest_palindrome(123332);\necho \"\\n\";\necho next_smallest_palindrome(123333);\necho \"\\n\";\necho next_smallest_palindrome(123334);\necho \"\\n\";\necho next_smallest_palindrome(1233",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len%2 ? $half+1 : $half);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left.$left_rev;\n    } else {\n        $left = (string)((int)$left + 1);\n        $left_rev = strrev($left);\n        $num = $left.$left_rev;\n    }\n    return (int)$num;\n}\n",
    "    $num = strval($num);\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $mid_num = $mid_num + 1;\n        if ($mid_num == 10) {\n            $mid_num = 0;\n            $left = strval(intval($left) + 1);\n            $right = strrev($left);\n        }\n        $right = substr($right, 1);\n    }\n    return intval($left . $mid_num . $right);\n}\n\necho next_smallest_palindrome(123);\necho \"\\n\";\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(123456789);\necho \"\\n\";\necho next_smallest_palindrome(1234567899);\necho \"\\n\";\necho next_smallest_palindrome(12345678901);\necho \"\\n\";\necho next_smallest_palindrome(123456789011);\necho \"\\n\";\necho next_smallest_palindrome(1234567890111);\necho \"\\n\";\necho next_smallest_palindrome(12345678901111);\necho \"\\n\";\necho next_smallest_palindrome(123456789011111);\necho \"\\n\";\necho next_smallest_palindrome(1234567890111111);\necho \"\\n\";\necho next_smallest_palindrome(12345678901111111);\necho \"\\n\";\necho next_smallest_palindrome(123456789011111111);\necho \"\\n\";\necho next_smallest_palindrome(1234567890111111111);\necho \"\\n\";\necho next_smallest_palindrome(12345678901111111111);\necho \"\\n\";\necho next_small",
    "    $num = (string) $num;\n    $num_len = strlen($num);\n    $mid = floor($num_len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($num_len % 2 == 1) {\n        $mid_char = substr($num, $mid, 1);\n        $right = $mid_char . $right;\n    }\n    if ($num == $left . $right) {\n        if ($mid_char != '9') {\n            $mid_char = (string) ((int) $mid_char + 1);\n            $right = substr($right, 1);\n            $right = $mid_char . $right;\n        } else {\n            $left = (string) ((int) $left + 1);\n            $right = strrev($left);\n        }\n    }\n    return (int) ($left . $right);\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $left = substr($num, 0, floor($len/2));\n    $right = substr($num, ceil($len/2));\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($left_rev > $right) {\n        return $left.$left_rev;\n    } else {\n        $left = (string)((int)$left + 1);\n        $left_rev = strrev($left);\n        return $left.$left_rev;\n    }\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $half, 1);\n    }\n    $palindrome = $left . $mid . $right;\n    if ($palindrome > $num) {\n        return (int)$palindrome;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $right = strrev($left);\n    $palindrome = $left . $mid . $right;\n    return (int)$palindrome;\n}\n",
    "  $num = strval($num);\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + $len % 2);\n  $left_rev = strrev($left);\n  if ($left_rev > $right) {\n    return intval($left . $left_rev);\n  }\n  $left = strval(intval($left) + 1);\n  $left_rev = strrev($left);\n  return intval($left . $left_rev);\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1233) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(1231) . \"\\n\";\necho next_smallest_palindrome(12300) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(12321) . \"\\n\";\necho next_smallest_palindrome(12331) . \"\\n\";\necho next_smallest_palindrome(12341) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(123454331) . \"\\n\";\necho next_smallest_palindrome(123454431) . \"\\n\";\necho next_smallest_palindrome(123454531) . \"\\n\";\necho next_smallest_palindrome(123454631) . \"\\n\";\necho next_smallest_palindrome(123454731) . \"\\n\";\necho next_smallest_palindrome(123454831) . \"\\n\";\necho next_smallest_palindrome(123454931) . \"\\n\";\necho next_smallest_palindrome(123455031) . \"\\n\";\necho next_smallest_pal",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $mid = floor($len / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid_char = $num[$mid];\n    $palin = $left . $mid_char . $right;\n  } else {\n    $palin = $left . $right;\n  }\n  if ($palin > $num) {\n    return $palin;\n  }\n  $k = pow(10, $mid) - 1;\n  $left = (string)($left + 1);\n  $left[0] = '1';\n  $left = (int)$left;\n  $palin = $left . $k;\n  return $palin;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(1234331) . \"\\n\";\necho next_smallest_palindrome(9999) . \"\\n\";\necho next_smallest_palindrome(99999) . \"\\n\";\necho next_smallest_palindrome(999999) . \"\\n\";\necho next_smallest_palindrome(9999999) . \"\\n\";\necho next_smallest_palindrome(99999999) . \"\\n\";\necho next_smallest_palindrome(999999999) . \"\\n\";\necho next_smallest_palindrome(9999999999) . \"\\n\";\necho next_smallest_palindrome(99999999999) . \"\\n\";\necho next_smallest_palindrome(999999999999) . \"\\n\";\necho next_smallest_palindrome(9999999999999) . \"\\n\";\necho next_smallest_palindrome(99999999999999) . \"\\n\";\necho next_smallest",
    "    $num++;\n    while (true) {\n        $num_str = strval($num);\n        $num_str_rev = strrev($num_str);\n        if ($num_str == $num_str_rev) {\n            return $num;\n        }\n        $num++;\n    }\n}\n\necho next_smallest_palindrome(11) . PHP_EOL;\necho next_smallest_palindrome(188) . PHP_EOL;\necho next_smallest_palindrome(191) . PHP_EOL;\necho next_smallest_palindrome(2541) . PHP_EOL;\necho next_smallest_palindrome(9999) . PHP_EOL;",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_element = $num[$mid];\n        $right = $mid_element . $right;\n    }\n    if ($right >= $left) {\n        $left = (string)((int)$left + 1);\n        $right = strrev($left);\n        if ($len % 2 == 1) {\n            $right = $mid_element . $right;\n        }\n    }\n    return (int)$left . $right;\n}\n",
    "  $num++;\n  while (true) {\n    $str = strval($num);\n    if ($str === strrev($str)) {\n      return $num;\n    }\n    $num++;\n  }\n}\n\necho next_smallest_palindrome(12) . \"\\n\";\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234567) . \"\\n\";\necho next_smallest_palindrome(12345678) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567890) . \"\\n\";\necho next_smallest_palindrome(12345678901) . \"\\n\";\necho next_smallest_palindrome(123456789012) . \"\\n\";\necho next_smallest_palindrome(1234567890123) . \"\\n\";\necho next_smallest_palindrome(12345678901234) . \"\\n\";\necho next_smallest_palindrome(123456789012345) . \"\\n\";\necho next_smallest_palindrome(1234567890123456) . \"\\n\";\necho next_smallest_palindrome(12345678901234567) . \"\\n\";\necho next_smallest_palindrome(123456789012345678) . \"\\n\";\necho next_smallest_palindrome(1234567890123456789) . \"\\n\";\necho next_smallest_palindrome(12345678901234567890) . \"\\n\";\necho next_smallest_palindrome(123456789012345678901) . \"\\n\";\necho next_smallest_palindrome(1234567890123456789012) . \"\\n\";\necho next_smallest_palindrome(123",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $num = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($num > $num) {\n        $left = strrev((string)((int)$left + 1));\n        $num = $left . ($len % 2 ? $num[$half] : '') . $right;\n    }\n    return (int)$num;\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234567) . \"\\n\";\necho next_smallest_palindrome(12345678) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567890) . \"\\n\";\necho next_smallest_palindrome(12345678901) . \"\\n\";\necho next_smallest_palindrome(123456789012) . \"\\n\";\necho next_smallest_palindrome(1234567890123) . \"\\n\";\necho next_smallest_palindrome(12345678901234) . \"\\n\";\necho next_smallest_palindrome(123456789012345) . \"\\n\";\necho next_smallest_palindrome(1234567890123456) . \"\\n\";\necho next_smallest_palindrome(12345678901234567) . \"\\n\";\necho next_smallest_palindrome(123456789012345678) . \"\\n\";\necho next_smallest_palindrome(1234567890123456789) . \"\\n\";\necho next",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = (int) ($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $mid_num = (int) $mid_num;\n        $mid_num++;\n        $mid_num = (string) $mid_num;\n        $num = $left . $mid_num . $right;\n    } else {\n        $num = $left . $right;\n    }\n    return (int) $num;\n}\n\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(1234321);\necho \"\\n\";\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(123454321);\necho \"\\n\";\necho next_smallest_palindrome(1234554321);\necho \"\\n\";\necho next_smallest_palindrome(12345654321);\necho \"\\n\";\necho next_smallest_palindrome(1234567654321);\necho \"\\n\";\necho next_smallest_palindrome(123456787654321);\necho \"\\n\";\necho next_smallest_palindrome(12345678987654321);\necho \"\\n\";\necho next_smallest_palindrome(123456789987654321);\necho \"\\n\";\necho next_smallest_palindrome(12345678999987654321);\necho \"\\n\";\necho next_smallest_palindrome(123456789999987654321);\necho \"\\n\";\necho next_smallest_palindrome(1234567899999987654321);\necho \"\\n\";\necho next_smallest_palindrome(123456789999999987654321);\necho \"\\n\";\necho next_smallest_palindrome(1234567899999999987654321);\necho \"\\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = (string)((int)$left + 1);\n    $right = strrev($left);\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n\necho next_smallest_palindrome(12345);",
    "    $num++;\n    while (true) {\n        if (is_palindrome($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "    $num = strval($num);\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strval(intval($left) + 1);\n        $left_rev = strrev($left);\n        $right = $left_rev;\n    }\n    return intval($left . $right);\n}\n\n$num = '12345';\necho next_smallest_palindrome($num);\n",
    "    $num_str = strval($num);\n    $num_len = strlen($num_str);\n    $mid = floor($num_len / 2);\n    $left = substr($num_str, 0, $mid);\n    $right = strrev($left);\n    if ($num_len % 2 == 1) {\n        $mid_num = substr($num_str, $mid, 1);\n        $mid_num = intval($mid_num);\n        if ($mid_num != 9) {\n            $mid_num++;\n            $mid_num = strval($mid_num);\n        } else {\n            $mid_num = '0';\n            $left = strval(intval($left) + 1);\n        }\n    }\n    return intval($left . $mid_num . $right);\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(1235321) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(1234654321) . \"\\n\";\necho next_smallest_palindrome(1234654321) . \"\\n\";\necho next_smallest_palindrome(1234654321) . \"\\n\";\necho next_smallest_palindrome(1234654321) . \"\\n\";\necho next_smallest_palindrome(1234654321) . \"\\n\";\necho next_smallest_palindrome(1234654321) . \"\\n\";\necho next_smallest_palindrome(1234654321) . \"\\n\";\necho next_smallest_palindrome(1234654321) . \"\\n\";\necho next_smallest_palindrome(1234654321) .",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    $palindrome = $left . $right;\n    if ($palindrome > $num) {\n        return (int)$palindrome;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    return (int)$left . $right;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234567) . \"\\n\";\necho next_smallest_palindrome(12345678) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567890) . \"\\n\";\necho next_smallest_palindrome(12345678901) . \"\\n\";\necho next_smallest_palindrome(123456789012) . \"\\n\";\necho next_smallest_palindrome(1234567890123) . \"\\n\";\necho next_smallest_palindrome(12345678901234) . \"\\n\";\necho next_smallest_palindrome(123456789012345) . \"\\n\";\necho next_smallest_palindrome(1234567890123456) . \"\\n\";\necho next_smallest_palindrome(12345678901234567) . \"\\n\";\necho next_smallest_palindrome(123456789012345678) . \"\\n\";\necho next_smallest_palindrome(1234567890123456789)",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $mid = floor($len / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid_num = $num[$mid];\n    $right = substr($right, 1);\n  } else {\n    $mid_num = '';\n  }\n  if ($left . $mid_num . $right > $num) {\n    return (int)($left . $mid_num . $right);\n  }\n  $carry = 1;\n  for ($i = $mid - 1; $i >= 0; $i--) {\n    $sum = $left[$i] + $carry;\n    $left[$i] = $sum % 10;\n    $carry = floor($sum / 10);\n  }\n  if ($carry == 1) {\n    $left = '1' . $left;\n    $right = substr($right, 1);\n  }\n  return (int)($left . $mid_num . strrev($left));\n}\n\necho next_smallest_palindrome(1) . \"\\n\";\necho next_smallest_palindrome(2) . \"\\n\";\necho next_smallest_palindrome(3) . \"\\n\";\necho next_smallest_palindrome(9) . \"\\n\";\necho next_smallest_palindrome(10) . \"\\n\";\necho next_smallest_palindrome(11) . \"\\n\";\necho next_smallest_palindrome(12) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(100) . \"\\n\";\necho next_smallest_palindrome(101) . \"\\n\";\necho next_smallest_palindrome(111) . \"\\n\";\necho next_smallest_palindrome(121) . \"\\n\";\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev((string)((int)$left + 1));\n    $right = substr($left, 0, $half);\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    $new_num = $left . $right;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    if ($left[0] != '9') {\n        $left[0]++;\n        $right = strrev($left);\n        if ($len % 2 == 1) {\n            $right = substr($right, 1);\n        }\n        $new_num = $left . $right;\n        return $new_num;\n    }\n    $left = '0' . $left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    $new_num = $left . $right;\n    return $new_num;\n}\n\necho next_smallest_palindrome(11) . PHP_EOL;\necho next_smallest_palindrome(12) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(999) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(1234567899) . PHP_EOL;",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half_len = floor($len / 2);\n    $left = substr($num, 0, $half_len);\n    $right = substr($num, $half_len + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . ($len % 2 ? $num[$half_len] : '') . $left_rev;\n    } else {\n        $left = (string)((int)$left + 1);\n        $left_rev = strrev($left);\n        $num = $left . ($len % 2 ? $num[$half_len] : '') . $left_rev;\n    }\n    return (int)$num;\n}\n\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1243) . PHP_EOL;\necho next_smallest_palindrome(1331) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(999) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(12321) . PHP_EOL;\necho next_smallest_palindrome(123321) . PHP_EOL;\necho next_smallest_palindrome(123322) . PHP_EOL;\necho next_smallest_palindrome(123323) . PHP_EOL;\necho next_smallest_palindrome(123324) . PHP_EOL;\necho next_smallest_palindrome(123325) . PHP_EOL;\necho next_smallest_palindrome(123326) . PHP_EOL;\necho next_smallest_palindrome(123327) . PHP_EOL;\necho next_smallest_palindrome(123328) . PHP_EOL;\necho next_small",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n    } else {\n        $left = (string)((int)$left + 1);\n        $left_rev = strrev($left);\n        $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n    }\n    return (int)$num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        return $left . $left_rev;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $left_rev = strrev($left);\n    return $left . $left_rev;\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = strrev($left);\n    if ($len % 2 === 0) {\n        $right = substr($num, $half);\n    } else {\n        $right = substr($num, $half + 1);\n    }\n    if ($right < $left) {\n        $left = (string) (intval($left) + 1);\n        $right = strrev($left);\n        if ($len % 2 === 0) {\n            $num = $left . $right;\n        } else {\n            $num = $left . substr($num, $half, 1) . $right;\n        }\n    } else {\n        $num = $left . substr($num, $half, 1) . $right;\n    }\n    return intval($num);\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len/2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + $len%2);\n  $right = strrev($left);\n  $new_num = $left.$right;\n  if ($new_num > $num) {\n    return (int)$new_num;\n  }\n  $left = (int)$left;\n  $left++;\n  $left = (string)$left;\n  $right = strrev($left);\n  $new_num = $left.$right;\n  return (int)$new_num;\n}\n\necho next_smallest_palindrome(11) . PHP_EOL;\necho next_smallest_palindrome(188) . PHP_EOL;\necho next_smallest_palindrome(191) . PHP_EOL;\necho next_smallest_palindrome(2541) . PHP_EOL;\necho next_smallest_palindrome(9999) . PHP_EOL;\necho next_smallest_palindrome(9998) . PHP_EOL;\necho next_smallest_palindrome(9997) . PHP_EOL;\necho next_smallest_palindrome(9996) . PHP_EOL;\necho next_smallest_palindrome(9995) . PHP_EOL;\necho next_smallest_palindrome(9994) . PHP_EOL;\necho next_smallest_palindrome(9993) . PHP_EOL;\necho next_smallest_palindrome(9992) . PHP_EOL;\necho next_smallest_palindrome(9991) . PHP_EOL;\necho next_smallest_palindrome(9990) . PHP_EOL;\necho next_smallest_palindrome(9989) . PHP_EOL;\necho next_smallest_palindrome(9988) . PHP_EOL;\necho next_smallest_palindrome(9987) . PHP_EOL;\necho",
    "    $num_str = (string)$num;\n    $num_len = strlen($num_str);\n    $num_half = floor($num_len / 2);\n    $num_left = substr($num_str, 0, $num_half);\n    $num_right = substr($num_str, $num_len - $num_half);\n    $num_left_rev = strrev($num_left);\n    if ($num_left_rev > $num_right) {\n        $num_right = $num_left_rev;\n    } else {\n        $num_left = strrev(++$num_left);\n        $num_right = $num_left;\n    }\n    return (int)$num_left . $num_right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_element = $num[$mid];\n        $right = $mid_element . $right;\n    }\n    if ($right > $left) {\n        return $left . $right;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_element = $num[$mid];\n        $right = $mid_element . $right;\n    }\n    return $left . $right;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(12345678987654321) . \"\\n\";\necho next_smallest_palindrome(123456789876543210) . \"\\n\";",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len/2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + ($len % 2));\n  $right = strrev($left);\n  $new_num = $left.$right;\n  if ($new_num > $num) {\n    return $new_num;\n  } else {\n    $left = (string)((int)$left + 1);\n    $right = strrev($left);\n    return $left.$right;\n  }\n}\n\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1221) . PHP_EOL;\necho next_smallest_palindrome(1233) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(123456) . PHP_EOL;\necho next_smallest_palindrome(1234567) . PHP_EOL;\necho next_smallest_palindrome(12345678) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(1234567890) . PHP_EOL;\necho next_smallest_palindrome(12345678901) . PHP_EOL;\necho next_smallest_palindrome(123456789012) . PHP_EOL;\necho next_smallest_palindrome(1234567890123) . PHP_EOL;\necho next_smallest_palindrome(12345678901234) . PHP_EOL;\necho next_smallest_palindrome(123456789012345) . PHP_EOL;\necho next_smallest_palindrome(1234567890123456",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left . $mid_char . $right;\n    } else {\n        $palin = $left . $right;\n    }\n    if ($palin > $num) {\n        return $palin;\n    }\n    $k = ($len % 2 == 1) ? $mid - 1 : $mid;\n    $carry = 1;\n    while ($k >= 0 && $carry > 0) {\n        $sum = (int) $left[$k] + $carry;\n        $carry = floor($sum / 10);\n        $left[$k] = $sum % 10;\n        $k--;\n    }\n    if ($carry > 0) {\n        $left = '1' . $left;\n    }\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $palin = $left . $mid_char . $right;\n    } else {\n        $palin = $left . $right;\n    }\n    return $palin;\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(123421) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(12343210) . \"\\n\";\necho next_smallest_palindrome(12343211) . \"\\n\";\necho next_smallest_palindrome(12343212) . \"\\n\";\necho next",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $half, 1);\n        $right = $mid . $right;\n    }\n    if ($num < $left . $right) {\n        return $left . $right;\n    }\n    $left = (int) $left;\n    $left++;\n    $left = (string) $left;\n    $right = strrev($left);\n    return $left . $right;\n}\n\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(1234567) . PHP_EOL;\necho next_smallest_palindrome(12345678) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(1234567890) . PHP_EOL;\necho next_smallest_palindrome(12345678901) . PHP_EOL;\necho next_smallest_palindrome(123456789012) . PHP_EOL;\necho next_smallest_palindrome(1234567890123) . PHP_EOL;",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $mid, 1);\n    }\n    $num = $left . $mid . $right;\n    if ($num < $num) {\n        if ($mid != 9) {\n            $mid = $mid + 1;\n            $num = $left . $mid . $right;\n        } else {\n            $left = $left + 1;\n            $right = strrev($left);\n            $num = $left . $mid . $right;\n        }\n    }\n    return $num;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while (true) {\n        $num_str = (string)$num;\n        $num_str_len = strlen($num_str);\n        $num_str_rev = strrev($num_str);\n        if ($num_str == $num_str_rev) {\n            return $num;\n        }\n        $num++;\n    }\n}\n\necho next_smallest_palindrome(123);",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right >= $left) {\n        $left = str_pad((string)($left + 1), $mid, '0', STR_PAD_LEFT);\n        $right = strrev($left);\n    }\n    return (int)$left . $right;\n}\n\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(1234567) . PHP_EOL;\necho next_smallest_palindrome(12345678) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(1234567890) . PHP_EOL;\necho next_smallest_palindrome(12345678901) . PHP_EOL;\necho next_smallest_palindrome(123456789012) . PHP_EOL;\necho next_smallest_palindrome(1234567890123) . PHP_EOL;\necho next_smallest_palindrome(12345678901234) . PHP_EOL;\necho next_smallest_palindrome(123456789012345) . PHP_EOL;\necho next_smallest_palindrome(1234567890123456) . PHP_EOL;\necho next_smallest_palindrome(12345678901234567) . PHP_EOL;\necho next_smallest_palindrome(123456789012345678) . PHP_EOL;\necho next_smallest_",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    $new_num = $left . $right;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    if ($left[0] != 9) {\n        $left[0]++;\n        $right = strrev($left);\n        if ($len % 2 == 1) {\n            $right = substr($right, 1);\n        }\n        return $left . $right;\n    }\n    for ($i = 0; $i < $mid; $i++) {\n        $left[$i] = 0;\n    }\n    $left[0] = 1;\n    $left .= 0;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    return $left . $right;\n}\n\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;\necho next_smallest_palindrome(12345678987654321) . PHP_EOL;",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_digit = $num[$mid];\n        $left = $left . $mid_digit;\n    }\n    $palindrome = $left . $right;\n    if ($palindrome > $num) {\n        return $palindrome;\n    }\n    $left = (int) $left;\n    $left += 1;\n    $left = (string) $left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_digit = $left[$mid];\n        $left = $left . $mid_digit;\n    }\n    $palindrome = $left . $right;\n    return $palindrome;\n}\n\necho next_smallest_palindrome(1234);\necho next_smallest_palindrome(1331);\necho next_smallest_palindrome(99);\necho next_smallest_palindrome(1213);\necho next_smallest_palindrome(1221);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12321);\necho next_smallest_palindrome(99999);\necho next_smallest_palindrome(999999);\necho next_smallest_palindrome(9999999);\necho next_smallest_palindrome(99999999);\necho next_smallest_palindrome(999999999);\necho next_smallest_palindrome(9999999999);\necho next_smallest_palindrome(99999999999);\necho next_smallest_palindrome(999999999999);\necho next_smallest_palindrome(9999999999999);\necho next_smallest_palindrome(99999999999999);\necho next_smallest_palindrome(999999999999999);\necho next_smallest_palindrome(9999999999999999);",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $half, 1);\n    }\n    $next_palindrome = $left.$mid.$right;\n    if ($next_palindrome > $num) {\n        return $next_palindrome;\n    }\n    if ($mid != '9') {\n        $mid = '9';\n        $next_palindrome = $left.$mid.$right;\n        return $next_palindrome;\n    }\n    $carry = 1;\n    $left = strrev($left);\n    for ($i = 0; $i < $half; $i++) {\n        $sum = (int)$left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = floor($sum / 10);\n    }\n    if ($carry == 1) {\n        $left = '1'.$left;\n        $right = $left;\n    } else {\n        $right = strrev($left);\n    }\n    $next_palindrome = $left.$right;\n    return $next_palindrome;\n}\n\n$num = 9;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 99;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 999;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 9999;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 99999;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 999999;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num = 9999999;\necho next_smallest_palindrome($num);\necho \"\\n\";\n\n$num =",
    "    $num_str = strval($num);\n    $num_len = strlen($num_str);\n    $num_half = floor($num_len / 2);\n    $num_left = substr($num_str, 0, $num_half);\n    $num_right = strrev($num_left);\n    $num_left_int = intval($num_left);\n    $num_right_int = intval($num_right);\n    $num_left_int_next = $num_left_int + 1;\n    $num_right_int_next = $num_right_int + 1;\n    $num_left_next = strval($num_left_int_next);\n    $num_right_next = strval($num_right_int_next);\n    $num_left_next_len = strlen($num_left_next);\n    $num_right_next_len = strlen($num_right_next);\n    if ($num_left_next_len > $num_half) {\n        $num_left_next = substr($num_left_next, 1);\n        $num_right_next = strrev($num_left_next);\n    } elseif ($num_right_next_len > $num_half) {\n        $num_right_next = substr($num_right_next, 1);\n        $num_left_next = strrev($num_right_next);\n    }\n    $num_next = $num_left_next . $num_right_next;\n    if ($num_len % 2 == 1) {\n        $num_next = $num_left_next . substr($num_str, $num_half, 1) . $num_right_next;\n    }\n    return intval($num_next);\n}\n",
    "    $num++;\n    while (true) {\n        if (is_palindrome($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_digit = $num[$mid];\n        $right = substr($right, 1);\n    } else {\n        $mid_digit = '';\n    }\n    if ($left . $mid_digit . $right > $num) {\n        return (int) ($left . $mid_digit . $right);\n    }\n    $carry = 1;\n    for ($i = $mid - 1; $i >= 0; $i--) {\n        $sum = (int) $left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = floor($sum / 10);\n    }\n    if ($carry == 1) {\n        $left = '1' . $left;\n        $right = substr($right, 1);\n    }\n    return (int) ($left . $mid_digit . strrev($left));\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(1231) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123331) . \"\\n\";\necho next_smallest_palindrome(123421) . \"\\n\";\necho next_smallest_palindrome(123431) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(1234554321) . \"\\n\";\necho next_smallest_palindrome(12345654321) . \"\\n\";\necho next_smallest_palindrome",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $half, 1);\n        $right = $mid . $right;\n    }\n    if ($num < $left . $right) {\n        return $left . $right;\n    }\n    $left = (int)$left;\n    $left += 1;\n    $left = (string)$left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $half, 1);\n        $right = $mid . $right;\n    }\n    return $left . $right;\n}\n",
    "    $num_str = strval($num);\n    $num_len = strlen($num_str);\n    $num_arr = str_split($num_str);\n    $num_arr_rev = array_reverse($num_arr);\n    $num_arr_rev_str = implode($num_arr_rev);\n    $num_arr_rev_int = intval($num_arr_rev_str);\n    if ($num_arr_rev_int > $num) {\n        return $num_arr_rev_int;\n    } else {\n        $num_arr_rev_int = $num_arr_rev_int + 1;\n        $num_arr_rev_str = strval($num_arr_rev_int);\n        $num_arr_rev = str_split($num_arr_rev_str);\n        $num_arr_rev_len = count($num_arr_rev);\n        $num_arr_rev_half = floor($num_arr_rev_len / 2);\n        $num_arr_rev_half_str = implode(array_slice($num_arr_rev, 0, $num_arr_rev_half));\n        $num_arr_rev_half_int = intval($num_arr_rev_half_str);\n        $num_arr_rev_half_int = $num_arr_rev_half_int + 1;\n        $num_arr_rev_half_str = strval($num_arr_rev_half_int);\n        $num_arr_rev_half_arr = str_split($num_arr_rev_half_str);\n        $num_arr_rev_half_arr_len = count($num_arr_rev_half_arr);\n        $num_arr_rev_half_arr_len_diff = $num_arr_rev_half - $num_arr_rev_half_arr_len;\n        $num_arr_rev_half_arr_len_diff_arr = array_fill(0, $num_arr_rev_half_arr_len_diff, 0);\n        $num_arr_rev_half_arr = array_merge($num_arr_",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = substr($right, 1);\n    }\n    if ($left . $mid_num . $right > $num) {\n        return $left . $mid_num . $right;\n    }\n    $carry = 1;\n    for ($i = $mid - 1; $i >= 0; $i--) {\n        $sum = $left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = floor($sum / 10);\n    }\n    if ($carry == 1) {\n        $left = '1' . $left;\n        $right = substr($right, 1);\n    }\n    return $left . $mid_num . strrev($left);\n}\n",
    "  $num_length = strlen($num);\n  $num_half_length = floor($num_length / 2);\n  $num_half = substr($num, 0, $num_half_length);\n  $num_half_reversed = strrev($num_half);\n  $num_half_reversed_length = strlen($num_half_reversed);\n  $num_half_reversed_half_length = floor($num_half_reversed_length / 2);\n  $num_half_reversed_half = substr($num_half_reversed, 0, $num_half_reversed_half_length);\n  $num_half_reversed_half_next = $num_half_reversed_half + 1;\n  $num_half_reversed_half_next_length = strlen($num_half_reversed_half_next);\n  $num_half_reversed_half_next_half_length = floor($num_half_reversed_half_next_length / 2);\n  $num_half_reversed_half_next_half = substr($num_half_reversed_half_next, 0, $num_half_reversed_half_next_half_length);\n  $num_half_reversed_half_next_half_reversed = strrev($num_half_reversed_half_next_half);\n  $num_half_reversed_half_next_half_reversed_length = strlen($num_half_reversed_half_next_half_reversed);\n  $num_half_reversed_half_next_half_reversed_half_length = floor($num_half_reversed_half_next_half_reversed_length / 2);\n  $num_half_reversed_half_next_half_reversed_half = substr($num_half_reversed_half_next_half_reversed, 0, $num_half_reversed_half_next_half_reversed_half_length);\n  $num_half_re",
    "    $num = strval($num);\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len-$half);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . $left_rev;\n    } else {\n        $left = strval(intval($left) + 1);\n        $left_rev = strrev($left);\n        $num = $left . $left_rev;\n    }\n    return intval($num);\n}\n\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1221) . PHP_EOL;\necho next_smallest_palindrome(1231) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(12321) . PHP_EOL;\necho next_smallest_palindrome(12331) . PHP_EOL;\necho next_smallest_palindrome(12341) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;\necho next_smallest_palindrome(123454331) . PHP_EOL;\necho next_smallest_palindrome(123454431) . PHP_EOL;\necho next_smallest_palindrome(123454541) . PHP_EOL;\necho next_smallest_palindrome(123454551) . PHP_EOL;",
    "  $num++;\n  while (!is_palindrome($num)) {\n    $num++;\n  }\n  return $num;\n}\n",
    "    $num = $num + 1;\n    while (true) {\n        if (strrev($num) == $num) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right >= $left) {\n        $left = (int)$left + 1;\n        $right = strrev($left);\n        if ($len % 2 == 1) {\n            $right = $mid_num . $right;\n        }\n    }\n    return (int)$left . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $right = strrev($left);\n    $new = $left . $right;\n    if ($new > $num) {\n        return $new;\n    }\n    $left = str_split($left);\n    $i = $half - 1;\n    while ($i >= 0 && $left[$i] == 9) {\n        $left[$i] = 0;\n        $i--;\n    }\n    if ($i < 0) {\n        $left = array_merge([1], $left);\n    } else {\n        $left[$i]++;\n    }\n    $left = implode('', $left);\n    $right = strrev($left);\n    return $left . $right;\n}\n",
    "    $num_str = (string)$num;\n    $len = strlen($num_str);\n    if ($len == 1) {\n        return $num;\n    }\n    $half_len = floor($len / 2);\n    $left_half = substr($num_str, 0, $half_len);\n    $right_half = strrev($left_half);\n    $left_half_int = (int)$left_half;\n    $right_half_int = (int)$right_half;\n    $left_half_int_next = $left_half_int + 1;\n    $right_half_int_next = $right_half_int + 1;\n    $left_half_next = (string)$left_half_int_next;\n    $right_half_next = (string)$right_half_int_next;\n    $right_half_next = strrev($left_half_next);\n    $next_palindrome = $left_half_next . $right_half_next;\n    if ($len % 2 == 1) {\n        $next_palindrome = substr_replace($next_palindrome, $num_str[$half_len], $half_len, 0);\n    }\n    return (int)$next_palindrome;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $next_palindrome = $left . ($len % 2 ? $num[$mid] : '') . $right;\n    if ($next_palindrome > $num) {\n        return $next_palindrome;\n    }\n    $k = ($len % 2) ? $mid : $mid - 1;\n    $carry = 1;\n    while ($k >= 0 && $carry) {\n        $s = $left[$k] + $carry;\n        $left[$k] = $s % 10;\n        $carry = floor($s / 10);\n        $k--;\n    }\n    $left = ($carry ? '1' : '') . $left;\n    $right = strrev($left);\n    return $left . ($len % 2 ? $num[$mid] : '') . $right;\n}\n",
    "    $num++;\n    while (true) {\n        $num_str = strval($num);\n        if ($num_str === strrev($num_str)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $left = substr($num, 0, $mid);\n        $right = strrev($left);\n    }\n    if ($left . $mid_num . $right > $num) {\n        return $left . $mid_num . $right;\n    }\n    $k = 1;\n    while ($left . $mid_num . $right <= $num) {\n        $left = (string)((int)$left + $k);\n        $right = strrev($left);\n        if ($len % 2 == 1) {\n            $mid_num = $num[$mid];\n        }\n    }\n    return $left . $mid_num . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $new_num = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    $left = strrev((string)((int)$left + 1));\n    $right = strrev($left);\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(123321) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123333321) . PHP_EOL;\necho next_smallest_palindrome(1233333321) . PHP_EOL;\necho next_smallest_palindrome(123333333321) . PHP_EOL;\necho next_smallest_palindrome(12333333333321) . PHP_EOL;\necho next_smallest_palindrome(1233333333333321) . PHP_EOL;\necho next_smallest_palindrome(123333333333333321) . PHP_EOL;\necho next_smallest_palindrome(12333333333333333321) . PHP_EOL;\necho next_smallest_palindrome(1233333333333333333321) . PHP_EOL;\necho next_smallest_palindrome(123333333333333333333321) . PHP_EOL;\necho next_smallest_palindrome(1233333333333333333333",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = (int) floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $next_left = (int) $left + 1;\n    $next_right = strrev($next_left);\n    if ($next_left . $next_right > $num) {\n        return (int) $next_left . $next_right;\n    }\n    $left = strrev($left);\n    $right = strrev($right);\n    if ($left > $right) {\n        return (int) $left . substr($left, 0, $len % 2 ? $half - 1 : $half);\n    }\n    return (int) $right . substr($right, 0, $len % 2 ? $half - 1 : $half);\n}\n",
    "  $num_str = (string) $num;\n  $num_len = strlen($num_str);\n  $num_arr = str_split($num_str);\n  $num_arr_rev = array_reverse($num_arr);\n  $num_arr_rev_str = implode($num_arr_rev);\n  $num_arr_rev_int = (int) $num_arr_rev_str;\n  if ($num_arr_rev_int > $num) {\n    return $num_arr_rev_int;\n  } else {\n    if ($num_len % 2 === 0) {\n      $num_arr_rev_int = $num_arr_rev_int + pow(10, $num_len / 2);\n    } else {\n      $num_arr_rev_int = $num_arr_rev_int + pow(10, ($num_len - 1) / 2);\n    }\n    return $num_arr_rev_int;\n  }\n}\n\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(1234);\necho next_smallest_palindrome(123456789);\necho next_smallest_palindrome(1234567891);\necho next_smallest_palindrome(12345678901);\necho next_smallest_palindrome(123456789012);\necho next_smallest_palindrome(1234567890123);\necho next_smallest_palindrome(12345678901234);\necho next_smallest_palindrome(123456789012345);\necho next_smallest_palindrome(1234567890123456);\necho next_smallest_palindrome(12345678901234567);\necho next_smallest_palindrome(123456789012345678);\necho next_smallest_palindrome(1234567890123456789);\necho next_smallest_palindrome(12345678901234567890);\necho next_smallest_palindrome(123456789012345678901);",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    if ($palin > $num) {\n        return (int)$palin;\n    }\n    $k = ($len % 2 == 1) ? $mid - 1 : $mid;\n    $carry = 1;\n    while ($k >= 0 && $carry > 0) {\n        $sum = (int)$left[$k] + $carry;\n        $carry = floor($sum / 10);\n        $left[$k] = $sum % 10;\n        $k--;\n    }\n    if ($carry > 0) {\n        $left = '1'.$left;\n    }\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    return (int)$palin;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(252) . \"\\n\";\necho next_smallest_palindrome(1) . \"\\n\";\necho next_smallest_palindrome(2) . \"\\n\";\necho next_smallest_palindrome(9) . \"\\n\";\necho next_smallest_palindrome(11) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(123454321) .",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = $num + 1;\n    while (true) {\n        if ($num == strrev($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n\necho next_smallest_palindrome(12);\necho \"\\n\";\necho next_smallest_palindrome(11);\necho \"\\n\";\necho next_smallest_palindrome(99);\necho \"\\n\";\necho next_smallest_palindrome(99999);\necho \"\\n\";\necho next_smallest_palindrome(999999);\necho \"\\n\";\necho next_smallest_palindrome(9999999);\necho \"\\n\";\necho next_smallest_palindrome(99999999);\necho \"\\n\";\necho next_smallest_palindrome(999999999);\necho \"\\n\";\necho next_smallest_palindrome(9999999999);\necho \"\\n\";\necho next_smallest_palindrome(99999999999);\necho \"\\n\";\necho next_smallest_palindrome(999999999999);\necho \"\\n\";\necho next_smallest_palindrome(9999999999999);\necho \"\\n\";\necho next_smallest_palindrome(99999999999999);\necho \"\\n\";\necho next_smallest_palindrome(999999999999999);\necho \"\\n\";\necho next_smallest_palindrome(9999999999999999);\necho \"\\n\";\necho next_smallest_palindrome(99999999999999999);\necho \"\\n\";\necho next_smallest_palindrome(999999999999999999);\necho \"\\n\";\necho next_smallest_palindrome(9999999999999999999);\necho \"\\n\";\necho next_smallest_palindrome(99999999999999999999);\necho \"\\n\";\necho next_smallest_palindrome(999999999999999999999);\necho \"\\n\";\necho next_smallest_palindrome(9999999999999999999999);\necho \"\\n\";\necho next_smallest_palindrome(99999999999999999999999);\necho \"\\n\";\necho next_smallest_palindrome(9999",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len%2);\n    $right = strrev($left);\n    $new_num = $left.$right;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    $left = strrev((string)((int)$left + 1));\n    $right = substr($left, 0, $half);\n    $new_num = $left.$right;\n    return $new_num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        return $left . substr($left_rev, $len % 2);\n    }\n    $left = (string)((int)$left + 1);\n    $left_rev = strrev($left);\n    return $left . substr($left_rev, $len % 2);\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234567) . \"\\n\";\necho next_smallest_palindrome(12345678) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567890) . \"\\n\";\necho next_smallest_palindrome(12345678901) . \"\\n\";\necho next_smallest_palindrome(123456789012) . \"\\n\";\necho next_smallest_palindrome(1234567890123) . \"\\n\";\necho next_smallest_palindrome(12345678901234) . \"\\n\";\necho next_smallest_palindrome(123456789012345) . \"\\n\";\necho next_smallest_palindrome(1234567890123456) . \"\\n\";\necho next_smallest_palindrome(12345678901234567) . \"\\n\";\necho next_smallest_palindrome(123456789012345678) . \"\\n\";\necho next_smallest_palindrome(1234567890123456789) . \"\\n\";\necho next_smallest_palindrome(12345678901234567890)",
    "    $num = strval($num);\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        return intval($left . $left_rev);\n    } else {\n        $left = strval(intval($left) + 1);\n        $left_rev = strrev($left);\n        return intval($left . $left_rev);\n    }\n}\n",
    "  $num++;\n  while (!is_palindrome($num)) {\n    $num++;\n  }\n  return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $next_palindrome = $left . ($len % 2 != 0 ? $num[$mid] : '') . $right;\n    if ($next_palindrome > $num) {\n        return (int)$next_palindrome;\n    }\n    $k = pow(10, $mid) - 1;\n    if ($len % 2 != 0) {\n        $next_palindrome = $left . ($num[$mid] + 1) . $right;\n        if ($next_palindrome <= $k) {\n            return (int)$next_palindrome;\n        }\n        $left = $left + 1;\n        $right = strrev($left);\n        return (int)$left . $right;\n    }\n    $left = $left + 1;\n    $right = strrev($left);\n    $next_palindrome = $left . $right;\n    if ($next_palindrome <= $k) {\n        return (int)$next_palindrome;\n    }\n    $left = $left + 1;\n    $right = strrev($left);\n    return (int)$left . $right;\n}\n\necho next_smallest_palindrome(1) . \"\\n\";\necho next_smallest_palindrome(2) . \"\\n\";\necho next_smallest_palindrome(3) . \"\\n\";\necho next_smallest_palindrome(9) . \"\\n\";\necho next_smallest_palindrome(11) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(101) . \"\\n\";\necho next_smallest_palindrome(111) . \"\\n\";\necho next_smallest_palindrome(121) . \"\\n\";\necho next_smallest_palindrome(202) . \"\\n\";\necho next_smallest_pal",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num.$right;\n    }\n    if ($right >= $left) {\n        $left = str_pad((string)($left + 1), $mid, '0', STR_PAD_LEFT);\n        $right = strrev($left);\n    }\n    return (int)$left.$right;\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123322) . \"\\n\";\necho next_smallest_palindrome(123322) . \"\\n\";\necho next_smallest_palindrome(1) . \"\\n\";\necho next_smallest_palindrome(2) . \"\\n\";\necho next_smallest_palindrome(3) . \"\\n\";\necho next_smallest_palindrome(9) . \"\\n\";\necho next_smallest_palindrome(11) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(101) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(1001) . \"\\n\";\necho next_smallest_palindrome(9999) . \"\\n\";\necho next_smallest_palindrome(10001) . \"\\n\";\necho next_smallest_palindrome(99999) . \"\\n\";\necho next_smallest_palindrome(10000",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $left = (string)((int)$left + 1);\n        $left_rev = strrev($left);\n    }\n    return (int)$left . $left_rev;\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $i = 0;\n    $j = $len - 1;\n    $mid = floor($len / 2);\n    while ($i <= $mid) {\n        if ($num[$i] != $num[$j]) {\n            $num[$j] = $num[$i];\n        }\n        $i++;\n        $j--;\n    }\n    return (int) $num;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $mid, 1);\n    }\n    $next = $left . $mid . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    if ($mid != 9) {\n        $mid = (int)$mid + 1;\n        $next = $left . $mid . $right;\n        return $next;\n    }\n    $left = (int)$left + 1;\n    $left = (string)$left;\n    $right = strrev($left);\n    $next = $left . $right;\n    return $next;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(1235) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123322) . \"\\n\";\necho next_smallest_palindrome(123323) . \"\\n\";\necho next_smallest_palindrome(123324) . \"\\n\";\necho next_smallest_palindrome(123325) . \"\\n\";\necho next_smallest_palindrome(123326) . \"\\n\";\necho next_smallest_palindrome(123327) . \"\\n\";\necho next_smallest_palindrome(123328) . \"\\n\";\necho next_smallest_palindrome(123329) . \"\\n\";\necho next_smallest_palindrome(123330) . \"\\n\";\necho next_smallest_palindrome(123331) .",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = (int) ($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n    } else {\n        $left = (string) ((int) $left + 1);\n        $left_rev = strrev($left);\n        $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n    }\n    return (int) $num;\n}\n",
    "    $num_str = strval($num);\n    $num_str_len = strlen($num_str);\n    $num_str_half = intval($num_str_len / 2);\n    $num_str_half_left = substr($num_str, 0, $num_str_half);\n    $num_str_half_right = substr($num_str, $num_str_half);\n    $num_str_half_left_rev = strrev($num_str_half_left);\n    if ($num_str_len % 2 == 0) {\n        $num_str_half_right_rev = $num_str_half_right;\n    } else {\n        $num_str_half_right_rev = substr($num_str_half_right, 1);\n    }\n    if ($num_str_half_left_rev == $num_str_half_right_rev) {\n        $num_str_half_left_rev = strval(intval($num_str_half_left_rev) + 1);\n        $num_str_half_left_rev = str_pad($num_str_half_left_rev, $num_str_half, '0', STR_PAD_LEFT);\n        $num_str_half_left_rev = substr($num_str_half_left_rev, 0, $num_str_half);\n        $num_str_half_left_rev = strrev($num_str_half_left_rev);\n        if ($num_str_len % 2 == 0) {\n            $num_str_half_right_rev = $num_str_half_left_rev;\n        } else {\n            $num_str_half_right_rev = substr($num_str_half_left_rev, 1);\n        }\n    }\n    $num_str_new = $num_str_half_left_rev . $num_str_half_right_rev;\n    return intval($num_str_new);\n}\n",
    "  $num++;\n  while (true) {\n    if (is_palindrome($num)) {\n      return $num;\n    }\n    $num++;\n  }\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $right = strrev($left);\n    $new_num = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    $left = str_split($left);\n    $carry = 1;\n    for ($i = $half - 1; $i >= 0; $i--) {\n        $left[$i] += $carry;\n        if ($left[$i] > 9) {\n            $left[$i] = 0;\n            $carry = 1;\n        } else {\n            $carry = 0;\n        }\n    }\n    $left = implode('', $left);\n    if ($carry) {\n        $left = '1' . $left;\n    }\n    $right = strrev($left);\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $mid = floor($len / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid_num = $num[$mid];\n    $right = $mid_num . $right;\n  }\n  if ($right >= $left) {\n    $left = (string)((int)$left + 1);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n      $right = $mid_num . $right;\n    }\n  }\n  return (int)$left . $right;\n}\n\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123421) . \"\\n\";\necho next_smallest_palindrome(12321) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(12344321) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(12345654321) . \"\\n\";\necho next_smallest_palindrome(1234567654321) . \"\\n\";\necho next_smallest_palindrome(123456787654321) . \"\\n\";\necho next_smallest_palindrome(12345678987654321) . \"\\n\";\necho next_smallest_palindrome(1234567890987654321) . \"\\n\";\necho next_smallest_palindrome(123456789010987654321) . \"\\n\";\necho next_smallest_palindrome",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . substr($left_rev, $len % 2);\n    } else {\n        $left = (string)((int)$left + 1);\n        $left_rev = strrev($left);\n        $num = $left . substr($left_rev, $len % 2);\n    }\n    return (int)$num;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num_str = (string)$num;\n    $len = strlen($num_str);\n    $half = (int)($len / 2);\n    $left = substr($num_str, 0, $half);\n    $right = substr($num_str, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(++$left);\n        $right = $left;\n    }\n    return (int)($left . $right);\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1233) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(1231) . \"\\n\";\necho next_smallest_palindrome(123421) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567899) . \"\\n\";\necho next_smallest_palindrome(12345678999) . \"\\n\";\necho next_smallest_palindrome(123456789999) . \"\\n\";\necho next_smallest_palindrome(1234567899999) . \"\\n\";\necho next_smallest_palindrome(12345678999999) . \"\\n\";\necho next_smallest_palindrome(123456789999999) . \"\\n\";\necho next_smallest_palindrome(1234567899999999) . \"\\n\";\necho next_smallest_palindrome(12345678999999999) . \"\\n\";\necho next_smallest_palindrome(123456789999999999) . \"\\n\";\necho next_smallest_palindrome(1234567899999999999) . \"\\n\";\necho next",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        return $left . $left_rev;\n    }\n    $left = (int) $left;\n    $left_rev = (int) $left_rev;\n    $left++;\n    $left_rev = (string) $left_rev;\n    $left_rev = substr($left_rev, 0, $half);\n    return $left . $left_rev;\n}\n",
    "  $num = (string) $num;\n  $len = strlen($num);\n  $mid = floor($len / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid = substr($num, $mid, 1);\n  }\n  $num = $left . $mid . $right;\n  if ($num > $num) {\n    return $num;\n  }\n  if ($mid != 9) {\n    $mid = $mid + 1;\n    $num = $left . $mid . $right;\n    return $num;\n  }\n  $left = $left + 1;\n  $right = strrev($left);\n  $num = $left . $right;\n  return $num;\n}\n\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123421) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123432) . \"\\n\";\necho next_smallest_palindrome(123433) . \"\\n\";\necho next_smallest_palindrome(123434) . \"\\n\";\necho next_smallest_palindrome(123435) . \"\\n\";\necho next_smallest_palindrome(123436) . \"\\n\";\necho next_smallest_palindrome(123437) . \"\\n\";\necho next_smallest_palindrome(123438) . \"\\n\";\necho next_smallest_palindrome(123439) . \"\\n\";\necho next_smallest_palindrome(123444) . \"\\n\";\necho next_smallest_palindrome(123449) . \"\\n\";\necho next_smallest_palindrome(123455) . \"\\",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 0) {\n        $right = substr($num, $mid);\n    }\n    if ($left . $right > $num) {\n        return (int)($left . $right);\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $right = strrev($left);\n    return (int)($left . $right);\n}\n\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(99);\necho \"\\n\";\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(1221);\necho \"\\n\";\necho next_smallest_palindrome(123321);\necho \"\\n\";\necho next_smallest_palindrome(1234321);\necho \"\\n\";\necho next_smallest_palindrome(123421);\necho \"\\n\";\necho next_smallest_palindrome(1234331);\necho \"\\n\";\necho next_smallest_palindrome(12343321);\necho \"\\n\";\necho next_smallest_palindrome(12343331);\necho \"\\n\";\necho next_smallest_palindrome(123433321);\necho \"\\n\";\necho next_smallest_palindrome(123433331);\necho \"\\n\";\necho next_smallest_palindrome(12343333321);\necho \"\\n\";\necho next_smallest_palindrome(12343333331);\necho \"\\n\";\necho next_smallest_palindrome(123433333331);\necho \"\\n\";\necho next_smallest_palindrome(1234333333331);\necho \"\\n\";\necho next_smallest_palindrome(123433333333321);\necho \"\\n\";\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    $palindrome = $left . $right;\n    if ($palindrome > $num) {\n        return $palindrome;\n    }\n    if ($left[0] != 9) {\n        $left[0]++;\n        $right = strrev($left);\n        $right = substr($right, 0, $len - $mid);\n        $palindrome = $left . $right;\n        return $palindrome;\n    }\n    $left = '0' . $left;\n    $left[1]++;\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    $palindrome = $left . $right;\n    return $palindrome;\n}\n",
    "\t$num++;\n\twhile(!is_palindrome($num)) {\n\t\t$num++;\n\t}\n\treturn $num;\n}\n",
    "    $num++;\n    while (true) {\n        if ($num == strrev($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n\necho next_smallest_palindrome(99);",
    "    $num++;\n    while (true) {\n        $num_str = (string)$num;\n        $num_str_len = strlen($num_str);\n        $num_str_half = floor($num_str_len / 2);\n        $num_str_half_rev = strrev(substr($num_str, 0, $num_str_half));\n        if ($num_str_len % 2 == 0) {\n            $num_str_half_rev = substr($num_str_half_rev, 1);\n        }\n        if ($num_str_half_rev == substr($num_str, $num_str_half)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $mid = floor($len/2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  $right = substr($right, 0, $len-$mid);\n  $new_num = $left.$right;\n  if ($new_num > $num) {\n    return (int)$new_num;\n  }\n  if ($len % 2 == 0) {\n    $left = substr($num, 0, $mid);\n    $right = substr($num, $mid);\n    $left = (int)$left;\n    $right = (int)$right;\n    $left++;\n    $left = (string)$left;\n    $right = (string)$right;\n    $new_num = $left.$right;\n    return (int)$new_num;\n  }\n  $left = substr($num, 0, $mid);\n  $right = substr($num, $mid+1);\n  $left = (int)$left;\n  $right = (int)$right;\n  $left++;\n  $left = (string)$left;\n  $right = (string)$right;\n  $new_num = $left.$right;\n  return (int)$new_num;\n}\n\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(1234321);\necho \"\\n\";\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(123454321);\necho \"\\n\";\necho next_smallest_palindrome(123321);\necho \"\\n\";\necho next_smallest_palindrome(123322);\necho \"\\n\";\necho next_smallest_palindrome(123323);\necho \"\\n\";\necho next_smallest_palindrome(123324);\necho \"\\n\";\necho next_smallest_palindrome(123325);\necho \"\\n\";\necho next_smallest_pal",
    "  $num_str = strval($num);\n  $len = strlen($num_str);\n  $half_len = floor($len / 2);\n  $left_half = substr($num_str, 0, $half_len);\n  $right_half = substr($num_str, $half_len + $len % 2);\n  $left_half_rev = strrev($left_half);\n  $right_half_rev = strrev($right_half);\n  if ($left_half_rev > $right_half) {\n    $right_half = $left_half_rev;\n  } else {\n    $left_half = strval(intval($left_half) + 1);\n    $left_half_rev = strrev($left_half);\n    $right_half = $left_half_rev;\n  }\n  return intval($left_half . $right_half);\n}\n",
    "  $num++;\n  while(!is_palindrome($num)) {\n    $num++;\n  }\n  return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = substr($right, 1);\n    } else {\n        $mid_num = '';\n    }\n    if ($left . $mid_num . $right > $num) {\n        return (int)($left . $mid_num . $right);\n    } else {\n        if ($mid_num != '9') {\n            $mid_num = $mid_num + 1;\n            return (int)($left . $mid_num . $right);\n        } else {\n            $carry = 1;\n            $left = strrev($left);\n            for ($i = 0; $i < $mid; $i++) {\n                $sum = $left[$i] + $carry;\n                $left[$i] = $sum % 10;\n                $carry = floor($sum / 10);\n            }\n            $left = strrev($left);\n            if ($carry == 1) {\n                $left = '1' . $left;\n                $right = substr($right, 1);\n            }\n            return (int)($left . $mid_num . $right);\n        }\n    }\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(1235321) . \"\\n\";\necho next_smallest_palindrome(1234567899) . \"\\n\";",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left . $mid_char . $right;\n    } else {\n        $palin = $left . $right;\n    }\n    if ($palin > $num) {\n        return $palin;\n    }\n    $k = ($len % 2 == 1) ? $mid - 1 : $mid;\n    $carry = 1;\n    while ($k >= 0 && $carry > 0) {\n        $sum = (int)$left[$k] + $carry;\n        $carry = floor($sum / 10);\n        $left[$k] = $sum % 10;\n        $k--;\n    }\n    if ($carry > 0) {\n        $left = str_repeat('0', $mid) . $carry . $left;\n    }\n    $right = strrev($left);\n    return $left . $right;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(994684) . \"\\n\";",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = (int)floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = substr($num, $mid + ($len % 2));\n    $right = strrev($left) . ($len % 2 ? $num[$mid] : '') . $right;\n    if ($right <= $num) {\n        $left = (int)$left + 1;\n        $right = strrev($left);\n        $right = $left . ($len % 2 ? $num[$mid] : '') . $right;\n    }\n    return (int)$right;\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $mid = floor($len/2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid_char = $num[$mid];\n    $palin = $left.$mid_char.$right;\n  } else {\n    $palin = $left.$right;\n  }\n  if ($palin > $num) {\n    return $palin;\n  }\n  $k = ($len % 2 == 1) ? $mid : $mid - 1;\n  $left_part_carry = 0;\n  while ($k >= 0 && $left[$k] == '9') {\n    $left[$k] = '0';\n    $k--;\n    $left_part_carry = 1;\n  }\n  if ($k == -1 && $left_part_carry == 1) {\n    $left = '1'.$left;\n    $left[$len-1] = '1';\n  } else {\n    $left[$k] = (int)$left[$k] + 1;\n  }\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $palin = $left.$mid_char.$right;\n  } else {\n    $palin = $left.$right;\n  }\n  return $palin;\n}\n\necho next_smallest_palindrome(99);\necho \"\\n\";\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(99999);\necho \"\\n\";\necho next_smallest_palindrome(1234321);\necho \"\\n\";\necho next_smallest_palindrome(1213);\necho \"\\n\";\necho next_smallest_palindrome(123321);\necho \"\\n\";\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(123421);\necho \"\\n\";\necho",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    if ($len % 2 && $num[$half] < 9) {\n        return $left . ($num[$half] + 1) . $right;\n    }\n    $left = strrev(($left + 1));\n    return $left . ($len % 2 ? 0 : '') . $left;\n}\n\necho next_smallest_palindrome(1234);\necho next_smallest_palindrome(99);\necho next_smallest_palindrome(252);\necho next_smallest_palindrome(6);\necho next_smallest_palindrome(2);\necho next_smallest_palindrome(1);\necho next_smallest_palindrome(1213);\necho next_smallest_palindrome(1221);\necho next_smallest_palindrome(9999);\necho next_smallest_palindrome(9998);\necho next_smallest_palindrome(9997);\necho next_smallest_palindrome(9996);\necho next_smallest_palindrome(9995);\necho next_smallest_palindrome(9994);\necho next_smallest_palindrome(9993);\necho next_smallest_palindrome(9992);\necho next_smallest_palindrome(9991);\necho next_smallest_palindrome(9990);\necho next_smallest_palindrome(9989);\necho next_smallest_palindrome(9988);\necho next_smallest_palindrome(9987);\necho next_smallest_palindrome(9986);\necho next_smallest_palindrome(99",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    if ($palin > $num) {\n        return $palin;\n    }\n    $k = ($len % 2 == 1) ? $mid : $mid - 1;\n    $carry = 1;\n    while ($k >= 0) {\n        $sum = (int)$left[$k] + $carry;\n        $carry = $sum / 10;\n        $left[$k] = $sum % 10;\n        $k--;\n    }\n    if ($carry == 1) {\n        $left = '1'.$left;\n        $left[strlen($left) - 1] = 0;\n    }\n    $right = strrev($left);\n    return $left.$right;\n}\n\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(99);\necho \"\\n\";\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(1234321);\necho \"\\n\";\necho next_smallest_palindrome(99999);\necho \"\\n\";\necho next_smallest_palindrome(1213);\necho \"\\n\";\necho next_smallest_palindrome(123321);\necho \"\\n\";\necho next_smallest_palindrome(12);\necho \"\\n\";\necho next_smallest_palindrome(123456789);\necho \"\\n\";\necho next_smallest_palindrome(1234567899);\necho \"\\n\";\necho next_smallest_palindrome(1234567898);\necho \"\\n\";\necho next_smallest_palindrome(1234567",
    "  $num++;\n  while (true) {\n    if (is_palindrome($num)) {\n      return $num;\n    }\n    $num++;\n  }\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = substr($right, 1);\n    }\n    if ($left . $mid_num . $right > $num) {\n        return $left . $mid_num . $right;\n    }\n    $carry = 1;\n    for ($i = $mid - 1; $i >= 0; $i--) {\n        $sum = $left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = floor($sum / 10);\n    }\n    if ($carry == 1) {\n        $left = '1' . $left;\n        $right = substr($right, 1);\n    }\n    return $left . $mid_num . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $new = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($new > $num) {\n        return $new;\n    }\n    $left = $len % 2 ? $left[0] : $left;\n    $left = (int)$left;\n    $left += 1;\n    $left = (string)$left;\n    $left = str_pad($left, $half, '0', STR_PAD_LEFT);\n    $right = strrev($left);\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    if ($left . $right > $num) {\n        return $left . $right;\n    }\n    $left = (string)((int)$left + 1);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    return $left . $right;\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + ($len % 2));\n  $left_rev = strrev($left);\n  if ($left_rev > $right) {\n    return $left . $left_rev;\n  }\n  $left = (int)$left + 1;\n  $left_rev = strrev($left);\n  return $left . $left_rev;\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(1235321) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567899) . \"\\n\";\necho next_smallest_palindrome(12345678999) . \"\\n\";\necho next_smallest_palindrome(123456789999) . \"\\n\";\necho next_smallest_palindrome(1234567899999) . \"\\n\";\necho next_smallest_palindrome(12345678999999) . \"\\n\";\necho next_smallest_palindrome(123456789999999) . \"\\n\";\necho next_smallest_palindrome(1234567899999999) . \"\\n\";\necho next_smallest_palindrome(12345678999999999) . \"\\n\";\necho next_smallest_palindrome(123456789999999999) . \"\\n\";\necho next_smallest_palindrome(1234567899999999999) . \"\\n\";\necho next_smallest_palindrome(12345678999999999999) . \"\\n\";\necho next_smallest_palindrome(123456789999999999999) . \"\\n\";\necho next_smallest_palindrome(1234567899999999999999) . \"\\",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($left_rev > $right) {\n        return $left . $right_rev;\n    }\n    $left = strrev(strval(intval($left_rev) + 1));\n    if (strlen($left) > $half) {\n        $left = substr($left, 0, $half);\n        $right_rev = strrev($left);\n    }\n    return $left . $right_rev;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = substr($right, 1);\n    } else {\n        $mid_num = '';\n    }\n    if ($left . $mid_num . $right > $num) {\n        return (int)($left . $mid_num . $right);\n    }\n    $carry = 1;\n    for ($i = $mid - 1; $i >= 0; $i--) {\n        $sum = (int)$left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = floor($sum / 10);\n    }\n    if ($carry == 1) {\n        $left = '1' . $left;\n        $right = substr($right, 1);\n    }\n    return (int)($left . $mid_num . strrev($left));\n}\n\necho next_smallest_palindrome(1) . \"\\n\";\necho next_smallest_palindrome(10) . \"\\n\";\necho next_smallest_palindrome(11) . \"\\n\";\necho next_smallest_palindrome(12) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(100) . \"\\n\";\necho next_smallest_palindrome(101) . \"\\n\";\necho next_smallest_palindrome(111) . \"\\n\";\necho next_smallest_palindrome(121) . \"\\n\";\necho next_smallest_palindrome(202) . \"\\n\";\necho next_smallest_palindrome(212) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(1000) . \"\\n\";\necho next_smallest_palindrome(1001) .",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left . $mid_char . $right;\n    } else {\n        $palin = $left . $right;\n    }\n    if ($palin > $num) {\n        return $palin;\n    }\n    $k = ($len % 2 == 1) ? $mid - 1 : $mid;\n    $carry = 1;\n    while ($k >= 0 && $carry > 0) {\n        $sum = $left[$k] + $carry;\n        $left[$k] = $sum % 10;\n        $carry = floor($sum / 10);\n        $k--;\n    }\n    $left = ($carry == 1) ? '1' . $left : $left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $palin = $left . $mid_char . $right;\n    } else {\n        $palin = $left . $right;\n    }\n    return $palin;\n}\n\necho next_smallest_palindrome(999);",
    "    $num_str = (string) $num;\n    $len = strlen($num_str);\n    $mid = floor($len / 2);\n    $left = substr($num_str, 0, $mid);\n    $right = substr($num_str, $mid + $len % 2);\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(strval(intval($left_rev) + 1));\n        $right = $left;\n    }\n    return intval($left . $right_rev);\n}\n\n$num = intval(fgets(STDIN));\necho next_smallest_palindrome($num);"
  ]
}