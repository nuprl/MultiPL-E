{
  "name": "mbpp_120_max_product_tuple",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nfunction max_product_tuple($list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return max_product_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(2, 7), array(2, 6), array(1, 8), array(4, 9))) !== 36) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(15, 2), array(5, 10))) !== 200) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(11, 44), array(10, 15), array(20, 5), array(12, 9))) !== 484) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "  $max = 0;\n  for ($i = 0; $i < count($list1); $i++) {\n    for ($j = 0; $j < count($list1); $j++) {\n      if ($i != $j) {\n        $product = $list1[$i] * $list1[$j];\n        if ($product > $max) {\n          $max = $product;\n        }\n      }\n    }\n  }\n  return $max;\n}\n\n$list1 = [1, 2, 3, 4, 5];\necho max_product_tuple($list1);\necho \"\\n\";\n\n$list2 = [1, -2, 3, -4, 5];\necho max_product_tuple($list2);\necho \"\\n\";\n\n$list3 = [1, -2, 3, -4, -5];\necho max_product_tuple($list3);\necho \"\\n\";\n\n$list4 = [1, -2, -3, -4, -5];\necho max_product_tuple($list4);\necho \"\\n\";\n\n$list5 = [1, -2, -3, -4, 5];\necho max_product_tuple($list5);\necho \"\\n\";\n\n$list6 = [1, -2, -3, 4, 5];\necho max_product_tuple($list6);\necho \"\\n\";\n\n$list7 = [1, -2, 3, 4, 5];\necho max_product_tuple($list7);\necho \"\\n\";\n\n$list8 = [1, 2, -3, -4, -5];\necho max_product_tuple($list8);\necho \"\\n\";\n\n$list9 = [1, 2, -3, -4, 5];\necho max_product_tuple($list9);\necho \"\\n\";\n\n$list10 = [1, 2, -3, 4, 5];\necho max_product_tuple($list10);\necho \"\\n\";\n\n$list11 = [1, 2, 3, -4, -5];\necho max_product_tuple($list11);\necho \"\\n\";",
    "    $max_product = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = $i + 1; $j < count($list1); $j++) {\n            $product = $list1[$i] * $list1[$j];\n            if ($product > $max_product) {\n                $max_product = $product;\n            }\n        }\n    }\n    return $max_product;\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho max_product_tuple($list1);",
    "    $max = 0;\n    for ($i=0; $i < count($list1); $i++) { \n        for ($j=0; $j < count($list1); $j++) { \n            if ($i != $j) {\n                $product = $list1[$i] * $list1[$j];\n                if ($product > $max) {\n                    $max = $product;\n                }\n            }\n        }\n    }\n    return $max;\n}\n\n$list1 = [1, 2, 3, 4, 5];\necho max_product_tuple($list1);",
    "    $max = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = 0; $j < count($list1); $j++) {\n            if ($i != $j) {\n                $product = abs($list1[$i][0] * $list1[$j][0]) + abs($list1[$i][1] * $list1[$j][1]);\n                if ($product > $max) {\n                    $max = $product;\n                }\n            }\n        }\n    }\n    return $max;\n}\n\n$list1 = [[1, 2], [3, 4], [5, 6], [-7, -8]];\necho max_product_tuple($list1);",
    "    $max = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = $i + 1; $j < count($list1); $j++) {\n            $product = $list1[$i] * $list1[$j];\n            if ($product > $max) {\n                $max = $product;\n            }\n        }\n    }\n    return $max;\n}\n\n$list1 = array(1, 2, 3, 4, 5);\necho max_product_tuple($list1);",
    "    $max = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = 0; $j < count($list1); $j++) {\n            if ($i != $j) {\n                $product = abs($list1[$i] * $list1[$j]);\n                if ($product > $max) {\n                    $max = $product;\n                }\n            }\n        }\n    }\n    return $max;\n}\n\n$list1 = array(1, 2, 3, 4, 5);\necho max_product_tuple($list1);",
    "    $max = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = 0; $j < count($list1); $j++) {\n            if ($i != $j) {\n                $product = abs($list1[$i][0] * $list1[$j][0]) + abs($list1[$i][1] * $list1[$j][1]);\n                if ($product > $max) {\n                    $max = $product;\n                }\n            }\n        }\n    }\n    return $max;\n}\n$list1 = [[1, 2], [3, 4], [5, 6], [7, 8]];\necho max_product_tuple($list1);",
    "    $max = 0;\n    $len = count($list1);\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n            $product = abs($list1[$i] * $list1[$j]);\n            if ($product > $max) {\n                $max = $product;\n            }\n        }\n    }\n    return $max;\n}\n\n$list1 = array(1, 2, 3, 4, 5);\necho max_product_tuple($list1);",
    "    $max = 0;\n    $max_tuple = array();\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = $i + 1; $j < count($list1); $j++) {\n            $product = $list1[$i] * $list1[$j];\n            if ($product > $max) {\n                $max = $product;\n                $max_tuple = array($list1[$i], $list1[$j]);\n            }\n        }\n    }\n    return $max_tuple;\n}\n\n$list1 = array(1, 2, 3, 4, 5);\n$list2 = array(1, -2, 3, -4, 5);\n$list3 = array(1, -2, 3, -4, -5);\n\necho \"The maximum absolute product between numbers in pairs of tuples within a given list is: \";\nprint_r(max_product_tuple($list1));\necho \"<br>\";\necho \"The maximum absolute product between numbers in pairs of tuples within a given list is: \";\nprint_r(max_product_tuple($list2));\necho \"<br>\";\necho \"The maximum absolute product between numbers in pairs of tuples within a given list is: \";\nprint_r(max_product_tuple($list3));",
    "    $max_product = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = $i + 1; $j < count($list1); $j++) {\n            $product = $list1[$i] * $list1[$j];\n            if ($product > $max_product) {\n                $max_product = $product;\n            }\n        }\n    }\n    return $max_product;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho max_product_tuple($list1);",
    "    $max = 0;\n    $max_tuple = [];\n    $list2 = $list1;\n    foreach ($list1 as $key1 => $value1) {\n        foreach ($list2 as $key2 => $value2) {\n            if ($key1 != $key2) {\n                $product = abs($value1 * $value2);\n                if ($product > $max) {\n                    $max = $product;\n                    $max_tuple = [$value1, $value2];\n                }\n            }\n        }\n    }\n    return $max_tuple;\n}\n\n$list1 = [1, 2, 3, 4, 5];\n$list2 = [1, -2, 3, -4, 5];\n$list3 = [-1, -2, -3, -4, -5];\n\necho \"The maximum absolute product between numbers in pairs of tuples within the list [1, 2, 3, 4, 5] is \" . max_product_tuple($list1)[0] . \" and \" . max_product_tuple($list1)[1] . \".\";\necho \"<br>\";\necho \"The maximum absolute product between numbers in pairs of tuples within the list [1, -2, 3, -4, 5] is \" . max_product_tuple($list2)[0] . \" and \" . max_product_tuple($list2)[1] . \".\";\necho \"<br>\";\necho \"The maximum absolute product between numbers in pairs of tuples within the list [-1, -2, -3, -4, -5] is \" . max_product_tuple($list3)[0] . \" and \" . max_product_tuple($list3)[1] . \".\";",
    "    $max = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = $i + 1; $j < count($list1); $j++) {\n            $product = abs($list1[$i]) * abs($list1[$j]);\n            if ($product > $max) {\n                $max = $product;\n            }\n        }\n    }\n    return $max;\n}\n\n$list1 = array(1, 2, 3, 4, 5);\necho max_product_tuple($list1);",
    "    $max = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = 0; $j < count($list1[$i]); $j++) {\n            for ($k = 0; $k < count($list1[$i]); $k++) {\n                if ($j != $k) {\n                    $product = abs($list1[$i][$j] * $list1[$i][$k]);\n                    if ($product > $max) {\n                        $max = $product;\n                    }\n                }\n            }\n        }\n    }\n    return $max;\n}\n\n$list1 = [[-1, -2, -3], [4, 5, 6], [7, 8, 9]];\necho max_product_tuple($list1);",
    "    $max_product = 0;\n    $list_size = count($list1);\n    for ($i = 0; $i < $list_size; $i++) {\n        for ($j = 0; $j < $list_size; $j++) {\n            if ($i != $j) {\n                $product = $list1[$i] * $list1[$j];\n                if ($product > $max_product) {\n                    $max_product = $product;\n                }\n            }\n        }\n    }\n    return $max_product;\n}\n\n$list1 = [1, 2, 3, 4, 5];\necho max_product_tuple($list1);\n",
    "    $max_product = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = $i + 1; $j < count($list1); $j++) {\n            $product = abs($list1[$i][0] * $list1[$j][0]) + abs($list1[$i][1] * $list1[$j][1]);\n            if ($product > $max_product) {\n                $max_product = $product;\n            }\n        }\n    }\n    return $max_product;\n}\n\n$list1 = [[1, 2], [3, 4], [5, 6], [7, 8]];\necho max_product_tuple($list1);",
    "    $max = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = $i + 1; $j < count($list1); $j++) {\n            $product = $list1[$i] * $list1[$j];\n            if ($product > $max) {\n                $max = $product;\n            }\n        }\n    }\n    return $max;\n}\n\n$list1 = [1, 2, 3, 4, 5];\necho max_product_tuple($list1);\n",
    "    $max = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = 0; $j < count($list1); $j++) {\n            if ($i != $j) {\n                $product = abs($list1[$i][0] * $list1[$j][1]);\n                if ($product > $max) {\n                    $max = $product;\n                }\n            }\n        }\n    }\n    return $max;\n}\n\n$list1 = [[1, 2], [3, 4], [5, 6], [-7, -8]];\necho max_product_tuple($list1);",
    "    $max = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = $i + 1; $j < count($list1); $j++) {\n            $product = $list1[$i] * $list1[$j];\n            if ($product > $max) {\n                $max = $product;\n            }\n        }\n    }\n    return $max;\n}\n\n$list1 = [1, 3, -1];\necho max_product_tuple($list1);\n",
    "    $max = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = 0; $j < count($list1[$i]); $j++) {\n            for ($k = 0; $k < count($list1[$i]); $k++) {\n                if ($j != $k) {\n                    $product = $list1[$i][$j] * $list1[$i][$k];\n                    if ($product > $max) {\n                        $max = $product;\n                    }\n                }\n            }\n        }\n    }\n    return $max;\n}\n\n$list1 = [[1, 2], [3, 4], [5, 6]];\necho max_product_tuple($list1);",
    "    $max = 0;\n    $list2 = array();\n    for ($i = 0; $i < count($list1); $i++) {\n        for ($j = $i + 1; $j < count($list1); $j++) {\n            $product = $list1[$i] * $list1[$j];\n            if ($product > $max) {\n                $max = $product;\n                $list2 = array($list1[$i], $list1[$j]);\n            }\n        }\n    }\n    return $list2;\n}\n"
  ]
}