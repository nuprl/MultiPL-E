{
  "name": "mbpp_576_is_Sub_Array",
  "language": "php",
  "prompt": "<?php\n// Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array($A, $B) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return is_Sub_Array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 5), array(1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1), array(1, 2, 1)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2, 2), array(2, 2, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $i = 0;\n    $j = 0;\n    while ($i < count($A) && $j < count($B)) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i = $i - $j + 1;\n            $j = 0;\n        }\n    }\n    if ($j == count($B)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n$A = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$B = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$C = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$D = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$E = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$F = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$G = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$H = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$I = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$J = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$K = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$M = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$N = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$O = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$P = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$Q = array(",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j])\n                break;\n        }\n        if ($j == $m)\n            return 0;\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4);\nif (is_Sub_Array($A, $B))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(1, 2, 4);\n$C = array(1, 2, 3);\n\nif (is_Sub_Array($B, $A)) {\n    echo \"Array B is sub array of Array A\";\n} else {\n    echo \"Array B is not sub array of Array A\";\n}\n\necho \"<br>\";\n\nif (is_Sub_Array($C, $A)) {\n    echo \"Array C is sub array of Array A\";\n} else {\n    echo \"Array C is not sub array of Array A\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(1, 2, 4);\n$C = array(1, 2, 3);\nif (is_Sub_Array($B, $A)) {\n    echo \"Array B is subarray of Array A\";\n} else {\n    echo \"Array B is not subarray of Array A\";\n}\necho \"\\n\";\nif (is_Sub_Array($C, $A)) {\n    echo \"Array C is subarray of Array A\";\n} else {\n    echo \"Array C is not subarray of Array A\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return false;\n        }\n    }\n    return true;\n}\n$A = array(1, 2, 3, 4, 5);\n$B = array(2, 3, 4);\n$C = array(2, 3, 4, 5);\n$D = array(2, 3, 4, 6);\nif (is_Sub_Array($A, $B)) {\n    echo \"Array B is a sub array of A\";\n} else {\n    echo \"Array B is not a sub array of A\";\n}\necho \"<br>\";\nif (is_Sub_Array($A, $C)) {\n    echo \"Array C is a sub array of A\";\n} else {\n    echo \"Array C is not a sub array of A\";\n}\necho \"<br>\";\nif (is_Sub_Array($A, $D)) {\n    echo \"Array D is a sub array of A\";\n} else {\n    echo \"Array D is not a sub array of A\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(1, 2, 4);\n$C = array(1, 2, 0);\nif (is_Sub_Array($B, $A))\n    echo \"Array B is subarray of Array A\";\nelse\n    echo \"Array B is not subarray of Array A\";\necho \"\\n\";\nif (is_Sub_Array($C, $A))\n    echo \"Array C is subarray of Array A\";\nelse\n    echo \"Array C is not subarray of Array A\";",
    "    $len_A = count($A);\n    $len_B = count($B);\n    if ($len_A > $len_B) {\n        return false;\n    }\n    $i = 0;\n    $j = 0;\n    while ($i < $len_A && $j < $len_B) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n        }\n        $j++;\n    }\n    if ($i == $len_A) {\n        return true;\n    }\n    return false;\n}\n\n$A = array(1, 2, 3, 4, 5);\n$B = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$C = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\nif (is_Sub_Array($A, $B)) {\n    echo \"A is subarray of B\\n\";\n} else {\n    echo \"A is not subarray of B\\n\";\n}\n\nif (is_Sub_Array($A, $C)) {\n    echo \"A is subarray of C\\n\";\n} else {\n    echo \"A is not subarray of C\\n\";\n}",
    "    $i = 0;\n    $j = 0;\n    while ($i < count($A) && $j < count($B)) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i = $i - $j + 1;\n            $j = 0;\n        }\n    }\n    if ($j == count($B)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 3, 4);\n\nif (is_Sub_Array($A, $B)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(1, 2, 4);\n$C = array(1, 2, 3);\nif (is_Sub_Array($B, $A)) {\n    echo \"Array B is sub array of Array A\";\n} else {\n    echo \"Array B is not sub array of Array A\";\n}\necho \"<br>\";\nif (is_Sub_Array($C, $A)) {\n    echo \"Array C is sub array of Array A\";\n} else {\n    echo \"Array C is not sub array of Array A\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j])\n                break;\n        }\n        if ($j == $m)\n            return 0;\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(1, 2, 4);\nif (is_Sub_Array($A, $B))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $j = 0;\n    for ($i = 0; $i < count($A); $i++) {\n        if ($A[$i] == $B[$j]) {\n            $j++;\n        }\n        if ($j == count($B)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n$A = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$B = array(1, 2, 3, 4, 5);\n$C = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$D = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$E = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$F = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$G = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$H = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$I = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$J = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$K = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$M = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$N = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$O = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$P = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$Q = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4, 6);\n$C = array(1, 2, 3, 4, 5, 6);\n$D = array(1, 2, 3, 4, 5, 6);\n$E = array(1, 2, 3, 4, 5, 6);\n$F = array(1, 2, 3, 4, 5, 6);\n$G = array(1, 2, 3, 4, 5, 6);\n$H = array(1, 2, 3, 4, 5, 6);\n$I = array(1, 2, 3, 4, 5, 6);\n$J = array(1, 2, 3, 4, 5, 6);\n$K = array(1, 2, 3, 4, 5, 6);\n$L = array(1, 2, 3, 4, 5, 6);\n$M = array(1, 2, 3, 4, 5, 6);\n$N = array(1, 2, 3, 4, 5, 6);\n$O = array(1, 2, 3, 4, 5, 6);\n$P = array(1, 2, 3, 4, 5, 6);\n$Q = array(1, 2, 3, 4, 5, 6);\n$R = array(1, 2, 3, 4, 5, 6);\n$S = array(1, 2, 3, 4, 5, 6);\n$T = array(1, 2, 3, 4, 5, 6);\n$U = array(1, 2, 3, 4, 5, 6);\n$V = array(1, 2, 3, 4, 5,",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4);\nif (is_Sub_Array($A, $B)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5);\n$B = array(1, 2, 3, 4, 5);\n$C = array(1, 2, 3, 4, 5);\n$D = array(1, 2, 3, 4, 5);\n$E = array(1, 2, 3, 4, 5);\n$F = array(1, 2, 3, 4, 5);\n$G = array(1, 2, 3, 4, 5);\n$H = array(1, 2, 3, 4, 5);\n$I = array(1, 2, 3, 4, 5);\n$J = array(1, 2, 3, 4, 5);\n$K = array(1, 2, 3, 4, 5);\n$L = array(1, 2, 3, 4, 5);\n$M = array(1, 2, 3, 4, 5);\n$N = array(1, 2, 3, 4, 5);\n$O = array(1, 2, 3, 4, 5);\n$P = array(1, 2, 3, 4, 5);\n$Q = array(1, 2, 3, 4, 5);\n$R = array(1, 2, 3, 4, 5);\n$S = array(1, 2, 3, 4, 5);\n$T = array(1, 2, 3, 4, 5);\n$U = array(1, 2, 3, 4, 5);\n$V = array(1, 2, 3, 4, 5);\n$W = array(1, 2, 3, 4, 5);\n$X = array(1, 2, 3, 4, 5);\n$Y = array",
    "    $i = 0;\n    $j = 0;\n    while ($i < count($A) && $j < count($B)) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    if ($j == count($B)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(1, 2, 4);\n$C = array(1, 2, 3);\n\nif (is_Sub_Array($A, $B)) {\n    echo \"B is a sub array of A\";\n} else {\n    echo \"B is not a sub array of A\";\n}\n\necho \"<br>\";\n\nif (is_Sub_Array($A, $C)) {\n    echo \"C is a sub array of A\";\n} else {\n    echo \"C is not a sub array of A\";\n}",
    "    $i = 0;\n    $j = 0;\n    $m = count($A);\n    $n = count($B);\n    for ($i = 0; $i < $m; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $n) {\n            return 0;\n        }\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4);\nif (is_Sub_Array($A, $B)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $i = 0;\n    $j = 0;\n    while ($i < count($A) && $j < count($B)) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i = $i - $j + 1;\n            $j = 0;\n        }\n    }\n    if ($j == count($B)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(3, 4, 5);\n$C = array(3, 4, 5, 6);\n$D = array(3, 4, 5, 7);\n\nif (is_Sub_Array($A, $B)) {\n    echo \"B is sub array of A\";\n} else {\n    echo \"B is not sub array of A\";\n}\necho \"\\n\";\n\nif (is_Sub_Array($A, $C)) {\n    echo \"C is sub array of A\";\n} else {\n    echo \"C is not sub array of A\";\n}\necho \"\\n\";\n\nif (is_Sub_Array($A, $D)) {\n    echo \"D is sub array of A\";\n} else {\n    echo \"D is not sub array of A\";\n}\necho \"\\n\";",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5);\n$B = array(1, 2, 3);\n$C = array(1, 2, 4);\n$D = array(1, 2, 3, 4, 5);\n$E = array(1, 2, 3, 4, 5, 6);\n$F = array(1, 2, 3, 4, 5, 6, 7);\n$G = array(1, 2, 3, 4, 5, 6, 7, 8);\n$H = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$I = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$J = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\n$K = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n$L = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);\n$M = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);\n$N = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n$O = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n$P = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
    "    $i = 0;\n    $j = 0;\n    $k = 0;\n    $flag = 0;\n    for ($i = 0; $i < count($A); $i++) {\n        for ($j = 0; $j < count($B); $j++) {\n            if ($A[$i] == $B[$j]) {\n                $k = $j;\n                $flag = 1;\n                break;\n            }\n        }\n        if ($flag == 1) {\n            for ($j = $k; $j < count($B); $j++) {\n                if ($A[$i] != $B[$j]) {\n                    $flag = 0;\n                    break;\n                }\n                $i++;\n            }\n        }\n    }\n    if ($flag == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n$A = array(1, 2, 3, 4, 5);\n$B = array(1, 2, 3, 4, 5);\nif (is_Sub_Array($A, $B)) {\n    echo \"A is a sub array of B\";\n} else {\n    echo \"A is not a sub array of B\";\n}",
    "    $j = 0;\n    for ($i = 0; $i < count($A); $i++) {\n        if ($A[$i] == $B[$j]) {\n            $j++;\n            if ($j == count($B)) {\n                return true;\n            }\n        } else {\n            $j = 0;\n        }\n    }\n    return false;\n}\n\n$A = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$B = array(2, 3, 4);\n$C = array(2, 4, 3);\n$D = array(2, 3, 4, 5);\n$E = array(2, 3, 4, 5, 6);\n$F = array(2, 3, 4, 5, 6, 7);\n$G = array(2, 3, 4, 5, 6, 7, 8);\n$H = array(2, 3, 4, 5, 6, 7, 8, 9);\n$I = array(2, 3, 4, 5, 6, 7, 8, 9, 10);\n\necho is_Sub_Array($A, $B) ? \"Yes\" : \"No\";\necho \"\\n\";\necho is_Sub_Array($A, $C) ? \"Yes\" : \"No\";\necho \"\\n\";\necho is_Sub_Array($A, $D) ? \"Yes\" : \"No\";\necho \"\\n\";\necho is_Sub_Array($A, $E) ? \"Yes\" : \"No\";\necho \"\\n\";\necho is_Sub_Array($A, $F) ? \"Yes\" : \"No\";\necho \"\\n\";\necho is_Sub_Array($A, $G) ? \"Yes\" : \"No\";\necho \"\\n\";\necho is_Sub_Array($A, $H) ? \"Yes\" : \"No\";\necho \"\\n\";\necho is_Sub_Array($A, $I) ? \"Yes\" : \"No\";\necho \"\\n\";\n"
  ]
}