{
  "name": "mbpp_4_heap_queue_largest",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1,2,3,4,5,6,7,8,9,10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "  $heap = new SplMaxHeap();\n  foreach ($nums as $num) {\n    $heap->insert($num);\n  }\n  $largest = [];\n  for ($i = 0; $i < $n; $i++) {\n    $largest[] = $heap->extract();\n  }\n  return $largest;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "  $heap = new SplMaxHeap();\n  foreach ($nums as $num) {\n    $heap->insert($num);\n  }\n  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $heap->extract();\n  }\n  return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\n$largest = heap_queue_largest($nums, $n);\nprint_r($largest);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    while ($n-- > 0) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n        if ($heap->count() > $n) {\n            $heap->extract();\n        }\n    }\n    return iterator_to_array($heap);\n}\n\n$nums = [4, 2, 7, 1, 3, 5, 6, 8, 9];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    while ($n > 0) {\n        $result[] = $heap->extract();\n        $n--;\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 5));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n        if ($heap->count() > $n) {\n            $heap->extract();\n        }\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1,2,3,4,5,6,7,8,9,10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $queue = new SplPriorityQueue();\n    foreach ($nums as $num) {\n        $queue->insert($num, $num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $queue = new SplPriorityQueue();\n    foreach ($nums as $num) {\n        $queue->insert($num, $num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nvar_dump(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$largest = heap_queue_largest($nums, $n);\nprint_r($largest);\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 5, 2, 3, 4, 8, 9, 7, 6];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $queue = new SplPriorityQueue();\n    foreach ($nums as $num) {\n        $queue->insert($num, $num * -1);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\necho implode(', ', heap_queue_largest($nums, $n));\necho \"\\n\";",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1,2,3,4,5,6,7,8,9,10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n        if ($heap->count() > $n) {\n            $heap->extract();\n        }\n    }\n    $result = [];\n    while ($heap->valid()) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    if (count($nums) < $n) {\n        return $nums;\n    }\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nprint_r(heap_queue_largest($nums, 3));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 4;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$largest = heap_queue_largest($nums, $n);\nprint_r($largest);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "  $heap = new SplMaxHeap();\n  foreach ($nums as $num) {\n    $heap->insert($num);\n  }\n  $largest = [];\n  for ($i = 0; $i < $n; $i++) {\n    $largest[] = $heap->extract();\n  }\n  return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "  $heap = new SplMaxHeap();\n  foreach ($nums as $num) {\n    $heap->insert($num);\n  }\n\n  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $heap->extract();\n  }\n  return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nvar_dump(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nvar_dump(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$largest = heap_queue_largest($nums, $n);\nprint_r($largest);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n        if ($heap->count() > $n) {\n            $heap->extract();\n        }\n    }\n    return iterator_to_array($heap);\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nvar_dump(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nvar_dump(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1,2,3,4,5,6,7,8,9,10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));",
    "    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));"
  ]
}