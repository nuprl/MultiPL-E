{
  "name": "mbpp_758_unique_sublists",
  "language": "php",
  "prompt": "<?php\n// Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nfunction unique_sublists($list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return unique_sublists(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 3), array(5, 7), array(1, 3), array(13, 15, 17), array(5, 7), array(9, 11))) !== array(array(1, 3) => 2, array(5, 7) => 2, array(13, 15, 17) => 1, array(9, 11) => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"green\", \"orange\"), array(\"black\"), array(\"green\", \"orange\"), array(\"white\"))) !== array(array(\"green\", \"orange\") => 2, array(\"black\") => 1, array(\"white\") => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20, 30, 40), array(60, 70, 50, 50), array(90, 100, 200))) !== array(array(10, 20, 30, 40) => 1, array(60, 70, 50, 50) => 1, array(90, 100, 200) => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"john\"))) !== array(array(\"john\") => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = array();\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] += 1;\n    }\n    return $result;\n}\n\n$list1 = array(array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4, 5, 6), array(4",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $item = tuple($item);\n        }\n        if (!array_key_exists($item, $result)) {\n            $result[$item] = 0;\n        }\n        $result[$item]++;\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] = 0;\n    }\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] += 1;\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] += 1;\n    }\n    return $result;\n}\n\n$list1 = array(\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3),\n    array(1, 2, 3",
    "    $result = [];\n    foreach ($list1 as $item) {\n        $result[tuple($item)] = 0;\n    }\n    foreach ($list1 as $item) {\n        $result[tuple($item)] += 1;\n    }\n    return $result;\n}\n",
    "    $result = [];\n    foreach ($list1 as $item) {\n        $result[serialize($item)] = 0;\n    }\n    foreach ($list1 as $item) {\n        $result[serialize($item)]++;\n    }\n    return $result;\n}\n\n$list1 = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2",
    "    $result = [];\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] = 0;\n    }\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)]++;\n    }\n    return $result;\n}\n\n$list1 = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3],",
    "    $result = array();\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] = 0;\n    }\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)]++;\n    }\n    return $result;\n}\n\n$list1 = array(array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3), array(1, 2, 3",
    "    $result = [];\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] = 0;\n    }\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)]++;\n    }\n    return $result;\n}\n\n$list1 = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n",
    "    $result = [];\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] += 1;\n    }\n    return $result;\n}\n\n$list1 = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3],\n    [1, 2, 3],\n];\n\nprint_r(unique_sublists($list1));",
    "    $list2 = [];\n    foreach ($list1 as $key => $value) {\n        $list2[$key] = array_unique($value);\n    }\n    return $list2;\n}\n$list1 = [[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6]];\n$list2 = unique_sublists($list1);\nprint_r($list2);",
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[tuple($value)]++;\n    }\n    return $result;\n}\n\n$list1 = array(array(1, 2), array(3, 4), array(1, 2), array(5), array(6), array(7, 8), array(1, 2), array(3, 4), array(3, 4), array(7, 8), array(9));\nprint_r(unique_sublists($list1));",
    "    $result = array();\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] = 0;\n    }\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] += 1;\n    }\n    return $result;\n}\n\n$list1 = array(array(1, 2, 3), array(4, 5, 6), array(1, 2, 3), array(4, 5, 6), array(1, 2, 3), array(4, 5, 6));\nprint_r(unique_sublists($list1));\n",
    "    $result = [];\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] = 0;\n    }\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] += 1;\n    }\n    return $result;\n}\n\n$list1 = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2,",
    "    $list2 = [];\n    foreach ($list1 as $item) {\n        $tuple = tuple($item);\n        if (array_key_exists($tuple, $list2)) {\n            $list2[$tuple] += 1;\n        } else {\n            $list2[$tuple] = 1;\n        }\n    }\n    return $list2;\n}\n",
    "    $result = [];\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] = 0;\n    }\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)]++;\n    }\n    return $result;\n}\n\n$list1 = [[1, 2, 3], [2, 3, 4], [1, 2, 3], [1, 2, 3], [2, 3, 4], [2, 3, 4], [1, 2, 3]];\nprint_r(unique_sublists($list1));\n",
    "    $result = array();\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] = 0;\n    }\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)] += 1;\n    }\n    return $result;\n}\n\n$list1 = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(1, 2, 3",
    "    $result = [];\n    foreach ($list1 as $item) {\n        $tuple = tuple($item);\n        if (array_key_exists($tuple, $result)) {\n            $result[$tuple]++;\n        } else {\n            $result[$tuple] = 1;\n        }\n    }\n    return $result;\n}\n",
    "    $result = [];\n    foreach ($list1 as $sublist) {\n        $result[tuple($sublist)]++;\n    }\n    return $result;\n}\n\n$list1 = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1",
    "    $result = array();\n    foreach ($list1 as $item) {\n        $tuple = tuple($item);\n        if (array_key_exists($tuple, $result)) {\n            $result[$tuple] += 1;\n        } else {\n            $result[$tuple] = 1;\n        }\n    }\n    return $result;\n}\n"
  ]
}