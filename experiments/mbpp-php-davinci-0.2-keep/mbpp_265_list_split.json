{
  "name": "mbpp_265_list_split",
  "language": "php",
  "prompt": "<?php\n// Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nfunction list_split($S, $step) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return list_split(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"), 3) !== array(array(\"a\", \"d\", \"g\", \"j\", \"m\"), array(\"b\", \"e\", \"h\", \"k\", \"n\"), array(\"c\", \"f\", \"i\", \"l\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), 3) !== array(array(1, 4, 7, 10, 13), array(2, 5, 8, 11, 14), array(3, 6, 9, 12))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"), 2) !== array(array(\"python\", \"C\", \"DBMS\"), array(\"java\", \"C++\", \"SQL\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "\t$result = array();\n\t$i = 0;\n\twhile ($i < count($S)) {\n\t\t$result[] = array_slice($S, $i, $step);\n\t\t$i += $step;\n\t}\n\treturn $result;\n}\n\n$S = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$step = 3;\n$result = list_split($S, $step);\nprint_r($result);",
    "    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($S)) {\n        $result[$j] = array();\n        for ($k = 0; $k < $step; $k++) {\n            if ($i < count($S)) {\n                $result[$j][] = $S[$i];\n                $i++;\n            }\n        }\n        $j++;\n    }\n    return $result;\n}\n\n$S = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$step = 3;\n$result = list_split($S, $step);\nprint_r($result);",
    "    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($S)) {\n        $result[$j] = array();\n        for ($k = 0; $k < $step; $k++) {\n            if ($i < count($S)) {\n                $result[$j][$k] = $S[$i];\n                $i++;\n            }\n        }\n        $j++;\n    }\n    return $result;\n}\n\n$S = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n$step = 4;\n$result = list_split($S, $step);\nprint_r($result);",
    "    $result = array();\n    $count = 0;\n    $temp = array();\n    foreach ($S as $value) {\n        if ($count < $step) {\n            array_push($temp, $value);\n            $count++;\n        } else {\n            array_push($result, $temp);\n            $temp = array();\n            $count = 0;\n        }\n    }\n    if ($count > 0) {\n        array_push($result, $temp);\n    }\n    return $result;\n}\n\n$S = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$step = 3;\nprint_r(list_split($S, $step));",
    "    $result = [];\n    $count = 0;\n    $temp = [];\n    for ($i = 0; $i < count($S); $i++) {\n        if ($count < $step) {\n            array_push($temp, $S[$i]);\n            $count++;\n        } else {\n            array_push($result, $temp);\n            $temp = [];\n            $count = 0;\n            array_push($temp, $S[$i]);\n            $count++;\n        }\n    }\n    array_push($result, $temp);\n    return $result;\n}\n\n$S = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$step = 3;\nprint_r(list_split($S, $step));",
    "    $result = [];\n    $i = 0;\n    while ($i < count($S)) {\n        $result[] = array_slice($S, $i, $step);\n        $i += $step;\n    }\n    return $result;\n}\n\n$S = [1,2,3,4,5,6,7,8,9,10];\n$step = 3;\n\nprint_r(list_split($S, $step));\n",
    "    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($S)) {\n        $result[$j] = array();\n        for ($k = 0; $k < $step; $k++) {\n            if ($i < count($S)) {\n                $result[$j][] = $S[$i];\n                $i++;\n            }\n        }\n        $j++;\n    }\n    return $result;\n}\n\n$S = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$step = 3;\n$result = list_split($S, $step);\nprint_r($result);",
    "    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($S)) {\n        $result[$j] = array();\n        for ($k = 0; $k < $step; $k++) {\n            if ($i < count($S)) {\n                $result[$j][$k] = $S[$i];\n                $i++;\n            }\n        }\n        $j++;\n    }\n    return $result;\n}\n\n$S = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$step = 3;\n$result = list_split($S, $step);\nprint_r($result);",
    "    $result = array();\n    $count = count($S);\n    $i = 0;\n    while ($i < $count) {\n        $result[] = array_slice($S, $i, $step);\n        $i += $step;\n    }\n    return $result;\n}\n\n$S = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$step = 3;\nprint_r(list_split($S, $step));\n",
    "    $result = array();\n    for ($i = 0; $i < count($S); $i += $step) {\n        $result[] = array_slice($S, $i, $step);\n    }\n    return $result;\n}\n\n$S = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$step = 3;\n\nprint_r(list_split($S, $step));",
    "    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($S)) {\n        $result[$j] = array();\n        for ($k = 0; $k < $step; $k++) {\n            if ($i < count($S)) {\n                $result[$j][$k] = $S[$i];\n                $i++;\n            }\n        }\n        $j++;\n    }\n    return $result;\n}\n\n$S = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$step = 3;\n$result = list_split($S, $step);\nprint_r($result);",
    "    $result = [];\n    $i = 0;\n    $j = 0;\n    while ($i < count($S)) {\n        $result[$j] = [];\n        for ($k = 0; $k < $step; $k++) {\n            if ($i < count($S)) {\n                $result[$j][] = $S[$i];\n                $i++;\n            }\n        }\n        $j++;\n    }\n    return $result;\n}\n\n$S = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$step = 3;\n$result = list_split($S, $step);\nprint_r($result);",
    "    $result = [];\n    for ($i = 0; $i < count($S); $i += $step) {\n        $result[] = array_slice($S, $i, $step);\n    }\n    return $result;\n}\n\n$S = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$step = 3;\n\nprint_r(list_split($S, $step));",
    "    $result = [];\n    $i = 0;\n    while ($i < count($S)) {\n        $result[] = array_slice($S, $i, $step);\n        $i += $step;\n    }\n    return $result;\n}\n\n$S = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$step = 3;\n$result = list_split($S, $step);\nprint_r($result);",
    "    $result = [];\n    $i = 0;\n    $j = 0;\n    while ($i < count($S)) {\n        $result[$j][] = $S[$i];\n        if (($i + 1) % $step == 0) {\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$S = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$step = 3;\n\nprint_r(list_split($S, $step));",
    "    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($S)) {\n        $result[$j] = array();\n        for ($k = 0; $k < $step; $k++) {\n            if ($i < count($S)) {\n                $result[$j][$k] = $S[$i];\n                $i++;\n            }\n        }\n        $j++;\n    }\n    return $result;\n}\n\n$S = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$step = 3;\nprint_r(list_split($S, $step));",
    "    $result = array();\n    for ($i = 0; $i < count($S); $i += $step) {\n        $result[] = array_slice($S, $i, $step);\n    }\n    return $result;\n}\n\n$S = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$step = 3;\n\nprint_r(list_split($S, $step));",
    "  $result = array();\n  $i = 0;\n  while ($i < count($S)) {\n    $result[] = array_slice($S, $i, $step);\n    $i += $step;\n  }\n  return $result;\n}\n",
    "  $result = array();\n  $i = 0;\n  while ($i < count($S)) {\n    $result[] = array_slice($S, $i, $step);\n    $i += $step;\n  }\n  return $result;\n}\n",
    "\t$result = array();\n\t$i = 0;\n\twhile ($i < count($S)) {\n\t\t$result[] = array_slice($S, $i, $step);\n\t\t$i += $step;\n\t}\n\treturn $result;\n}\n\n$S = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$step = 3;\n$result = list_split($S, $step);\nprint_r($result);"
  ]
}