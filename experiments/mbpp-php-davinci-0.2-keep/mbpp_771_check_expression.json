{
  "name": "mbpp_771_check_expression",
  "language": "php",
  "prompt": "<?php\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression($exp) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return check_expression(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"{()}[{}]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"{()}[{]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"{()}[{}][]({})\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            $index = array_search($exp[$i], $close);\n            if ($top != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]{}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]{}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]{}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]{}[]{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]{}[]{}\";\necho check_expression($exp) ? \"Balanced\"",
    "    $stack = array();\n    $map = array(\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $exp[$i];\n        if (isset($map[$char])) {\n            array_push($stack, $char);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($map[$top] != $char) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = [];\n\t$open = ['{', '[', '('];\n\t$close = ['}', ']', ')'];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\t$key = array_search($exp[$i], $close);\n\t\t\tif (array_pop($stack) != $open[$key]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n$exp = '{([])}';\nif (check_expression($exp)) {\n\techo 'Balanced';\n} else {\n\techo 'Not Balanced';\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == '(' && $exp[$i] != ')') {\n                return false;\n            } elseif ($last == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($last == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for($i=0; $i<$len; $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif(in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if(!$top) {\n                return false;\n            }\n            if($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    if(!empty($stack)) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[]]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[]]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[]]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[]]';\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            } else if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            } else if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } elseif (in_array($char, $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($char, $close)] != $last) {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);\n",
    "    $stack = [];\n    $exp_len = strlen($exp);\n    for ($i = 0; $i < $exp_len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"({[]})\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $popped = array_pop($stack);\n            if ($popped == null) {\n                return false;\n            }\n            $index = array_search($popped, $open);\n            if ($close[$index] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == $open[array_search($exp[$i], $close)]) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            if ($exp[$i] == ')' && array_pop($stack) != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && array_pop($stack) != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && array_pop($stack) != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\necho check_expression('[{()}]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{(})}]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{(}])') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{()}]{}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{()}]{}(') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{()}]{}()') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{()}]{}()[') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{()}]{}()[]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{",
    "    $stack = array();\n    $open_brackets = array('(', '{', '[');\n    $close_brackets = array(')', '}', ']');\n    $brackets = array('(', ')', '{', '}', '[', ']');\n    $exp = str_split($exp);\n    foreach ($exp as $char) {\n        if (in_array($char, $brackets)) {\n            if (in_array($char, $open_brackets)) {\n                array_push($stack, $char);\n            } else {\n                if (empty($stack)) {\n                    return false;\n                }\n                $last_bracket = array_pop($stack);\n                if ($last_bracket != $open_brackets[array_search($char, $close_brackets)]) {\n                    return false;\n                }\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{([])}';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last === null) {\n                return false;\n            }\n            if ($open[array_search($last, $open)] !== $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[()]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[()]{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[()]{}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[()]{}()\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[()]{}(){\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[()]{}()}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = '{([])}';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($stack[count($stack) - 1], $open);\n            $close_index = array_search($exp[$i], $close);\n            if ($open_index == $close_index) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if (count($stack) == 0) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"((a+b))\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = [];\n\t$len = strlen($exp);\n\tfor($i=0; $i<$len; $i++) {\n\t\tif($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n\t\t\tif(empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif($exp[$i] == ')' && $top != '(') {\n\t\t\t\treturn false;\n\t\t\t} else if($exp[$i] == '}' && $top != '{') {\n\t\t\t\treturn false;\n\t\t\t} else if($exp[$i] == ']' && $top != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "\t$stack = [];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif ($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if ($exp[$i] == ')' || $exp[$i] == ']' || $exp[$i] == '}') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif ($top == '(' && $exp[$i] != ')') {\n\t\t\t\treturn false;\n\t\t\t} else if ($top == '[' && $exp[$i] != ']') {\n\t\t\t\treturn false;\n\t\t\t} else if ($top == '{' && $exp[$i] != '}') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}"
  ]
}