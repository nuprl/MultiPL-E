{
  "name": "mbpp_771_check_expression",
  "language": "php",
  "prompt": "<?php\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression($exp) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return check_expression(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"{()}[{}]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"{()}[{]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"{()}[{}][]({})\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            $index = array_search($exp[$i], $close);\n            if ($top != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]{}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]{}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]{}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]{}[]{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]{}[]{}\";\necho check_expression($exp) ? \"Balanced\"",
    "    $stack = array();\n    $map = array(\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $exp[$i];\n        if (isset($map[$char])) {\n            array_push($stack, $char);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($map[$top] != $char) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = [];\n\t$open = ['{', '[', '('];\n\t$close = ['}', ']', ')'];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\t$key = array_search($exp[$i], $close);\n\t\t\tif (array_pop($stack) != $open[$key]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n$exp = '{([])}';\nif (check_expression($exp)) {\n\techo 'Balanced';\n} else {\n\techo 'Not Balanced';\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == '(' && $exp[$i] != ')') {\n                return false;\n            } elseif ($last == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($last == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for($i=0; $i<$len; $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif(in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if(!$top) {\n                return false;\n            }\n            if($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    if(!empty($stack)) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[]]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[]]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[]]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[]]';\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            } else if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            } else if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } elseif (in_array($char, $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($char, $close)] != $last) {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);\n",
    "    $stack = [];\n    $exp_len = strlen($exp);\n    for ($i = 0; $i < $exp_len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"({[]})\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $popped = array_pop($stack);\n            if ($popped == null) {\n                return false;\n            }\n            $index = array_search($popped, $open);\n            if ($close[$index] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == $open[array_search($exp[$i], $close)]) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            if ($exp[$i] == ')' && array_pop($stack) != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && array_pop($stack) != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && array_pop($stack) != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\necho check_expression('[{()}]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{(})}]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{(}])') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{()}]{}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{()}]{}(') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{()}]{}()') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{()}]{}()[') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{()}]{}()[]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('[{",
    "    $stack = array();\n    $open_brackets = array('(', '{', '[');\n    $close_brackets = array(')', '}', ']');\n    $brackets = array('(', ')', '{', '}', '[', ']');\n    $exp = str_split($exp);\n    foreach ($exp as $char) {\n        if (in_array($char, $brackets)) {\n            if (in_array($char, $open_brackets)) {\n                array_push($stack, $char);\n            } else {\n                if (empty($stack)) {\n                    return false;\n                }\n                $last_bracket = array_pop($stack);\n                if ($last_bracket != $open_brackets[array_search($char, $close_brackets)]) {\n                    return false;\n                }\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{([])}';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last === null) {\n                return false;\n            }\n            if ($open[array_search($last, $open)] !== $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[()]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[()]{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[()]{}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[()]{}()\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[()]{}(){\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[()]{}()}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = '{([])}';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($stack[count($stack) - 1], $open);\n            $close_index = array_search($exp[$i], $close);\n            if ($open_index == $close_index) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if (count($stack) == 0) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"((a+b))\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = [];\n\t$len = strlen($exp);\n\tfor($i=0; $i<$len; $i++) {\n\t\tif($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n\t\t\tif(empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif($exp[$i] == ')' && $top != '(') {\n\t\t\t\treturn false;\n\t\t\t} else if($exp[$i] == '}' && $top != '{') {\n\t\t\t\treturn false;\n\t\t\t} else if($exp[$i] == ']' && $top != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "\t$stack = [];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif ($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if ($exp[$i] == ')' || $exp[$i] == ']' || $exp[$i] == '}') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif ($top == '(' && $exp[$i] != ')') {\n\t\t\t\treturn false;\n\t\t\t} else if ($top == '[' && $exp[$i] != ']') {\n\t\t\t\treturn false;\n\t\t\t} else if ($top == '{' && $exp[$i] != '}') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            if ($exp[$i] == ')') {\n                $x = array_pop($stack);\n                if ($x == '{' || $x == '[') {\n                    return false;\n                }\n            }\n            if ($exp[$i] == '}') {\n                $x = array_pop($stack);\n                if ($x == '(' || $x == '[') {\n                    return false;\n                }\n            }\n            if ($exp[$i] == ']') {\n                $x = array_pop($stack);\n                if ($x == '(' || $x == '{') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($last == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($last == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if (end($stack) == $open[$key]) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i=0; $i<$len; $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } elseif (in_array($char, $close)) {\n            $last = array_pop($stack);\n            if ($last == '{' && $char != '}') {\n                return false;\n            } elseif ($last == '[' && $char != ']') {\n                return false;\n            } elseif ($last == '(' && $char != ')') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "\t$stack = array();\n\t$open = array('(', '{', '[');\n\t$close = array(')', '}', ']');\n\tfor ($i=0; $i < strlen($exp); $i++) { \n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} elseif (in_array($exp[$i], $close)) {\n\t\t\t$key = array_search($exp[$i], $close);\n\t\t\tif (end($stack) == $open[$key]) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho check_expression('[{()}]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}(') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}(') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}(]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}(])') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}(]){') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}(]){}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}(]){}(') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}(]){}()') ? 'true' : 'false';\necho \"\\n",
    "\t$stack = array();\n\t$open = array('(', '{', '[');\n\t$close = array(')', '}', ']');\n\tfor ($i=0; $i < strlen($exp); $i++) { \n\t\t$char = $exp[$i];\n\t\tif (in_array($char, $open)) {\n\t\t\tarray_push($stack, $char);\n\t\t} else if (in_array($char, $close)) {\n\t\t\t$open_char = array_pop($stack);\n\t\t\tif ($open_char == '(' && $char != ')') {\n\t\t\t\treturn false;\n\t\t\t} else if ($open_char == '{' && $char != '}') {\n\t\t\t\treturn false;\n\t\t\t} else if ($open_char == '[' && $char != ']') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho check_expression('{[()]}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{[(])}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{{[[(())]]}}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{{[[(())]]}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{{[[(()))]]}}') ? 'true' : 'false';\necho \"\\n\";",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == $open[array_search($exp[$i], $close)]) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\necho check_expression(\"{()}\") ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression(\"{(})\") ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression(\"{()}[]\") ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression(\"{()}[\") ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression(\"{()}[{}]\") ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression(\"{()}[{}]{}\") ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression(\"{()}[{}]{}(\") ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression(\"{()}[{}]{}()\") ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression(\"{()}[{}]{}()[\") ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression(\"{()}[{}]{}()[]\") ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression(\"{()}[{}]{}()[]{}",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if (empty($stack)) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"((a+b))\";\necho check_expression($exp);\n\n$exp = \"(a+b))\";\necho check_expression($exp);\n\n$exp = \"(a+b)\";\necho check_expression($exp);",
    "    $stack = new SplStack();\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(') {\n            $stack->push($exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if ($stack->isEmpty()) {\n                return false;\n            } else {\n                $stack->pop();\n            }\n        }\n    }\n    return $stack->isEmpty();\n}\n\n$exp = \"(a+b)\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"(a+b))\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"(a+b)+(c+d)\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"((a+b)+(c+d))\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"((a+b)+(c+d)\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n            $stack->push($exp[$i]);\n        } else {\n            if ($stack->isEmpty()) {\n                return false;\n            }\n            $top = $stack->pop();\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n        }\n    }\n    if ($stack->isEmpty()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($top, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{(})\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]\";\necho check_expression($exp)",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho check_expression('{()}[]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[{}]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[{]}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[{}]{}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[{}]{}[') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[{}]{}[{}]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[{}]{}[{}]{}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[{}]{}[{}]{}[') ? 'Balanced' : 'Not Balanced';",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho check_expression('{([])}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])}]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])}[') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($pop == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($pop == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($top, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$key]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n$exp = '{(})[]';\nvar_dump(check_expression($exp));",
    "\t$stack = array();\n\t$exp = str_split($exp);\n\tforeach ($exp as $char) {\n\t\tif ($char == '(') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char == ')') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\n$exp = \"(a+b)\";\nif (check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($pop == '[' && $exp[$i] != ']') {\n                return false;\n            } elseif ($pop == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $len = strlen($exp);\n    for($i=0; $i<$len; $i++) {\n        $ch = $exp[$i];\n        if($ch == '(' || $ch == '{' || $ch == '[') {\n            array_push($stack, $ch);\n        } else if($ch == ')' || $ch == '}' || $ch == ']') {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if(!((($top == '(') && ($ch == ')')) || (($top == '{') && ($ch == '}')) || (($top == '[') && ($ch == ']')))) {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $exp = str_split($exp);\n    foreach($exp as $char) {\n        if(in_array($char, $open)) {\n            array_push($stack, $char);\n        } else if(in_array($char, $close)) {\n            $last = array_pop($stack);\n            if(array_search($last, $open) != array_search($char, $close)) {\n                return false;\n            }\n        }\n    }\n    if(count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$key]) {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if (empty($stack)) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"(())((()())())\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for($i=0; $i<strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if(!$last) {\n                return false;\n            }\n            if($open[array_search($last, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{{([])}}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($pop == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($pop == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "\t$stack = [];\n\t$len = strlen($exp);\n\tfor ($i=0; $i < $len; $i++) { \n\t\tif ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif ($top == '(' && $exp[$i] != ')') {\n\t\t\t\treturn false;\n\t\t\t} else if ($top == '{' && $exp[$i] != '}') {\n\t\t\t\treturn false;\n\t\t\t} else if ($top == '[' && $exp[$i] != ']') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = \"({[]})\";\necho check_expression($exp);",
    "\t$stack = [];\n\t$len = strlen($exp);\n\tfor($i = 0; $i < $len; $i++) {\n\t\tif($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else {\n\t\t\tif(empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif($exp[$i] == ')' && $top != '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif($exp[$i] == ']' && $top != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif($exp[$i] == '}' && $top != '{') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$open_index]) {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho check_expression('{()}[]');",
    "    $stack = [];\n    $open_brackets = ['{', '[', '('];\n    $close_brackets = ['}', ']', ')'];\n    $brackets = array_merge($open_brackets, $close_brackets);\n    $brackets_map = [\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    ];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $brackets)) {\n            if (in_array($exp[$i], $open_brackets)) {\n                array_push($stack, $exp[$i]);\n            } else {\n                if (count($stack) == 0) {\n                    return false;\n                }\n                $last_open_bracket = array_pop($stack);\n                if ($brackets_map[$last_open_bracket] != $exp[$i]) {\n                    return false;\n                }\n            }\n        }\n    }\n    if (count($stack) != 0) {\n        return false;\n    }\n    return true;\n}\n\n$expression = '{()}[]';\nif (check_expression($expression)) {\n    echo 'Balanced';\n} else {\n    echo 'Not Balanced';\n}",
    "    $stack = array();\n    $exp_len = strlen($exp);\n    for ($i = 0; $i < $exp_len; $i++) {\n        if ($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if (count($stack) == 0) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"(a+b)\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"({[]})\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\necho check_expression('{()}[]') ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\necho check_expression('{()}[') ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\necho check_expression('{()}[()]') ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\necho check_expression('{()}[()]{}') ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\necho check_expression('{()}[()]{}(') ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\necho check_expression('{()}[()]{}(') ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\necho check_expression('{()}[()]{}(()') ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\necho check_expression('{()}[()]{}(()') ? \"Balanced\" : \"Not Balanced\";\necho PHP_",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            $stack->push($exp[$i]);\n        } else {\n            if($stack->isEmpty()) {\n                return false;\n            }\n            $top = $stack->pop();\n            if(($top == '(' && $exp[$i] != ')') || ($top == '{' && $exp[$i] != '}') || ($top == '[' && $exp[$i] != ']')) {\n                return false;\n            }\n        }\n    }\n    if($stack->isEmpty()) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $open_index = array_search($stack[count($stack) - 1], $open);\n            $close_index = array_search($exp[$i], $close);\n            if ($open_index == $close_index) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == '{' && $exp[$i] == '}') {\n                continue;\n            } else if ($pop == '[' && $exp[$i] == ']') {\n                continue;\n            } else if ($pop == '(' && $exp[$i] == ')') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\n$exp1 = \"{()}[\";\n$exp2 = \"{()}[{}]\";\n$exp3 = \"{()}[{]}\";\n$exp4 = \"{()}[{]}{\";\n$exp5 = \"{()}[{]}{\";\n$exp6 = \"{()}[{]}{\";\n$exp7 = \"{()}[{]}{\";\n$exp8 = \"{()}[{]}{\";\n$exp9 = \"{()}[{]}{\";\n$exp10 = \"{()}[{]}{\";\n$exp11 = \"{()}[{]}{\";\n$exp12 = \"{()}[{]}{\";\n$exp13 = \"{()}[{]}{\";\n$exp14 = \"{()}[{]}{\";\n$exp15 = \"{()}[{]}{\";\n$exp16 = \"{()}[{]}{\";\n$exp17 = \"{()}[{]}{\";\n$exp18 = \"{()}[{]}{\";\n$exp19 = \"{()}[{]}{\";\n$exp20 = \"{()}[",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (empty($stack) || $stack[count($stack) - 1] != $open[$index]) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\necho check_expression('{()}[]') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[{()}]') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[{()}]{()}') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[{()}]{()}[') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[{()}]{()}[{()}]') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[{()}]{()}[{()}]{()}') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[{()}]{()}[{()}]{()}[') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[{()}]{()}[{()}]{()}[{()}]') ? 'balanced' : 'not balanced",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\n$exp2 = \"{()}[\";\n$exp3 = \"{()}[]]\";\n$exp4 = \"{()}[]]\";\n$exp5 = \"{()}[]]\";\n$exp6 = \"{()}[]]\";\n$exp7 = \"{()}[]]\";\n$exp8 = \"{()}[]]\";\n$exp9 = \"{()}[]]\";\n$exp10 = \"{()}[]]\";\n$exp11 = \"{()}[]]\";\n$exp12 = \"{()}[]]\";\n$exp13 = \"{()}[]]\";\n$exp14 = \"{()}[]]\";\n$exp15 = \"{()}[]]\";\n$exp16 = \"{()}[]]\";\n$exp17 = \"{()}[]]\";\n$exp18 = \"{()}[]]\";\n$exp19 = \"{()}[]]\";\n$exp20 = \"{()}[]]\";\n$exp21 = \"{()}[]]\";\n$exp22 = \"{()}[]]\";\n$exp23 = \"{()}[]]\";\n$exp24 = \"{()}[]]\";\n$exp25 = \"{()}[]]\";\n$exp26",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $open_index = array_search($stack[count($stack) - 1], $open);\n            $close_index = array_search($exp[$i], $close);\n            if($open_index == $close_index) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            $stack->push($exp[$i]);\n        } else {\n            if ($stack->isEmpty()) {\n                return false;\n            }\n            $top = $stack->pop();\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return $stack->isEmpty();\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if (!((($top == '(') && ($exp[$i] == ')')) || (($top == '{') && ($exp[$i] == '}')) || (($top == '[') && ($exp[$i] == ']')))) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        }\n        if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $last = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $last) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if(!$last) {\n                return false;\n            }\n            $index = array_search($exp[$i], $close);\n            if($open[$index] != $last) {\n                return false;\n            }\n        }\n    }\n    if(count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($top, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($pop == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($pop == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n\n    if (count($stack) > 0) {\n        return false;\n    }\n\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{(})\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (empty($stack) || $stack[count($stack) - 1] != $open[$index]) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n}\n\necho check_expression('{()}[]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{(})') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[]{}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[{}]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[{]}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\n$exp2 = \"{()}[\";\nvar_dump(check_expression($exp));\nvar_dump(check_expression($exp2));",
    "    $stack = array();\n    $exp_len = strlen($exp);\n    for($i = 0; $i < $exp_len; $i++) {\n        if($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"({[]})\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        }\n        else if($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"({[]})\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$key]) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\necho check_expression('[{()}]') ? 'Balanced' : 'Not Balanced';",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            $stack->push($exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if ($stack->isEmpty()) {\n                return false;\n            }\n            $top = $stack->pop();\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if ($stack->isEmpty()) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == ']' || $exp[$i] == '}') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            } else if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            } else if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{','(','['];\n    $close = ['}',')',']'];\n    $len = strlen($exp);\n    for($i=0;$i<$len;$i++) {\n        if(in_array($exp[$i],$open)) {\n            array_push($stack,$exp[$i]);\n        } else if(in_array($exp[$i],$close)) {\n            if(count($stack) == 0) {\n                return false;\n            }\n            $pop = array_pop($stack);\n            if(!($pop == '{' && $exp[$i] == '}' || $pop == '(' && $exp[$i] == ')' || $pop == '[' && $exp[$i] == ']')) {\n                return false;\n            }\n        }\n    }\n    if(count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n$exp = '{()}[';\nvar_dump(check_expression($exp));\n$exp = '{()}[{}]';\nvar_dump(check_expression($exp));\n$exp = '{()}[{}]{}';\nvar_dump(check_expression($exp));\n$exp = '{()}[{}]{}[';\nvar_dump(check_expression($exp));\n$exp = '{()}[{}]{}[{}]';\nvar_dump(check_expression($exp));\n$exp = '{()}[{}]{}[{}]{}';\nvar_dump(check_expression($exp));\n$exp = '{()}[{}]{}[{}]{}[';\nvar_dump(check_expression($exp));\n$exp = '{()}[{}]{}[{}]{}[]';\nvar_dump(check_expression($exp));\n$exp = '{()}[{}]{}[{}]{}[]{}';\nvar_",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            $open_bracket = $open[$open_index];\n            if (end($stack) == $open_bracket) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\n$exp1 = \"{()}[\";\n$exp2 = \"{()}]\";\n$exp3 = \"{()}[\";\n$exp4 = \"{()}[\";\n$exp5 = \"{()}[\";\n$exp6 = \"{()}[\";\n$exp7 = \"{()}[\";\n$exp8 = \"{()}[\";\n$exp9 = \"{()}[\";\n$exp10 = \"{()}[\";\n$exp11 = \"{()}[\";\n$exp12 = \"{()}[\";\n$exp13 = \"{()}[\";\n$exp14 = \"{()}[\";\n$exp15 = \"{()}[\";\n$exp16 = \"{()}[\";\n$exp17 = \"{()}[\";\n$exp18 = \"{()}[\";\n$exp19 = \"{()}[\";\n$exp20 = \"{()}[\";\n$exp21 = \"{()}[\";\n$exp22 = \"{()}[\";\n$exp23 = \"{()}[\";\n$exp24 = \"{()}[\";\n$exp25 = \"{()}[\";\n$exp26 = \"{()}[\";\n$exp27 = \"{()}[\";\n$exp28 = \"{()}[\";\n$exp",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    $brackets = array_merge($open_brackets, $close_brackets);\n    $exp_arr = str_split($exp);\n    foreach($exp_arr as $char) {\n        if(in_array($char, $brackets)) {\n            if(in_array($char, $open_brackets)) {\n                array_push($stack, $char);\n            } else {\n                if(empty($stack)) {\n                    return false;\n                }\n                $last_open_bracket = array_pop($stack);\n                if(!is_matching_bracket($last_open_bracket, $char)) {\n                    return false;\n                }\n            }\n        }\n    }\n    return empty($stack);\n}\n",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if (!((($top == '(') && ($exp[$i] == ')')) || (($top == '{') && ($exp[$i] == '}')) || (($top == '[') && ($exp[$i] == ']')))) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($pop == '[' && $exp[$i] != ']') {\n                return false;\n            } elseif ($pop == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open_brackets = ['{', '(', '['];\n    $close_brackets = ['}', ')', ']'];\n    $brackets = array_merge($open_brackets, $close_brackets);\n    $open_brackets_map = array_flip($open_brackets);\n    $close_brackets_map = array_flip($close_brackets);\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $brackets)) {\n            if (in_array($exp[$i], $open_brackets)) {\n                array_push($stack, $exp[$i]);\n            } else {\n                $last_bracket = array_pop($stack);\n                if ($open_brackets_map[$last_bracket] != $close_brackets_map[$exp[$i]]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{(})\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == $open[array_search($exp[$i], $close)]) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($last == '(' && $exp[$i] != ')') {\n                return false;\n            } elseif ($last == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if(empty($stack)) {\n                return false;\n            } else {\n                $top = array_pop($stack);\n                if($top == '(' && $exp[$i] != ')') {\n                    return false;\n                } else if($top == '{' && $exp[$i] != '}') {\n                    return false;\n                } else if($top == '[' && $exp[$i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{{{}}}\";\necho check_expression($exp);",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pos = array_search($exp[$i], $close);\n            if (empty($stack) || ($open[$pos] != array_pop($stack))) {\n                return false;\n            }\n        }\n    }\n    return empty($stack) ? true : false;\n}\n\necho check_expression('{([])}') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}[') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}[}') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}[}]') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}[}]{') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}[}]{}') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}[}]{}(') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}[}]{}()') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}[}]{}()[') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}[}]{}()[]') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}[}]{}()[]{') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\n",
    "    $stack = array();\n    $open = array('{', '(', '[');\n    $close = array('}', ')', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $pop = array_pop($stack);\n            if ($open[array_search($pop, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if (empty($stack)) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"((a+b)*(c-d))\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($last, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            $key = array_search($exp[$i], $close);\n            if ($open[$key] != $top) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pos = array_search($exp[$i], $close);\n            if (empty($stack) || ($open[$pos] != array_pop($stack))) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = [];\n\t$open = ['{', '[', '('];\n\t$close = ['}', ']', ')'];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\t$last = array_pop($stack);\n\t\t\tif ($open[array_search($last, $open)] != $exp[$i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\necho check_expression('{[()]}') ? 'true' : 'false';\necho '<br>';\necho check_expression('{[(])}') ? 'true' : 'false';\necho '<br>';\necho check_expression('{{[[(())]]}}') ? 'true' : 'false';\necho '<br>';\necho check_expression('{[(])}') ? 'true' : 'false';\necho '<br>';\necho check_expression('{[(])}') ? 'true' : 'false';\necho '<br>';\necho check_expression('{[(])}') ? 'true' : 'false';\necho '<br>';\necho check_expression('{[(])}') ? 'true' : 'false';\necho '<br>';\necho check_expression('{[(])}') ? 'true' : 'false';\necho '<br>';\necho check_expression('{[(])}') ? 'true' : 'false';\necho '<br>';\necho check_expression('{[(])}') ? 'true' : 'false';\necho '<br>';\necho check_expression('{[(])}') ? 'true' : 'false';\necho '<br>';\necho check_expression('{[(])}') ? 'true' : 'false';\necho '<br>';\necho check_expression('{[(])}') ? 'true",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{(})\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if(array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    if(count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if (($top == '(' && $exp[$i] != ')') || ($top == '{' && $exp[$i] != '}') || ($top == '[' && $exp[$i] != ']')) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "\t$stack = [];\n\t$open = ['{', '[', '('];\n\t$close = ['}', ']', ')'];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\t$char = $exp[$i];\n\t\tif (in_array($char, $open)) {\n\t\t\tarray_push($stack, $char);\n\t\t} else if (in_array($char, $close)) {\n\t\t\t$last = array_pop($stack);\n\t\t\tif ($open[array_search($char, $close)] != $last) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $open_index = array_search($stack[count($stack) - 1], $open);\n            $close_index = array_search($exp[$i], $close);\n            if ($open_index == $close_index) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $pos = array_search($exp[$i], $close);\n            if (empty($stack) || ($open[$pos] != array_pop($stack))) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\necho check_expression('{()}[]') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{(})') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{()}[') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{()}[{}]') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{()}[{}]{') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{()}[{}]{}') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{()}[{}]{}{}') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{()}[{}]{}{}{}') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{()}[{}]{}{}{}{}') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{()}[{}]{}{}{}{}{}') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{()}[{}]{}{}{}{}{}{}') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close_brackets)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $last_open_bracket = array_pop($stack);\n            if ($last_open_bracket == '(' && $exp[$i] != ')') {\n                return false;\n            } elseif ($last_open_bracket == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($last_open_bracket == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{([])}';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if(end($stack) == $open[$key]) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if(count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open_brackets = ['{', '(', '['];\n    $close_brackets = ['}', ')', ']'];\n    $brackets = array_merge($open_brackets, $close_brackets);\n    $brackets_map = [\n        '{' => '}',\n        '(' => ')',\n        '[' => ']'\n    ];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $brackets)) {\n            if (in_array($exp[$i], $open_brackets)) {\n                array_push($stack, $exp[$i]);\n            } else {\n                $last_bracket = array_pop($stack);\n                if ($brackets_map[$last_bracket] != $exp[$i]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $len = strlen($exp);\n    for($i=0; $i<$len; $i++) {\n        if($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if(count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if(count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{{([])}}\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    $brackets = array_merge($open_brackets, $close_brackets);\n    $exp = str_split($exp);\n    foreach($exp as $char) {\n        if(in_array($char, $brackets)) {\n            if(in_array($char, $open_brackets)) {\n                array_push($stack, $char);\n            } else {\n                $open_bracket = array_pop($stack);\n                $open_bracket_index = array_search($open_bracket, $open_brackets);\n                $close_bracket_index = array_search($char, $close_brackets);\n                if($open_bracket_index != $close_bracket_index) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    $brackets = [\n        ')' => '(',\n        '}' => '{',\n        ']' => '['\n    ];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top != $brackets[$exp[$i]]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) != 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $last) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            $stack->push($exp[$i]);\n        } else {\n            if ($stack->isEmpty()) {\n                return false;\n            }\n            if ($exp[$i] == ')') {\n                if ($stack->top() == '(') {\n                    $stack->pop();\n                } else {\n                    return false;\n                }\n            } else if ($exp[$i] == '}') {\n                if ($stack->top() == '{') {\n                    $stack->pop();\n                } else {\n                    return false;\n                }\n            } else if ($exp[$i] == ']') {\n                if ($stack->top() == '[') {\n                    $stack->pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n    if ($stack->isEmpty()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"({[]})\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open_brackets = array('{', '[', '(');\n    $close_brackets = array('}', ']', ')');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            $last_open_bracket = array_pop($stack);\n            if ($last_open_bracket == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($last_open_bracket == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($last_open_bracket == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[{}{})(]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($pop == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($pop == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for($i=0; $i<strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif(in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if(array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[}\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[}\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[}\";\nvar_dump(check_expression($exp));",
    "\t$stack = array();\n\t$open = array('(','{','[');\n\t$close = array(')','}',']');\n\tfor($i=0;$i<strlen($exp);$i++) {\n\t\tif(in_array($exp[$i],$open)) {\n\t\t\tarray_push($stack,$exp[$i]);\n\t\t} else if(in_array($exp[$i],$close)) {\n\t\t\tif(empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$top = array_pop($stack);\n\t\t\t\tif(!($open[array_search($top,$open)] == $close[array_search($exp[$i],$close)])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if (count($stack) == 0 || $stack[count($stack) - 1] != $open[$open_index]) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = array();\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n            array_push($stack, $exp[$i]);\n        } else if($exp[$i] == ')' || $exp[$i] == ']' || $exp[$i] == '}') {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($exp[$i] == ')' && $top != '(') {\n                return false;\n            } else if($exp[$i] == ']' && $top != '[') {\n                return false;\n            } else if($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[{()}]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[{()}]{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[{()}]{}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[{()}]{}{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[{()}]{}{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[{()}]{}{}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[{()}]{}{}{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[{()}]{}{}{}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last_open = array_pop($stack);\n            if ($open[array_search($last_open, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho check_expression('{([])}') ? 'true' : 'false';",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\n$exp1 = \"{()}[\";\n$exp2 = \"{()}[]]\";\n$exp3 = \"{()}[]]\";\n$exp4 = \"{()}[]]\";\n$exp5 = \"{()}[]]\";\n$exp6 = \"{()}[]]\";\n$exp7 = \"{()}[]]\";\n$exp8 = \"{()}[]]\";\n$exp9 = \"{()}[]]\";\n$exp10 = \"{()}[]]\";\n$exp11 = \"{()}[]]\";\n$exp12 = \"{()}[]]\";\n$exp13 = \"{()}[]]\";\n$exp14 = \"{()}[]]\";\n$exp15 = \"{()}[]]\";\n$exp16 = \"{()}[]]\";\n$exp17 = \"{()}[]]\";\n$exp18 = \"{()}[]]\";\n$exp19 = \"{()}[]]\";\n$exp20 = \"{()}[]]\";\n$exp21 = \"{()}[]]\";\n$exp22 = \"{()}[]]\";\n$exp23 = \"{()",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[(])\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $popped = array_pop($stack);\n            if ($popped == '(' && $exp[$i] != ')') {\n                return false;\n            } elseif ($popped == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($popped == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\n$exp2 = '{(})';\n$exp3 = '{()}[{}]';\n$exp4 = '{()}[{}]{}';\n$exp5 = '{()}[{}]{}[';\n\necho check_expression($exp) ? 'true' : 'false';\necho PHP_EOL;\necho check_expression($exp2) ? 'true' : 'false';\necho PHP_EOL;\necho check_expression($exp3) ? 'true' : 'false';\necho PHP_EOL;\necho check_expression($exp4) ? 'true' : 'false';\necho PHP_EOL;\necho check_expression($exp5) ? 'true' : 'false';\necho PHP_EOL;",
    "\t$stack = [];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} elseif ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$top = array_pop($stack);\n\t\t\t\tif ($top == '(' && $exp[$i] != ')') {\n\t\t\t\t\treturn false;\n\t\t\t\t} elseif ($top == '{' && $exp[$i] != '}') {\n\t\t\t\t\treturn false;\n\t\t\t\t} elseif ($top == '[' && $exp[$i] != ']') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho check_expression('{()}[]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if(!$top) {\n                return false;\n            }\n            if($open[array_search($top, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"({})\";\necho check_expression($exp);",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if (empty($stack)) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"((a+b))\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            } else if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            } else if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"[()]{}{[()()]()}\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = array();\n\t$open = array('{', '[', '(');\n\t$close = array('}', ']', ')');\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} elseif (in_array($exp[$i], $close)) {\n\t\t\t$key = array_search($exp[$i], $close);\n\t\t\tif (end($stack) == $open[$key]) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\n$exp = '{()}[]';\nif (check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(') {\n            $stack->push($exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if ($stack->isEmpty()) {\n                return false;\n            } else {\n                $stack->pop();\n            }\n        }\n    }\n    if ($stack->isEmpty()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"((a+b))\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = new SplStack();\n    $exp = str_split($exp);\n    foreach ($exp as $char) {\n        if ($char == '(' || $char == '[' || $char == '{') {\n            $stack->push($char);\n        } else {\n            if ($stack->isEmpty()) {\n                return false;\n            }\n            if ($char == ')' && $stack->top() != '(') {\n                return false;\n            }\n            if ($char == ']' && $stack->top() != '[') {\n                return false;\n            }\n            if ($char == '}' && $stack->top() != '{') {\n                return false;\n            }\n            $stack->pop();\n        }\n    }\n    if ($stack->isEmpty()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"([]){}\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if (array_pop($stack) !== $open[$open_index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho check_expression('{([])}') ? 'true' : 'false';",
    "\t$stack = [];\n\t$open = ['{', '[', '('];\n\t$close = ['}', ']', ')'];\n\tfor ($i=0; $i < strlen($exp); $i++) { \n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} elseif (in_array($exp[$i], $close)) {\n\t\t\t$popped = array_pop($stack);\n\t\t\tif ($open[array_search($popped, $open)] != $exp[$i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\necho check_expression('{([])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\necho check_expression('{([}])}');\n",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\n$res = check_expression($exp);\necho $res ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[\";\n$res = check_expression($exp);\necho $res ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{(})\";\n$res = check_expression($exp);\necho $res ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[]{}\";\n$res = check_expression($exp);\necho $res ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($open[array_search($top, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"({[]})\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $pop = array_pop($stack);\n            if ($open[array_search($pop, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\nif (check_expression($exp)) {\n    echo 'Balanced';\n} else {\n    echo 'Not Balanced';\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $last = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $last) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\necho check_expression('{()}[]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho \"\\n\";\necho check_",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == '(' && $exp[$i] != ')') {\n                return false;\n            } elseif ($last == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($last == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{{([])}}\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            $stack->push($exp[$i]);\n        } else {\n            if ($stack->isEmpty()) {\n                return false;\n            }\n            $top = $stack->pop();\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            } else if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            } else if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    return $stack->isEmpty();\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = [];\n\t$open = ['{', '(', '['];\n\t$close = ['}', ')', ']'];\n\t$len = strlen($exp);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif ($open[array_search($top, $open)] != $exp[$i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if (empty($stack)) {\n                return false;\n            } else if ($stack[count($stack) - 1] == $open[$open_index]) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            $last_open_bracket = array_pop($stack);\n            if ($last_open_bracket != $open_brackets[array_search($exp[$i], $close_brackets)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho check_expression('[{()}]');\necho check_expression('[{(}]');\necho check_expression('[{(}]');\necho check_expression('[{(}]');\necho check_expression('[{(}]');",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if(array_pop($stack) != $open[$open_index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{{([][])}()}\";\necho check_expression($exp);",
    "\t$stack = [];\n\t$open = ['(', '{', '['];\n\t$close = [')', '}', ']'];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\t$top = array_pop($stack);\n\t\t\tif ($top == '(' && $exp[$i] != ')') {\n\t\t\t\treturn false;\n\t\t\t} else if ($top == '{' && $exp[$i] != '}') {\n\t\t\t\treturn false;\n\t\t\t} else if ($top == '[' && $exp[$i] != ']') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n$exp = \"([{}])\";\necho check_expression($exp);",
    "\t$stack = [];\n\t$open = ['{', '[', '('];\n\t$close = ['}', ']', ')'];\n\t$len = strlen($exp);\n\tfor($i = 0; $i < $len; $i++) {\n\t\tif(in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} elseif(in_array($exp[$i], $close)) {\n\t\t\t$key = array_search($exp[$i], $close);\n\t\t\tif(end($stack) == $open[$key]) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if (!((($top == '(') && ($exp[$i] == ')')) || (($top == '{') && ($exp[$i] == '}')) || (($top == '[') && ($exp[$i] == ']')))) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $exp_len = strlen($exp);\n    for ($i = 0; $i < $exp_len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if (!((($top == '(') && ($exp[$i] == ')')) || (($top == '{') && ($exp[$i] == '}')) || (($top == '[') && ($exp[$i] == ']')))) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"({[]})\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for($i=0; $i<strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        }\n        if(in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n            if($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    if(count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\n$exp1 = '{(})';\n$exp2 = '{()}[]{}';\n$exp3 = '{()}[]{}(';\n$exp4 = '{()}[]{}()';\n$exp5 = '{()}[]{}()[';\n$exp6 = '{()}[]{}()[]';\necho check_expression($exp) . PHP_EOL;\necho check_expression($exp1) . PHP_EOL;\necho check_expression($exp2) . PHP_EOL;\necho check_expression($exp3) . PHP_EOL;\necho check_expression($exp4) . PHP_EOL;\necho check_expression($exp5) . PHP_EOL;\necho check_expression($exp6) . PHP_EOL;",
    "    $stack = [];\n    $exp = str_split($exp);\n    foreach($exp as $char) {\n        if($char == '(' || $char == '{' || $char == '[') {\n            array_push($stack, $char);\n        } else {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($char == ')' && $top != '(') {\n                return false;\n            }\n            if($char == '}' && $top != '{') {\n                return false;\n            }\n            if($char == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{()}[]]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{()}[';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{()}';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{()}[';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;",
    "\t$stack = array();\n\t$open_brackets = array('(', '{', '[');\n\t$close_brackets = array(')', '}', ']');\n\t$len = strlen($exp);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif (in_array($exp[$i], $open_brackets)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close_brackets)) {\n\t\t\t$open_bracket = array_pop($stack);\n\t\t\tif ($open_bracket == '(' && $exp[$i] != ')') {\n\t\t\t\treturn false;\n\t\t\t} else if ($open_bracket == '{' && $exp[$i] != '}') {\n\t\t\t\treturn false;\n\t\t\t} else if ($open_bracket == '[' && $exp[$i] != ']') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = \"{{([])}}\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));\n$exp = \"{(})\";\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) !== $open[$index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\n$exp2 = '{(})';\n\necho check_expression($exp) ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression($exp2) ? 'balanced' : 'not balanced';",
    "    $stack = new SplStack();\n    $exp = str_split($exp);\n    foreach($exp as $char) {\n        if($char == '(' || $char == '{' || $char == '[') {\n            $stack->push($char);\n        } else if($char == ')' || $char == '}' || $char == ']') {\n            if($stack->isEmpty()) {\n                return false;\n            }\n            $top = $stack->pop();\n            if(!is_matching_pair($top, $char)) {\n                return false;\n            }\n        }\n    }\n    return $stack->isEmpty();\n}\n",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\n$exp1 = \"{(})\";\n\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp1) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $exp_arr = str_split($exp);\n    foreach($exp_arr as $char) {\n        if($char == '(' || $char == '{' || $char == '[') {\n            array_push($stack, $char);\n        } else if($char == ')' || $char == '}' || $char == ']') {\n            $top = array_pop($stack);\n            if(($top == '(' && $char == ')') || ($top == '{' && $char == '}') || ($top == '[' && $char == ']')) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{(})[]';\nvar_dump(check_expression($exp));",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            $stack->push($exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if ($stack->isEmpty()) {\n                return false;\n            }\n            $top = $stack->pop();\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if ($stack->isEmpty()) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            $index = array_search($exp[$i], $close);\n            if($open[$index] != $last) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{{([])}}\";\necho check_expression($exp);",
    "\t$stack = [];\n\tfor ($i=0; $i < strlen($exp); $i++) { \n\t\tif ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n\t\t\t$last = array_pop($stack);\n\t\t\tif ($last == '(' && $exp[$i] != ')') {\n\t\t\t\treturn false;\n\t\t\t} else if ($last == '{' && $exp[$i] != '}') {\n\t\t\t\treturn false;\n\t\t\t} else if ($last == '[' && $exp[$i] != ']') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = \"{{([])}}\";\n$exp2 = \"{{([])}}{\";\n\necho check_expression($exp) . \"\\n\";\necho check_expression($exp2) . \"\\n\";",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if (!((($top == '(') && ($exp[$i] == ')')) || (($top == '{') && ($exp[$i] == '}')) || (($top == '[') && ($exp[$i] == ']')))) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\necho check_expression('{()}[]');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho \"\\n\";\necho check_expression('{()}[}');\necho",
    "    $stack = array();\n    $exp_len = strlen($exp);\n    for($i=0; $i<$exp_len; $i++) {\n        if($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($exp[$i] == ')' && $top != '(') {\n                return false;\n            } else if($exp[$i] == '}' && $top != '{') {\n                return false;\n            } else if($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"({[]})\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($last == '[' && $exp[$i] != ']') {\n                return false;\n            } elseif ($last == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n$exp = '{(})[]';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $popped = array_pop($stack);\n            if ($popped == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($popped == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($popped == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho check_expression('{([])}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{([])') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{([])}(') ? 'true' : 'false';\necho PHP_EOL;",
    "    $stack = [];\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        }\n        else if($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if(($top == '(' && $exp[$i] != ')') || ($top == '{' && $exp[$i] != '}') || ($top == '[' && $exp[$i] != ']')) {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n}\nelse {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"[()]{}{[()()]()}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\n",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            $stack->push($exp[$i]);\n        } else {\n            if($stack->isEmpty()) {\n                return false;\n            }\n            $top = $stack->pop();\n            if($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if($stack->isEmpty()) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $exp_arr = str_split($exp);\n    foreach ($exp_arr as $char) {\n        if ($char == '(' || $char == '{' || $char == '[') {\n            array_push($stack, $char);\n        } else if ($char == ')' || $char == '}' || $char == ']') {\n            if (empty($stack)) {\n                return false;\n            } else {\n                $top = array_pop($stack);\n                if ($top == '(' && $char != ')') {\n                    return false;\n                } else if ($top == '{' && $char != '}') {\n                    return false;\n                } else if ($top == '[' && $char != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{{[[(())]]}}\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } elseif (in_array($char, $close)) {\n            $last = array_pop($stack);\n            if (array_search($last, $open) !== array_search($char, $close)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if(count($stack) == 0) {\n                return false;\n            } else if($open[$open_index] == end($stack)) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if(count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i=0; $i < $len; $i++) { \n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (empty($stack) || $open[$index] != array_pop($stack)) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{(})';\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $exp = str_split($exp);\n    foreach($exp as $char) {\n        if($char == '(' || $char == '{' || $char == '[') {\n            array_push($stack, $char);\n        } else if($char == ')' || $char == '}' || $char == ']') {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($top == '(' && $char != ')') {\n                return false;\n            } else if($top == '{' && $char != '}') {\n                return false;\n            } else if($top == '[' && $char != ']') {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\necho check_expression('{()}[]') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{(})') ? 'balanced' : 'not balanced';\necho PHP_EOL;",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($last, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho check_expression('{[()]}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{[(])}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{{[[(())]]}}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;",
    "\t$stack = new SplStack();\n\t$len = strlen($exp);\n\tfor($i=0;$i<$len;$i++) {\n\t\tif($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n\t\t\t$stack->push($exp[$i]);\n\t\t} else {\n\t\t\tif($stack->isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = $stack->pop();\n\t\t\tif($top == '(' && $exp[$i] != ')') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif($top == '{' && $exp[$i] != '}') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif($top == '[' && $exp[$i] != ']') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif($stack->isEmpty()) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\n$exp = \"{()}[]]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\n$exp = \"{()}[]]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\n$exp = \"{()}[]]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close_brackets)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $last_element = array_pop($stack);\n            if ($open_brackets[array_search($exp[$i], $close_brackets)] != $last_element) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[()]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[()]{}';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[()]{}(';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[()]{}(';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[()]{}(()';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[()]{}(())';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[()]{}(()))';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[()]{}(()))(';\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last_open = array_pop($stack);\n            if ($open[array_search($last_open, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $open_index = array_search($stack[count($stack) - 1], $open);\n            $close_index = array_search($exp[$i], $close);\n            if ($open_index == $close_index) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho check_expression('{()}[]') ? 'True' : 'False';\necho \"\\n\";\necho check_expression('{()}[') ? 'True' : 'False';\necho \"\\n\";\necho check_expression('{()}[{()}]') ? 'True' : 'False';\necho \"\\n\";\necho check_expression('{()}[{()}]{()}[{()}]') ? 'True' : 'False';\necho \"\\n\";\necho check_expression('{()}[{()}]{()}[{()}]{()}[{()}]') ? 'True' : 'False';\necho \"\\n\";\necho check_expression('{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]') ? 'True' : 'False';\necho \"\\n\";\necho check_expression('{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]') ? 'True' : 'False';\necho \"\\n\";\necho check_expression('{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\n$exp1 = \"{()}[\";\n$exp2 = \"{()}[]]\";\n$exp3 = \"{()}[]]{\";\n$exp4 = \"{()}[]]{}\";\n$exp5 = \"{()}[]]{}{\";\n$exp6 = \"{()}[]]{}{}\";\n$exp7 = \"{()}[]]{}{}{\";\n$exp8 = \"{()}[]]{}{}{}\";\n\necho check_expression($exp) . \"\\n\";\necho check_expression($exp1) . \"\\n\";\necho check_expression($exp2) . \"\\n\";\necho check_expression($exp3) . \"\\n\";\necho check_expression($exp4) . \"\\n\";\necho check_expression($exp5) . \"\\n\";\necho check_expression($exp6) . \"\\n\";\necho check_expression($exp7) . \"\\n\";\necho check_expression($exp8) . \"\\n\";",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == null) {\n                return false;\n            }\n            if ($exp[$i] == '}' && $last != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $last != '[') {\n                return false;\n            }\n            if ($exp[$i] == ')' && $last != '(') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($last, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last != $open[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));\n$exp = \"{()}[\";\nvar_dump(check_expression($exp));\n$exp = \"{()}[()]\";\nvar_dump(check_expression($exp));\n$exp = \"{()}[()]{\";\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            $index = array_search($last, $open);\n            if($exp[$i] != $close[$index]) {\n                return false;\n            }\n        }\n    }\n    if(count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\n$exp1 = '{()}[';\n$exp2 = '{()}[}';\n$exp3 = '{()}[}]';\necho check_expression($exp) . PHP_EOL;\necho check_expression($exp1) . PHP_EOL;\necho check_expression($exp2) . PHP_EOL;\necho check_expression($exp3) . PHP_EOL;",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($last == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($last == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } else if (in_array($char, $close)) {\n            $open_char = array_pop($stack);\n            if ($open_char == '{' && $char != '}') {\n                return false;\n            } else if ($open_char == '[' && $char != ']') {\n                return false;\n            } else if ($open_char == '(' && $char != ')') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);\n\n$exp = '{()}[';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\necho check_expression('[{()}]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{(})]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}(') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}()') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}()]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('[{()}]{}()]{') ? 'true' : 'false';\necho \"\\n\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            $open_bracket = $open[$open_index];\n            if (end($stack) == $open_bracket) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\n$exp1 = \"{(})\";\n$exp2 = \"{{[[(())]]}}\";\n\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp1) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp2) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\necho check_expression('{()}[]') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{]}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open_brackets = array('(', '{', '[');\n    $close_brackets = array(')', '}', ']');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $last_open_bracket = array_pop($stack);\n            if ($open_brackets[array_search($exp[$i], $close_brackets)] != $last_open_bracket) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"({[]})\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = array();\n    $open = array('{', '(', '[');\n    $close = array('}', ')', ']');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $pop = array_pop($stack);\n            if ($pop == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($pop == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($pop == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return empty($stack) ? true : false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == '(' && $exp[$i] != ')') {\n                return false;\n            } elseif ($last == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($last == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{([])}';\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    for($i=0;$i<strlen($exp);$i++) {\n        if($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[{}]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[{]}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[{]}{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[{]}{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[{]}{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[{]}{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[{]}{\";\necho check_",
    "    $stack = array();\n    $open_brackets = array('(', '{', '[');\n    $close_brackets = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close_brackets)) {\n            $last_open_bracket = array_pop($stack);\n            if ($last_open_bracket == '(' && $exp[$i] != ')') {\n                return false;\n            } elseif ($last_open_bracket == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($last_open_bracket == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{{()}}\";\necho check_expression($exp);",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    $brackets = array_merge($open_brackets, $close_brackets);\n    $exp_arr = str_split($exp);\n    foreach ($exp_arr as $char) {\n        if (in_array($char, $brackets)) {\n            if (in_array($char, $open_brackets)) {\n                array_push($stack, $char);\n            } else {\n                $last_open_bracket = array_pop($stack);\n                $open_bracket_index = array_search($last_open_bracket, $open_brackets);\n                $close_bracket_index = array_search($char, $close_brackets);\n                if ($open_bracket_index != $close_bracket_index) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last != $open[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$open_index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\n$exp1 = '{(})';\n$exp2 = '{()}[]';\n$exp3 = '{()}[]';\n$exp4 = '{()}[]';\n$exp5 = '{()}[]';\n$exp6 = '{()}[]';\n$exp7 = '{()}[]';\n$exp8 = '{()}[]';\n$exp9 = '{()}[]';\n$exp10 = '{()}[]';\n$exp11 = '{()}[]';\n$exp12 = '{()}[]';\n$exp13 = '{()}[]';\n$exp14 = '{()}[]';\n$exp15 = '{()}[]';\n$exp16 = '{()}[]';\n$exp17 = '{()}[]';\n$exp18 = '{()}[]';\n$exp19 = '{()}[]';\n$exp20 = '{()}[]';\n$exp21 = '{()}[]';\n$exp22 = '{()}[]';\n$exp23 = '{()}[]';\n$exp24 = '{()}[]';\n$exp25 = '{()}[]';\n$exp26 = '{()}[]';\n$exp27 = '{()}[]';\n$exp28 = '{()}[]';\n$exp29 = '{()}[]';\n$exp30 = '{()}",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for($i=0; $i<strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if(array_pop($stack) != $open[$open_index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $open_index = array_search($stack[count($stack) - 1], $open);\n            $close_index = array_search($exp[$i], $close);\n            if ($open_index == $close_index) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\n$exp2 = \"{()}[\";\n$exp3 = \"{()}[]]\";\n\nvar_dump(check_expression($exp));\nvar_dump(check_expression($exp2));\nvar_dump(check_expression($exp3));"
  ]
}