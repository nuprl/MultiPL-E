{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "php",
  "prompt": "<?php\n// Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}\n$cost = [[1, 2, 3], [4, 5, 1], [1, 1, 1]];\necho maxAverageOfPath($cost) . PHP_EOL;",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [6, 5, 4],\n    [7, 3, 9]\n];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 3, 2, 5],\n    [1, 2, 3, 4],\n    [6, 1, 8, 9],\n    [2, 7, 4, 3]\n];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);",
    "    $rows = count($cost);\n    $cols = count($cost[0]);\n    $dp = array_fill(0, $rows, array_fill(0, $cols, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $rows; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $cols; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $rows; $i++) {\n        for ($j = 1; $j < $cols; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$rows - 1][$cols - 1] / ($rows + $cols - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = [];\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);",
    "    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);"
  ]
}