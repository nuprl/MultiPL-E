{
  "name": "mbpp_165_count_char_position",
  "language": "php",
  "prompt": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr(97 + $i)) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i=0; $i < strlen($str1); $i++) { \n\t\tif ($str1[$i] == $str2[$i]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmplbee0w31.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $count = 0;\n    $str1 = strtolower($str1);\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "26\n0\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position('The quick brown fox jumps over the lazy dog.');\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i=0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr($i+97)) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr(97 + $i)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = range('a', 'z');\n  $count = 0;\n  for($i = 0; $i < strlen($str1); $i++) {\n    if($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"\\n\";\necho count_char_position(\"abcd efgh ijkl mnop qrst uvwx yz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpt2rjjrsk.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif (strpos($str2, $str1[$i]) == $i) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr($i + 97)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"<br>\";\necho count_char_position(\"We have nothing to fear but fear itself!\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26<br>\nWarning: Uninitialized string offset 26 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpjg0keart.php on line 8\n\nWarning: Uninitialized string offset 39 in",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - 97 == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmpejzbzk2a.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = 'abcdefghijklmnopqrstuvwxyz';\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position('The quick brown fox jumps over the lazy dog.');\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - ord('a') == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"\");\necho \"\\n\";\necho count_char_position(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmp2t_d9i6k.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif ($str1[$i] == $str2[$i]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr($i + 97)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - ord('a') == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position('abcdefghijklmnopqrstuvwxyz');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog. The dog slept over the verandah.');\necho \"\\n\";\necho count_char_position('abcdefghijklmnopqrstuvwxyz!@#$%^&*()');\necho \"\\n\";\necho count_char_position('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');\necho \"\\n\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26\n0\n0\n26\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif ($str1[$i] == $str2[$i]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122851,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpg54a4tx1.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"Five quacking Zephyrs jolt my wax bed\");\necho \"\\n\";\necho count_char_position(\"Pack my box with five dozen liquor jugs\");\necho \"\\n\";\necho count_char_position(\"How vexingly quick daft zebras jump!\");\necho \"\\n\";\necho count_char_position(\"Sphinx of black quartz, judge my vow\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\");\necho \"\\n\";\necho count_char_position(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEF\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmpumz5eglk.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - ord('a') == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\") . \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\") . \"\\n\";\necho count_char_position(\"Four score and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.\") . \"\\n\";\necho count_char_position(\"To be, or not to be, that is the question.\") . \"\\n\";\necho count_char_position(\"\") . \"\\n\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26\n\nWarning: Uninitialized string offset 26 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmp889y9tyh.php on line 8\n\nWarning: Uninitialized string offset 39 in /t",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmpltghv5sc.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpg9vprc4k.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmpltghv5sc.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmp5gtuzb5w.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $alphabet[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpl348d1in.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - 97 == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The sunset sets at twelve o' clock.\");\n\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $count = 0;\n    $str1 = strtolower($str1);\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr(97 + $i)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = range('a', 'z');\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position('The quick brown fox jumps over the lazy dog.');\n\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 35 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 36 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 37 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 38 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 39 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined array key 40 in /tmp/tmpnk_kp_lv.php on line 8\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (strpos($str2, $str1[$i]) == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmphsd5bfb9.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - ord('a') == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position('abcdefghijklmnopqrstuvwxyz');\n\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - ord('a') == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"\\n\";\necho count_char_position(\"aaabbbccc\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789`~!@#$%^&*()-_=+[{]}\\\\|;:'\\\",<.>/?\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789`~!@#$%^&*()-_=+[{]}\\\\|;:'\\\",<.>/?\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789`~!@#$%^&*()-_=+[{]}\\\\|;:'\\\",<.>/?\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrst\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmpzgpgb2ts.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The sunset sets at twelve o' clock.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif (ord($str1[$i]) - ord('a') == $i) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \",\" or \";\" in /tmp/tmpmngr3udb.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - 97 == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $count = 0;\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  for ($i=0; $i<strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdaqdxxj3.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $alphabet[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpznzz7bnx.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr($i + 97)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog!\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog?\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog,\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog;\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog:\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog'\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog-\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog_\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog=\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog+\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog*\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog&\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog^\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog%\");\necho \"<br>\";\necho count_char_position(\"The quick\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmpq1b60g3j.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif (ord($str1[$i]) - 97 == $i) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $alphabet[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position('The quick brown fox jumps over the lazy dog.');\n\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmp3t02gwlk.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $alphabet = range('a', 'z');\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $alphabet[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 35 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 36 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 37 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 38 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 39 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 40 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor($i = 0; $i < strlen($str1); $i++) {\n\t\tif($str1[$i] == $str2[$i]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmp8q6z9wej.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif ($str1[$i] == $str2[$i]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmp14camqnw.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $count = 0;\n    $str1 = strtolower($str1);\n    $str2 = 'abcdefghijklmnopqrstuvwxyz';\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position('The quick brown fox jumps over the lazy dog.');\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpyogchek0.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - ord('a') == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position('abcdefghijklmnopqrstuvwxyz');\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = range('a', 'z');\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 35 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 36 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 37 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 38 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 39 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 40 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = range('a', 'z');\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 35 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 36 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 37 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 38 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 39 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 40 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - 97 == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"\\n\";\necho count_char_position(\"We have nothing to fear but fear itself!\");\necho \"\\n\";\necho count_char_position(\"Madam, I'm Adam.\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26\n0\n0\n1\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = 'abcdefghijklmnopqrstuvwxyz';\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position('The quick brown fox jumps over the lazy dog.');\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmp84veyj0s.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26<br>0<br>0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - ord('a') == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"\\n\";\necho count_char_position(\"We have nothing to fear but fear itself!\");\necho \"\\n\";\necho count_char_position(\"There are two hard things in computer science: cache invalidation, naming things, and off-by-one errors.\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26\n0\n0\n1\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i=0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmppajjkrnh.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr(97 + $i)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmp6lrw1c1z.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr(97 + $i)) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position('The quick brown fox jumps over the lazy dog.');\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str1 = str_split($str1);\n  $count = 0;\n  foreach ($str1 as $key => $value) {\n    if ($value == chr($key + 97)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position('The quick brown fox jumps over the lazy dog.');\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"Five quacking Zephyrs jolt my wax bed\");\necho \"<br>\";\necho count_char_position(\"Pack my box with five dozen liquor jugs\");\necho \"<br>\";\necho count_char_position(\"How vexingly quick daft zebras jump!\");\necho \"<br>\";\necho count_char_position(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\necho \"<br>\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz.\");\necho \"<br>\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz!\");\necho \"<br>\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz?\");\necho \"<br>\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz,\");\necho \"<br>\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz;\");\necho \"<br>\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz:\");\necho \"<br>\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz-\");\necho \"<br>\";\necho count_char_position(\"abc\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmp6l6hyubs.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr(97 + $i)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmp2c0qvrtv.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $alphabet[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmp83p3_ali.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - 97 == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"<br>\";\necho count_char_position(\"We have nothing to fear but fear itself!\");\necho \"<br>\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26<br>0<br>0<br>1<br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - ord('a') == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"<br>\";\necho count_char_position(\"We have nothing to fear but fear itself!\");\necho \"<br>\";\necho count_char_position(\"There are two hard things in computer science: cache invalidation, naming things, and off-by-one errors.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26<br>0<br>0<br>1<br>2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif ($str1[$i] == chr(97 + $i)) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr($i + 97)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr($i + 97)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - ord('a') == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho count_char_position(\"We have nothing to fear but fear itself!\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26001",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i=0; $i < strlen($str1); $i++) { \n\t\tif ($str1[$i] == $alphabet[$i]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpxev94yha.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str1 = str_split($str1);\n    $count = 0;\n    foreach ($str1 as $key => $value) {\n        if ($value == chr($key + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $alphabet[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpmidlopx8.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $count = 0;\n  $str1 = strtolower($str1);\n  for($i = 0; $i < strlen($str1); $i++) {\n    if($str1[$i] == chr(97 + $i)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = 'abcdefghijklmnopqrstuvwxyz';\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position('The quick brown fox jumps over the lazy dog.');\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmp67rvhvzm.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = range('a', 'z');\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position('abcdefghijklmnopqrstuvwxyz');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"<br>\";\necho count_char_position('The quick brown fox jumps over the\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected string content \"The quick brown fox jumps over...\" in /tmp/tmp8x1grsii.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $count = 0;\n  $str1 = strtolower($str1);\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr($i + 97)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122851,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i=0; $i < strlen($str1); $i++) { \n\t\tif ($str1[$i] == $str2[$i]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\n\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpu1v78j6k.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - ord('a') == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str1 = str_split($str1);\n  $count = 0;\n  foreach($str1 as $key => $value) {\n    if($value == chr($key + 97)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - 97 == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmpejzbzk2a.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - ord('a') == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"\\n\";\necho count_char_position(\"We have nothing to fear but fear itself!\");\necho \"\\n\";\necho count_char_position(\"There are two hard things in computer science: cache invalidation, naming things, and off-by-one errors.\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26\n0\n0\n1\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpno9f_s6c.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif ($str1[$i] == $str2[$i]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr($i + 97)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr(97 + $i)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position('The quick brown fox jumps over the lazy dog.');\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  $alphabet = range('a', 'z');\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (in_array($str1[$i], $alphabet)) {\n      if ($str1[$i] == $alphabet[$i]) {\n        $count++;\n      }\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 27 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 28 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 29 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 31 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 32 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 33 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 35 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 36 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 37 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 38 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 40 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 41 in /tmp/tmpxplg307a.php on line 9\n\nWarning: Undefined array key 42 in /tmp/tmpxplg307a.php on line 9\n0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = range('a', 'z');\n  $count = 0;\n  for ($i=0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The sunset sets at twelve o' clock.\");\n\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmp9as9pt2s.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmp9as9pt2s.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmp9as9pt2s.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmp9as9pt2s.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmp9as9pt2s.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmp9as9pt2s.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmp9as9pt2s.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmp9as9pt2s.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmp9as9pt2s.php on line 8\n1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - ord('a') == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \",\" or \";\" in /tmp/tmp8qo16k20.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for($i = 0; $i < strlen($str1); $i++) {\n        if(ord($str1[$i]) == 97 + $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = range('a', 'z');\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 35 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 36 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 37 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 38 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 39 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined array key 40 in /tmp/tmpy864qrz4.php on line 8\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $arr1 = str_split($str1);\n  $arr2 = range('a', 'z');\n  $count = 0;\n  foreach ($arr1 as $key => $value) {\n    if ($value == $arr2[$key]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"\\n\";\necho count_char_position('The quick brown fox jumped over the lazy dog.');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumped over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumped over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumped over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumped over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumped over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumped over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumped over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumped over the lazy dog');\necho \"\\n\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 27 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 28 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 29 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 30 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 31 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 32 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 33 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 34 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 35 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 36 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 37 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 38 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 39 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined array key 40 in /tmp/tmp_hxe_x5g.php on line 9\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $alphabet[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = range('a', 'z');\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 35 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 36 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 37 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 38 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 39 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 40 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp69q2ir08.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $alphabet = range('a', 'z');\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $alphabet[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 35 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 36 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 37 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 38 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 39 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined array key 40 in /tmp/tmpqhngf_ay.php on line 8\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = range('a', 'z');\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"\\n\";\necho count_char_position(\"We have nothing to fear but fear itself.\");\necho \"\\n\";\necho count_char_position(\"There is no great genius without some touch of madness.\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 35 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 36 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 37 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 38 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 39 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined array key 40 in /tmp/tmpi_bvrcyy.php on line 8\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = 'abcdefghijklmnopqrstuvwxyz';\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position('The quick brown fox jumps over the lazy dog.');\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmppvgjixgs.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) == 97 + $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $alphabet = range('a', 'z');\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (in_array($str1[$i], $alphabet)) {\n            if ($str1[$i] == $alphabet[$i]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The sunset sets at twelve o' clock.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmpqeb0s0kr.php on line 9\n\nWarning: Undefined array key 29 in /tmp/tmpqeb0s0kr.php on line 9\n\nWarning: Undefined array key 30 in /tmp/tmpqeb0s0kr.php on line 9\n\nWarning: Undefined array key 31 in /tmp/tmpqeb0s0kr.php on line 9\n\nWarning: Undefined array key 32 in /tmp/tmpqeb0s0kr.php on line 9\n\nWarning: Undefined array key 33 in /tmp/tmpqeb0s0kr.php on line 9\n1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (strpos('abcdefghijklmnopqrstuvwxyz', $str1[$i]) == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position('The quick brown fox jumps over the lazy dog.');\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (strpos($str2, $str1[$i]) == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif ($str1[$i] == chr($i + 97)) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = range('a', 'z');\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"<br>\";\necho count_char_position(\"We have nothing to fear but fear itself.\");\necho \"<br>\";\necho count_char_position(\"There are two hard things in computer science: cache invalidation, naming things, and off-by-one errors.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 35 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 36 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 37 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 38 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 39 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined array key 40 in /tmp/tmp_bo3xwfz.php on line 8\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif ($str1[$i] == $str2[$i]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif (strpos($alphabet, $str1[$i]) == $i) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif (ord($str1[$i]) - 97 == $i) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"Five quacking Zephyrs jolt my wax bed\");\necho \"<br>\";\necho count_char_position(\"Pack my box with five dozen liquor jugs\");\necho \"<br>\";\necho count_char_position(\"How vexingly quick daft zebras jump\");\necho \"<br>\";\necho count_char_position(\"Sphinx of black quartz, judge my vow\");\necho \"<br>\";\necho count_char_position(\"Jackdaws love my big sphinx of quartz\");\necho \"<br>\";\necho count_char_position(\"The five boxing wizards jump quickly\");\necho \"<br>\";\necho count_char_position(\"Bright vixens jump; dozy fowl quack\");\necho \"<br>\";\necho count_char_position(\"Quick wafting zephyrs vex bold Jim\");\necho \"<br>\";\necho count_char_position(\"Sphinx of black quartz, judge my vow\");\necho \"<br>\";\necho count_char_position(\"How vexingly quick daft zebras jump\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"Five quacking Zephyrs jolt my wax bed\");\necho \"<br>\";\necho count_char_position(\"Pack my box with five dozen liquor jugs\");\necho \"<br>\";\necho count_char_position(\"How vexingly quick daft zebras jump\");\necho \"<br>\";\necho count_char_position(\"Sphinx of black quartz, judge my vow\");\necho \"<br>\";\n\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26<br>0<br>0<br>1<br>0<br>2<br>1<br>1<br>1<br>0<br>2<br>0<br>0<br>0<br>1<br>0<br>2<br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif ($str1[$i] == $str2[$i]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i=0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - 97 == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmpap6a4maf.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $alphabet[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - 97 == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[{]}\\\\|;:'\\\",<.>/?`~\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[{]}\\\\|;:'\\\",<.>/?`~ \");\necho \"\\n\";\necho count_char_position(\"\");\necho \"\\n\";\necho count_char_position(\" \");\necho \"\\n\";\necho count_char_position(\"  \");\necho \"\\n\";\necho count_char_position(\"   \");\necho \"\\n\";\necho count_char_position(\"    \");\necho \"\\n\";\necho count_char_position(\"     \");\necho \"\\n\";\necho count_char_position(\"      \");\necho \"\\n\";\necho count_char_position\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \",\" or \";\" in /tmp/tmpej1friau.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for($i = 0; $i < strlen($str1); $i++) {\n        if($str1[$i] == $alphabet[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmprz7tw6tr.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = range('a', 'z');\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position('abcdefghijklmnopqrstuvwxyz');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog.');\necho \"\\n\";\necho count_char_position('The quick brown fox jumped over the lazy dog.');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho \"\\n\";\necho count_char_position('The quick brown fox jumps over the lazy dog');\necho\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp0r6z0y4_.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - 97 == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\n$str1 = \"The quick brown fox jumps over the lazy dog.\";\necho count_char_position($str1);\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif (strpos($alphabet, $str1[$i]) == $i) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmpltghv5sc.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpyjufemm2.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $alphabet = range('a', 'z');\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $alphabet[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position('The quick brown fox jumps over the lazy dog.');\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 35 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 36 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 37 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 38 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 39 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined array key 40 in /tmp/tmpo0aki5x4.php on line 8\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - 97 == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"\\n\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"\\n\";\necho count_char_position(\"We have nothing to fear but fear itself!\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "26\n0\n0\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr(97 + $i)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$count = 0;\n\t$str1 = strtolower($str1);\n\t$str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif ($str1[$i] == $str2[$i]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpyw0ayzch.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmppy05td8v.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpoxz7d_x1.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr(97 + $i)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i=0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"\\n\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"\\n\";\necho count_char_position(\"aaabbbccc\");\necho \"\\n\";\necho count_char_position(\"abc\");\necho \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmpixuihg9l.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = range('a', 'z');\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 35 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 36 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 37 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 38 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 39 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined array key 40 in /tmp/tmp3_k12pv2.php on line 8\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - 97 == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i=0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == chr($i + 97)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $count = 0;\n    $str1 = strtolower($str1);\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if (ord($str1[$i]) - ord('a') == $i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\");\necho \"<br>\";\necho count_char_position(\"We have nothing to fear but fear itself!\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26<br>\nWarning: Uninitialized string offset 26 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmp99h7723t.php on line 8\n\nWarning: Uninitialized string offset 39 in",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\") . \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\") . \"\\n\";\necho count_char_position(\"Four score and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.\") . \"\\n\";\necho count_char_position(\"To be, or not to be: that is the question: Whether 'tis nobler in the mind to suffer The slings and arrows of outrageous fortune, Or to take arms against a sea of troubles, And by opposing end them? To die: to sleep; No more; and by a sleep to say we end The heart-ache and the thousand natural shocks That flesh is heir to, 'tis a consummation Devoutly to be wish'd. To die, to sleep; To sleep: perchance to dream: ay, there's the rub; For in that sleep of death what dreams may come When we have shuffled off this mortal coil, Must give us pause: there's the respect That makes calamity of so long life; For who would bear the whips and scorns of time, The oppressor's wrong, the proud man's contumely, The pangs of despised love, the law's delay, The insolence of office and the spurns That patient merit of the unworthy takes, When he himself might his quietus make With a bare bodkin? who would fardels bear, To grunt and sweat under a weary life, But that the dread of something after death, The undiscover'd country from whose bourn No traveller returns, puzzles the will And makes us rather bear those ills we have Than fly to others that we know not of? Thus conscience does make cowards of us all; And thus the native hue of resolution Is sicklied o\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmpfpv_4hug.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $str2[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpdi8lfokt.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if (ord($str1[$i]) - ord('a') == $i) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumped over the lazy dog.\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\");\necho \"<br>\";\necho count_char_position(\"The quick brown fox jumps over\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xbcefg\", expecting \")\" in /tmp/tmp_k_5os51.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr($i + 97)) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $count = 0;\n    $alphabet = range('a', 'z');\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $alphabet[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position('The quick brown fox jumps over the lazy dog.');\n\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "\nWarning: Undefined array key 26 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 27 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 28 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 29 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 30 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 31 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 32 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 33 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 34 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 35 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 36 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 37 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 38 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 39 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined array key 40 in /tmp/tmpkrapj5e2.php on line 8\n\nWarning: Undefined",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n  $str1 = strtolower($str1);\n  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  $count = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == $alphabet[$i]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_char_position(\"abcdefghijklmnopqrstuvwxyz\") . \"\\n\";\necho count_char_position(\"The quick brown fox jumps over the lazy dog\") . \"\\n\";\necho count_char_position(\"The time you enjoy wasting is not wasted time.\") . \"\\n\";\necho count_char_position(\"abcdABCD\") . \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") . \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\") . \"\\n\";\necho count_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':,./<>?\") . \"\\n\";\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "26\n\nWarning: Uninitialized string offset 26 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpyr3bfd1h.php on line 8\n\nWarning: Uninitialized string offset 39 in /t",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $count = 0;\n    $str1 = strtolower($str1);\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == chr(97 + $i)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "0",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n    $str1 = strtolower($str1);\n    $str2 = \"abcdefghijklmnopqrstuvwxyz\";\n    $count = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpffjfhtd_.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n\t$str1 = strtolower($str1);\n\t$str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($str1); $i++) {\n\t\tif ($str1[$i] == $str2[$i]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho count_char_position(\"The quick brown fox jumps over the lazy dog.\");\nfunction candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517287,
      "stdout": "\nWarning: Uninitialized string offset 26 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 27 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 28 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 29 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 30 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 31 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 32 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 33 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 34 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 35 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 36 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 37 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 38 in /tmp/tmpv7z98p7q.php on line 8\n\nWarning: Uninitialized string offset 39 in /tmp/",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}