{
  "name": "mbpp_252_convert",
  "language": "php",
  "prompt": "<?php\n// Write a python function to convert complex numbers to polar coordinates.\nfunction convert($numbers) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return convert(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $theta = atan($imaginary / $real);\n    return $r . '<br>' . $theta;\n}\n\necho convert('1+2j');",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = \"3+5j\";\necho \"The polar coordinates of $numbers are: \";\nprint_r(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phi = atan($imaginary / $real);\n    return \"r = $r, phi = $phi\";\n}\n\necho convert('1,1');",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = rad2deg(atan($imaginary/$real));\n    return \"The polar coordinates are: $polar and $angle\";\n}\n\necho convert('-2, -2');",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imag'], 2)),\n            'phi' => atan2($number['imag'], $number['real'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    ['real' => 1, 'imag' => 1],\n    ['real' => 1, 'imag' => -1],\n    ['real' => -1, 'imag' => 1],\n    ['real' => -1, 'imag' => -1]\n];\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imaginary'], 2)),\n            'phi' => atan2($number['imaginary'], $number['real'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('real' => 1, 'imaginary' => 1),\n    array('real' => 2, 'imaginary' => 2),\n    array('real' => 3, 'imaginary' => 3),\n    array('real' => 4, 'imaginary' => 4),\n    array('real' => 5, 'imaginary' => 5),\n);\n\n$result = convert($numbers);\nprint_r($result);\n",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phi = atan($imaginary / $real);\n    return $r . '<br>' . $phi;\n}\necho convert('2,2');",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n    array('x' => 4, 'y' => 4),\n    array('x' => 5, 'y' => 5),\n    array('x' => 6, 'y' => 6),\n    array('x' => 7, 'y' => 7),\n    array('x' => 8, 'y' => 8),\n    array('x' => 9, 'y' => 9),\n    array('x' => 10, 'y' => 10),\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = '-1.0,0.5';\n$result = convert($numbers);\necho 'Polar coordinates: ' . $result[0] . '<br>';\necho 'Angle: ' . $result[1] . '<br>';",
    "    $numbers = explode(',', $numbers);\n    $numbers = array_map('trim', $numbers);\n    $numbers = array_map('intval', $numbers);\n    $numbers = array_map('abs', $numbers);\n    $numbers = array_map('sqrt', $numbers);\n    $numbers = array_map('round', $numbers, array_fill(0, count($numbers), 2));\n    return implode(', ', $numbers);\n}\n\necho convert('3+5j, 2+4j, -3+5j, 2-4j');",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    ['x' => 1, 'y' => 1],\n    ['x' => 2, 'y' => 2],\n    ['x' => 3, 'y' => 3],\n    ['x' => 4, 'y' => 4],\n    ['x' => 5, 'y' => 5],\n    ['x' => 6, 'y' => 6],\n    ['x' => 7, 'y' => 7],\n    ['x' => 8, 'y' => 8],\n    ['x' => 9, 'y' => 9],\n    ['x' => 10, 'y' => 10]\n];\n\n$result = convert($numbers);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imag'], 2)),\n            'phi' => atan2($number['imag'], $number['real'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [\n        'real' => 1,\n        'imag' => 1\n    ],\n    [\n        'real' => 2,\n        'imag' => 2\n    ],\n    [\n        'real' => 3,\n        'imag' => 3\n    ]\n];\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['real'] * $number['real'] + $number['imaginary'] * $number['imaginary']),\n            'phi' => atan2($number['imaginary'], $number['real'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('real' => 1, 'imaginary' => 1),\n    array('real' => 2, 'imaginary' => 2),\n    array('real' => 3, 'imaginary' => 3),\n    array('real' => 4, 'imaginary' => 4),\n    array('real' => 5, 'imaginary' => 5),\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));\n",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 1], [1, -1], [0, 1], [1, 0]];\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\n$result = convert($numbers);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $result = [];\n    foreach($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 1], [1, -1], [-1, -1], [-1, 1]];\nprint_r(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = \"1+2j\";\n$result = convert($numbers);\necho \"The polar coordinates of $numbers are: \";\necho \"(\" . $result[0] . \", \" . $result[1] . \")\";",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1),\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $result = [];\n    foreach ($numbers as $number) {\n        $number = explode('+', $number);\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan($number[1] / $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = '1+2j, 3+4j, -2+1j';\nprint_r(convert($numbers));"
  ]
}