{
  "name": "mbpp_252_convert",
  "language": "php",
  "prompt": "<?php\n// Write a python function to convert complex numbers to polar coordinates.\nfunction convert($numbers) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return convert(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $theta = atan($imaginary / $real);\n    return $r . '<br>' . $theta;\n}\n\necho convert('1+2j');",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = \"3+5j\";\necho \"The polar coordinates of $numbers are: \";\nprint_r(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phi = atan($imaginary / $real);\n    return \"r = $r, phi = $phi\";\n}\n\necho convert('1,1');",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = rad2deg(atan($imaginary/$real));\n    return \"The polar coordinates are: $polar and $angle\";\n}\n\necho convert('-2, -2');",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imag'], 2)),\n            'phi' => atan2($number['imag'], $number['real'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    ['real' => 1, 'imag' => 1],\n    ['real' => 1, 'imag' => -1],\n    ['real' => -1, 'imag' => 1],\n    ['real' => -1, 'imag' => -1]\n];\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imaginary'], 2)),\n            'phi' => atan2($number['imaginary'], $number['real'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('real' => 1, 'imaginary' => 1),\n    array('real' => 2, 'imaginary' => 2),\n    array('real' => 3, 'imaginary' => 3),\n    array('real' => 4, 'imaginary' => 4),\n    array('real' => 5, 'imaginary' => 5),\n);\n\n$result = convert($numbers);\nprint_r($result);\n",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phi = atan($imaginary / $real);\n    return $r . '<br>' . $phi;\n}\necho convert('2,2');",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n    array('x' => 4, 'y' => 4),\n    array('x' => 5, 'y' => 5),\n    array('x' => 6, 'y' => 6),\n    array('x' => 7, 'y' => 7),\n    array('x' => 8, 'y' => 8),\n    array('x' => 9, 'y' => 9),\n    array('x' => 10, 'y' => 10),\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = '-1.0,0.5';\n$result = convert($numbers);\necho 'Polar coordinates: ' . $result[0] . '<br>';\necho 'Angle: ' . $result[1] . '<br>';",
    "    $numbers = explode(',', $numbers);\n    $numbers = array_map('trim', $numbers);\n    $numbers = array_map('intval', $numbers);\n    $numbers = array_map('abs', $numbers);\n    $numbers = array_map('sqrt', $numbers);\n    $numbers = array_map('round', $numbers, array_fill(0, count($numbers), 2));\n    return implode(', ', $numbers);\n}\n\necho convert('3+5j, 2+4j, -3+5j, 2-4j');",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    ['x' => 1, 'y' => 1],\n    ['x' => 2, 'y' => 2],\n    ['x' => 3, 'y' => 3],\n    ['x' => 4, 'y' => 4],\n    ['x' => 5, 'y' => 5],\n    ['x' => 6, 'y' => 6],\n    ['x' => 7, 'y' => 7],\n    ['x' => 8, 'y' => 8],\n    ['x' => 9, 'y' => 9],\n    ['x' => 10, 'y' => 10]\n];\n\n$result = convert($numbers);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imag'], 2)),\n            'phi' => atan2($number['imag'], $number['real'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [\n        'real' => 1,\n        'imag' => 1\n    ],\n    [\n        'real' => 2,\n        'imag' => 2\n    ],\n    [\n        'real' => 3,\n        'imag' => 3\n    ]\n];\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['real'] * $number['real'] + $number['imaginary'] * $number['imaginary']),\n            'phi' => atan2($number['imaginary'], $number['real'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('real' => 1, 'imaginary' => 1),\n    array('real' => 2, 'imaginary' => 2),\n    array('real' => 3, 'imaginary' => 3),\n    array('real' => 4, 'imaginary' => 4),\n    array('real' => 5, 'imaginary' => 5),\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));\n",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 1], [1, -1], [0, 1], [1, 0]];\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\n$result = convert($numbers);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $result = [];\n    foreach($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 1], [1, -1], [-1, -1], [-1, 1]];\nprint_r(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = \"1+2j\";\n$result = convert($numbers);\necho \"The polar coordinates of $numbers are: \";\necho \"(\" . $result[0] . \", \" . $result[1] . \")\";",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1),\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $result = [];\n    foreach ($numbers as $number) {\n        $number = explode('+', $number);\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan($number[1] / $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = '1+2j, 3+4j, -2+1j';\nprint_r(convert($numbers));",
    "    $polar = array();\n    foreach ($numbers as $number) {\n        $polar[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $polar;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, -1),\n    array(-1, 1)\n);\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 1],\n    [1, -1],\n    [-1, 1],\n    [-1, -1]\n];\n\nprint_r(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan2($imaginary, $real);\n    $angle = $angle * 180 / M_PI;\n    return array($polar, $angle);\n}\n\n$numbers = \"1+2j\";\n$result = convert($numbers);\necho \"Polar coordinates: \" . $result[0] . \" \" . $result[1];",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1),\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1),\n    array('x' => 0, 'y' => 1),\n    array('x' => 0, 'y' => -1),\n    array('x' => 1, 'y' => 0),\n    array('x' => -1, 'y' => 0),\n    array('x' => 0, 'y' => 0),\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\necho \"Enter a complex number (real, imaginary): \";\n$numbers = trim(fgets(STDIN));\n$polar = convert($numbers);\necho \"Polar coordinates: \";\nprint_r($polar);",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, 1),\n    array(-1, -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n    array('x' => 4, 'y' => 4),\n    array('x' => 5, 'y' => 5),\n    array('x' => 6, 'y' => 6),\n    array('x' => 7, 'y' => 7),\n    array('x' => 8, 'y' => 8),\n    array('x' => 9, 'y' => 9),\n    array('x' => 10, 'y' => 10)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 2),\n    array(2, 3),\n    array(3, 4),\n    array(4, 5)\n);\n\nprint_r(convert($numbers));\n",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imag'], 2)),\n            'phi' => atan2($number['imag'], $number['real'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [\n        'real' => 1,\n        'imag' => 1\n    ],\n    [\n        'real' => 2,\n        'imag' => 2\n    ],\n    [\n        'real' => 3,\n        'imag' => 3\n    ]\n];\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 1],\n    [1, -1],\n    [-1, -1],\n    [-1, 1]\n];\n\nprint_r(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = \"1,2\";\n$polar = convert($numbers);\necho \"Polar coordinates: \" . $polar[0] . \" \" . $polar[1];",
    "    $polar = array();\n    foreach ($numbers as $number) {\n        $polar[] = array(\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $polar;\n}\n\n$numbers = array(array(1, 1), array(1, -1), array(-1, 1), array(-1, -1));\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n    array('x' => 4, 'y' => 4),\n    array('x' => 5, 'y' => 5),\n    array('x' => 6, 'y' => 6),\n    array('x' => 7, 'y' => 7),\n    array('x' => 8, 'y' => 8),\n    array('x' => 9, 'y' => 9),\n    array('x' => 10, 'y' => 10),\n);\n\n$result = convert($numbers);\n\nprint_r($result);",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan2($imaginary, $real);\n    return $polar . '<br>' . $angle;\n}\n\necho convert('1+2j');\necho '<br>';\necho convert('1-2j');\necho '<br>';\necho convert('-2+2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\necho '<br>';\necho convert('-2-2j');\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 2], [3, 4], [5, 6]];\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $theta = atan($imaginary / $real);\n    echo \"r = \" . $r . \" theta = \" . $theta;\n}\n\nconvert(\"3,4\");",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = \"1,2\";\n$polar = convert($numbers);\necho \"Polar coordinates of $numbers are: \";\necho \"r = \" . $polar[0] . \" and theta = \" . $polar[1];",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 1], [1, -1], [-1, -1], [-1, 1]];\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 2),\n    array('x' => 3, 'y' => 4),\n    array('x' => 5, 'y' => 6),\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['real'] * $number['real'] + $number['imaginary'] * $number['imaginary']),\n            'phi' => atan2($number['imaginary'], $number['real'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('real' => 1, 'imaginary' => 1),\n    array('real' => 1, 'imaginary' => -1),\n    array('real' => -1, 'imaginary' => 1),\n    array('real' => -1, 'imaginary' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 2],\n    [3, 4],\n    [5, 6]\n];\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number[0]*$number[0] + $number[1]*$number[1]),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, 1),\n    array(-1, -1)\n);\n\nprint_r(convert($numbers));",
    "    $polar = array();\n    foreach ($numbers as $number) {\n        $polar[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $polar;\n}\n\n$numbers = array(\n    array(1, 2),\n    array(3, 4),\n    array(5, 6)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imaginary'], 2)),\n            'phi' => atan2($number['imaginary'], $number['real'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('real' => 3, 'imaginary' => 4),\n    array('real' => 5, 'imaginary' => 12),\n    array('real' => 8, 'imaginary' => 15)\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = \"\";\n    $polar .= \"(\" . sqrt(pow($real, 2) + pow($imaginary, 2)) . \",\" . atan2($imaginary, $real) . \")\";\n    return $polar;\n}\n\necho convert(\"1,1\");",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, -1),\n    array(-1, 1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n    array('x' => 4, 'y' => 4),\n    array('x' => 5, 'y' => 5),\n    array('x' => 6, 'y' => 6),\n    array('x' => 7, 'y' => 7),\n    array('x' => 8, 'y' => 8),\n    array('x' => 9, 'y' => 9),\n    array('x' => 10, 'y' => 10)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n    array('x' => 4, 'y' => 4),\n    array('x' => 5, 'y' => 5),\n);\n\nprint_r(convert($numbers));\n",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imag'], 2)),\n            'phi' => atan2($number['imag'], $number['real'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    ['real' => 1, 'imag' => 1],\n    ['real' => 2, 'imag' => 2],\n    ['real' => 3, 'imag' => 3]\n];\n\nprint_r(convert($numbers));",
    "    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt($real * $real + $imaginary * $imaginary);\n    $phi = atan2($imaginary, $real);\n    return array($r, $phi);\n}\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = polar($number);\n    }\n    return $result;\n}\n",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 1],\n    [1, -1],\n    [-1, -1],\n    [-1, 1]\n];\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imaginary'], 2)),\n            'phi' => atan2($number['imaginary'], $number['real'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('real' => 1, 'imaginary' => 1),\n    array('real' => 1, 'imaginary' => -1),\n    array('real' => -1, 'imaginary' => 1),\n    array('real' => -1, 'imaginary' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 2),\n    array(3, 4),\n    array(5, 6)\n);\n\n$result = convert($numbers);\n\nprint_r($result);",
    "    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $radius = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan($imaginary / $real);\n    $angle = $angle * 180 / pi();\n    return array($radius, $angle);\n}\n\n$numbers = array(1, 1);\nprint_r(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan($imaginary / $real);\n    return $polar;\n}\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array('r' => abs($number), 'phi' => rad2deg(atan2(imag($number), real($number))));\n    }\n    return $result;\n}\n\n$numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$result = convert($numbers);\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, -1),\n    array(-1, 1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n    array('x' => 4, 'y' => 4),\n    array('x' => 5, 'y' => 5),\n    array('x' => 6, 'y' => 6),\n    array('x' => 7, 'y' => 7),\n    array('x' => 8, 'y' => 8),\n    array('x' => 9, 'y' => 9),\n    array('x' => 10, 'y' => 10)\n);\n\nvar_dump(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = '1,2';\n$polar = convert($numbers);\necho \"Polar coordinates of $numbers are: \";\necho \"r = $polar[0], theta = $polar[1]\";",
    "    $polar = array();\n    foreach ($numbers as $number) {\n        $polar[] = array(\n            \"r\" => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            \"phi\" => atan2($number[1], $number[0])\n        );\n    }\n    return $polar;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, 1),\n    array(-1, -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, 1),\n    array(-1, -1)\n);\n\nprint_r(convert($numbers));",
    "    $polar = array();\n    foreach ($numbers as $number) {\n        $polar[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x']),\n        );\n    }\n    return $polar;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n);\n\nprint_r(convert($numbers));\n",
    "    $numbers = explode(\" \", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan2($imaginary, $real);\n    $angle = $angle * (180 / pi());\n    return array($polar, $angle);\n}\n\n$numbers = \"1.0 2.0\";\n$result = convert($numbers);\necho \"Polar Coordinates: \" . $result[0] . \" \" . $result[1];",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, 1),\n    array(-1, -1)\n);\n\nprint_r(convert($numbers));",
    "    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = array(1, 2);\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 1],\n    [1, -1],\n    [-1, 1],\n    [-1, -1]\n];\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan($number[1] / $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 1], [1, -1], [-1, 1], [-1, -1]];\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 1],\n    [1, -1],\n    [-1, -1],\n    [-1, 1]\n];\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 2], [3, 4], [5, 6], [7, 8]];\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => abs($number),\n            'phi' => atan2($number, 1)\n        ];\n    }\n    return $result;\n}\n\n$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar_dump(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan2($imaginary, $real);\n    return $polar . '<br>' . $angle;\n}\n\necho convert('1+2j');\necho '<br>';\necho convert('1-2j');\necho '<br>';\necho convert('1+1j');\necho '<br>';\necho convert('1-1j');\necho '<br>';\necho convert('1+0j');\necho '<br>';\necho convert('1-0j');\necho '<br>';\necho convert('0+1j');\necho '<br>';\necho convert('0-1j');\necho '<br>';\necho convert('0+0j');\necho '<br>';\necho convert('0-0j');\necho '<br>';\necho convert('-1+2j');\necho '<br>';\necho convert('-1-2j');\necho '<br>';\necho convert('-1+1j');\necho '<br>';\necho convert('-1-1j');\necho '<br>';\necho convert('-1+0j');\necho '<br>';\necho convert('-1-0j');\necho '<br>';\necho convert('0+2j');\necho '<br>';\necho convert('0-2j');\necho '<br>';\necho convert('0+1j');\necho '<br>';\necho convert('0-1j');\necho '<br>';\necho convert('0+0j');\necho '<br>';\necho convert('0-0j');\necho '<br>';\necho convert('2+1j');\necho '<br>';\necho convert('2-1j');\necho '<br>';\necho convert('2+0j');\necho '<br>';\necho convert('2-0j');\necho",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan($imaginary / $real);\n    return \"polar = $polar, angle = $angle\";\n}\n\necho convert('1,2');",
    "    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = array(1, 2);\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, 1),\n    array(-1, -1),\n    array(0, 1),\n    array(1, 0),\n    array(0, -1),\n    array(-1, 0)\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan($imaginary / $real);\n    echo \"Polar coordinates: $polar, $angle\";\n}\n\nconvert('1,1');",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, -1),\n    array(-1, 1)\n);\n\nprint_r(convert($numbers));",
    "    $polar = array();\n    foreach ($numbers as $number) {\n        $polar[] = array(abs($number), atan2($number, 1));\n    }\n    return $polar;\n}\n\n$numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$polar = convert($numbers);\nprint_r($polar);",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phi = atan2($imaginary, $real);\n    return \"r = $r, phi = $phi\";\n}\n\necho convert('1,1');",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [\n        'x' => 1,\n        'y' => 1\n    ],\n    [\n        'x' => 2,\n        'y' => 2\n    ],\n    [\n        'x' => 3,\n        'y' => 3\n    ]\n];\n\nvar_dump(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = polar($number);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, -1),\n    array(-1, 1)\n);\n\nprint_r(convert($numbers));\n",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan($imaginary / $real);\n    return \"Polar Coordinates: $polar, $angle\";\n}\n\necho convert(\"1,2\");",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x']),\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1),\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt($real * $real + $imaginary * $imaginary);\n    $phi = atan2($imaginary, $real);\n    return array($r, $phi);\n}\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan($imaginary / $real);\n    return \"(\" . $polar . \",\" . $angle . \")\";\n}\n\necho convert(\"1,1\");",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 2),\n    array(3, 4),\n    array(5, 6)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 2),\n    array('x' => 3, 'y' => 4),\n    array('x' => 5, 'y' => 6),\n);\n\n$result = convert($numbers);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 2], [3, 4], [5, 6]];\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(\" \", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2)) . \" \" . atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = \"1 2\";\necho convert($numbers);",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 2], [3, 4], [5, 6]];\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    ['x' => 1, 'y' => 1],\n    ['x' => 1, 'y' => -1],\n    ['x' => -1, 'y' => 1],\n    ['x' => -1, 'y' => -1]\n];\n\nvar_dump(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan($imaginary / $real);\n    return \"(\" . $polar . \",\" . $angle . \")\";\n}\n\necho convert(\"1,2\");\necho \"\\n\";\necho convert(\"3,4\");\necho \"\\n\";\necho convert(\"-2, -3\");\necho \"\\n\";\necho convert(\"0, 1\");\necho \"\\n\";\necho convert(\"-1, -1\");\necho \"\\n\";\necho convert(\"1, -1\");\necho \"\\n\";\necho convert(\"1, 0\");\necho \"\\n\";\necho convert(\"0, 0\");\necho \"\\n\";\necho convert(\"-1, 0\");\necho \"\\n\";\necho convert(\"0, -1\");\necho \"\\n\";",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan2($imaginary, $real);\n    return $polar . '<br>' . $angle;\n}\n\necho convert('1+2j');\necho convert('1-2j');\necho convert('-2+2j');\necho convert('-2-2j');\necho convert('2+2j');\necho convert('2-2j');\necho convert('-2-2j');\necho convert('-2+2j');\necho convert('2-2j');\necho convert('2+2j');",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, 1),\n    array(-1, -1)\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $numbers[0] = (int)$numbers[0];\n    $numbers[1] = (int)$numbers[1];\n    $r = sqrt($numbers[0] * $numbers[0] + $numbers[1] * $numbers[1]);\n    $phi = atan2($numbers[1], $numbers[0]);\n    echo \"r = $r, phi = $phi\";\n}\n\nconvert('1,2');",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imag'], 2)),\n            'phi' => atan2($number['imag'], $number['real'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('real' => 1, 'imag' => 2),\n    array('real' => 3, 'imag' => 4),\n    array('real' => 5, 'imag' => 6),\n    array('real' => 7, 'imag' => 8),\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = polar($number);\n    }\n    return $result;\n}\n",
    "    $numbers = explode(',', $numbers);\n    $numbers = array_map('trim', $numbers);\n    $numbers = array_map('intval', $numbers);\n    $result = [];\n    $result[] = sqrt(pow($numbers[0], 2) + pow($numbers[1], 2));\n    $result[] = atan($numbers[1]/$numbers[0]);\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n    array('x' => 4, 'y' => 4),\n    array('x' => 5, 'y' => 5),\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan($imaginary / $real);\n    return $polar;\n}\n\n$numbers = \"3+4j\";\necho \"The polar coordinates of $numbers are: \";\nprint_r(convert($numbers));",
    "    $polar = array();\n    foreach ($numbers as $number) {\n        $polar[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $polar;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n    array('x' => 4, 'y' => 4),\n    array('x' => 5, 'y' => 5),\n    array('x' => 6, 'y' => 6),\n    array('x' => 7, 'y' => 7),\n    array('x' => 8, 'y' => 8),\n    array('x' => 9, 'y' => 9),\n    array('x' => 10, 'y' => 10)\n);\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\nprint_r(convert([[1, 1], [1, -1], [0, 1], [1, 0]]));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    ['x' => 1, 'y' => 1],\n    ['x' => -1, 'y' => 1],\n    ['x' => 1, 'y' => -1],\n    ['x' => -1, 'y' => -1]\n];\n\nvar_dump(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 2], [3, 4], [5, 6]];\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nvar_dump(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, 1),\n    array(-1, -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, -1),\n    array(-1, 1)\n);\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 2], [3, 4], [5, 6]];\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 2], [3, 4], [5, 6]];\nvar_dump(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, -1),\n    array(-1, 1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n    array('x' => 4, 'y' => 4),\n    array('x' => 5, 'y' => 5),\n);\n\n$result = convert($numbers);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $result = array();\n    $result[0] = sqrt(pow($numbers[0], 2) + pow($numbers[1], 2));\n    $result[1] = atan($numbers[1] / $numbers[0]);\n    return $result;\n}\n\n$numbers = array(1, 2);\n$result = convert($numbers);\necho $result[0] . \" \" . $result[1];",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 1],\n    [1, -1],\n    [0, 1],\n    [1, 0],\n    [3, 4]\n];\n\nprint_r(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phi = atan($imaginary / $real);\n    return \"r = $r, phi = $phi\";\n}\n\necho convert('1,1');",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, 0),\n    array(1, -1),\n    array(0, 1),\n    array(0, 0),\n    array(0, -1),\n    array(-1, 1),\n    array(-1, 0),\n    array(-1, -1)\n);\n\n$result = convert($numbers);\n\nforeach ($result as $number) {\n    echo \"r = \" . $number['r'] . \", phi = \" . $number['phi'] . \"\\n\";\n}",
    "    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phi = atan($imaginary/$real);\n    echo \"r = $r, phi = $phi\";\n}\n\nconvert([1, 1]);",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\n$result = convert($numbers);\nprint_r($result);\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['r'], 2) + pow($number['i'], 2)),\n            'phi' => atan2($number['i'], $number['r'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('r' => 1, 'i' => 0),\n    array('r' => 1, 'i' => 1),\n    array('r' => 1, 'i' => 2),\n    array('r' => 1, 'i' => 3),\n    array('r' => 1, 'i' => 4),\n    array('r' => 1, 'i' => 5),\n    array('r' => 1, 'i' => 6),\n    array('r' => 1, 'i' => 7),\n    array('r' => 1, 'i' => 8),\n    array('r' => 1, 'i' => 9),\n    array('r' => 1, 'i' => 10),\n    array('r' => 1, 'i' => 11),\n    array('r' => 1, 'i' => 12),\n    array('r' => 1, 'i' => 13),\n    array('r' => 1, 'i' => 14),\n    array('r' => 1, 'i' => 15),\n    array('r' => 1, 'i' => 16),\n    array('r' => 1, 'i' => 17),\n    array('r' => 1, 'i' => 18),\n    array('r' => 1, 'i' => 19),\n    array('r' => 1, 'i' => 20),\n    array('r' => 1, 'i' => 21),\n    array('r' => 1, 'i' => 22),\n    array('r' => 1, 'i' => 23),\n    array('r' => 1, 'i' => 24),\n    array('r' => 1, 'i' => 25),\n    array('r' => 1, 'i' => 26),\n    array('r' => 1",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['a'], 2) + pow($number['b'], 2)),\n            'phi' => atan2($number['b'], $number['a'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('a' => 1, 'b' => 2),\n    array('a' => 3, 'b' => 4),\n    array('a' => 5, 'b' => 6),\n    array('a' => 7, 'b' => 8),\n    array('a' => 9, 'b' => 10)\n);\n\nprint_r(convert($numbers));\n",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 2],\n    [3, 4],\n    [5, 6],\n    [7, 8]\n];\n\necho '<pre>';\nprint_r(convert($numbers));\necho '</pre>';",
    "    $polar = array();\n    foreach ($numbers as $number) {\n        $polar[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $polar;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1),\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 2),\n    array('x' => 3, 'y' => 4),\n    array('x' => 5, 'y' => 6)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n    array('x' => 4, 'y' => 4),\n    array('x' => 5, 'y' => 5),\n    array('x' => 6, 'y' => 6),\n    array('x' => 7, 'y' => 7),\n    array('x' => 8, 'y' => 8),\n    array('x' => 9, 'y' => 9),\n    array('x' => 10, 'y' => 10),\n);\n\n$result = convert($numbers);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = polar($number);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));\n",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phi = atan($imaginary / $real);\n    return \"r = $r, phi = $phi\";\n}\necho convert(\"1,2\");",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = \"3+5j\";\n$polar = convert($numbers);\necho \"The polar coordinates of $numbers are: \";\necho \"r = \" . $polar[0] . \" and theta = \" . $polar[1];",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, -1),\n    array(-1, 1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['a'], 2) + pow($number['b'], 2)),\n            'phi' => atan2($number['b'], $number['a'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('a' => 1, 'b' => 2),\n    array('a' => 3, 'b' => 4),\n    array('a' => 5, 'b' => 6),\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = polar($number);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nvar_dump(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, -1),\n    array(-1, 1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1),\n    array('x' => 0, 'y' => 1),\n    array('x' => 0, 'y' => -1),\n    array('x' => 1, 'y' => 0),\n    array('x' => -1, 'y' => 0),\n    array('x' => 0, 'y' => 0),\n    array('x' => 1, 'y' => 2),\n    array('x' => 1, 'y' => -2),\n    array('x' => -1, 'y' => 2),\n    array('x' => -1, 'y' => -2),\n    array('x' => 0, 'y' => 2),\n    array('x' => 0, 'y' => -2),\n    array('x' => 2, 'y' => 1),\n    array('x' => 2, 'y' => -1),\n    array('x' => -2, 'y' => 1),\n    array('x' => -2, 'y' => -1),\n    array('x' => 2, 'y' => 0),\n    array('x' => -2, 'y' => 0),\n    array('x' => 0, 'y' => 0),\n    array('x' => 2, 'y' => 2),\n    array('x' => 2, 'y' => -2),\n    array('x' => -2, 'y' => 2),\n    array('x' => -2, 'y' => -2),\n    array",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3),\n    array('x' => 4, 'y' => 4),\n);\n\n$result = convert($numbers);\n\nprint_r($result);",
    "    $numbers = explode(',', $numbers);\n    $numbers = array_map('trim', $numbers);\n    $numbers = array_map('intval', $numbers);\n    $numbers = array_map('abs', $numbers);\n    $numbers = array_map('round', $numbers);\n    $numbers = array_map('sqrt', $numbers);\n    $numbers = array_map('round', $numbers);\n    $numbers = array_map('strval', $numbers);\n    $numbers = implode(',', $numbers);\n    return $numbers;\n}\n\n$numbers = '3+4j, 5+12j';\necho convert($numbers);",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phase = atan2($imaginary, $real);\n    return \"(\" . $polar . \",\" . $phase . \")\";\n}\n\necho convert(\"1,2\");",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 1], [1, -1], [-1, 1], [-1, -1]];\nprint_r(convert($numbers));",
    "    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phi = atan2($imaginary, $real);\n    return array($r, $phi);\n}\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 2),\n    array('x' => 3, 'y' => 4),\n    array('x' => 5, 'y' => 6),\n);\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['a'], 2) + pow($number['b'], 2)),\n            'phi' => atan2($number['b'], $number['a'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    ['a' => 1, 'b' => 2],\n    ['a' => 3, 'b' => 4],\n    ['a' => 5, 'b' => 6]\n];\n\nvar_dump(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, 1),\n    array(-1, -1)\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, -1),\n    array(-1, 1)\n);\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['a'], 2) + pow($number['b'], 2)),\n            'phi' => atan2($number['b'], $number['a'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [\n        'a' => 1,\n        'b' => 1\n    ],\n    [\n        'a' => 2,\n        'b' => 2\n    ],\n    [\n        'a' => 3,\n        'b' => 3\n    ]\n];\n\necho '<pre>';\nprint_r(convert($numbers));\necho '</pre>';",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt($number['x'] * $number['x'] + $number['y'] * $number['y']),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 1],\n    [1, -1],\n    [-1, 1],\n    [-1, -1]\n];\n\nprint_r(convert($numbers));",
    "  $numbers = explode(\",\", $numbers);\n  $a = $numbers[0];\n  $b = $numbers[1];\n  $r = sqrt(pow($a, 2) + pow($b, 2));\n  $theta = atan2($b, $a);\n  return array($r, $theta);\n}\n\necho \"Enter the complex number: \";\n$numbers = trim(fgets(STDIN));\n$result = convert($numbers);\necho \"The polar coordinates are: \" . $result[0] . \" \" . $result[1] . \"\\n\";",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 2),\n    array('x' => 3, 'y' => 4),\n    array('x' => 5, 'y' => 6)\n);\n\nprint_r(convert($numbers));\n",
    "    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phi = atan2($imaginary, $real);\n    $result = [$r, $phi];\n    return $result;\n}\n\n$numbers = [1, 2];\necho json_encode(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    ['x' => 1, 'y' => 1],\n    ['x' => 2, 'y' => 2],\n    ['x' => 3, 'y' => 3],\n    ['x' => 4, 'y' => 4],\n    ['x' => 5, 'y' => 5],\n];\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\n$result = convert($numbers);\n\nprint_r($result);\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['a'], 2) + pow($number['b'], 2)),\n            'phi' => atan2($number['b'], $number['a'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('a' => 1, 'b' => 1),\n    array('a' => 2, 'b' => 2),\n    array('a' => 3, 'b' => 3),\n    array('a' => 4, 'b' => 4),\n    array('a' => 5, 'b' => 5),\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan($number['y'] / $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $numbers = array_map('trim', $numbers);\n    $numbers = array_map('intval', $numbers);\n    $numbers = array_map('abs', $numbers);\n    $numbers = array_map('sqrt', $numbers);\n    $numbers = array_map('round', $numbers, array_fill(0, count($numbers), 2));\n    return implode(', ', $numbers);\n}\n\n$numbers = readline();\necho convert($numbers);",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 1],\n    [1, -1],\n    [0, 1],\n    [1, 0],\n    [0, 0]\n];\n\nvar_dump(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $result = array();\n    $result[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $result[1] = atan2($imaginary, $real);\n    return $result;\n}\n\n$numbers = \"1+2j\";\n$result = convert($numbers);\necho \"The polar coordinates of the complex number $numbers is: \";\necho \"r = \" . $result[0] . \", theta = \" . $result[1];",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1),\n    array('x' => 0, 'y' => 1),\n    array('x' => 0, 'y' => -1),\n    array('x' => 1, 'y' => 0),\n    array('x' => -1, 'y' => 0),\n    array('x' => 0, 'y' => 0),\n);\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 2], [3, 4], [5, 6]];\nprint_r(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = array();\n    $polar[0] = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $polar[1] = atan2($imaginary, $real);\n    return $polar;\n}\n\n$numbers = \"1+2j\";\n$polar = convert($numbers);\necho \"Polar coordinates of $numbers are: \";\necho \"r = \" . $polar[0] . \" and theta = \" . $polar[1];",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 1],\n    [1, -1],\n    [-1, 1],\n    [-1, -1]\n];\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imag'], 2)),\n            'phi' => atan2($number['imag'], $number['real'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [\n        'real' => 1,\n        'imag' => 1\n    ],\n    [\n        'real' => 1,\n        'imag' => -1\n    ],\n    [\n        'real' => -1,\n        'imag' => 1\n    ],\n    [\n        'real' => -1,\n        'imag' => -1\n    ]\n];\n\nprint_r(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt($number[0] * $number[0] + $number[1] * $number[1]),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 1],\n    [1, -1],\n    [0, 1],\n    [1, 0],\n    [0, 0],\n    [0, -1],\n    [-1, 0],\n    [-1, 1],\n    [-1, -1]\n];\n\nvar_dump(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 1],\n    [1, -1],\n    [-1, -1],\n    [-1, 1]\n];\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(abs($number), atan2($number, 1));\n    }\n    return $result;\n}\n\n$numbers = array(1, 2, 3, 4, 5);\n$result = convert($numbers);\nprint_r($result);\n",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    [1, 1],\n    [1, -1],\n    [-1, -1],\n    [-1, 1]\n];\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nvar_dump(convert($numbers));",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    ['x' => 1, 'y' => 1],\n    ['x' => 1, 'y' => -1],\n    ['x' => -1, 'y' => 1],\n    ['x' => -1, 'y' => -1],\n    ['x' => 0, 'y' => 1],\n    ['x' => 0, 'y' => -1],\n    ['x' => 1, 'y' => 0],\n    ['x' => -1, 'y' => 0],\n    ['x' => 0, 'y' => 0],\n];\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1),\n    array('x' => 1, 'y' => 0),\n    array('x' => 0, 'y' => 1),\n    array('x' => -1, 'y' => 0),\n    array('x' => 0, 'y' => -1),\n    array('x' => 0, 'y' => 0)\n);\n\n$result = convert($numbers);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';\n",
    "\t$result = array();\n\tforeach ($numbers as $number) {\n\t\t$result[] = array(\n\t\t\t'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n\t\t\t'phi' => atan2($number[1], $number[0])\n\t\t);\n\t}\n\treturn $result;\n}\n\n$numbers = array(\n\tarray(1, 1),\n\tarray(1, -1),\n\tarray(-1, 1),\n\tarray(-1, -1)\n);\n\nprint_r(convert($numbers));",
    "    $polar = array();\n    foreach ($numbers as $number) {\n        $polar[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $polar;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, 1),\n    array(-1, -1)\n);\n\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $number = explode('+', $number);\n        $number[1] = str_replace('i', '', $number[1]);\n        $result[] = sqrt(pow($number[0], 2) + pow($number[1], 2)) . '<+' . atan($number[1] / $number[0]) . 'i>';\n    }\n    return $result;\n}\n\n$numbers = array('1+2i', '3+4i', '5+6i');\nprint_r(convert($numbers));",
    "    $numbers = explode(\",\", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan2($imaginary, $real);\n    return \"r = \" . $polar . \"; \" . \"phi = \" . $angle;\n}\n\necho convert(\"1,1\");",
    "    $result = array();\n    $result[0] = sqrt(pow($numbers[0], 2) + pow($numbers[1], 2));\n    $result[1] = atan2($numbers[1], $numbers[0]);\n    return $result;\n}\n\n$numbers = array(1, 2);\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 2),\n    array('x' => 3, 'y' => 4),\n    array('x' => 5, 'y' => 6)\n);\n\nprint_r(convert($numbers));\n",
    "    $numbers = explode(\" \", $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phi = atan($imaginary/$real);\n    return \"r = $r, phi = $phi\";\n}\n\necho convert(\"1 1\");",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [[1, 2], [3, 4], [5, 6]];\nprint_r(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 1, 'y' => -1),\n    array('x' => -1, 'y' => 1),\n    array('x' => -1, 'y' => -1)\n);\n\nprint_r(convert($numbers));\n",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(2, 2),\n    array(3, 3),\n    array(4, 4),\n    array(5, 5),\n    array(6, 6),\n    array(7, 7),\n    array(8, 8),\n    array(9, 9),\n    array(10, 10)\n);\n\nprint_r(convert($numbers));",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan2($imaginary, $real);\n    $angle = rad2deg($angle);\n    $result = array($polar, $angle);\n    return $result;\n}\n\n$numbers = '1+2j';\n$result = convert($numbers);\nprint_r($result);",
    "    $polar = array();\n    foreach ($numbers as $number) {\n        $polar[] = array(\n            'r' => sqrt(pow($number[0], 2) + pow($number[1], 2)),\n            'phi' => atan2($number[1], $number[0])\n        );\n    }\n    return $polar;\n}\n\n$numbers = array(\n    array(1, 1),\n    array(1, -1),\n    array(-1, 1),\n    array(-1, -1),\n    array(0, 1),\n    array(1, 0),\n    array(0, -1),\n    array(-1, 0)\n);\n\nprint_r(convert($numbers));",
    "    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $r = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $phi = atan2($imaginary, $real);\n    return [$r, $phi];\n}\n\n$numbers = [1, 2];\n$result = convert($numbers);\necho \"The polar coordinates of $numbers[0] + $numbers[1]i are: $result[0] and $result[1]\";",
    "    $numbers = explode(',', $numbers);\n    $real = $numbers[0];\n    $imaginary = $numbers[1];\n    $polar = sqrt(pow($real, 2) + pow($imaginary, 2));\n    $angle = atan($imaginary / $real);\n    echo \"Polar Coordinates: $polar, $angle\";\n}\n\nconvert('1,2');",
    "    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = [\n            'r' => sqrt(pow($number['real'], 2) + pow($number['imag'], 2)),\n            'phi' => atan2($number['imag'], $number['real'])\n        ];\n    }\n    return $result;\n}\n\n$numbers = [\n    ['real' => 1, 'imag' => 1],\n    ['real' => 1, 'imag' => 0],\n    ['real' => 1, 'imag' => -1],\n    ['real' => 0, 'imag' => 1],\n    ['real' => 0, 'imag' => 0],\n    ['real' => 0, 'imag' => -1],\n    ['real' => -1, 'imag' => 1],\n    ['real' => -1, 'imag' => 0],\n    ['real' => -1, 'imag' => -1],\n];\n\necho json_encode(convert($numbers));",
    "    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = array(\n            'r' => sqrt(pow($number['x'], 2) + pow($number['y'], 2)),\n            'phi' => atan2($number['y'], $number['x'])\n        );\n    }\n    return $result;\n}\n\n$numbers = array(\n    array('x' => 1, 'y' => 1),\n    array('x' => 2, 'y' => 2),\n    array('x' => 3, 'y' => 3)\n);\n\nprint_r(convert($numbers));"
  ]
}