{
  "name": "mbpp_413_extract_nth_element",
  "language": "php",
  "prompt": "<?php\n// Write a function to extract the nth element from a given list of tuples.\nfunction extract_nth_element($list1, $n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py",
  "prompt_terminology": "verbatim",
  "tests": "function candidate(...$args) {\n    return extract_nth_element(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"Greyson Fulton\", 98, 99), array(\"Brady Kent\", 97, 96), array(\"Wyatt Knott\", 91, 94), array(\"Beau Turnbull\", 94, 98)), 0) !== array(\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Greyson Fulton\", 98, 99), array(\"Brady Kent\", 97, 96), array(\"Wyatt Knott\", 91, 94), array(\"Beau Turnbull\", 94, 98)), 2) !== array(99, 96, 94, 98)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Greyson Fulton\", 98, 99), array(\"Brady Kent\", 97, 96), array(\"Wyatt Knott\", 91, 94), array(\"Beau Turnbull\", 94, 98)), 1) !== array(98, 97, 91, 94)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n\n$list1 = array(array(1, 2), array(3, 4), array(5, 6));\n$n = 1;\nprint_r(extract_nth_element($list1, $n));",
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n$list1 = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n$n = 1;\nprint_r(extract_nth_element($list1, $n));",
    "    $result = array();\n    foreach ($list1 as $tuple) {\n        $result[] = $tuple[$n];\n    }\n    return $result;\n}\n\n$list1 = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(extract_nth_element($list1, 1));",
    "    $result = array();\n    foreach ($list1 as $tuple) {\n        $result[] = $tuple[$n];\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n\n$list1 = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$n = 2;\n$result = extract_nth_element($list1, $n);\nprint_r($result);",
    "    $result = array();\n    foreach ($list1 as $key => $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n$list1 = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12),\n);\nprint_r(extract_nth_element($list1, 2));",
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n$list1 = array(array(1, 2), array(3, 4), array(5, 6));\n$n = 1;\nprint_r(extract_nth_element($list1, $n));",
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n\n$list1 = array(array(1, 2), array(3, 4), array(5, 6));\n$n = 1;\n$result = extract_nth_element($list1, $n);\nprint_r($result);",
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n$list1 = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12),\n);\n$n = 2;\n$result = extract_nth_element($list1, $n);\nprint_r($result);",
    "    foreach ($list1 as $key => $value) {\n        $list2[] = $value[$n];\n    }\n    return $list2;\n}\n$list1 = array(array(1, 2), array(3, 4), array(5, 6), array(7, 8));\n$n = 1;\n$list2 = extract_nth_element($list1, $n);\nprint_r($list2);",
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n$list1 = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$n = 1;\n$result = extract_nth_element($list1, $n);\nprint_r($result);",
    "    $result = array();\n    foreach ($list1 as $key => $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n\n$list1 = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\n$n = 1;\nprint_r(extract_nth_element($list1, $n));\n",
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n$list1 = array(array(1, 2), array(3, 4), array(5, 6));\n$n = 1;\nprint_r(extract_nth_element($list1, $n));",
    "  $result = array();\n  foreach ($list1 as $value) {\n    $result[] = $value[$n];\n  }\n  return $result;\n}\n\n$list1 = array(array(1, 2), array(3, 4), array(5, 6));\nprint_r(extract_nth_element($list1, 1));",
    "    $result = array();\n    foreach ($list1 as $key => $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n\n$list1 = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(extract_nth_element($list1, 1));",
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n$list1 = array(array(1, 2), array(3, 4), array(5, 6));\n$n = 1;\nprint_r(extract_nth_element($list1, $n));",
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n$list1 = array(array(1, 2), array(3, 4), array(5, 6));\n$n = 1;\n$result = extract_nth_element($list1, $n);\nprint_r($result);",
    "    $result = array();\n    foreach ($list1 as $key => $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n\n$list1 = array(array(1, 2), array(3, 4), array(5, 6), array(7, 8));\n$n = 1;\nprint_r(extract_nth_element($list1, $n));",
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n\n$list1 = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$n = 2;\nprint_r(extract_nth_element($list1, $n));",
    "    $result = array();\n    foreach ($list1 as $value) {\n        $result[] = $value[$n];\n    }\n    return $result;\n}\n$list1 = array(array(1, 2), array(3, 4), array(5, 6));\n$n = 1;\nprint_r(extract_nth_element($list1, $n));"
  ]
}