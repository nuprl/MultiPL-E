name: HumanEval_104_unique_digits
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of positive integers x. return a sorted list of\
  \ all \n    // elements that hasn't any even digit.\n    // Note: Returned list\
  \ should be sorted in increasing order.\n    // For example:\n    // >>> UniqueDigits((new\
  \ List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L})))\n    //\
  \ (new List<long>(new long[]{(long)1L, (long)15L, (long)33L}))\n    // >>> UniqueDigits((new\
  \ List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L})))\n   \
  \ // (new List<long>())\n    public static List<long> UniqueDigits(List<long> x)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueDigits((new\
  \ List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)15L, (long)33L}))));\n    Debug.Assert(UniqueDigits((new\
  \ List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L}))).Equals((new\
  \ List<long>())));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)12345L,\
  \ (long)2033L, (long)111L, (long)151L}))).Equals((new List<long>(new long[]{(long)111L,\
  \ (long)151L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)135L,\
  \ (long)103L, (long)31L}))).Equals((new List<long>(new long[]{(long)31L, (long)135L}))));\n\
  \    }\n\n}\n"
completions: ["        if (x.Count < 2)\n            return new List<long>();\n  \
    \      // Sort the list first.\n        var sorted = x.OrderBy(n => n);\n    \
    \    var evens = from n in sorted \n                    where n.ToString().All(ch\
    \ => ch != '0')\n                    group n by n into g\n                   \
    \ where g.Sum(n => Convert.ToInt64(n)) % 2 != 0 \n                    select g.Key;\n\
    \        // Remove elements that hasn't even digits.\n        return evens.ToList();",
  "        Debug.Assert(x.Count != 0);\n        var hashSet = new HashSet<long>();\n\
    \        x.Sort();\n        long lastDigit = 0;\n        foreach (var digit in\
    \ x) {\n            lastDigit = digit;\n            if (!hashSet.Contains(digit))\
    \ {\n                hashSet.Add(digit);\n            }\n        }\n        return\
    \ new List<long>(hashSet);", "        if (x.Count < 2) return new List<long>();\n\
    \        var r = new List<long>();\n        foreach(var i in x)\n        {\n \
    \           r.Add(i);\n            while (x.Contains(i) && x[x.IndexOf(i)] % 2\
    \ != 0)\n                x.RemoveAt(x.IndexOf(i));\n        }\n        return\
    \ r;", "        // Write your code here.\n        \n        List<long> result\
    \ = new List<long>();\n        \n        var s = x.Select(i => new { i = i, val\
    \ = i / 10 % 10 });\n        \n        var a = new HashSet<long>(x.Select(i =>\
    \ i.val * 10 + i.i));\n        \n        foreach (var s in s)\n        {\n   \
    \         long n = 0;\n            while (n % 2 == 0)\n            {\n       \
    \         n = n / 2;\n            }\n            long a = s.val * 10 + s.i;\n\
    \            if (a.Equals(n)) continue;\n            if (a.Equals(n + 10)) continue;\n\
    \            else if (a.Equals(n + 11)) continue;\n            else if (a.Equals(n\
    \ + 13)) continue;\n            else if (a.Equals(n + 15)) continue;\n       \
    \     else if (a.Equals(n + 17)) continue;\n            else if (a.Equals(n +\
    \ 19)) continue;\n            else if (a.Equals(n + 21)) continue;\n         \
    \   else if (a.Equals(n + 23)) continue;\n            else if (a.Equals(n + 25))\
    \ continue;\n            else if (a.Equals(n + 27)) continue;\n            else\
    \ if (a.Equals(n + 29)) continue;\n            else if (a.Equals(n + 31)) continue;\n\
    \            else if (a.Equals(n + 33)) continue;\n            else if (a.Equals(n\
    \ + 35)) continue;\n            else if (a.Equals(n + 37)) continue;\n       \
    \     else if (a.Equals(n + 39)) continue;\n            else if (a.Equals(n +\
    \ 41)) continue;\n            else if (a.Equals(n + 43)) continue;\n         \
    \   else if (a.Equals(n + 45)) continue;\n            else if (a.Equals(n + 47))\
    \ continue;\n            else if (a.Equals(n + 49)) continue;\n            else\
    \ if (a.Equals(n + 51)) continue;\n            else if (a.Equals(n + 53)) continue;\n\
    \            else if (a.Equals(n + 55)) continue;\n            else if (a.Equals(n\
    \ + 57)) continue;\n            else if (a.Equals(n + 59)) continue;\n       \
    \     else if (a.Equals(n + 61)) continue;\n            else if (a.Equals(n +\
    \ 63)) continue;\n            else if (a.Equals(n + 65)) continue;\n         \
    \   else if (a.Equals(n + 67)) continue;\n            else if (a.Equals(n + 69))\
    \ continue;\n            else if (a.Equals(n + 71)) continue;\n            else\
    \ if (a.Equals(n + 73)) continue;\n            else if (a.Equals(n + 75)) continue;\n\
    \            else if (a.Equals(n + 77)) continue;\n            else if (a.Equals(n\
    \ + 79)) continue;\n            else if (a.Equals(n + 81)) continue;\n       \
    \     else if (a.Equals(n + 83)) continue;\n            else if (a.Equals(n +\
    \ 85)) continue;\n            else if (a.Equals(n + 87)) continue;\n         \
    \   else if (a.Equals(n + 89)) continue;\n            else if (a.Equals(n + 91))\
    \ continue;\n            else if (a.Equals(n + 93)) continue;\n            else\
    \ if (a.Equals(n + 95)) continue;\n            else if (a.Equals(n + 97", "  \
    \      var digits = new HashSet<long>();\n        foreach (var i in x) {\n   \
    \         digits.Add(i);\n        }\n        return new List<long>{\n        \
    \    x \n                .Where(x => !digits.Contains(x))\n                .OrderBy(x\
    \ => x.ToString())\n                .Select(x => x.ToString()).ToList()\n    \
    \    };", "        var n = new List<long>();\n        foreach (var i in x)\n \
    \       {\n            n.Add(i);\n        }\n        n.Sort();\n        int pos\
    \ = 0;\n        bool flag = true;\n        long lastEven;\n        List<long>\
    \ result = new List<long>();\n        foreach(long x in n)\n        {\n      \
    \      if(pos == 0)\n            {\n                flag = true;\n           \
    \     pos = 1;\n                lastEven = x;\n            }\n            if(x\
    \ % 2 == 0)\n            {\n                flag = false;\n            }\n   \
    \         if(flag)\n            {\n                result.Add(x);\n          \
    \  }\n        }\n        \n        return result;", "        Dictionary<long,\
    \ List<long>> result = new Dictionary<long, List<long>>();\n        if (x.Count\
    \ == 0)\n            return new List<long>();\n        foreach (var a in x) {\n\
    \            bool existed = false;\n            List<long> list;\n           \
    \ if (!result.TryGetValue(a, out list)) {\n                list = new List<long>();\n\
    \                result.Add(a, list);\n            }\n            bool found =\
    \ false;\n            foreach (long b in list) {\n                if (b % 2 ==\
    \ 0) {\n                    found = true;\n                    break;\n      \
    \          }\n            }\n            if (!found) {\n                result.Add(a,\
    \ new List<long>() { a, });\n            }\n        }\n        List<long> list\
    \ = new List<long>();\n        foreach (var pair in result) {\n            if\
    \ (pair.Value.Count > 0) {\n                list.AddRange(pair.Value);\n     \
    \       }\n        }\n        list.Sort();\n        return list;", "        var\
    \ result = new List<long>();\n        var digits = new List<long>();\n       \
    \ foreach (var item in x) {\n            var temp = item % 10;\n            if\
    \ (digits.Contains(temp)) {\n                continue;\n            }\n      \
    \      digits.add(temp);\n            result.Add(item);\n        }\n        return\
    \ result.OrderBy(o => o).ToList();", "        List<long> ret = new List<long>();\n\
    \        long temp = 0;\n        for (int i = 0; i < x.Count; i++) {\n       \
    \     temp = x[i];\n            while (temp % 2 == 0) {\n                ret[ret.Count]\
    \ = temp;\n                temp *= 10;\n                ret.Count++;\n       \
    \     }\n        }\n        return ret;", "        var unique = new List<long>();\n\
    \        var odds = new List<long>();\n        var evens = new List<long>();\n\
    \        var nums = x.ToArray();\n        Array.Sort(nums);\n        for (int\
    \ i = 0; i < nums.Length; i++) {\n            long num = nums[i];\n          \
    \  if (num % 2 == 0) {\n                evens.Add(num);\n            }\n     \
    \       else if (num % 2 == 1) {\n                odds.Add(num);\n           \
    \ }\n        }\n\n        //return unique.Union(odds).Union(evens).ToList();\n\
    \        foreach (var item in odds) {\n            if (!unique.Contains(item))\
    \ {\n                unique.Add(item);\n            }\n        }\n        foreach\
    \ (var item in evens) {\n            if (!unique.Contains(item)) {\n         \
    \       unique.Add(item);\n            }\n        }\n        return unique;",
  "        if (x.Count == 0)\n            return new List<long>();\n\n        List<long>\
    \ result = new List<long>();\n        long min = x.Min();\n        long max =\
    \ x.Max();\n\n        bool add = false;\n\n        for (long i = 0; i < x.Count;\
    \ ++i) {\n            long d = x[i]%10;\n\n            if (!add) {\n         \
    \       add = true;\n                min = (d < min) ? d : min;\n            }\
    \ else {\n                add = false;\n                max = (d < max) ? d :\
    \ max;\n            }\n\n            if (min % 2 == 0 && max % 2 == 0) {\n   \
    \             result.Add(i);\n            }\n        }\n\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in x) {\n\
    \            if (i %2 == 0) {\n                result.Add(i);\n            }\n\
    \        }\n        foreach (long i in result.OrderBy(a => a)) {\n           \
    \ if (!IsUniqueDigit(i)) {\n                result.Remove(i);\n            }\n\
    \        }\n        return result;", "        // Create a list to store return\
    \ value.\n        List<long> ret = new List<long>();\n        // Loop through\
    \ x using Enumerable.Range and Enumerable.Except\n        // to remove elements\
    \ that doesn't have even digit.\n        foreach (long el in x.Except(x.Where(x\
    \ => x%2 == 0)).OrderBy(x => x)) {\n            // If the current element is a\
    \ number between 0 and 9,\n            // add it to the return value.\n      \
    \      if (el >= 0 && el <= 9)\n                ret.Add(el);\n        }\n    \
    \    return ret;", "        // write your code here\n        if (x.Count() ==\
    \ 0)\n            return new List<long>();\n\n        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long x in x)\n      \
    \      sum += x;\n\n        if (sum == 0)\n            return result;\n\n    \
    \    long current = sum;\n        while (current != 0) {\n            bool notExist\
    \ = false;\n            foreach (long value in result) {\n                if (value\
    \ == current)\n                    notExist = true;\n            }\n\n       \
    \     if (!notExist)\n                result.Add(current);\n            current--;\n\
    \        }\n        return result;", "        var res = new List<long>();\n  \
    \      List<int> digits = new List<int>();\n        for (int i = 0; i < x.Count;\
    \ i++) {\n            var digit = (int)Math.Floor(Math.Log10(Math.Abs(x[i])));\n\
    \            if (digits.Contains(digit)) {\n                continue;\n      \
    \      }\n            digits.Add(digit);\n            var val = x[i];\n      \
    \      var count = 0;\n            while (val != 0) {\n                count++;\n\
    \                val /= 10;\n            }\n            if (count == 0 || count\
    \ % 2 != 0) {\n                res.Add(x[i]);\n            }\n        }\n    \
    \    return res.OrderBy(i => i).ToList();", "        // Sort x first and then\
    \ return result with O(n) complexity.\n        Array.Sort(x);\n        var result\
    \ = new List<long>();\n        foreach (var item in x) {\n            var str\
    \ = item.ToString();\n            var hasEvenDigit = false;\n            foreach\
    \ (var c in str) {\n                hasEvenDigit = hasEvenDigit || ((c - '0')\
    \ & 1) != 0;\n            }\n            if (!hasEvenDigit) {\n              \
    \  result.Add(item);\n            }\n        }\n        return result;", "   \
    \     var list = new List<long>();\n        for (int i = 0; i < x.Count; i++)\
    \ {\n            var num = x[i];\n            var m = num / 10;\n            var\
    \ x = num % 10;\n            if (m % 2 == 0 || x == 0) {\n                continue;\n\
    \            }\n            if (list.Contains(num)) {\n                continue;\n\
    \            }\n            list.Add(num);\n        }\n        return list;",
  "        x.Sort();\n        List<long> ret = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in x) {\n            set.Add(i);\n\
    \        }\n        foreach (long i in set) {\n            bool isDigit = false;\n\
    \            long tmp;\n            tmp = (long)Math.Round(Math.Log10(i));\n \
    \           while (!isDigit) {\n                tmp = tmp - 1;\n             \
    \   isDigit = (tmp % 2) == 0;\n            }\n            if (isDigit) {\n   \
    \             ret.Add(i);\n            }\n        }\n        return ret;", " \
    \       var list = new List<long>();\n        var xDig = x.ToList();\n       \
    \ xDig.RemoveAll(i => i % 2 != 0);\n        return xDig.OrderBy(i => i).ToList();",
  "        List<long> ans = new List<long>();\n        HashSet<long> hash = new HashSet<long>();\n\
    \        long[] ds = new long[x.Count];\n        for(int i = 0; i < x.Count; i++)\
    \ {\n            ds[i] = x[i];\n        }\n        // Sort numbers by their digit\n\
    \        Array.Sort(ds);\n        foreach(long d in ds) {\n            hash.Add(d);\n\
    \        }\n        foreach(long d in hash) {\n            long ans = d;\n   \
    \         while(hash.Sort((d, t) => t > d)) {\n                ans *= 10;\n  \
    \              ans += (hash.Sort(d => d)[0] - d) * 10;\n            }\n      \
    \      ans.Dump();\n            if(ans.IsEven()) {\n                ans.Dump();\n\
    \                ans.Add(d);\n            }\n        }\n        return ans;",
  "        // TODO: Your code here\n        var newList = new List<long>();\n    \
    \    foreach (var y in x)\n        {\n            if (y % 2 != 0)\n          \
    \  {\n                newList.Add(y);\n            }\n        }\n        return\
    \ newList;", "        long retVal = 0;\n        long retVal1 = Int64BitsToBigInt(0);\n\
    \        long retVal2 = Int64BitsToBigInt(1);\n        List<long> retList = new\
    \ List<long>();\n        if (x.Count == 0) {\n            retList.Add(0);\n  \
    \          return retList;\n        }\n        int countDigits = 0;\n        int\
    \ countDigits1 = 1;\n        List<long> retList1 = new List<long>();\n       \
    \ List<long> retList2 = new List<long>();\n        bool found = false;\n     \
    \   long xDigit = 0;\n        for (int i = 0; i < x.Count - 1; i++) {\n      \
    \      xDigit = Int64BitsToBigInt(x[i]);\n            if (xDigit == 0) {\n   \
    \             retVal1 = retVal2 * x[i];\n                retList1.Add(retVal1);\n\
    \                countDigits1 = countDigits1;\n                retVal1 = retVal2\
    \ * x[i + 1];\n                retList1.Add(retVal1);\n                countDigits1\
    \ = countDigits1;\n                countDigits2 = countDigits2;\n            \
    \    retVal2 = retVal1;\n            } else {\n                if (xDigit % 2\
    \ == 0) {\n                    if (retVal2 % 2 == 0) {\n                     \
    \   retVal2 = retVal2 / 2;\n                        retList2.Add(retVal2);\n \
    \                       countDigits2 = countDigits2;\n                    } else\
    \ {\n                        found = true;\n                        retVal2 =\
    \ retVal2 * x[i];\n                        retList2.Add(retVal2);\n          \
    \              countDigits2 = countDigits2;\n                        break;\n\
    \                    }\n                } else {\n                    retVal2\
    \ = retVal2 * x[i];\n                    retList2.Add(retVal2);\n            \
    \        countDigits2 = countDigits2;\n                }\n            }\n    \
    \    }\n        if (found == false) {\n            retVal1 = retVal2 * x[x.Count\
    \ - 1];\n            retList.Add(retVal1);\n            countDigits1 = countDigits1;\n\
    \            retVal1 = retVal2 * x[x.Count - 2];\n            retList.Add(retVal1);\n\
    \            countDigits1 = countDigits1;\n        }\n        List<long> retList3\
    \ = new List<long>();\n        if (countDigits1 == countDigits2) {\n         \
    \   for (int i = 0; i < countDigits1; i++) {\n                if (x[i] % 2 ==\
    \ 0) {\n                    retList3.Add(x[i]);\n                }\n         \
    \   }\n            for (int i = 0; i < countDigits1; i++) {\n                if\
    \ (retList3.Contains(x[i])) {\n                    retVal1 = retVal2 * x[i];\n\
    \                    retList3.Add(retVal1);\n                    countDigits2\
    \ = countDigits2;\n                } else {\n                    retVal1 = retVal2\
    \ * x[i + 1];\n                    ret", "        var d = new Dictionary<long,\
    \ long>(x.Count);\n        foreach (var v in x) {\n            d[v] = 1;\n   \
    \     }\n        return x.Where(v => !d.TryGetValue(v, out long v1)).ToList();",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ min = long.MaxValue;\n        long digit = 0;\n        bool even = false;\n\
    \        long num = x.Count;\n        for (int i = 0; i < num; i++) {\n      \
    \      digit = Convert.ToInt64(x.ElementAt(i));\n            if (!even) {\n  \
    \              max = Math.Max(max, digit);\n                min = Math.Min(min,\
    \ digit);\n            }\n            else {\n                max = Math.Max(max,\
    \ digit);\n            }\n            if (digit % 2 == 0) {\n                even\
    \ = true;\n            }\n        }\n        int count = 0;\n        for (int\
    \ i = 0; i < num; i++) {\n            digit = Convert.ToInt64(x.ElementAt(i));\n\
    \            if (digit % 2 != 0) {\n                if (!result.Contains(digit))\
    \ {\n                    result.Add(digit);\n                }\n            }\n\
    \            else {\n                count++;\n            }\n            if (count\
    \ > max * 2) {\n                break;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        foreach (long val in x) {\n            if (val % 2 == 0) {\n   \
    \             max = Math.Max(max, val);\n            }\n            else {\n \
    \               bool check = false;\n                for (int j = 0; j < result.Count;\
    \ j++) {\n                    if (val == result[j]) {\n                      \
    \  check = true;\n                        break;\n                    }\n    \
    \            }\n                if (!check)\n                    result.Add(val);\n\
    \            }\n        }\n        long newmax = max;\n        foreach (long val\
    \ in x) {\n            if (val % 2 == 0) {\n                if (val < newmax)\n\
    \                    newmax = val;\n            }\n            else {\n      \
    \          if (val > newmax)\n                    newmax = val;\n            }\n\
    \        }\n        List<long> tmp = new List<long>();\n        for (int i = 0;\
    \ i < result.Count; i++) {\n            if (result[i] < newmax)\n            \
    \    tmp.Add(result[i]);\n        }\n        return tmp;", "        var result\
    \ = new List<long>();\n        \n        foreach (var i in x) {\n            int\
    \ digit = 0;\n            while (i != 0) {\n                digit = (int)i % 10;\n\
    \                i = i / 10;\n                if (digit % 2 == 0) {\n        \
    \            break;\n                }\n            }\n            result.Add(i);\n\
    \        }\n        result.Sort();\n        return result;", "        List<long>\
    \ result = new List<long>();\n        HashSet<long> digits = new HashSet<long>();\n\
    \        bool hasEven = false;\n        foreach (var y in x) {\n            long\
    \ digit = y;\n            if (digits.Contains(digit))\n                continue;\n\
    \            digits.Add(digit);\n            int remain = digit % 10;\n      \
    \      if (remain != 0) {\n                hasEven = true;\n                break;\n\
    \            }\n            long temp = y;\n            while (temp > 0) {\n \
    \               temp = temp / 10;\n                digits.Add(temp);\n       \
    \     }\n        }\n        if (hasEven) {\n            return result;\n     \
    \   } else {\n            return new List<long>();\n        }", "        return\
    \ x.Where(x => x % 2 == 0)\n            .Distinct()\n            .OrderBy(x =>\
    \ x)\n            .ToList();", "        if (x.Count < 1) return new List<long>();\n\
    \        var ret = new List<long>();\n        var s = x.Select((e) => (int)Math.Floor(Math.Log10(Math.Abs(e)))).ToList();\n\
    \        HashSet<int> hashSet = new HashSet<int>();\n        HashSet<int> hashSet1\
    \ = new HashSet<int>();\n        var y = new List<long>();\n        foreach(var\
    \ item in s) {\n            if (hashSet.Contains(item)) {\n                hashSet.Remove(item);\n\
    \            }\n            else {\n                hashSet.Add(item);\n     \
    \       }\n        }\n        foreach(var item in hashSet) {\n            y.Add(item);\n\
    \        }\n        foreach (var item in y) {\n            if (!hashSet1.Contains(item))\
    \ {\n                ret.Add(item);\n            }\n        }\n        return\
    \ ret;", "        long res = 0;\n        foreach(var el in x) {\n            res\
    \ ^= el;\n        }\n        long odd = 0;\n        List<long> ans = new List<long>();\n\
    \        do {\n            res *= 10;\n            res %= 107;\n            odd++;\n\
    \        } while(odd*2 <= res);\n        ans.Add(res);\n        for(int i = 1;\
    \ i < x.Count; i++) {\n            if(x[i] % 2 == 0)\n                continue;\n\
    \            else\n                ans.Add(x[i]);\n        }\n        ans = ans.Distinct().OrderBy(e\
    \ => e).ToList();\n        return ans;", "        List<long> ret = new List<long>();\n\
    \        bool flag = false;\n        // for each element in the list, if even\
    \ number then\n        foreach (long element in x) {\n            if (element\
    \ % 2 == 0) {\n                flag = true;\n                break;\n        \
    \    }\n        }\n        if (flag) {\n            return ret;\n        }\n \
    \       HashSet<long> set = new HashSet<long>(x);\n        ret.AddRange(set.ToArray().Where(x\
    \ => x % 2 == 0).ToArray());\n        return ret;", "        List<long> res =\
    \ new List<long>();\n        HashSet<long> set = new HashSet<long>();\n      \
    \  foreach (var i in x) {\n            if (set.Add(i)) {\n                res.Add(i);\n\
    \            }\n        }\n        return res;", "        if (x.Count < 2) {\n\
    \            return x;\n        }\n        List<long> y = new List<long>();\n\
    \        Decimal temp = 0;\n        Decimal temp2 = 0;\n        long temp3 = 1000000000;\n\
    \        long temp4 = 0;\n        long temp5 = 0;\n        for (int i = 0; i <\
    \ x.Count; i++) {\n            temp = temp3 + x[i];\n            temp2 = temp\
    \ % 10;\n            temp4 = (long)temp / 10;\n            temp5 = x[i] * temp4;\n\
    \            if (temp2 % 2 != 0) {\n                temp5 -= temp2;\n        \
    \        y.Add(temp5);\n            }\n        }\n        return y;", "      \
    \  // Your code here...\n        Dictionary<long, List<long>> dictionary = new\
    \ Dictionary<long, List<long>>();\n        x.ForEach(x => dictionary[x] = new\
    \ List<long>());\n        x.ForEach(x => dictionary[x].Add(x));\n        List<long>\
    \ result = new List<long>();\n        dictionary.ToList().ForEach(x =>\n     \
    \   {\n            if (!x.Value.Any((y => y % 2) == 0L)) {\n                result.AddRange(x.Value);\n\
    \            }\n        });\n        return result.OrderBy(x => x).ToList();",
  "        if (x.Count == 0) {\n            return new List<long>();\n        }\n\
    \        Dictionary<long, List<long>> digits = new Dictionary<long, List<long>>();\n\
    \        List<long> result = new List<long>();\n        long xSum = 0;\n     \
    \   for (int i = 0; i < x.Count; i++) {\n            xSum += x[i];\n         \
    \   List<long> xDigits;\n            if (digits.TryGetValue(xSum, out xDigits))\
    \ {\n                xDigits.Add(x[i]);\n            } else {\n              \
    \  xDigits = new List<long> { x[i] };\n                digits.Add(xSum, xDigits);\n\
    \            }\n        }\n        foreach (KeyValuePair<long, List<long>> digitList\
    \ in digits) {\n            if (digitList.Value.Count == 1) {\n              \
    \  result.Add(digitList.Key);\n            } else {\n                bool hasEvenDigit\
    \ = false;\n                foreach (long d in digitList.Value) {\n          \
    \          hasEvenDigit = (d % 2 == 0);\n                }\n                if\
    \ (hasEvenDigit) {\n                    result.Add(digitList.Key);\n         \
    \       }\n            }\n        }\n        return result;", "        HashSet<long>\
    \ result = new HashSet<long>();\n        long n = 0;\n        for (long i = 0;\
    \ i < x.Count; ++i) {\n            n += x[i];\n            result.Add(n);\n  \
    \      }\n        return result.ToList();", "        List<long> list = new List<long>();\n\
    \        var temp = x.ToArray();\n        Array.Sort(temp);\n        foreach (var\
    \ item in temp) {\n            var result = GetHash(item).ToString();\n      \
    \      list.Add(item);\n            list.Remove(result);\n        }\n        return\
    \ list;", "        var results = new List<long>();\n        var m = x.Count;\n\
    \        var n = x.ElementAt(0);\n        while(m > 0) {\n            int i =\
    \ x.FindLastIndex(n => (n % 2 == 0));\n            if(i != -1)\n             \
    \   results.Add(x.ElementAt(i));\n            m -= 1;\n            n = (n % 10)\
    \ * 10 + x.ElementAt(i);\n        }\n        return results.OrderBy(x => x).ToList();",
  "        List<long> ret = new List<long>();\n        foreach (var num in x)\n  \
    \      {\n            if (num % 2 != 0)\n            {\n                ret.Add(num);\n\
    \            }\n        }\n        return ret;", "        if (x.Count == 0) {\n\
    \            return new List<long>();\n        }\n        HashSet<long> evenDigits\
    \ = new HashSet<long>();\n        foreach (long n in x) {\n            if (n %\
    \ 2 == 0) {\n                evenDigits.Add(n);\n            }\n        }\n  \
    \      List<long> ret = new List<long>();\n        foreach (long n in x) {\n \
    \           if (!evenDigits.Contains(n)) {\n                ret.Add(n);\n    \
    \        }\n        }\n        return ret;", "        List<long> y = new List<long>();\n\
    \        x.ForEach(x => {\n            bool flag = false;\n            long a\
    \ = x;\n            long b = a;\n            while (a != 0) {\n              \
    \  a = a / 10;\n                b = b % 10;\n                if (a % 2 == 0) {\n\
    \                    flag = true;\n                    break;\n              \
    \  }\n            }\n            if (flag) {\n                y.Add(a);\n    \
    \        }\n        });\n        return y;", "        var list = new List<long>();\n\
    \        // Sort x in descending order. \n        x.Sort((a, b) => b - a);\n \
    \       foreach (var element in x)\n        {\n            bool isEven = true;\n\
    \            foreach (var digit in element.ToString())\n            {\n      \
    \          if (digit != '0')\n                    isEven = false;\n          \
    \  }\n            if (isEven)\n            {\n                list.Add(element);\n\
    \            }\n        }\n        list.Sort((a, b) => b - a);\n        return\
    \ list;", "        int count = 0;\n        List<long> unique = new List<long>();\n\
    \        foreach (long i in x) {\n            while (count > 0 && !(i & Math.Pow(10,\
    \ count)))\n                count--;\n            if (count == 0) {\n        \
    \        unique.Add(i);\n            }\n            count++;\n        }\n    \
    \    return unique;", "        HashSet<long> nums = new HashSet<long>();\n   \
    \     List<long> result = new List<long>();\n\n        // Sort the original list\
    \ in ascending order.\n        x.Sort();\n\n        foreach (long num in x) {\n\
    \            if (num % 2 == 0) {\n                nums.Add(num);\n           \
    \ }\n        }\n\n        // Find out how many of same digits in the original\
    \ list.\n        long numOfSameDigit = 0;\n        foreach (long num in x) {\n\
    \            if (nums.Contains(num)) {\n                numOfSameDigit++;\n  \
    \          }\n        }\n\n        // All numbers that has same digits count as\
    \ 1.\n        if (numOfSameDigit == x.Count) {\n            foreach (long num\
    \ in x) {\n                if (!nums.Contains(num)) {\n                    result.Add(num);\n\
    \                }\n            }\n        } else {\n            // All numbers\
    \ that has same digits count is greater than 1.\n            foreach (long num\
    \ in x) {\n                if (!nums.Contains(num)) {\n                    result.Add(num);\n\
    \                }\n            }\n            // If all numbers that has same\
    \ digits are less than the number of\n            // original numbers. Add one\
    \ more element to the result.\n            if (numOfSameDigit == x.Count) {\n\
    \                result.Add(x.Last() + 1);\n            }\n        }\n\n     \
    \   return result;", "        List<long> ret = new List<long>();\n        long\
    \ current = x[0];\n        for (long i = 1, i < x.Count; i++) \n        {\n  \
    \          long temp = x[i];\n            if (temp % current == 0) \n        \
    \    {\n                ret.Add(x[i]);\n                current = temp;\n    \
    \        }\n        }\n        return ret;", "        // write your code here\n\
    \        long[] y = new long[x.Count];\n        int n = x.Count;\n        for\
    \ (int i = 0; i < n; i++) {\n            y[i] = x[i];\n        }\n        Array.Sort(y);\n\
    \        List<long> z = new List<long>();\n        long c = 1;\n        int j\
    \ = 0;\n        long d = y;\n        for (int i = 0; i < n; i++) {\n         \
    \   while (j < n && y[j] > y) {\n                c = 1;\n                d = y[j];\n\
    \                j++;\n            }\n            z.Add(c);\n            y[j]\
    \ = d;\n            c++;\n        }\n        return z;", "        long count =\
    \ 0;\n        long cur = 0;\n        long last = x[0];\n        List<long> result\
    \ = new List<long>();\n        for (long i : x) {\n            count++;\n    \
    \        while (count > 0) {\n                if (i % 2 == 0) {\n            \
    \        cur += 2;\n                    count -= 2;\n                } else {\n\
    \                    cur++;\n                    count--;\n                }\n\
    \                if (cur > last) {\n                    last = cur;\n        \
    \            result.Add(i);\n                }\n            }\n        }\n   \
    \     return result;", "        var res = new List<long>();\n        foreach (var\
    \ n in x) {\n            if (n.ToString().Any(c => c == '0')) continue;\n    \
    \        var digit = n.ToString().Where(c => c > '0').ToArray();\n           \
    \ if (digit.Length == 0) continue;\n            var result = new List<long>();\n\
    \            foreach (var c in digit)\n                result.Add((long)c);\n\
    \            var found = false;\n            foreach (var d in res) {\n      \
    \          if (d == result.Aggregate((a, b) => a + b)) found = true;\n       \
    \     }\n            if (found) continue;\n            res.AddRange(result.OrderBy(c\
    \ => c));\n        }\n        return res;", "        long result = x;\n      \
    \  List<long> res = new List<long>();\n        HashSet<long> hashSet = new HashSet<long>();\n\
    \        long lastDigit = -1;\n        while (!hashSet.Contains(result)) {\n \
    \           if (lastDigit % 2 == 0) {\n                hashSet.Add(result);\n\
    \                res.Add(result);\n                result = result / 10;\n   \
    \         } else {\n                result = result * 10;\n            }\n   \
    \         lastDigit = result % 10;\n        }\n        return res;", "       \
    \ if (x.Count < 2) return x;\n\n        long sum = 0;\n        long even;\n  \
    \      long odd;\n        bool evenFound = false;\n        bool oddFound = false;\n\
    \        HashSet<long> hashSet = new HashSet<long>();\n        List<long> ret\
    \ = new List<long>();\n        long maxOdd = long.MinValue;\n\n        x.ForEach(x\
    \ => {\n            sum = sum + x;\n            even = (long)Math.Floor(sum /\
    \ 2);\n            if (even > maxOdd) maxOdd = even;\n\n            oddFound =\
    \ hashSet.Contains(odd);\n            hashSet.Add(even);\n            if (!evenFound)\
    \ hashSet.Add(odd);\n        });\n\n        odd = maxOdd;\n        while (hashSet.Contains(odd))\
    \ {\n            even = hashSet[(int)odd];\n            ret.add(even);\n     \
    \       hashSet.Remove(even);\n            hashSet.Add(odd);\n            odd\
    \ = odd + 1;\n        }\n        return ret;", "        List<long> ret = new List<long>();\n\
    \        foreach (var item in x)\n            ret.AddRange(x.FindAll(item % 2\
    \ == 0));\n        System.Console.WriteLine(String.Join(\", \", ret.OrderBy(x\
    \ => x).Distinct()));\n        return ret;", "        int max = 0;\n        int\
    \ digit = 0;\n        bool isEven = false;\n\n        for (int i = 0; i < x.Count;\
    \ i++) {\n            int d = x[i] % 10;\n            if (d != 0) {\n        \
    \        max = Math.Max(d, max);\n                digit = Math.Max(d, digit);\n\
    \            }\n            else {\n                isEven = !isEven;\n      \
    \      }\n        }\n\n        List<long> result = new List<long>();\n       \
    \ bool isExist = false;\n\n        for (int i = 0; i < x.Count; i++) {\n     \
    \       int d = x[i] % 10;\n            if (d == 0) {\n                if (isEven)\
    \ {\n                    if (isExist) {\n                        result.Add(max);\n\
    \                    }\n                    else {\n                        result.Add(x[i]);\n\
    \                    }\n                }\n                else {\n          \
    \          isExist = true;\n                }\n            }\n            else\
    \ {\n                if (isExist) {\n                    result.Add(max);\n  \
    \              }\n                else {\n                    result.Add(x[i]);\n\
    \                }\n            }\n        }\n\n        if (result.Count > 0)\
    \ {\n            result.Sort(new Comparator<long>((x, y) => x - y));\n       \
    \ }\n\n        return result;", "        List<long> ret = new List<long>();\n\
    \        long result = 0;\n        long num = 0;\n        for (long i : x) {\n\
    \            num += i;\n        }\n        while (num != 0) {\n            int\
    \ iDigit = num % 10;\n            if (ret.Contains(iDigit)) {\n              \
    \  Console.WriteLine(\"Found duplicate for {0}\", iDigit);\n            }\n  \
    \          else {\n                ret.Add(iDigit);\n            }\n         \
    \   num = num / 10;\n        }\n        return ret;", "        List<long> result\
    \ = new List<long>();\n        foreach (long v in x) {\n            long v1 =\
    \ v;\n            int count = 0;\n            while (v != 0) {\n             \
    \   long r = v % 10;\n                if (r != 0) {\n                    count++;\n\
    \                }\n                v /= 10;\n            }\n            if (count\
    \ == 0) {\n                result.Add(v1);\n            }\n        }\n       \
    \ return result;", "        var unique = new List<long>();\n        foreach (var\
    \ n in x) {\n            if (!unique.Contains(n)) {\n                unique.Add(n);\n\
    \            }\n            else {\n                var index = unique.FindIndex((x)\
    \ => x % x == 0);\n                if (index == -1) {\n                    unique.Add(n);\n\
    \                }\n                else {\n                    unique.RemoveAt(index);\n\
    \                    unique.Insert(index, n);\n                }\n           \
    \ }\n        }\n        return unique;", "        Debug.Assert(x.Count != 0);\n\
    \n        long temp = 0;\n        foreach (long item in x) {\n            temp\
    \ = item;\n\n            if (item % 2 == 0) {\n                while (item % 2\
    \ == 0) {\n                    item /= 2;\n                }\n            }\n\
    \            else if (item % 2 == 1) {\n                while (item % 2 == 1)\
    \ {\n                    item /= 2;\n                }\n                item.ToString(CultureInfo.InvariantCulture);\n\
    \            }\n\n            if (x.Contains(temp)) {\n                x.Remove(temp);\n\
    \            }\n            else {\n                x.Add(temp);\n           \
    \ }\n        }\n\n        return x;", "        int count = 0;\n        var result\
    \ = new List<long>();\n        foreach (var item in x) {\n            var digits\
    \ = item.ToString().Select(x => (long)Math.Floor(x)).ToArray();\n            foreach\
    \ (var digit in digits) {\n                if (count % 2 == 0) {\n           \
    \         if (digit % 2 == 0) {\n                        result.Add(item);\n \
    \                   }\n                } else {\n                    if (digit\
    \ % 2 != 0) {\n                        result.Add(item);\n                   \
    \ }\n                }\n            }\n            count++;\n        }\n     \
    \   return result;", "        HashSet<long> result = new HashSet<long>();\n  \
    \      foreach(long num in x) {\n            if (num % 2 == 0) {\n           \
    \     result.Add(num);\n            }\n        }\n        return new List<long>(result.OrderBy(a\
    \ => a));", "        List<long> ret = new List<long>();\n        long num = 0;\n\
    \        long count = 1;\n        foreach (long i in x) {\n            int d =\
    \ i % 10;\n            num /= 10;\n            if (d != 0) {\n               \
    \ if (d.Equals(0)) {\n                    continue;\n                }\n     \
    \           ret.Add(i);\n                count++;\n            }\n        }\n\
    \        if (count == 0) {\n            return ret;\n        }\n        while\
    \ (num > 0) {\n            int d = num % 10;\n            if (d == 0) {\n    \
    \            continue;\n            }\n            ret.Add(num);\n           \
    \ num /= 10;\n        }\n        return ret;", "        int length = x.Count;\n\
    \        List<long> results = new List<long>();\n        long currentNumber =\
    \ 0;\n        long digit = 0;\n        int count = 0;\n        for(int i = 0;\
    \ i < length; i++)\n        {\n            currentNumber = currentNumber * 10\
    \ + x[i];\n            if (currentNumber % 2 != 0) {\n                digit =\
    \ currentNumber / 10;\n                if (digit % 2 != 0)\n                {\n\
    \                    if (results.Find(x => x == digit) == -1)\n              \
    \      {\n                        results.Add(digit);\n                      \
    \  count++;\n                    }\n                }\n            }\n       \
    \ }\n        if (count == 0)\n        {\n            return new List<long>();\n\
    \        }\n        else\n        {\n            return results;\n        }",
  "        List<long> res = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in x)\n        {\n            if (set.Contains(i)) continue;\n\
    \            set.Add(i);\n            if (i.ToString().ToCharArray().Select(x\
    \ => Convert.ToInt64(x, 10)).ToArray()\n                .Distinct().Count() >\
    \ 1) \n            {\n                res.Add(i);\n            }\n        }\n\
    \        return res;", "        var digits = x.Select(x => Convert.ToString(x,\
    \ 10)).ToList();\n        long max = 0;\n        long maxNum = 0;\n        bool\
    \ flag = false;\n        List<long> res = new List<long>();\n        foreach (var\
    \ item in digits) {\n            max = long.Parse(item);\n            maxNum =\
    \ max;\n            flag = true;\n            while (!flag) {\n              \
    \  var num = new long[] { maxNum };\n                var nums = x.Where(y => num.All(n\
    \ => Math.Abs((y - n) % maxNum) == 0));\n                if (nums.Any()) {\n \
    \                   max = maxNum;\n                    maxNum = nums.Max();\n\
    \                    flag = false;\n                } else {\n               \
    \     res.Add(max);\n                    max++;\n                }\n         \
    \   }\n        }\n        return res;", "        int length = x.Count;\n     \
    \   List<long> result = new List<long>();\n\n        int[] digits = new int[1000];\n\
    \        long temp = 0;\n\n        foreach(long i in x) {\n            temp =\
    \ i;\n            while(temp != 0) {\n                digits[temp % 10]++;\n \
    \               temp /= 10;\n            }\n        }\n\n        for(int i = 0;\
    \ i < length; i++) \n            if (digits[i] % 2 == 0) {\n                result.Add(x[i]);\n\
    \            }\n\n        return result;", "        // your code here\n      \
    \  if (x.Any()) {\n            int digit;\n            List<long> res = new List<long>();\n\
    \            foreach (long i in x)\n            {\n                digit = i %\
    \ 10;\n                if (!res.Contains(digit)) {\n                    res.Add(i);\n\
    \                }\n            }\n            return res.OrderBy(r => r).ToList();\n\
    \        }\n        return new List<long>();", "        if (null == x)\n     \
    \       return null;\n        List<long> retVal = new List<long>();\n        bool\
    \ hasNext = x.Any();\n        while (hasNext) {\n            hasNext = x.Any();\n\
    \            long temp = 0;\n            foreach (long number in x)\n        \
    \        temp += number;\n            int digit = temp % 10;\n            if (!retVal.Contains(digit))\
    \ {\n                retVal.Add(digit);\n                hasNext = x.Any();\n\
    \            }\n        }\n        return retVal.ToList();", "        List<long>\
    \ ans = new List<long>();\n        bool even = false;\n        long lastEvenDigit\
    \ = 0;\n        foreach(var n in x) {\n            if(n % 2 == 0) {\n        \
    \        even = true;\n            }\n            if(even) {\n               \
    \ lastEvenDigit = n;\n            } else {\n                if(lastEvenDigit %\
    \ 2 == 0) {\n                    ans.Add(lastEvenDigit);\n                }\n\
    \                even = false;\n            }\n        }\n        return ans;",
  "        int count = new List<long>(new long[] { 0L }).Sum();\n        List<long>\
    \ res = new List<long>();\n        for (int i = 0; i < x.Count; i++) {\n     \
    \       if (x[i] % 2 == 0) {\n                for (int j = i; j < x.Count; j++)\
    \ {\n                    count++;\n                    if (x[j] % 2 != 0) {\n\
    \                        break;\n                    }\n                }\n  \
    \              if (count == 0) {\n                    res.Add(x[i]);\n       \
    \             count = 1;\n                }\n            }\n        }\n      \
    \  return res;", "        int[] digits = new int[10];\n        long count = 0;\n\
    \        x.ForEach(x => {\n            int pos = (int)x / 10;\n            digits[pos]++;\n\
    \            count++;\n        });\n        var digits2 = new int[10];\n     \
    \   for (int i = 0; i < digits.Length; i++) {\n            if (digits[i] > 0)\
    \ {\n                digits2[digits[i] - 1]++;\n            }\n        }\n   \
    \     var result = new List<long>();\n        for (int i = 0; i < digits2.Length;\
    \ i++) {\n            if (digits2[i] > 0) {\n                result.Add(i);\n\
    \            }\n        }\n        Array.Sort(result);\n        return result;",
  "        HashSet<long> hashSet = new HashSet<long>();\n        long max = 0;\n \
    \       long min = x.Min();\n        for(int i=0;i<x.Count;i++) {\n          \
    \  hashSet.Add(x[i]);\n            max = Math.Max(max, x[i]);\n            min\
    \ = Math.Min(min, x[i]);\n        }\n        return x.Where(x => x % 2 == 0).OrderBy(x\
    \ => x).Except(hashSet).Where(x => x > min && x < max).ToList();", "        int\
    \ size = 0;\n        List<long> result = new List<long>();\n\n        foreach\
    \ (var i in x)\n            size += i;\n        foreach (var i in x)\n       \
    \     if (i.ToString(CultureInfo.InvariantCulture).All(a => Convert.ToInt64(a)\
    \ % 2 == 0)) {\n                result.Add(i);\n                size -= i;\n \
    \               if (size <= 0)\n                    break;\n            }\n  \
    \      return result;", "        if (x.Count == 0) return new List<long>();\n\
    \        var y = x.ToArray();\n        var d = new List<long>();\n        long\
    \ max = y.Max();\n        long min = y.Min();\n        while (max > min) {\n \
    \           while (max - min > 1) {\n                if (y[max] - y[min] == 0)\
    \ {\n                    d.Add(y[max]);\n                    max -= 1;\n     \
    \           } else\n                    min += 1;\n            }\n           \
    \ max -= 1;\n            min += 1;\n        }\n        return d;", "        List<long>\
    \ result = new List<long>();\n        Debug.Assert(x != null && x.Count > 0);\n\
    \        if (x.Count == 0) {\n            return result;\n        }\n        long\
    \ largest = x.Max();\n        long smallest = x.Min();\n        long current =\
    \ smallest;\n        long currentDigit = 0;\n        for (int i = 0; i < x.Count;\
    \ i++) {\n            long digit = Convert.ToInt64(x.ElementAt(i)) % 10;\n   \
    \         if (digit == 0 && currentDigit != 0) {\n                result.Add(current);\n\
    \                currentDigit = 0;\n                current = smallest;\n    \
    \        }\n            if (digit != 0 && currentDigit == 0) {\n             \
    \   currentDigit = digit;\n                current = Convert.ToInt64(x.ElementAt(i));\n\
    \            }\n        }\n        if (currentDigit != 0) {\n            result.Add(current);\n\
    \        }\n        return result;", "        HashSet<long> evenDigits = new HashSet<long>();\n\
    \        List<long> ret = new List<long>();\n        foreach (long n in x) {\n\
    \            if (n % 2 == 0) {\n                evenDigits.Add(n);\n         \
    \   }\n        }\n        foreach (long n in x) {\n            if (evenDigits.Contains(n))\
    \ {\n                ret.Add(n);\n            }\n        }\n        return ret;",
  "        List<long> result = new List<long>();\n        if (x.Count > 0)\n     \
    \   {\n            long sum = 0;\n            foreach (var number in x)\n    \
    \        {\n                int temp = number;\n                if (number % 2\
    \ == 0)\n                    temp = -temp;\n                if (temp % 10 == 0)\n\
    \                {\n                    sum = temp;\n                }\n     \
    \       }\n            if (sum != 0)\n            {\n                result.Add(sum);\n\
    \            }\n            int counter = 0;\n            long tempsum = 0;\n\
    \            foreach (var number in x)\n            {\n                int temp\
    \ = number;\n                if (number % 2 == 0)\n                    temp =\
    \ -temp;\n                if (temp % 10 != 0)\n                {\n           \
    \         tempsum = temp;\n                }\n                else\n         \
    \       {\n                    result.Add(temp);\n                    counter++;\n\
    \                }\n            }\n            if (counter == 0)\n           \
    \ {\n                result.Add(tempsum);\n            }\n        }\n        return\
    \ result;", "        List<long> ans = new List<long>();\n        Array.Sort(x);\n\
    \        double max = x.Max();\n        double minx = x.Min();\n        double\
    \ div;\n        double xdiv;\n        double ydiv;\n        double xx;\n     \
    \   double yy;\n        int k = 0;\n        foreach (long n in x) {\n        \
    \    div = (n - minx) / max;\n            xdiv = (n - minx) % max;\n         \
    \   ydiv = x / div;\n            xx = x % div;\n            yy = y % div;\n  \
    \          if ((xx - ydiv) % 2 != 0 || (yy - xdiv) % 2 != 0) {\n             \
    \   ans.Add(n);\n            }\n        }\n        return ans;", "        List<long>\
    \ y = new List<long>();\n        HashSet<long> hashSet = new HashSet<long>();\n\
    \        foreach(long i in x) {\n            bool even = false;\n            for(int\
    \ j = 1; j <= i/2; j++) {\n                if(i % j == 0) {\n                \
    \    even = true;\n                    break;\n                }\n           \
    \ }\n            if(!even) {\n                y.Add(i);\n            }\n     \
    \       hashSet.Add(i);\n        }\n        return y.OrderBy(i => i).ToList();",
  "        HashSet<long> s = new HashSet<long>();\n        foreach (var item in x)\
    \ {\n            s.Add(item);\n        }\n        List<long> result = new List<long>();\n\
    \        foreach (var item in s) {\n            while (item != 0) {\n        \
    \        int temp = item%10;\n                if (temp % 2 == 0) {\n         \
    \           result.Add(item);\n                    break;\n                }\n\
    \                item = item / 10;\n            }\n        }\n        return result;",
  "        var digits = new List<long>(x.Count);\n        for (int i = 0; i < x.Count;\
    \ i++) {\n            long k = x[i];\n            digits.Add(k);\n        }\n\
    \        long a = x[0];\n        long b = x[0];\n        List<long> result = new\
    \ List<long>();\n        for (int i = 0; i < x.Count; i++) {\n            long\
    \ k = x[i];\n            while (k != 0) {\n                long d = k / 10;\n\
    \                long e = k - d * 10;\n                if (d % 2 == 0) {\n   \
    \                 b = b;\n                    if (e % 2 == 0) {\n            \
    \            result.Add(b);\n                    }\n                } else {\n\
    \                    a = a;\n                    if (e % 2 == 0) {\n         \
    \               result.Add(a);\n                    }\n                }\n   \
    \             k = e;\n            }\n        }\n        List<long> ret = new List<long>();\n\
    \        foreach (long item in result) {\n            if (ret[ret.Count - 1] <\
    \ item) {\n                ret.Add(item);\n            }\n        }\n        return\
    \ ret;", "        List<long> result = new List<long>();\n        long xValue =\
    \ x.First();\n        long temp = 0;\n        long tempVal = 0;\n        for (int\
    \ i = 0; i < x.Count; i++) {\n            if (i == 0) {\n                tempVal\
    \ = xValue;\n            }\n            if (xValue % 2 == 0) {\n             \
    \   tempVal += x[i];\n            }\n            if (tempVal > temp) {\n     \
    \           temp = tempVal;\n            }\n            xValue = x[i];\n     \
    \       tempVal = 0;\n        }\n        if (tempVal > 0) {\n            result.Add(temp);\n\
    \        }\n        if (x.Count > 0) {\n            result.AddRange(x.Skip(1));\n\
    \        }\n        return result;", "        Dictionary<long, List<long>> dict\
    \ = new Dictionary<long, List<long>>();\n        List<long> resultList = new List<long>();\n\
    \        foreach (long i in x) {\n            List<long> tmp = dict.FirstOrDefault(kvp\
    \ => kvp.Key == i).Value; \n            if (tmp != null && tmp.Count() != 0) {\n\
    \                dict.Remove(i);\n            }\n            if (dict.Count ==\
    \ 0) {\n                resultList.Add(i);\n            }\n        }\n       \
    \ return resultList;", "        if (x.Count == 0)\n            return new List<long>();\n\
    \        List<long> ret = new List<long>();\n        long count = 0;\n       \
    \ for (int i = 0; i < x.Count - 1; i++) {\n            long d = x[i] - x[i + 1];\n\
    \            if (d % 2 == 0) {\n                count++;\n            } else {\n\
    \                if (count > 0) {\n                    ret.Add(x[i]);\n      \
    \          }\n                count = 0;\n            }\n        }\n        if\
    \ (count > 0) {\n            ret.Add(x[x.Count - 1]);\n        }\n        Debug.Assert(ret.Count\
    \ == x.Count);\n        return ret;", "        var result = new List<long>();\n\
    \        var hashSet = new HashSet<long>();\n        foreach (var item in x) {\n\
    \            if (hashSet.Contains(item)) {\n                continue;\n      \
    \      }\n            hashSet.Add(item);\n            if (item % 2 != 0) {\n \
    \               result.Add(item);\n            }\n        }\n        return result.OrderBy(item\
    \ => item).ToList();", "        var d = x.Where(x => x % 2 == 0).ToList();\n \
    \       d.Sort();\n        return d;", "        var y = x.Distinct().OrderBy(e\
    \ => new BigInteger(x.TakeWhile(f => f % f != 0).ToArray()))\n            .ToList();\n\
    \        return y;", "        List<long> retVal = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        for (int i = 0; i < x.Count; i++) {\n  \
    \          if (set.Contains(x[i])) {\n                continue;\n            }\n\
    \            set.Add(x[i]);\n            retVal.Add(x[i]);\n            while\
    \ (set.Contains(x[i])) {\n                retVal.Add(x[i++]);\n            }\n\
    \        }\n        return retVal;", "        if (x.Count < 3) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        int index = 0;\n     \
    \   long remainder;\n        while (index < x.Count) {\n            remainder\
    \ = x[x.Count - index - 1] % 10;\n            if (remainder % 2 != 0) {\n    \
    \            result.Add(x[x.Count - index - 1]);\n                index++;\n \
    \           }\n            index++;\n        }\n        return result;", "   \
    \     List<long> ret = new List<long>();\n        List<long> evens = new List<long>();\n\
    \        bool foundEven = true;\n        \n        foreach (long y in x) {\n \
    \           long remainder = y % 10;\n            \n            if (!foundEven)\
    \ {\n                foundEven = true;\n                evens.Add(remainder);\n\
    \            } else {\n                if (remainder != evens.Last()) {\n    \
    \                foundEven = false;\n                    evens.Add(remainder);\n\
    \                } else {\n                    if (evens.Count > 1) {\n      \
    \                  ret.add(evens.Last());\n                    }\n           \
    \         evens.RemoveAt(0);\n                }\n            }\n        }\n  \
    \      \n        if (evens.Count > 0) {\n            ret.add(evens.Last());\n\
    \        }\n        \n        evens.RemoveAll(x => x == 0);\n        \n      \
    \  ret.AddRange(evens);\n        \n        evens.RemoveAll(x => x == 0);\n   \
    \     \n        ret.AddRange(evens);\n        \n        return ret;", "      \
    \  if (null == x || x.Count == 0) {\n            return null;\n        }\n\n \
    \       var dic = new Dictionary<long, long>();\n        foreach (var item in\
    \ x) {\n            if (dic.ContainsKey(item)) {\n                dic[item]++;\n\
    \            } else {\n                dic[item] = 1;\n            }\n       \
    \ }\n\n        List<long> result = new List<long>();\n\n        foreach (var item\
    \ in dic) {\n            if (item.Value % 2 == 0) {\n                // If x contains\
    \ x elements with even digit, no need to add it\n                if (x.Contains(item.Key))\
    \ {\n                    continue;\n                } else {\n               \
    \     result.Add(item.Key);\n                }\n            }\n        }\n\n \
    \       if (result.Count == 0) {\n            return new List<long>();\n     \
    \   }\n\n        // Add remaining elements that have no even digits\n        foreach\
    \ (var item in x) {\n            if (!dic.ContainsKey(item)) {\n             \
    \   result.Add(item);\n            }\n        }\n        return result;", "  \
    \      if (x.Count < 2)\n            return new List<long>();\n        var result\
    \ = new List<long>();\n        bool found = false;\n        long num = x[0];\n\
    \        long tmp = 0;\n        for (int i = 1; i < x.Count; i++) {\n        \
    \    tmp += num;\n            if (tmp % 2 == 0) \n                continue;\n\
    \            num = x[i];\n            if (num != 0)\n                result.Add(num);\n\
    \        }\n        return result.OrderBy(num => num).ToList();", "        List<long>\
    \ result = new List<long>();\n\n        long maxValue = 1;\n        bool hasEvenDigit\
    \ = false;\n\n        foreach (long item in x) {\n            hasEvenDigit = false;\n\
    \n            long remainder = 0;\n\n            while (item > 0) {\n        \
    \        remainder = item % 10;\n                if (remainder % 2 == 0) hasEvenDigit\
    \ = true;\n                item = (long) item / 10;\n            }\n\n       \
    \     if (!hasEvenDigit) {\n                result.Add(item);\n            }\n\
    \        }\n\n        long[] x = result.ToArray();\n        Array.Sort(x);\n\n\
    \        return x;", "        Debug.Assert(x.Any());\n        List<long> ret =\
    \ new List<long>();\n        long xlen = x.Count;\n        long maxlen = x.Max();\n\
    \        long maxlen2 = maxlen * maxlen;\n        int count = 0;\n        // Find\
    \ the position of even digit\n        bool flag = false;\n        long xdigit\
    \ = x.First();\n        long xdigit2 = xdigit;\n        for (int i = 1; i < xlen;\
    \ i++) {\n            long xdigit3 = xdigit2;\n            xdigit2 = xdigit;\n\
    \            xdigit = x[i] - xdigit;\n            if (xdigit % 2 == 0) {\n   \
    \             flag = true;\n            }\n            long xdigit4 = xdigit2;\n\
    \            xdigit2 = xdigit;\n            xdigit = xdigit2 - xdigit;\n     \
    \       xdigit = xdigit2 + xdigit;\n            long xdigit5 = xdigit2;\n    \
    \        xdigit2 = xdigit;\n            xdigit = xdigit2 - xdigit;\n         \
    \   xdigit = xdigit2 + xdigit;\n            xdigit = xdigit2 + xdigit;\n     \
    \       xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n \
    \           xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = xdigit2 - xdigit;\n            xdigit = xdigit2 + xdigit;\n\
    \            xdigit = x", "        List<long> digits = new List<long>();\n   \
    \     long temp;\n        for (int i = 0; i < x.Count; i++) {\n            temp\
    \ = x[i];\n            int numDigits = Convert.ToInt32(Math.Floor(Math.Log10(temp)));\n\
    \            for (int j = 0; j < numDigits; j++) {\n                digits.add(temp\
    \ % 10);\n                temp /= 10;\n            }\n        }\n        return\
    \ digits;", "        // write your code here\n        // x is sorted\n       \
    \ var r = new List<long>();\n        foreach (var item in x)\n        {\n    \
    \        r.Add(item);\n            if (item % 2 == 0)\n            {\n       \
    \         r.Remove(item);\n            }\n        }\n        return r;", "   \
    \     long last = 0;\n        long num = 0;\n        List<long> ret = new List<long>();\n\
    \        foreach (var item in x) {\n            if (item != 0) {\n           \
    \     num = item;\n                last = num % 10;\n            }\n        }\n\
    \        if (num != 0) {\n            ret.Add(num);\n        }\n        for (int\
    \ i = 0; i < x.Count; i++) {\n            long temp = x[i];\n            if (temp\
    \ != 0) {\n                temp = temp / 10;\n                if (temp == last)\
    \ {\n                    ret.Add(temp);\n                }\n            }\n  \
    \      }\n        return ret;", "        var result = new List<long>();\n    \
    \    foreach (var i in x) {\n            long sum = 0;\n            while (i !=\
    \ 0) {\n                sum += i % 10;\n                i = i / 10;\n        \
    \    }\n            if (sum % 2 != 0) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result.OrderBy(i => i).ToList();", "   \
    \     if (x.Count == 0) return new List<long>();\n        List<long> result =\
    \ new List<long>();\n        List<long> tmp = new List<long>();\n        // find\
    \ all elements that are not multiple of 10\n        foreach(long item in x) {\n\
    \            if (item % 10 == 0) tmp.Add(item);\n        }\n        // sort tmp\
    \ array\n        tmp.Sort();\n        foreach(long item in tmp) {\n          \
    \  // count how many digits in item\n            int count = 0;\n            while(item\
    \ > 0) {\n                count++;\n                item /= 10;\n            }\n\
    \            // if item has no even digit, add item to result\n            while(count\
    \ % 2 == 0) {\n                result.Add(item);\n                item /= 10;\n\
    \                count++;\n            }\n        }\n        return result;",
  "        var l = new List<long>();\n        l.Sort();\n        l.Reverse();\n\n\
    \        var counter = new int[10]; // how many digits are used at certain index\n\
    \        long lastValue = 0;\n        foreach (var item in x) {\n            lastValue\
    \ = item;\n            counter[0] = 1;\n            foreach (var n in Enumerable.Range(1,\
    \ 10)) {\n                counter[n] += counter[n - 1];\n                if (counter[n]\
    \ % 2 == 0) {\n                    break;\n                }\n            }\n\
    \            int pos = counter[lastValue] - 1;\n            if (lastValue % 10\
    \ != 0 && lastValue % 100 != 0) {\n                pos = pos + (lastValue % 10\
    \ == 0 ? 0 : 1);\n            }\n            if (pos >= 0) {\n               \
    \ l.Add(lastValue);\n            }\n        }\n        return l;", "        if\
    \ (x.Count <= 0) {\n            return new List<long>();\n        }\n        var\
    \ result = new List<long>();\n        var d = 0;\n        for (var i = 1; i <\
    \ x.Count; i++) {\n            if (x[i] % 2 == 0) {\n                d = x[i];\n\
    \                break;\n            }\n        }\n        if (d != 0) {\n   \
    \         var newList = new List<long>();\n            for (int i = 0; i < x.Count;\
    \ i++) {\n                if (i % 2 == 0) {\n                    if (!(x % d ==\
    \ 0)) {\n                        newList.Add(x[i]);\n                    }\n \
    \               }\n            }\n            result = newList;\n        }\n \
    \       return result;", "        int size = x.Count;\n        if (size == 0)\
    \ {\n            return new List<long>();\n        }\n        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    for (int i = 0; i < size; i++) {\n            long y = x[i];\n          \
    \  while (y > 0) {\n                int remainder = y % 10;\n                if\
    \ (remainder != 0) {\n                    break;\n                }\n        \
    \        set.Add(y);\n                y = y / 10;\n            }\n        }\n\
    \        for (int i = 0; i < size; i++) {\n            long y = x[i];\n      \
    \      while (y > 0) {\n                int remainder = y % 10;\n            \
    \    if (set.Contains(remainder)) {\n                    result.Add(y);\n    \
    \            }\n                y = y / 10;\n            }\n        }\n      \
    \  return result;", "        var r = new List<long>();\n        foreach (var item\
    \ in x) {\n            r.Add(item);\n        }\n        return r.OrderBy(n =>\
    \ n).Distinct().ToList();", "        if (x.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        List<long> result = new List<long>();\n  \
    \      long[] numbers = x.ToArray();\n        Array.Sort(numbers);\n        HashSet<long>\
    \ hashes = new HashSet<long>();\n        long sum = 0;\n        foreach (long\
    \ n in numbers) {\n            sum += n;\n            if (sum % 2 == 0) {\n  \
    \              hashes.Add(n);\n            }\n        }\n        foreach (long\
    \ n in hashes) {\n            if (x.Contains(n)) {\n                continue;\n\
    \            }\n            x.Add(n);\n            result.Add(n);\n        }\n\
    \        return result;", "        var y = x.ToList();\n        var result = new\
    \ List<long>();\n        foreach (var item in y){\n            if(item % 2 ==\
    \ 0){\n                var y = item.ToString();\n                var c = y.Select((c,\
    \ index) => new { Char = c, Index = index }).ToList();\n                var first\
    \ = c.First();\n                foreach (var y in c){\n                    if(y.Char\
    \ != first.Char){\n                        result.Add(item);\n               \
    \     }\n                }\n            }\n        }\n        return result;",
  "        long a = 0, b = 0, c = 0, d = 0, e = 0;\n        foreach (var x in x) {\n\
    \            if (x % 2 == 0) {\n                a++;\n            }\n        \
    \    else {\n                b++;\n            }\n            if (x % 2 == 0)\
    \ {\n                c++;\n            }\n            else {\n               \
    \ d++;\n            }\n            if (x % 2 == 0) {\n                e++;\n \
    \           }\n            else {\n                e++;\n            }\n     \
    \   }\n        List<long> n = new List<long>();\n        n.AddRange(x.TakeWhile(x\
    \ => a < x).Select(x => x));\n        n.AddRange(x.TakeWhile(x => b < x).Select(x\
    \ => x));\n        n.AddRange(x.TakeWhile(x => c < x).Select(x => x));\n     \
    \   n.AddRange(x.TakeWhile(x => d < x).Select(x => x));\n        n.AddRange(x.TakeWhile(x\
    \ => e < x).Select(x => x));\n        n.AddRange(x.TakeWhile(x => a < x).Select(x\
    \ => x));\n        n.AddRange(x.TakeWhile(x => b < x).Select(x => x));\n     \
    \   n.AddRange(x.TakeWhile(x => c < x).Select(x => x));\n        n.AddRange(x.TakeWhile(x\
    \ => d < x).Select(x => x));\n        n.AddRange(x.TakeWhile(x => e < x).Select(x\
    \ => x));\n        return n;", "        long sum = 0;\n        long result = 0;\n\
    \        bool flag = false;\n        for(int i=0; i < x.Count; i++) {\n      \
    \      if(x[i] == 0) {\n                flag = true;\n            }\n        \
    \    else {\n                if(flag) {\n                    sum += x[i];\n  \
    \                  result = sum;\n                    flag = false;\n        \
    \        }\n                else {\n                    result = result + x[i];\n\
    \                }\n            }\n        }\n        int count = 0;\n       \
    \ long rem = result;\n        for(int i=0; i < x.Count; i++) {\n            if(x[i]\
    \ % 2 == 0) {\n                rem = (rem - x[i]) / 2;\n                count++;\n\
    \            }\n            else {\n                if(rem % 2 == 0) {\n     \
    \               rem = (rem - x[i]) / 2;\n                }\n                else\
    \ {\n                    rem = (rem + x[i]) / 2;\n                }\n        \
    \        count++;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for(int i=0; i < x.Count - 1; i++) {\n            if(x[i] == 0) {\n \
    \               result.Add(0);\n            }\n            else if(x[i] == 1)\
    \ {\n                result.Add(1);\n            }\n            else if(x[i] ==\
    \ 1) {\n                result.Add(1);\n            }\n        }\n        return\
    \ result;", "        \n        List<long> result = new List<long>();\n       \
    \ int n = x.Count;\n        for (int i = 0; i < n; i++) {\n            long temp\
    \ = x[i];\n            while (temp > 0) {\n                long remain = temp\
    \ % 10;\n                if (remain != 0 && remain % 2 == 0)\n               \
    \     result.Add(temp);\n                temp /= 10;\n            }\n        }\n\
    \        return result;", "        Debug.Assert(x.Count != 0);\n        List<long>\
    \ ret = new List<long>();\n        long num = x.Min();\n        long len = x.Count()\
    \ - 1;\n        for (long i = len; i >= 0; i--) \n        {\n            if (num\
    \ % 10 != 0)\n            {\n                ret.Add(num);\n            }\n  \
    \          num = num / 10;\n        }\n        return ret;", "        // Sort\
    \ the numbers in ascending order\n        x.Sort();\n        List<long> results\
    \ = new List<long>();\n        // Go through each number in the list\n       \
    \ foreach (long n in x) {\n            // Get remainders of divided number by\
    \ 2\n            long evenDigits = (n % 2);\n            // If the remainders\
    \ are 0 or 1, add it to the results.\n            // Otherwise, do nothing.\n\
    \            if (evenDigits == 0 || evenDigits == 1)\n                results.Add(n);\n\
    \        }\n        // Sort the result\n        results.Sort();\n        return\
    \ results;", "        HashSet<long> set = new HashSet<long>(x);\n        return\
    \ x.Where(t => !set.Contains(t) && t % 2 == 0).ToList();", "        if (x.Count\
    \ == 0)\n            return new List<long>();\n        Debug.Assert(x.Count >\
    \ 0);\n        // 1. Sort the list\n        x.Sort();\n        // 2. For every\
    \ element in the list, find out how many of its digits \n        // are even.\
    \ Store this result in a list\n        List<int> evenDigits = new List<int>();\n\
    \        for (int i = 0; i < x.Count; i++) {\n            int count = DigitCount(x[i]);\n\
    \            if (count % 2 == 0) {\n                evenDigits.Add(count);\n \
    \           }\n        }\n        // 3. Remove digits with even count less than\
    \ 2\n        evenDigits.RemoveAll(x => x < 2);\n        // 4. Return all the elements\
    \ in the list that hasn't an even digit\n        return x.Where(n => !evenDigits.Contains(DigitCount(n)).ToList();",
  "        // base case\n        if (x.Count == 0)\n            return new List<long>();\n\
    \n        // initialize result\n        var results = new List<long>();\n\n  \
    \      // initialize result set\n        var set = new HashSet<long>();\n\n  \
    \      // iterate through each element\n        foreach (var x in x) {\n     \
    \       // if element has any even digit\n            if (x % 2 == 0) {\n    \
    \            // add element to result set\n                set.Add(x);\n     \
    \       }\n        }\n\n        // if set is not empty\n        if (!set.Any())\
    \ {\n            // return empty list\n            return new List<long>();\n\
    \        }\n\n        // iterate through each element again\n        foreach (var\
    \ x in set) {\n            // remove element from set\n            set.Remove(x);\n\
    \            // if element has even digits\n            if (x % 2 == 0) {\n  \
    \              // add it to result\n                results.Add(x);\n        \
    \    }\n        }\n\n        // return results\n        return results;", "  \
    \      HashSet<long> set = new HashSet<long>(x);\n        List<long> ret = new\
    \ List<long>();\n        foreach (long item in set) {\n            long sum =\
    \ 0;\n            while (item > 0) {\n                sum = (sum + item % 10)\
    \ % 10;\n                item /= 10;\n            }\n            if (sum % 2 ==\
    \ 0) {\n                ret.Add(item);\n            }\n        }\n        HashSet<long>\
    \ set1 = new HashSet<long>(ret);\n        if (set1.Count != ret.Count) {\n   \
    \         return null;\n        }\n        return ret;", "        // TODO: check\
    \ input for valid numbers\n        List<long> result = new List<long>();\n   \
    \     long currLong;\n        for (long i = 0; i < x.Count; i++) {\n         \
    \   currLong = x[i];\n            if (currLong % 2 == 0) {\n                long\
    \ countDigit = 0;\n                for (long j = i; j < x.Count; j++) {\n    \
    \                countDigit += x[j];\n                }\n                if (countDigit\
    \ % 2 == 0) {\n                    result.Add(currLong);\n                }\n\
    \            }\n        }\n        return result;", "        long m = x.First();\n\
    \        long u = x.Last();\n        long sum = 0;\n        long count = 1;\n\
    \        List<long> result = new List<long>();\n        do {\n            sum\
    \ += count;\n            if (sum == m) {\n                count++;\n         \
    \   }\n            else if (sum > m) {\n                break;\n            }\n\
    \            else {\n                result.Add(m);\n                sum -= m;\n\
    \            }\n            m = u;\n            count = 1;\n            u = x.Last();\n\
    \        } while (sum != m);\n        return result;", "        List<long> ret\
    \ = new List<long>();\n        long l = x.Count;\n        long n = 0;\n      \
    \  for (long i = 0; i < l; i++) {\n            n += x[i];\n            if (n %\
    \ 2 == 0) ret.Add(n);\n            n = n / 2;\n        }\n        return ret;",
  "        List<long> result = new List<long>();\n        \n        foreach(long a\
    \ in x) result.Add(a);\n        \n        for(int i = 0; i < x.Count; i++) {\n\
    \            long n = x[i];\n            while(n > 10) {\n                n /=\
    \ 10;\n                result.Remove(n);\n            }\n        }\n        \n\
    \        return result;", "        int count = x.Count;\n        bool hasEven\
    \ = false;\n        var res = new List<long>();\n        long max = 0;\n     \
    \   for(long i = 0; i < count; i++) {\n            long val = x[i];\n        \
    \    bool even = false;\n            for(int j = (int)Math.Floor(val / 10); j\
    \ > 0; j--) {\n                long remain = val % 10;\n                if(remain\
    \ != 0 && remain % 2 == 0) {\n                    even = true;\n             \
    \       break;\n                }\n                val = val / 10;\n         \
    \   }\n            if(!even) {\n                res.Add(val);\n              \
    \  hasEven = true;\n                max = Math.Max(val, max);\n            }\n\
    \        }\n        if(!hasEven) {\n            return res;\n        }\n     \
    \   while(max > 0) {\n            long curMax = max;\n            int maxDigit\
    \ = 0;\n            for(int i = res.Count - 1; i >= 0; i--) {\n              \
    \  long val = res[i];\n                if(val != 0) {\n                    long\
    \ tmp = (long)Math.Floor(val / 10) * 10;\n                    if(tmp > curMax)\
    \ {\n                        curMax = tmp;\n                        maxDigit =\
    \ i + 1;\n                    }\n                }\n            }\n          \
    \  if(maxDigit != res.Count - 1) {\n                res.Insert(maxDigit + 1, 0);\n\
    \            }\n            max = curMax;\n        }\n        return res;", " \
    \       var result = new List<long>();\n        long temp = 0;\n        for(int\
    \ i = 0; i < x.Count; i++) {\n            temp += x[i];\n            while(temp\
    \ % 2 == 0) {\n                temp = temp >> 1;\n                result.Add(x[i]);\n\
    \            }\n        }\n        return result.OrderBy(o => o).ToList();", " \
    \       List<long> ret = new List<long>();\n        if (x.Count <= 0) return ret;\n\
    \        var evenDigits = new List<long>(x.Count);\n        foreach (var a in\
    \ x) {\n            foreach (var b in x) {\n                if (b == a) continue;\n\
    \                var c = a - b;\n                var e = c % 10;\n           \
    \     c /= 10;\n                if (c == 0) {\n                    if (e % 2 ==\
    \ 0) {\n                        evenDigits.Add(b);\n                    }\n  \
    \              }\n            }\n        }\n        var evenDigitsSorted = evenDigits.OrderBy(e\
    \ => e);\n        foreach (var a in evenDigitsSorted) {\n            if (!ret.Contains(a))\
    \ {\n                ret.Add(a);\n            }\n        }\n        return ret;",
  "        List<long> result = new List<long>();\n        x.Sort();\n        long\
    \ prevNum = 0;\n        long currentNum = x.First();\n        result.Add(currentNum);\n\
    \        while (currentNum != 0) {\n            currentNum /= 10;\n          \
    \  if (currentNum % 2 != 0) {\n                if (currentNum != prevNum) {\n\
    \                    prevNum = currentNum;\n                    result.Add(currentNum);\n\
    \                }\n            }\n            currentNum /= 10;\n        }\n\
    \        return result;", "        // write your code here\n        var result\
    \ = new List<long>();\n        List<long> a = new List<long>();\n        foreach\
    \ (var element in x)\n        {\n            if (a.Contains(element))\n      \
    \      {\n                result.Add(element);\n            }\n            else\n\
    \            {\n                a.Add(element);\n            }\n        }\n  \
    \      return result;", "        if (x.Count == 0) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long currentDigit;\n \
    \       long numDigits;\n        int digitIndex;\n        int i = 0;\n       \
    \ bool isEven;\n\n        do {\n            numDigits = i;\n            digitIndex\
    \ = 0;\n            isEven = false;\n            currentDigit = x.ElementAt(i);\n\
    \            while (digitIndex < numDigits && !isEven) {\n                isEven\
    \ = (currentDigit % 2 == 0);\n                currentDigit = (currentDigit / 10);\n\
    \                digitIndex++;\n            }\n            if (digitIndex == numDigits)\
    \ {\n                result.Add(x.ElementAt(i));\n            }\n            i++;\n\
    \        } while (i < x.Count);\n        return result;", "        var d = new\
    \ List<long>();\n        foreach(var e in x)\n            d.AddRange(x.Where(d\
    \ => d % 10 == 0 && d != e).Select(d => d).OrderBy(d => d));\n        return d;",
  "        var list = new List<long>();\n        var hashSet = new HashSet<long>();\n\
    \        for (int i = 0; i < x.Count; i++) {\n            var number = x[i];\n\
    \            if (number > 0)\n                hashSet.Add(number);\n         \
    \   else\n                list.Add(number);\n        }\n\n        foreach(var\
    \ item in hashSet)\n        {\n            var str = item.ToString();\n      \
    \      var digit = str.Length - 1;\n            var temp = (long)str[digit];\n\
    \            if(hashSet.Contains(temp))\n            {\n                hashSet.Remove(temp);\n\
    \            }\n            else\n            {\n                list.Add(temp);\n\
    \            }\n        }\n        return list;", "        long oddDigits = 0;\n\
    \        long evenDigits = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long y in x)\n        {\n            oddDigits += y % 10;\n\
    \            evenDigits += (long)y / 10;\n        }\n        if (oddDigits % 2\
    \ == 0) // if the odd-digits sum is even, then no odd digit\n        {\n     \
    \       result.AddRange(x);\n        }\n        else // if odd-digits sum is not\
    \ even, then add them to the result\n        {\n            foreach (long y in\
    \ x)\n            {\n                oddDigits -= y % 10;\n                evenDigits\
    \ += (long)y / 10;\n                if (oddDigits % 2 == 0 && evenDigits == 0)\
    \ // add all even digits if there no odd digit\n                {\n          \
    \          result.Add(y);\n                }\n            }\n        }\n     \
    \   return result.OrderBy(x => x).ToList();", "        bool first = true;\n  \
    \      long xx = x.Count == 0 ? 0 : (long)x.First();\n        long xy = xx % 1000;\n\
    \        long xz = xx / 1000;\n        long yy = xy % 1000;\n        long yz =\
    \ xy / 1000;\n        long zz = xz % 1000;\n        long zzz = xz / 1000;\n  \
    \      long fv = yy % 1000;\n        long fz = yy / 1000;\n        long fvz =\
    \ yz % 1000;\n        long fvzz = yz / 1000;\n        long fw = zz % 1000;\n \
    \       long fzw = zz / 1000;\n        long fzwz = zzz % 1000;\n        long fzwzz\
    \ = zzz / 1000;\n        long fww = fw % 1000;\n        long fzww = fw / 1000;\n\
    \        long fzwww = fzw % 1000;\n        long fzwwz = fzw / 1000;\n        long\
    \ fwwww = fww % 1000;\n        long fwwzw = fww / 1000;\n        long fwwwzw =\
    \ fwwww % 1000;\n        long fwwzzw = fwwww / 1000;\n        long fwwwzwz = fwwzw\
    \ % 1000;\n        long fwwwzzw = fwwzw / 1000;\n        long fwwzwwz = fwwzzw\
    \ % 1000;\n        long fwwzzwz = fwwzzw / 1000;\n        long fwwzwwwz = fwwzww\
    \ % 1000;\n        long fwwzwwzw = fwwzwwz % 1000;\n        long fwwzwwwzw = fwwzwwwz\
    \ % 1000;\n        long fwwzwwwzzw = fwwzwwwz / 1000;\n        long fwwzwwzwz\
    \ = fwwzwwwzw % 1000;\n        long fwwzwwzwwwz = fwwzwwwzwz % 1000;\n       \
    \ long fwwzwwzwwwzw = fwwzwwwzzwz % 1000;\n        long fwwzwwzwwzzwz = fwwzwwwzwzz\
    \ % 1000;\n        long fwwzwwzwwwzzwz = fwwzwwwzzwzw % 1000;\n        long fwwzwwzwwzwwwz\
    \ = fwwzwwwzzwwwwz % 1000;\n        ", "        var evenDigits = x.Where(n =>\
    \ n % 2 == 0).ToList();\n        if (evenDigits.Count < 2) return new List<long>();\n\
    \        evenDigits.Sort();\n        List<long> ans = new List<long>();\n    \
    \    long cur = evenDigits[0];\n        bool done = false;\n        do {\n   \
    \         bool match = false;\n            foreach (long n in x) {\n         \
    \       if (n % cur == 0) {\n                    match = true;\n             \
    \       break;\n                }\n            }\n            if (!match) ans.Add(cur);\n\
    \            cur++;\n            done = !match;\n        } while (!done);\n  \
    \      return ans;", "        var dic = new Dictionary<long, long>();\n      \
    \  foreach (var t in x) {\n            long n = (long)t;\n            if (dic.ContainsKey(n))\n\
    \                dic[n] += 1;\n            else\n                dic.Add(n, 1);\n\
    \        }\n        var result = new List<long>();\n        foreach (var v in\
    \ dic)\n            if (v % 2 == 0)\n                result.Add(v);\n        return\
    \ result;", "        if (x.Count < 2)\n            return new List<long>();\n\
    \        var ret = new List<long>();\n        long ans = 1;\n        foreach (var\
    \ item in x) {\n            ans *= item;\n        }\n        long sum = 0;\n \
    \       foreach (var item in x) {\n            sum += item;\n        }\n     \
    \   foreach (var item in x) {\n            long tmp = ans / sum;\n           \
    \ if (tmp % 2 != 0) {\n                ret.Add(item);\n            }\n       \
    \ }\n        return ret;", "        List<long> results = new List<long>();\n \
    \       long n = 1;\n        for (int i = 1; i < x.Count; i++) {\n           \
    \ while (n > 10) {\n                n = n * 10;\n            }\n            if\
    \ (n % 2 == 0) {\n                if (x[i] % 2 == 0) {\n                    results.Add(x[i]);\n\
    \                }\n            }\n            n = n / 10;\n        }\n      \
    \  return results.OrderBy(t => t).ToList();", "        List<long> res = new List<long>();\n\
    \        HashSet<long> noEvenDigit = new HashSet<long>();\n\n        foreach(long\
    \ n in x){\n            if(n%2 != 0) noEvenDigit.Add(n);\n        }\n\n      \
    \  foreach(long n in noEvenDigit){\n            res.Add(n);\n        }\n\n   \
    \     HashSet<long> noEvenDigitSorted = new HashSet<long>(res.OrderBy(c => c));\n\
    \        foreach(long n in noEvenDigitSorted){\n            res.Remove(n);\n \
    \       }\n        return res;", "        Debug.Assert(x.Any());\n        var\
    \ result = new List<long>();\n        foreach (var item in x) {\n            if\
    \ (item % 2 != 0)\n                result.Add(item);\n        }\n        return\
    \ result.OrderBy(item => item).ToList();", "        List<long> ret = new List<long>();\n\
    \        bool flag = false;\n        foreach (var item in x) {\n            int\
    \ y = Convert.ToInt32(Math.Floor(item / Math.Pow(10, item.ToString().Length)));\n\
    \            ret.Add(y);\n            flag = true;\n            while (item !=\
    \ 0) {\n                item = item / 10;\n                for (int i = 0; i <\
    \ ret[ret.Count - 1]; i++) {\n                    ret = ret.Where(z => (z % 10)\
    \ == 0).ToList();\n                    ret.Insert(0, y);\n                   \
    \ flag = true;\n                }\n            }\n        }\n        return flag\
    \ ? ret : new List<long>();", "        // Your code here\n        List<long> result\
    \ = new List<long>();\n        for(int i = 0; i < x.Count - 1; i++) {\n      \
    \      int count = 0;\n            long number = x[i];\n            while(number\
    \ > 0) {\n                count += number % 10;\n                number /= 10;\n\
    \            }\n            result.Add(i);\n            if(count % 2 == 0)\n \
    \               break;\n        }\n        return result;", "        List<long>\
    \ ret = new List<long>();\n        foreach (var item in x) {\n            var\
    \ s = item.ToString();\n            long i = 1;\n            while (i < s.Length)\
    \ {\n                long j = i;\n                for (int k = i; k < s.Length;\
    \ k++) {\n                    char ch = s[k];\n                    if (ch == '0'\
    \ || ch != '2') {\n                        for (int l = 0; l < j; l++) {\n   \
    \                         if (s[l] == ch) break;\n                           \
    \ if (l > i) ret.Add(s[l]);\n                        }\n                     \
    \   break;\n                    }\n                }\n                i++;\n \
    \           }\n        }\n        string sorted = ret.Sort().ToString();\n   \
    \     int start = 0;\n        int end = 0;\n        int len = 0;\n        List<long>\
    \ ret2 = new List<long>();\n        while (!sorted.IsNullOrEmpty()) {\n      \
    \      start = sorted.IndexOf('0', start);\n            end = sorted.IndexOf('0',\
    \ end);\n            len = end - start + 1;\n            ret2.Add(sorted.Substring(start,\
    \ len));\n            sorted = sorted.Substring(end + 1);\n        }\n       \
    \ return ret2;", "        var result = new List<long>();\n        var seen = new\
    \ HashSet<long>();\n        foreach (var num in x) {\n            if (seen.Contains(num))\
    \ {\n                continue;\n            }\n            seen.Add(num);\n  \
    \          Debug.WriteLine(\"Adding to result list\");\n            Debug.WriteLine(\"\
    {0} - {1}\", num, GetDigits(num));\n            result.Add(num);\n        }\n\
    \        Debug.WriteLine(\"Result list: {0}\", result);\n        return result;",
  "        if (x.Count <= 0)\n            return new List<long>();\n        \n   \
    \     // Use hash table to solve this problem\n        var hash = new Hashtable<long,\
    \ List<long>>();\n        foreach (var ele in x)\n        {\n            if (!hash.ContainsKey(ele))\n\
    \                hash[ele] = new List<long>();\n            hash[ele].Add(ele);\n\
    \        }\n        \n        // Sort hash table\n        foreach (var ele in\
    \ hash)\n        {\n            var sorted = hash[ele];\n            sorted.Sort();\n\
    \            \n            // Remove the duplicates\n            var uniques =\
    \ new List<long>();\n            foreach (var ele2 in sorted)\n              \
    \  uniques.Add(ele2);\n            hash[ele] = uniques;\n        }\n\n       \
    \ // Sort final result\n        var result = new List<long>();\n        foreach\
    \ (var ele in hash)\n        {\n            var sorted = hash[ele];\n        \
    \    sorted.Sort();\n            result.AddRange(sorted);\n        }\n       \
    \ \n        return result;", "        HashSet<long> digits = new HashSet<long>();\n\
    \        long even = 0;\n        long odd = 0;\n        List<long> result = new\
    \ List<long>();\n\n        foreach (long digit in x) {\n            if (digits.Contains(digit))\
    \ {\n                even++;\n            }\n            else {\n            \
    \    digits.add(digit);\n                if (even > 0) {\n                   \
    \ result.Add(odd);\n                }\n                even = 1;\n           \
    \     odd = digit;\n            }\n        }\n        if (odd.Equals(0)) {\n \
    \           result.Add(odd);\n        }\n        return result;", "        int[]\
    \ dArray = new int[x.Count];\n        int j = 0;\n        List<long> res = new\
    \ List<long>();\n        foreach (long x in x) {\n            dArray[j] = Convert.ToInt32(x);\n\
    \            int i = Convert.ToInt32(Math.Floor(Math.Log(x, 10)));\n         \
    \   int k;\n            k = Math.Abs(dArray[j] - dArray[i]) % 10;\n          \
    \  if (k == 0)\n                res.Add(x);\n            j++;\n        }\n   \
    \     return res;", "        // sort x\n        x.Sort();\n\n        var result\
    \ = new List<long>();\n        long prevNum = x.First();\n        long nextNum\
    \ = x.First();\n        long digit;\n        while (x.Count > 1) {\n         \
    \   digit = (long)Math.Floor(nextNum / Math.Pow(10, x.Count - 1));\n         \
    \   while (digit % 2 == 0) {\n                result.Add(prevNum);\n         \
    \       digit /= 10;\n            }\n            prevNum = nextNum;\n        \
    \    nextNum = x.Skip(x.Count - 1).First();\n        }\n        result.Add(prevNum);\n\
    \        return result;", "        long total = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in x) {\n            total += i;\n\
    \            long temp = i;\n            while (temp > 0) {\n                temp\
    \ -= total % 10;\n                if (temp % 2 == 0) {\n                    result.Add(temp);\n\
    \                }\n                total /= 10;\n            }\n        }\n \
    \       if (result.Count > 0) {\n            foreach (long i in result) {\n  \
    \              while (i > 10) {\n                    i--;\n                  \
    \  while ((x % i) > 0) {\n                        x--;\n                    }\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (x.Count < 1 || x.Count > 1000000000)\n            return new List<long>();\n\
    \n        var result = new List<long>();\n        var xdigit = x.Select(v => Convert.ToString(v,\
    \ 2).PadLeft(8, '0'))\n            .OrderBy(v => v)\n            .Select(v =>\
    \ Convert.ToLong(v, 2))\n            .ToArray();\n\n        // Count the number\
    \ of same digit.\n        // O(n), O(n)\n        for (var i = 1; i < xdigit.Length;\
    \ i++) {\n            var count = xdigit[i] - xdigit[i - 1];\n            if (count\
    \ > 0)\n                result.Add(xdigit[i - 1]);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long n = 1;\n\
    \        long lastNum = 0;\n        for (int i = 0; i < x.Count; i++) {\n    \
    \        if (x[i] < 10)\n            {\n                lastNum += (long)x[i];\n\
    \            }\n            else\n            {\n                while (lastNum\
    \ >= (long)Math.Pow(10, x[i]))\n                {\n                    lastNum\
    \ -= (long)Math.Pow(10, x[i]);\n                    result.Add(lastNum);\n   \
    \             }\n                lastNum = 0;\n                n++;\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        HashSet<long> set2\
    \ = new HashSet<long>();\n        foreach (var i in x)\n        {\n          \
    \  if (set.Contains(i))\n            {\n                continue;\n          \
    \  }\n            set.Add(i);\n            long s = 0;\n            foreach (var\
    \ j in x)\n            {\n                if (set2.Contains(j))\n            \
    \    {\n                    continue;\n                }\n                if (i\
    \ % j == 0)\n                {\n                    s++;\n                }\n\
    \                else\n                {\n                    s = 0;\n       \
    \         }\n                set.Add(j);\n                set2.Add(j);\n     \
    \       }\n            if (s == 0)\n            {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> ans =\
    \ new List<long>();\n        List<long> digits = new List<long>();\n        long\
    \ tmp;\n        // remove all leading zero\n        foreach (var n in x) {\n \
    \           if (n == 0) continue;\n            tmp = n;\n            while (tmp\
    \ > 0) {\n                digits.Add(tmp % 10);\n                tmp /= 10;\n\
    \            }\n        }\n        // remove all even digits\n        for (int\
    \ i = 0; i < digits.Count; i++) {\n            if (digits[i] % 2 == 0) {\n   \
    \             ans.Add(x[i]);\n            }\n        }\n        return ans;",
  "        List<long> result = new List<long>();\n        long temp;\n        for\
    \ (int i = 0; i < x.Count; i++) {\n            temp = x[i];\n            for (int\
    \ j = i; j < x.Count; j++)\n            {\n                if (x[j] % temp ==\
    \ 0)\n                {\n                    result.Add(x[j]);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        var list = new List<long>();\n        var evenDigit = new long[]{1L};\n\
    \        foreach (var num in x) {\n            var digit = num % 10;\n       \
    \     if (digit % 2 == 0 && digit!=evenDigit.Last()) {\n                list.Add(num);\n\
    \                evenDigit.Add(digit);\n            }\n        }\n        return\
    \ list;", "        List<long> result = new List<long>();\n        long digitCount\
    \ = 0;\n        for (int i = 0; i < x.Count; i++) {\n            long number =\
    \ x[i];\n            if (number % 2 == 0) {\n                result.Add(number);\n\
    \                digitCount++;\n            }\n        }\n        HashSet<long>\
    \ digits = new HashSet<long>();\n        long number = 0;\n        long resultIndex\
    \ = 0;\n        HashSet<long> resultSet = new HashSet<long>();\n        while\
    \ (resultIndex < result.Count) {\n            if (digitCount == 0)\n         \
    \       break;\n            number = result[resultIndex];\n            bool found\
    \ = false;\n            foreach (long number in result) {\n                if\
    \ (number == number * 10)\n                    found = true;\n            }\n\
    \            if (!found)\n                digits.Add(number);\n            resultSet.Add(number);\n\
    \            resultIndex++;\n            digitCount--;\n        }\n        List<long>\
    \ newResult = new List<long>();\n        foreach (long number in digits)\n   \
    \         newResult.Add(number);\n        newResult.AddRange(resultSet);\n   \
    \     newResult.Sort();\n        return newResult;", "        if (x.Count == 0)\
    \ return new List<long>();\n        List<long> result = new List<long>();\n  \
    \      // Sort first before traverse to avoid redundant traversal.\n        x.Sort();\n\
    \        long count = 0;\n        for (long i = 0; i < x.Count; i++) {\n     \
    \       count++;\n            long temp = x[i];\n            // Skip odd digit.\n\
    \            if (temp % 2 == 1)\n                continue;\n            long prev\
    \ = x[i - 1];\n            if (prev % 2 == 1) {\n                result.Add(temp);\n\
    \            } else {\n                // No even digit, skip this number.\n \
    \               result.Add(temp);\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        // Your code here\n        // Solution: Sort\
    \ the list first then check the even digit.\n        x.Sort();\n        List<long>\
    \ result = new List<long>();\n        bool isEven = true;\n        foreach(var\
    \ item in x)\n        {\n            int temp = Convert.ToInt32(item / 10);\n\
    \            if(!isEven)\n            {\n                result.Add(item);\n \
    \           }\n            isEven = !isEven;\n        }\n        return result;",
  "        // TODO: write your code\n        if (x.Count <= 0) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        List<long> xs = new List<long>();\n        // fill\
    \ xs with even number.\n        foreach (long i in x) {\n            if (i % 2\
    \ == 0) {\n                xs.Add(i);\n            }\n        }\n\n        //\
    \ find all even numbers in xs.\n        foreach (long i in xs) {\n           \
    \ bool found = false;\n            foreach (long j in xs) {\n                if\
    \ (j == i) {\n                    found = true;\n                    break;\n\
    \                }\n            }\n            if (!found) {\n               \
    \ set.Add(i);\n            }\n        }\n\n        // add all even numbers in\
    \ set into result.\n        foreach (long i in set) {\n            result.Add(i);\n\
    \        }\n\n        return result;", "        List<long> result = new List<long>();\n\
    \        Dictionary<long, List<long>> dictionary = new Dictionary<long, List<long>>();\n\
    \        foreach (long n in x)\n        {\n            if (!dictionary.ContainsKey(n))\n\
    \            {\n                dictionary.Add(n, new List<long>() { n });\n \
    \           }\n            else\n            {\n                dictionary[n].Add(n);\n\
    \            }\n        }\n        foreach (var pair in dictionary)\n        {\n\
    \            if (pair.Value.Any(i => i % 2 == 0))\n            {\n           \
    \     result.AddRange(pair.Value);\n            }\n        }\n        return result.OrderBy(i\
    \ => i).ToList();", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        long temp = 0;\n        bool flag = false;\n\
    \        foreach (var element in x) {\n            temp = element;\n         \
    \   while (temp != 0) {\n                if (temp % 2 == 0) {\n              \
    \      flag = true;\n                    temp = (long)((double)temp / 2);\n  \
    \                  set.Add(temp);\n                    flag = false;\n       \
    \         }\n                else {\n                    if (flag)\n         \
    \               flag = false;\n                    else\n                    \
    \    temp = (long)((double)temp / 10);\n                }\n            }\n   \
    \         if (!set.Contains(temp))\n                result.Add(temp);\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long curr = 0, tmp = 0;\n        for (long i = x.Count - 1; i >= 0; i--)\
    \ {\n            tmp = x[i];\n            curr = tmp / 10;\n            if (curr\
    \ != 0) {\n                if (result != null && result.Contains(curr) && curr\
    \ % 2 == 0) {\n                    result.Remove(curr);\n                }\n \
    \               else {\n                    result.Add(curr);\n              \
    \  }\n            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach(var item in x) {\n            var str =\
    \ item.ToString();\n            var digits = new HashSet<char>();\n          \
    \  foreach(var digit in str) {\n                digits.Add((char)digit);\n   \
    \         }\n            if(!digits.Contains('0'))\n                result.Add(item);\n\
    \        }\n        return result.OrderBy(c => c).ToList();", "        // TODO:\
    \ Write your code here\n        HashSet<long> set = new HashSet<long>();\n   \
    \     foreach(long x in x)\n        {\n            if (x%2 == 0)\n           \
    \ {\n                if (set.Add(x))\n                {\n                    Console.WriteLine(\"\
    Set added\");\n                }\n                else\n                {\n  \
    \                  Console.WriteLine(\"Set exists\");\n                }\n   \
    \         }\n        }\n        return null;", "        List<long> res = new List<long>();\n\
    \        for (int i = 0; i < x.Count; ++i) {\n            long xInt = x[i];\n\
    \            bool found = false;\n            long curr = 0;\n            for\
    \ (int j = 0; j < i; ++j) {\n                long xInt2 = x[j];\n            \
    \    curr = curr + (xInt % xInt2) * (xInt % xInt2);\n                if (curr\
    \ != 0) {\n                    found = true;\n                    break;\n   \
    \             }\n            }\n            if (!found)\n                res.Add(xInt);\n\
    \        }\n        return res.OrderBy(v => v).ToList();", "        List<long>\
    \ list = new List<long>();\n        Dictionary<long, int> dic = new Dictionary<long,\
    \ int>();\n        long prev = 0;\n        foreach (long k in x) {\n         \
    \   if (!dic.ContainsKey(k)) {\n                dic.Add(k, 1);\n            }\
    \ else {\n                dic[k]++;\n            }\n            if (dic.Values.FirstOrDefault()\
    \ == 2) {\n                list.Add(k);\n            }\n        }\n        return\
    \ list;", "        // write your code here\n        var result = new List<long>();\n\
    \        foreach (var i in x) {\n            if (i % 2 == 0) result.Add(i);\n\
    \        }\n        return result.OrderBy(i => i).ToList();", "        Dictionary<long,\
    \ long> evenDigit = new Dictionary<long, long>();\n        HashSet<long> even\
    \ = new HashSet<long>();\n        foreach (long i in x) {\n            if (i %\
    \ 2 == 0) {\n                even.Add(i);\n            } else {\n            \
    \    long rem = i / 10;\n                if (evenDigit[rem] == 0) {\n        \
    \            evenDigit[rem] = i;\n                } else {\n                 \
    \   evenDigit[rem] += i;\n                }\n            }\n        }\n      \
    \  List<long> result = new List<long>();\n        foreach (long i in even.ToArray())\
    \ {\n            if (evenDigit[i] != 0) {\n                result.Add(i);\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long num1 = x[0];\n        long num2 = x[0];\n  \
    \      long num3 = x[0];\n        long num4 = x[0];\n        long num5 = x[0];\n\
    \        long num6 = x[0];\n        long num7 = x[0];\n        long num8 = x[0];\n\
    \        long num9 = x[0];\n        long num10 = x[0];\n        long num11 = x[0];\n\
    \        long num12 = x[0];\n        long num13 = x[0];\n        long num14 =\
    \ x[0];\n        long num15 = x[0];\n        long num16 = x[0];\n        long\
    \ num17 = x[0];\n        long num18 = x[0];\n        long num19 = x[0];\n    \
    \    long num20 = x[0];\n        long num21 = x[0];\n        long num22 = x[0];\n\
    \        long num23 = x[0];\n        long num24 = x[0];\n        long num25 =\
    \ x[0];\n        long num26 = x[0];\n        long num27 = x[0];\n        long\
    \ num28 = x[0];\n        long num29 = x[0];\n        long num30 = x[0];\n    \
    \    long num31 = x[0];\n        long num32 = x[0];\n        long num33 = x[0];\n\
    \        long num34 = x[0];\n        long num35 = x[0];\n        long num36 =\
    \ x[0];\n        long num37 = x[0];\n        long num38 = x[0];\n        long\
    \ num39 = x[0];\n        long num40 = x[0];\n        long num41 = x[0];\n    \
    \    long num42 = x[0];\n        long num43 = x[0];\n        long num44 = x[0];\n\
    \        long num45 = x[0];\n        long num46 = x[0];\n        long num47 =\
    \ x[0];\n        long num48 = x[0];\n        long num49 = x[0];\n        long\
    \ num50 = x[0];\n        long num51 = x[0];\n        long num52 = x[0];\n    \
    \    long num53 = x[0];\n        long num54 = x[0];\n        long num55 = x[0];\n\
    \        long num56 = x[0];\n        long num57 = x[0];\n        long num58 =\
    \ x[0];\n        long num59 = x[0];\n        long num60 = x[0];\n        long\
    \ num61 = x[0];\n        long num62 = x[0];\n        long num63 = x[0];\n    \
    \    long num64 = x[0];\n        long num65 = x[0];\n        long num66 = x[0];\n\
    \        long num67 = x[0];\n        long num68 = x[0];\n        long num69 =\
    \ x[0];\n        long num70 = x[0];", "        var result = new List<long>();\n\
    \        long temp;\n        foreach(var item in x) {\n            temp = item;\n\
    \            while(item != 0) {\n                if(item % 2 == 0) {\n       \
    \             result++;\n                    break;\n                }\n     \
    \           item /= 10;\n            }\n        }\n        return result.OrderBy(item\
    \ => item).ToList();", "        int n = x.Count;\n        if (n < 1) return new\
    \ List<long>();\n        List<long> ans = new List<long>();\n        \n      \
    \  long evenDigits = 0;\n        \n        // Step 1. Check all possible combinations\
    \ of evenDigits.\n        // If every combination's length is equal to n, then\
    \ we can add it to ans\n        foreach(long i in x) {\n            long tempEvenDigits\
    \ = Convert.ToInt64(i) % 10;\n            if (tempEvenDigits == 0) evenDigits++;\n\
    \            \n            if (evenDigits == n) {\n                ans.Add(i);\n\
    \                break;\n            }\n        }\n        \n        // Step 2.\
    \ Remove every combination that has even digits\n        ans.RemoveAll(i => (Convert.ToInt64(i)\
    \ % 10) == 0);\n        \n        return ans;", "        var results = new List<long>();\n\
    \        foreach (var item in x) {\n            bool isEven = false;\n       \
    \     foreach (var c in item.ToString().ToCharArray()) {\n                if (c\
    \ == '0') {\n                    isEven = !isEven;\n                } else {\n\
    \                    break;\n                }\n            }\n            if\
    \ (!isEven) {\n                results.Add(item);\n            }\n        }\n\
    \        return results.OrderBy(a => a).ToList();", "        var result = new\
    \ List<long>();\n        foreach(var num in x)\n            if((num % 2) == 0)\n\
    \                result.Add(num);\n        return result;", "        if (x.Count\
    \ == 0)\n            return null;\n\n        var ans = new List<long>();\n   \
    \     var seen = new HashSet<long>();\n        for (int i = 0; i < x.Count; i++)\
    \ {\n            var digit = x % 10;\n            if (seen.Contains(digit))\n\
    \                continue;\n            seen.Add(digit);\n            ans.Add(digit);\n\
    \            x /= 10;\n        }\n        return ans;", "        List<long> result\
    \ = new List<long>();\n        bool hasEvenDigit = false;\n        // First sort\
    \ the list from small to big\n        var ordered = x.OrderBy(i => i);\n     \
    \   foreach (long i in ordered) {\n            while (i != 0) {\n            \
    \    bool found = false;\n                for (int j = 0; j < i; j++) {\n    \
    \                if (!hasEvenDigit) {\n                        if (i % j == 0)\
    \ {\n                            hasEvenDigit = true;\n                      \
    \      found = true;\n                            break;\n                   \
    \     }\n                    }\n                    else {\n                 \
    \       if (i % j == 0) {\n                            found = true;\n       \
    \                     break;\n                        }\n                    }\n\
    \                }\n                if (!found) {\n                    result.Add(i);\n\
    \                    break;\n                }\n                i = i / 10;\n\
    \            }\n        }\n        return result;", "        if (x.Count == 0)\
    \ {\n            return new List<long>();\n        }\n        HashSet<long> set\
    \ = new HashSet<long>();\n        foreach (var i in x) {\n            if (i >\
    \ 0) {\n                long s = i % 10;\n                if (!set.Contains(s))\
    \ {\n                    set.Add(s);\n                }\n            }\n     \
    \   }\n        return new List<long>(set);", "        var list = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (var item in\
    \ x) {\n            list.Add(item);\n            set.Add(item);\n        }\n \
    \       var tmp = new List<long>();\n        foreach (var item in list) {\n  \
    \          if (!set.Contains(item)) {\n                tmp.Add(item);\n      \
    \      }\n        }\n        return tmp;", "        List<long> ans = new List<long>();\n\
    \        HashSet<long> unique = new HashSet<long>();\n        List<long> odd =\
    \ new List<long>();\n        foreach (long i in x) {\n            if (unique.Contains(i))\n\
    \                continue;\n            odd.Add(i);\n            unique.Add(i);\n\
    \            bool isEven = true;\n            while (isEven) {\n             \
    \   isEven = odd.All(d => d % 2 == 0);\n                if (isEven)\n        \
    \            break;\n                long digit = i / 10;\n                if\
    \ (unique.Contains(digit))\n                    isEven = true;\n             \
    \   else\n                    unique.Add(digit);\n            }\n            ans.AddRange(odd);\n\
    \        }\n        return ans;", "        List<long> result = new List<long>();\n\
    \        if (x.Count == 0) return result;\n        long oneDigitSum = x.Sum(n\
    \ => n % 10);\n        if (oneDigitSum != 0) return result;\n\n        // find\
    \ all the elements that has at least one digit divisible by 2.\n        // for\
    \ example the number: {1, 13, 21, 10}\n        // the element: {10, 13, 21, 1}\n\
    \        // The result will be {1, 13, 10}\n        HashSet<long> evenDigit =\
    \ new HashSet<long>();\n        foreach (long n in x)\n            if (n % 2 ==\
    \ 0) evenDigit.Add(n);\n\n        // for each element that is not an even number,\
    \ find all its \n        // digits that has at least one divisible by 2. \n  \
    \      // For example, 10 will be {1, 3}, 13 = {1, 3} \n        // The result\
    \ will be {13, 10}\n        foreach (long n in x)\n            if (!evenDigit.Contains(n))\
    \ \n                for (int i = 0; i < 10; i++)\n                    if (n %\
    \ i == 0) \n                        evenDigit.Add(n);\n\n        // finally, we\
    \ get all the even number elements that has not \n        // any digit divisible\
    \ by 2, sort the list and then return it.\n        result.AddRange(evenDigit).Sort();\n\
    \        return result;", "        if (x.Count == 0)\n            return new List<long>();\n\
    \        var result = new List<long>();\n        // sort list in increasing order.\n\
    \        x.Sort();\n\n        // count every single digit \n        var digit\
    \ = new int[x.Count];\n        long count = 0;\n        for (int i = 0; i < x.Count;\
    \ i++) {\n            count = (count * 10) + x[i];\n            digit[x[i]]++;\n\
    \        }\n        for (int i = 0; i < x.Count; i++) {\n            if (digit[x[i]]\
    \ % 2 == 0) {\n                result.Add(x[i]);\n            }\n        }\n \
    \       return result;", "        // use System.Numerics.BigInteger to increase\
    \ performance\n        var result = new List<long>();\n        BigInteger b =\
    \ 0;\n        // use BigInteger to handle large number\n        foreach (var n\
    \ in x)\n        {\n            b += 1L;\n            BigInteger c = b + 1;\n\
    \            // if number has odd digit, add it to result\n            if (n %\
    \ c == 0L)\n            {\n                result.Add(n);\n            }\n   \
    \     }\n        \n        return result;", "        List<long> result = new List<long>();\n\
    \        long temp;\n        for (int i = 0; i < x.Count; i++) {\n           \
    \ temp = x[i];\n            for (int j = i + 1; j < x.Count; j++) {\n        \
    \        if (x[i] != 0 && x[j] != 0 && x[j] % 2 == 0) {\n                    if\
    \ (x[i] < x[j])\n                        temp = x[j];\n                    else\n\
    \                        temp = x[i];\n                    break;\n          \
    \      }\n            }\n            result.Add(temp);\n        }\n        return\
    \ result;", "        // Your code here\n        HashSet<long> result = new HashSet<long>();\n\
    \        for (int i = 0; i < x.Count; i++) {\n            long item = x[i];\n\
    \            while (item > 0) {\n                long remain = item % 10;\n  \
    \              if (remain % 2 == 0) {\n                    result.Add(item);\n\
    \                }\n                item = item / 10;\n            }\n       \
    \ }\n        return result.OrderBy(i => i).ToList();", "        List<long> ret\
    \ = new List<long>();\n        if (x.Count <= 0) {\n            return ret;\n\
    \        }\n        long max = x[0];\n        for (int i = 0; i < x.Count; i++)\
    \ {\n            if (x[i] > max) {\n                max = x[i];\n            }\n\
    \        }\n        HashSet<long> tmpSet = new HashSet<long>();\n        for (int\
    \ i = 0; i < x.Count; i++) {\n            if (x[i] % 2 == 0) {\n             \
    \   continue;\n            }\n            tmpSet.Add(x[i]);\n        }\n     \
    \   for (int i = 0; i < tmpSet.Count; i++) {\n            ret.Add(tmpSet.ElementAt(i));\n\
    \        }\n        return ret;", "        if (x.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        var result = new List<long>();\n     \
    \   var last = new long();\n        foreach (var element in x) {\n           \
    \ last = element;\n            while (element > 10) {\n                if (element\
    \ % 2 == 0) {\n                    result.Add(element);\n                    break;\n\
    \                }\n                element = element / 10;\n            }\n \
    \       }\n        if (result.Count > 0 && last == 10) {\n            result.Add(last);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long n = x.Count;\n        long even = n % 2 == 0 ? n / 2 : 0;\n    \
    \    for(long i = 0; i < n; i++) {\n            long current = x[i];\n       \
    \     while(current % 2 == 0 && current != even) {\n                result.Add(current);\n\
    \                current /= 2;\n            }\n        }\n        return result;",
  "        List<long> res = new List<long>();\n        long lastVal = 0;\n       \
    \ long evens = 0;\n        for (int i = 0; i < x.Count; i++) {\n            long\
    \ curVal = x[i];\n            evens = 0;\n            while (curVal != 0) {\n\
    \                if (curVal % 2 == 0) {\n                    evens++;\n      \
    \          }\n                curVal /= 10;\n            }\n            if (evens\
    \ > 1) {\n                res.Add(x[i]);\n            }\n            lastVal =\
    \ x[i];\n        }\n        return res.OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        // First we check all numbers that have\
    \ only digits, we add them to the result.\n        bool isEven = false;\n    \
    \    bool isDigit = true;\n        bool isLast = false;\n        foreach (long\
    \ num in x) {\n            if (isEven == true && num % 2 == 0) {\n           \
    \     result.Add(num);\n                isDigit = true;\n                isEven\
    \ = false;\n                isLast = true;\n            }\n            if (num\
    \ % 2 != 0) {\n                result.Add(num);\n                isDigit = false;\n\
    \            }\n            if (isDigit == true) {\n                isEven = true;\n\
    \            }\n            if (isLast == true && num == 0) isLast = false;\n\
    \        }\n        Console.WriteLine(\"Unique digits \" + string.Join(\", \"\
    , result));\n        return result;", "        long res = 0;\n        HashSet<long>\
    \ hs = new HashSet<long>();\n        foreach (long e in x) {\n            if (hs.Contains(e))\
    \ {\n                res = e;\n            } else {\n                hs.Add(e);\n\
    \            }\n        }\n        if (res == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> ls = new List<long>();\n        List<long> evens\
    \ = new List<long>();\n        while (hs.Count != 0) {\n            long e = 0;\n\
    \            if (hs.Contains(res)) {\n                e = res;\n            }\
    \ else {\n                e = hs.Min();\n                evens.Add(e);\n     \
    \           hs.Remove(e);\n            }\n            ls.Add(e);\n           \
    \ evens.Remove(e);\n        }\n        List<long> finalList = new List<long>();\n\
    \        ls.ForEach(x => finalList.Add(x));\n        evens.ForEach(x => finalList.Add(x));\n\
    \        return finalList;", "        if (x.Count == 0) return new List<long>();\n\
    \        List<long> ans = new List<long>();\n        ans.AddRange(x.Take(x.Count\
    \ / 2));\n        int size = x.Count / 2;\n        long a = x[0];\n        long\
    \ b = x[1];\n        long lastAdded = b;\n        for (int i = 2; i < size; i++)\
    \ {\n            if (b == lastAdded) {\n                ans.Add(lastAdded);\n\
    \                lastAdded = b;\n                i++;\n            }\n       \
    \     bool hasDig = false;\n            for (int j = 0; j < ans.Count; j++) {\n\
    \                long temp;\n                temp = Convert.ToInt64(ans[j]);\n\
    \                if (temp % 2 == 0) {\n                    hasDig = true;\n  \
    \                  break;\n                }\n            }\n            if (!hasDig)\
    \ {\n                ans.Add(b);\n            }\n            lastAdded = b;\n\
    \            b = x[i];\n        }\n        return ans;", "        // base case\n\
    \        if (x.Count == 0) return new List<long>();\n        if (x.Count == 1)\
    \ return x.OrderBy(i => i).ToList();\n\n        var ans = new List<long>();\n\n\
    \        // Recursive call\n        ans.AddRange(UniqueDigits(x.Where(i => i %\
    \ 2 == 0)));\n\n        // Add all odd digits to ans\n        var odd = x.Where(i\
    \ => i % 2 != 0);\n        ans.AddRange(odd.OrderBy(i => i).ToList());\n\n   \
    \     return ans;", "        int l = x.Count;\n        List<long> answer = new\
    \ List<long>();\n        List<long> temp = new List<long>();\n        for (int\
    \ i = 0; i < l; i++) {\n            if (x[i] % 2 == 0) {\n                temp.Add(x[i]);\n\
    \            }\n        }\n        if (temp.Count > 0) {\n            answer.AddRange(temp.Distinct().OrderBy(i\
    \ => i).ToList());\n        }\n        return answer;", "        // Your code\
    \ goes here\n        \n        List<long> res = new List<long>();\n        \n\
    \        long temp = 0;\n        for(int i = 1; i < x.Count; i++) {\n        \
    \    if(x[i] % 2 != 0) {\n                temp += x[i];\n                res.Add(temp);\n\
    \                temp = 0;\n            }\n        }\n        return res;", " \
    \       List<long> ret = new List<long>();\n        foreach (long num in x)\n\
    \        {\n            long temp = 0;\n            int n = num.ToString().Length;\n\
    \            for (int i = 0; i < n; i++)\n            {\n                temp\
    \ = temp * 10 + num.ToString()[i];\n            }\n            if (temp % 2 ==\
    \ 0)\n            {\n                ret.Add(num);\n            }\n        }\n\
    \        return ret;", "        List<long> ret = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in x) {\n            if\
    \ (set.Contains(i)) {\n                continue;\n            }\n            set.Add(i);\n\
    \            int count = 0;\n            while (count < i) {\n               \
    \ count += i / 10;\n            }\n            ret.Add((count + i));\n       \
    \ }\n        return ret;", "        // return new List<long>();\n        if (x.Count\
    \ < 1) {\n            return new List<long>();\n        }\n        var result\
    \ = new List<long>();\n        foreach(var num in x) {\n            bool isEven\
    \ = true;\n            for(var i = 0; i < num.ToString().Length; i++) {\n    \
    \            if (num % 10 == 0 && num.ToString()[i] % 2 == 0) {\n            \
    \        isEven = false;\n                    break;\n                }\n    \
    \        }\n            if (isEven) {\n                result.Add(num);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        List<long> unevenList = new List<long>();\n        long\
    \ tmp, even = 0;\n\n        foreach (long i in x) {\n            unevenList.Add(i);\n\
    \        }\n\n        foreach (long i in unevenList) {\n            tmp = (i *\
    \ i) % 11;\n            even = (tmp * tmp) % 11;\n\n            if (even == 0)\
    \ {\n                result.Add(i);\n            }\n        }\n\n        foreach\
    \ (long i in result) {\n            unevenList.Remove(i);\n        }\n       \
    \ return unevenList;", "        if (x.Count == 0)\n            return new List<long>();\n\
    \        \n        var digits = new HashSet<long>(x.Select(v => Convert.ToInt64(v)).Distinct().ToArray());\n\
    \n        // first sort list\n        x.Sort();\n\n        // then remove all\
    \ number with even digit\n        while (digits.Count > 0) {\n            if (x.Contains((long)digits.Single()))\n\
    \                digits.Remove((long)digits.Single());\n            else\n   \
    \             break;\n        }\n\n        // now remove all digits which doesn't\
    \ have any even digit\n        return x.Where(val => !digits.Contains(Convert.ToInt64(val)))\n\
    \            .Distinct()\n            .OrderBy(val => val)\n            .ToList();",
  "        var results = new List<long>();\n        foreach (var y in x) {\n     \
    \       bool evenDigit = false;\n            foreach (var z in x) {\n        \
    \        if (z > y) {\n                    evenDigit = true;\n               \
    \     break;\n                }\n            }\n            if (!evenDigit) {\n\
    \                results.Add(y);\n            }\n        }\n        return results;",
  "        HashSet<long> set = new HashSet<long>(); // HashSet<> will automatically\
    \ remove duplicates\n        List<long> ans = new List<long>();\n        foreach\
    \ (long i in x) {\n            if (i.ToString().All(char.IsDigit)) {\n       \
    \         if (!set.Contains(i)) { // not all digits are even digit\n         \
    \           set.Add(i);\n                    ans.Add(i);\n                }\n\
    \            }\n        }\n        return ans;", "        var result = new List<long>();\n\
    \        long num = x.Min();\n        while (num != 0) {\n            var y =\
    \ num % 10;\n            if (y % 2 == 0)\n                result.Add(num);\n \
    \           num = num / 10;\n        }\n        return result;", "        long\
    \ digits = 0;\n        long result = 0;\n        foreach (long n in x) {\n   \
    \         digits = (n * n) % 10;\n            result = result * 10 + digits;\n\
    \        }\n        List<long> results = new List<long>();\n        long temp\
    \ = 0;\n        while (result != 0) {\n            temp = (result % 10) * 10;\n\
    \            if (temp == 0) {\n                temp = result % 10;\n         \
    \   }\n            if (temp % 2 == 0) {\n                results.Add(temp);\n\
    \            }\n            result = result / 10;\n        }\n        results\
    \ = results.Distinct().OrderBy(i => i).ToList();\n        return results;", " \
    \       var result = new List<long>();\n        List<long> result = new List<long>();\n\
    \        var set = new HashSet<long>();\n        foreach (var number in x) {\n\
    \            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        Console.WriteLine(\"\
    The result is: \" + result);\n        return result;", "        var digits = new\
    \ List<long>();\n        var ans = new List<long>();\n        long temp;\n   \
    \     foreach (var num in x) {\n            temp = 0;\n            while (num\
    \ != 0) {\n                temp *= 10;\n                temp += num % 10;\n  \
    \              num /= 10;\n            }\n            digits.Add(temp);\n    \
    \    }\n        foreach (var d in digits) {\n            if (d % 2 == 0) {\n \
    \               ans.Add(d);\n            }\n        }\n        ans.Sort();\n \
    \       return ans;", "        // Your code goes here\n        var result = new\
    \ List<long>();\n        foreach (long n in x)\n        {\n            if (n %\
    \ 2 == 0)\n            {\n                if (result.Contains(n))\n          \
    \      {\n                    continue;\n                }\n                else\n\
    \                {\n                    result.Add(n);\n                }\n  \
    \          }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       // Write your code here\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < x.Count - 1; i++)\n        {\n            long y\
    \ = x[i];\n            for (int j = i + 1; j < x.Count; j++)\n            {\n\
    \                long z = x[j];\n                bool isEven = false;\n      \
    \          while (z != 0)\n                {\n                    isEven = z &\
    \ 1 == 0;\n                    z >>= 1;\n                }\n                if\
    \ (!isEven)\n                {\n                    result.Add(y);\n         \
    \           break;\n                }\n            }\n        }\n        return\
    \ result;", "        // If length of list is zero, return empty list.\n      \
    \  if (x.Count == 0)\n            return new List<long>();\n\n        // Add first\
    \ element to result list.\n        var result = new List<long>();\n        result.Add(x.First());\n\
    \n        // Iterate through list from second element.\n        for (int i = 1;\
    \ i < x.Count; i++) {\n            // Check current element is even or odd.\n\
    \            if ((x[i - 1] % 2) == 0)\n                continue;\n           \
    \ // If current element is not even and not first element, then\n            //\
    \ add it to result list.\n            if (i != 1)\n                result.Add(x[i]);\n\
    \        }\n        return result;", "        long counter = 0;\n        List<long>\
    \ ans = new List<long>();\n        foreach (long el in x) {\n            while\
    \ (el / 2 > 0) {\n                counter += 1;\n                el = el / 2;\n\
    \            }\n            if (el % 2 == 0) {\n                ans.Add(el);\n\
    \            }\n        }\n        return ans;", "        long[] arr = x.ToArray();\n\
    \        List<long> res = new List<long>();\n        HashSet<long> hash = new\
    \ HashSet<long>();\n        for (int i = 0; i < arr.Length; i++) {\n         \
    \   if (!hash.Contains(arr[i])) {\n                hash.Add(arr[i]);\n       \
    \         res.Add(arr[i]);\n            }\n        }\n        return res.OrderBy(o\
    \ => o).ToList();"]
stop_tokens:
- "\n    }\n"
