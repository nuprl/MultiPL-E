language: cs
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Array.Sort(arr);\n        var res =
    new List<long>();\n        var maxPos = arr.Count - 1;\n        while (maxPos
    >= k) {\n            res.Insert(maxPos, arr[maxPos]);\n            maxPos -= 1;\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn_5h4oy2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Dictionary<long, long> dict = new Dictionary<long,
    long>();\n        foreach (var item in arr)\n        {\n            long max =
    0;\n            if (dict.TryGetValue(item, out max))\n            {\n                if
    (max < 0)\n                    max = -max;\n                if (max > k)\n                {\n
    \                   dict.Add(item, max);\n                }\n            }\n            else\n
    \           {\n                dict.Add(item, item);\n            }\n        }\n
    \       return dict.Values.ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7312f43b727342599308f82342ccc1c1>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key
    has already been added. Key: 4\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert
    (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64 k)
    [0x00046] in <7312f43b727342599308f82342ccc1c1>:0 \n  at Problem.Main (System.String[]
    args) [0x00055] in <7312f43b727342599308f82342ccc1c1>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentException: An item with the same key has already been
    added. Key: 4\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert
    (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64"
  stdout: ''
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int size = arr.Count;\n        List<long>
    result = new List<long>();\n        long max = -Long.MaxValue;\n        long min
    = -Long.MaxValue;\n        long cur = 0;\n        for (long i = 0; i < size; i++)
    {\n            cur += arr[i];\n            if (cur > max) {\n                max
    = cur;\n            }\n            else if (cur < min) {\n                min
    = cur;\n            }\n        }\n        if (max > k) {\n            result.Add(k);\n
    \       }\n        if (min == Long.MinValue) {\n            result.Add(k);\n        }\n
    \       if (min >= k) {\n            min = k - 1;\n        }\n        result.Add(min);\n
    \       result.AddRange(arr.Skip(1).Take(Math.Max(Math.Min(size - k, k), 1)));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnt0qs3r3.cs(27,21): error CS0103: The name ''Long'' does not exist in
    the current context

    /tmp/tmpnt0qs3r3.cs(28,21): error CS0103: The name ''Long'' does not exist in
    the current context

    /tmp/tmpnt0qs3r3.cs(31,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnt0qs3r3.cs(42,20): error CS0103: The name ''Long'' does not exist in
    the current context

    /tmp/tmpnt0qs3r3.cs(49,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> answer = new List<long>();\n
    \       if (arr.Count < k) {\n            throw new ArgumentException(\"The list
    size must be greater than or equal to the given key.\");\n        }\n        if
    (k > arr.Count) {\n            throw new ArgumentException(\"The given key must
    be less than or equal to the list size.\");\n        }\n        Array.Sort(arr);\n
    \       answer.AddRange(arr.Take(k));\n        return answer;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx1s_2gw2.cs(32,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpx1s_2gw2.cs(33,34): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long maxVal = arr.First();\n        List<long>
    result = new List<long>();\n        foreach(long val in arr.Skip(1)){\n            if(val
    >= maxVal){\n                result.Add(val);\n            }else if(val < maxVal){\n
    \               maxVal = val;\n                result.Add(maxVal);\n            }else
    if(k == 1){\n                break;\n            }else if(val >= maxVal + k){\n
    \               maxVal += k;\n                result.Add(maxVal);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc38d7ceeff4431a9bff6fc69905991e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc38d7ceeff4431a9bff6fc69905991e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0)\n            return arr;\n
    \       long curMax = arr.Max();\n        if (curMax == 0)\n            return
    arr;\n        long maxIndex = -1;\n        List<long> maxList = new List<long>();\n
    \       long curSum = 0;\n        for (long i = 0; i < arr.Count; i++) {\n            long
    cur = arr[i];\n            curSum += cur;\n            if (curSum > curMax) {\n
    \               maxList.Add(cur);\n                maxIndex = i;\n                curSum
    -= curMax;\n                if (maxIndex == k)\n                    break;\n                curMax
    = arr[maxIndex];\n            }\n        }\n        return maxList;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5cw3voh9.cs(34,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5cw3voh9.cs(42,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n            throw
    new ArgumentException(\"k\", \"k must be less than or equal to the length of arr\");\n
    \       }\n\n        long[] nums = new long[k];\n        long[] maxs = new long[k];\n
    \       long[] tmp = new long[k];\n\n        for (int i = 0; i < nums.Length;
    i++) {\n            nums[i] = arr[i];\n            maxs[i] = nums[i];\n        }\n\n
    \       for (int i = nums.Length; i < k; i++) {\n            tmp[i - nums.Length]
    = maxs[i - 1];\n        }\n\n        int index = 0;\n        long tmpMax = tmp[0];\n
    \       for (int i = 0; i < k; i++) {\n            if (tmp[i] > tmpMax) {\n                tmpMax
    = tmp[i];\n                index = i;\n            }\n        }\n\n        nums[index]
    = Math.Abs(tmpMax);\n        for (int i = index + 1; i < k; i++) {\n            nums[i]
    = Math.Max(nums[i - 1], nums[i]);\n        }\n\n        List<long> res = new List<long>(k);\n
    \       for (int i = 0; i < k; i++) {\n            res.Add(nums[i]);\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq9gh9f37.cs(56,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var n = arr.Count;\n        if (k >
    n) {\n            k = n;\n        }\n        var result = new List<long>();\n
    \       var maxVal = arr[0];\n        long maxIndex = -1;\n        for (int i
    = 1; i < k; i++) {\n            long curr = arr[i];\n            if (curr > maxVal)
    {\n                maxVal = curr;\n                maxIndex = i;\n            }\n
    \       }\n        while (maxIndex > 0) {\n            result.Add(maxVal);\n            maxIndex--;\n
    \           maxVal = arr[maxIndex];\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw2ozn5o_.cs(42,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var ans = new List<long>();\n        if
    (k <= 0 || arr.Count < k) {\n            return ans;\n        }\n\n        var
    count = arr.Count;\n\n        var index = 0;\n        for (long i = 0; i < count
    - 1; ++i) {\n            while (index < count - 1 && arr[index] >= arr[index +
    1]) {\n                ++index;\n            }\n\n            if (index == count
    - 1) {\n                ans.Add(arr[i]);\n            } else {\n                var
    max = arr[index];\n                arr[index] = arr[i + 1];\n                arr[i
    + 1] = max;\n                ++index;\n            }\n        }\n\n        while
    (index < count && arr[index] >= k) {\n            ++index;\n        }\n        ans.AddRange(arr.GetRange(index,
    count - index));\n\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpru3zcm0s.cs(39,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpru3zcm0s.cs(42,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpru3zcm0s.cs(43,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count() < k) {\n            return
    new List<long>();\n        }\n        var max = new List<long>();\n        //
    sort the array\n        Array.Sort(arr);\n        // get the max nums\n        max
    = arr.Take(k).ToList();\n        // remove the same nums\n        var arr2 = arr.Skip(arr.FindIndex((x)
    => x == max[0])).ToList();\n        return arr2.ToList();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9d1j_63b.cs(30,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp9d1j_63b.cs(32,24): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       if (k == 0) return result;\n        int left = 0, right = arr.Count -
    1;\n        long max = arr[0];\n        while (left < right) {\n            while
    (left < right && arr[left] >= max) left++;\n            while (left < right &&
    arr[right] <= max) right--;\n            if (left > right) break;\n            max
    = Math.Max(max, arr[left]);\n            max = Math.Max(max, arr[right]);\n            result.Add(max);\n
    \           left += right - left + 1;\n            right -= left + 1;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06fe06778d584c10ab36fee3be217c65>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06fe06778d584c10ab36fee3be217c65>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        long[] s = new
    long[k];\n        for (int i = 0; i <= arr.Count - 1; i++) {\n            s[i]
    = arr[i].ToString();\n            max = Math.Max(max, Convert.ToInt64(s[i]));\n
    \       }\n        for (int i = 0; i <= k - 1; i++) {\n            s[i] = max;\n
    \       }\n        string ret = \"\";\n        foreach (var e in s) {\n            ret
    += e.ToString() + \", \";\n        }\n        return new List<long>(ret.Split(',').OrderByDescending(s
    => s).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmgk3n080.cs(28,20): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    /tmp/tmpmgk3n080.cs(38,31): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = 0;\n        bool flag =
    false;\n        int n = arr.Count;\n        for (int i = 0; i <= n; i++) {\n            if
    (arr[i] > max)\n                max = arr[i];\n        }\n        List<long> arr
    = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i]
    > max)\n                arr.Add(arr[i]);\n            else {\n                flag
    = true;\n                arr.Add(max);\n            }\n        }\n        if (flag
    == true)\n            arr.Add(max);\n        if (arr.Count < k) {\n            for
    (int i = arr.Count - 1; i >= k; i--)\n                arr.Add(0);\n        }\n
    \       List<long> result = new List<long>();\n        for (int i = 0; i < k;
    i++)\n            result.Add(arr[i]);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdc148s8t.cs(27,17): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpdc148s8t.cs(27,21): error CS0428: Cannot convert method group ''Count''
    to non-delegate type ''int''. Did you intend to invoke the method?

    /tmp/tmpdc148s8t.cs(29,17): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpdc148s8t.cs(30,23): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpdc148s8t.cs(32,20): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var list = new List<long>();\n        if
    (arr == null || arr.Count < 1)\n            return list;\n        long l = arr.First();\n
    \       long max = l;\n        arr.Remove(l);\n        var sorted = new List<long>();\n
    \       while (arr.Count > 0) {\n            sorted.Add(max);\n            max
    = Math.Max(max, arr.First());\n            arr.Remove(max);\n        }\n        sorted.Add(max);\n
    \       sorted.Sort();\n        int count = 0;\n        bool flag = false;\n        foreach
    (var i in sorted) {\n            if (count < k) {\n                if (i < sorted[count])\n
    \                   count++;\n            } else {\n                flag = true;\n
    \               break;\n            }\n        }\n        if (flag)\n            list
    = sorted.Take(k - 1).ToList();\n        else\n            list.AddRange(sorted.Take(k
    - 1).ToList());\n        return list;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0esk_yo7.cs(51,32): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp0esk_yo7.cs(53,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        HashSet<long> nums = new HashSet<long>();\n
    \       List<long> max = new List<long>(new long[arr.Count]);\n        long largest
    = arr[0];\n        long current;\n        long min;\n        long mid;\n        for
    (int i = 1; i < arr.Count; i++) {\n            current = arr[i];\n            min
    = arr[0];\n            mid = current / 2;\n            if (mid > 1) {\n                min
    = mid;\n            }\n            nums.Add(current);\n            if (nums.Count
    >= k) {\n                current = Math.Max(current, min);\n            }\n            if
    (current > largest) {\n                largest = current;\n            }\n        }\n
    \       foreach (long num in nums) {\n            max.Add(num);\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe6b61b4f2a64af98096ebdb6a42e6c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe6b61b4f2a64af98096ebdb6a42e6c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var res = arr.GetRange(0, k).OrderByDescending(i
    => i).ToList();\n        while (k <= res.Count) {\n            k = k + 1;\n            res
    = res.GetRange(0, k).OrderByDescending(i => i).ToList();\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeo1zc5co.cs(25,35): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpeo1zc5co.cs(28,35): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // write your code here\n        List<long>
    result = new List<long>(arr.Count);\n        List<long> sorted = new List<long>(k);\n
    \       long max = 0;\n        for (long i : arr) {\n            sorted.Add(i);\n
    \           if (max < i) {\n                max = i;\n            }\n        }\n
    \       long len = k;\n        if (sorted.Count != k) {\n            len = sorted.Count;\n
    \       }\n        if (k == sorted.Count) {\n            long cur = sorted[0];\n
    \           for (int i = 1; i < len; i++) {\n                if (sorted[i] < cur)
    {\n                    cur = sorted[i];\n                }\n            }\n            result.Add(cur);\n
    \       } else if (k == sorted.Count - 1) {\n            for (int i = 0; i < len;
    i++) {\n                if (sorted[i] > sorted[i + 1]) {\n                    result.Add(sorted[i]);\n
    \               }\n            }\n        } else {\n            for (int i = 0;
    i < len; i++) {\n                result.Add(sorted[i]);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprgt2ap1k.cs(29,21): error CS1002: ; expected

    /tmp/tmprgt2ap1k.cs(29,21): error CS1525: Invalid expression term '':''

    /tmp/tmprgt2ap1k.cs(29,21): error CS1001: Identifier expected

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0)\n            return arr;\n
    \       if (k > arr.Count || k < 1)\n            throw new ArgumentOutOfRangeException(\"k\");\n
    \       var arr = arr.ToList();\n        var r = new List<long>();\n        var
    m = arr.Max();\n        var a = arr.Max() - m;\n        var c = m - k;\n        r.Add(m);\n
    \       var k2 = k;\n        while (k2 > 0) {\n            if (a < 0)\n                a
    = arr.Max() - arr.Count;\n            if (c <= 0)\n                c = 0;\n            if
    (a >= arr.Count)\n                a = arr.Count - c;\n            if (r.Count
    < k2) {\n                r.Add(arr[(int)Math.Max(-a, 0)]);\n                k2--;\n
    \           }\n            else {\n                r.Add(Math.Max(r[(int)Math.Max(-a,
    0)], arr[(int)Math.Max(-a, 0)]));\n                k2--;\n            }\n            c--;\n
    \           a--;\n        }\n        r.Sort();\n        return r;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy9qfjw0j.cs(26,20): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpy9qfjw0j.cs(27,17): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpy9qfjw0j.cs(27,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''long'' and ''method group''

    /tmp/tmpy9qfjw0j.cs(29,13): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpy9qfjw0j.cs(29,19): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    '
  timestamp: 1660016049
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        HashSet<long> results = new HashSet<long>();\n
    \       arr.Sort();\n        for (int i = 0; i < k; i++) {\n            if (results.Contains(arr[i]))\n
    \               results.Remove(arr[i]);\n            else\n                results.Add(arr[i]);\n
    \       }\n        return new List<long>(results);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed9fb0c8b7704d4ca3521473717d58b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed9fb0c8b7704d4ca3521473717d58b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        bool flag = false;\n        var max_arr
    = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (flag) {\n                max_arr.Add(arr[i]);\n                break;\n            }
    else if (arr[i] > arr[i + 1]) {\n                max_arr.Add(arr[i]);\n                flag
    = true;\n            }\n        }\n        if (max_arr.Count >= k) {\n            return
    max_arr;\n        } else {\n            return null;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <1f1cf2472857413e8574b68b598270c4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <1f1cf2472857413e8574b68b598270c4>:0
    \n"
  stdout: ''
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count)\n            k =
    arr.Count;\n        Array.Sort(arr);\n        List<long> result = new List<long>();\n
    \       for (int i = 0; i < k; i++)\n            result.Add(arr[i]);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpygy70uiq.cs(27,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) k = arr.Count;\n
    \       Array.Sort(arr);\n        if (k > arr.Count) return new List<long>();\n
    \       if (arr.Count > k) return Maximum(arr.GetRange(0, k), k);\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5mtxk4sh.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5mtxk4sh.cs(28,59): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long maxNum = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            long
    num = (long)Math.Min(Math.Max(arr[i], 0), k);\n            if (maxNum == -1 ||
    num > maxNum) {\n                result.Clear();\n                maxNum = num;\n
    \           }\n            result.Add(num);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e057f0dec2d4192be109a898398d2ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e057f0dec2d4192be109a898398d2ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr == null || k == 0) {\n            return
    null;\n        }\n        // Find the length of arr\n        long m = arr.Count();\n
    \       if (m > k) {\n            k = m;\n        }\n        List<long> ans =
    new List<long>(k);\n        long total = 0;\n        // Sort the array in descending
    order\n        arr.Sort((a, b) => b - a);\n        bool flag = false;\n        //
    Find the first element larger than k\n        long first = 0;\n        for (int
    i = 0; i < arr.Count(); ++i) {\n            if (arr[i] > k) {\n                flag
    = true;\n                break;\n            }\n        }\n        // Find the
    first element smaller than k\n        if (k <= arr[0]) {\n            flag = true;\n
    \       }\n        while (flag) {\n            int i = arr.IndexOf(arr[first],
    first, k);\n            if (i > 0) {\n                ans[i - 1] = arr[i - 1];\n
    \               first += 1;\n            }\n            else {\n                flag
    = false;\n            }\n        }\n        Console.WriteLine(\"first=\" + first);\n
    \       Console.WriteLine(\"k=\" + k);\n        Console.WriteLine(\"m==\" + m);\n
    \       Console.WriteLine(\"ans=\" + ans.Count);\n        return ans;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp749ahkiq.cs(33,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp749ahkiq.cs(36,28): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp749ahkiq.cs(36,28): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmp749ahkiq.cs(51,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp749ahkiq.cs(34,14): warning CS0219: The variable ''total'' is assigned
    but its value is never used

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int[] bucket = new int[k];\n        long[]
    vals = new long[k];\n        int valIdx;\n        long[] sorted = new long[k];\n
    \       for (int i = 0; i < k; i++) {\n            bucket[i] = 0;\n            valIdx
    = 0;\n            for (int j = 0; j < arr.Count; j++) {\n                if (arr[j]
    >= vals[valIdx]) {\n                    valIdx = j;\n                }\n            }\n
    \           vals[i] = arr[valIdx];\n            bucket[i]++;\n        }\n        long
    largest = 0;\n        for (int i = 0; i < bucket.Length; i++) {\n            if
    (bucket[i] > 0 && vals[i] < largest) {\n                largest = vals[i];\n            }\n
    \       }\n        for (int i = 0; i < k; i++) {\n            if (vals[i] > 0
    && bucket[i] > 0) {\n                sorted[i] = vals[i];\n                sorted[bucket[i]
    - 1] = largest;\n            }\n        }\n        return new List<long>(sorted);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb44e317dc8840129b05bee12603a054>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb44e317dc8840129b05bee12603a054>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.Maximum (System.Collections.Generic.List`1[T]
    arr, System.Int64 k) [0x00034] in <fb44e317dc8840129b05bee12603a054>:0 \n  at
    Problem.Main (System.String[] args) [0x00092] in <fb44e317dc8840129b05bee12603a054>:0
    \n[ERROR] FATAL UNHANDLED"
  stdout: ''
  timestamp: 1660016050
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count == 0 || arr.Count <=
    k)\n            return arr;\n        var dict = new Dictionary<long, List<long>>();\n
    \       var max = new List<long>();\n        for (int i = 0; i < arr.Count; i++)
    {\n            if (dict.Keys.Contains(arr[i]))\n                dict[arr[i]].Add(arr[i]);\n
    \           else {\n                var list = new List<long>();\n                list.Add(arr[i]);\n
    \               dict[arr[i]] = list;\n            }\n        }\n\n        foreach
    (var v in dict.Values) {\n            var maxIndex = 0;\n            for (int
    j = 0; j < v.Count; j++) {\n                if (j == maxIndex) continue;\n                if
    (v.Max() < v[j])\n                    maxIndex = j;\n            }\n\n            max.Add(v[maxIndex]);\n
    \           v.RemoveAt(maxIndex);\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <018fbc4308f04491a71288c87bde3e20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <018fbc4308f04491a71288c87bde3e20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int[] arr = arr.OrderBy(a => a).ToArray();\n
    \       List<long> res = new List<long>();\n        Array.Sort(arr, (a, b) =>
    a > b ? 1 : (a < b ? -1 : 0));\n        var maxk = arr.Length;\n        for (int
    i = 0; i < k; i++) {\n            if (maxk == i)\n                break;\n            else\n
    \               maxk = maxk - 1;\n        }\n        Array.Sort(arr, (a, b) =>
    a > b ? 1 : (a < b ? -1 : 0));\n        var maxk2 = new List<long>();\n        foreach
    (var item in arr) {\n            if (maxk2 == item)\n                break;\n
    \           else\n                maxk2.Add(item);\n        }\n        for (int
    i = 0; i < maxk; i++) {\n            res.Add(maxk2[i]);\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwvkavg7c.cs(25,15): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpwvkavg7c.cs(38,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''List<long>'' and ''int''

    /tmp/tmpwvkavg7c.cs(25,21): error CS0165: Use of unassigned local variable ''arr''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> list = new List<long>(arr.Count);\n
    \       list.AddRange(arr);\n        return list.FindLast(x => list.Count() >
    k);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplmef1tyi.cs(27,16): error CS0029: Cannot implicitly convert type ''long''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) return new List<long>();\n
    \       if (arr.Count == 0) return new List<long>();\n        if (k == arr.Count)
    return arr;\n        long[] tmpArr = arr.ToArray();\n        long[] tmpK = k.ToArray();\n
    \       Array.Sort(tmpArr);\n        Array.Sort(tmpK);\n        List<long> result
    = Maximum(tmpArr, tmpK.Length).Take(tmpK.Length).ToList();\n        return result.Union(arr).Take(result.Count).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsz9604tx.cs(29,25): error CS1061: ''long'' does not contain a definition
    for ''ToArray'' and no accessible extension method ''ToArray'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpsz9604tx.cs(32,37): error CS1503: Argument 1: cannot convert from ''long[]''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        double average = arr.Average();\n        double
    median = arr.Average((i, j) => (j - i) * 0.5);\n        double stDev = arr.Average((i,
    j) => Math.Pow((j - i), 2));\n\n        var maxList = new List<long>();\n\n        double
    minValue = arr.Min();\n        double maxValue = arr.Max();\n        double rangeMax
    = maxValue - minValue;\n\n        int n = arr.Count;\n        for (int i = 0;
    i < n; i++)\n        {\n            double avgDiff = Math.Pow(arr[i] - average,
    2);\n            double medianDiff = Math.Pow(arr[i] - median, 2);\n            double
    stDevDiff = Math.Pow(arr[i] - stDev, 2);\n\n            var diff = Math.Max(avgDiff,
    Math.Max(medianDiff, stDevDiff));\n            if (diff == 0)\n            {\n
    \               maxList.Add(arr[i]);\n            }\n            else if (diff
    > rangeMax)\n            {\n                maxList.Add(arr[i]);\n            }\n
    \           else\n            {\n                if (k > 1)\n                {\n
    \                   maxList.Add(arr[i]);\n                    k--;\n                }\n
    \           }\n        }\n\n        return maxList;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1fb0tyo3.cs(26,37): error CS1593: Delegate ''Func<long, int>'' does not
    take 2 arguments

    /tmp/tmp1fb0tyo3.cs(27,36): error CS1593: Delegate ''Func<long, int>'' does not
    take 2 arguments

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(k <= arr.Count);\n        List<long>
    ret = new List<long>(k);\n        Array.Sort(arr.ToArray(), (l, r) => { return
    (l > r) ? 1 : ((l == r) ? 0 : -1); });\n        for (int i = 0; i < k; i++) {\n
    \           if (i < arr.Count) ret.Add(arr[i]);\n            else ret[i] = 0L;\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzrhyf0vd.cs(26,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Initialize result with the first
    k elements of the input array\n        List<long> result = new List<long>(arr.Take(k));\n
    \       \n        // If k is less than or equal to the length of the input array,
    return\n        // the input array. \n        if (k <= result.Count) {\n            return
    result;\n        }\n\n        // Calculate the size of the result list using binary
    search. \n        long size = k - 1;\n        while (size > 0) {\n            long
    index = BinarySearch(k - 1, arr, size);\n            \n            if (index >=
    result.Count) {\n                break;\n            }\n            \n            //
    Add the element at the appropriate index to the result list. \n            result.Insert(index,
    arr[index]);\n            size--;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprd02qmmt.cs(26,53): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmprd02qmmt.cs(37,26): error CS0103: The name ''BinarySearch'' does not exist
    in the current context

    /tmp/tmprd02qmmt.cs(44,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> max = new List<long>();\n
    \       Array.Sort(arr);\n        foreach (var x in arr.Skip(k)) {\n            max.Add(x);\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphgrokf30.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphgrokf30.cs(27,36): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max = -10000L;\n        long tempMax = -10000L;\n        foreach
    (long item in arr)\n        {\n            temp = item;\n            if (item
    > max)\n            {\n                max = temp;\n            }\n            if
    (item > tempMax)\n            {\n                tempMax = temp;\n            }\n
    \       }\n        if (max != -10000L)\n        {\n            for (long i = 0;
    i < arr.Count; i++)\n            {\n                if (arr[i] > temp)\n                {\n
    \                   tempMax = temp;\n                }\n            }\n        }\n
    \       else\n        {\n            for (int i = 0; i < arr.Count; i++)\n            {\n
    \               tempMax = temp;\n                if (arr[i] > temp)\n                {\n
    \                   tempMax = temp;\n                }\n            }\n        }\n
    \       if (k > tempMax)\n        {\n            for (int i = k - tempMax; i >=
    0; i--)\n            {\n                res.Add(max);\n            }\n        }\n
    \       else\n        {\n            for (int i = 0; i < k - tempMax; i++)\n            {\n
    \               res.Add(max);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfh92y85d.cs(30,13): error CS0103: The name ''temp'' does not exist in
    the current context

    /tmp/tmpfh92y85d.cs(33,23): error CS0103: The name ''temp'' does not exist in
    the current context

    /tmp/tmpfh92y85d.cs(37,27): error CS0103: The name ''temp'' does not exist in
    the current context

    /tmp/tmpfh92y85d.cs(44,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpfh92y85d.cs(44,30): error CS0103: The name ''temp'' does not exist in
    the current context

    /tmp/tmpfh92y85d.cs(46,31): error CS0103: The name ''temp'' does not exist in
    the current context

    /tmp/tmpfh92y85d.cs(54,27): error CS0103: The name ''temp'' does not exist in
    the current context

    /tmp/tmpfh92y85d.cs(55,30): error CS0103: The name ''temp'' does not exist in
    the current context

    /tmp/tmpfh92y85d.cs(57,31): error CS0103: The name ''temp'' does not exist in
    the current context

    /tmp/tmpfh92y85d.cs(63,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> arrMax = new List<long>(k);\n
    \       int len = arr.Count;\n        long max = -1000L;\n        for (int i =
    0; i < len; i++)\n        {\n            if (arr[i] > max)\n            {\n                max
    = arr[i];\n            }\n        }\n        long currMax = -1000L;\n        int
    cnt = 0;\n        for (int i = 0; i < len; i++)\n        {\n            if (arr[i]
    >= max)\n            {\n                arrMax[cnt] = arr[i];\n                cnt++;\n
    \           }\n            if (arr[i] > max && arr[i] > currMax)\n            {\n
    \               currMax = arr[i];\n            }\n        }\n        arrMax =
    arrMax.Distinct().ToList();\n        return arrMax;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3spzht0.cs(25,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long m = arr.Min();\n        if (k
    > arr.Count) return new List<long>();\n        if (k == 0) return new List<long>()
    { m };\n        List<long> r = Maximum(arr.Skip(1).Take(k - 1), k - 1).Take(1).ToList();\n
    \       if (k > 1)\n            r.Insert(0, m);\n        return r;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps7eprl0w.cs(28,49): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int[] nums = new int[k];\n        int
    count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]
    > nums[count]) {\n                nums[count] = arr[i];\n                count++;\n
    \           }\n        }\n        List<long> max = new List<long>();\n        for
    (int i = 0; i < k; i++)\n            max.Add(nums[i]);\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcudr42j2.cs(29,31): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int n = arr.Count;\n        if (n <=
    k)\n            return arr;\n        if (k == 0)\n            return arr.ToList();\n\n
    \       long max = 0;\n        foreach (long x in arr) {\n            max = Math.Max(max,
    x);\n        }\n\n        int mid = (k + n - 1) / 2;\n        List<long> res =
    new List<long>();\n        res.Add(max);\n        long max_ind = arr.Count - 1;\n
    \       for (int i = mid; i >= 0; i--) {\n            long next = arr[i];\n            if
    (next > max) {\n                max = next;\n                max_ind = i;\n            }\n
    \           if (next > arr[max_ind] && i != max_ind)\n                max = arr[max_ind];\n
    \           if (i == 0)\n                break;\n        }\n        res.AddRange(arr.Skip(max_ind).Take(k
    - 1).ToList());\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1at313a3.cs(36,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1at313a3.cs(46,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1at313a3.cs(47,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1at313a3.cs(51,31): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(arr.Count >= 1 && arr.Count
    <= 1000 && k > 0 && k <= arr.Count);\n        int[] ids = new int[k];\n        List<long>
    results = new List<long>();\n        long max = long.MinValue;\n        for (int
    i = 0; i < arr.Count; i++) {\n            if (max < arr[i]) {\n                max
    = arr[i];\n            }\n            ids[(arr[i] - max) % k] = i;\n        }\n
    \       Debug.Assert(max <= arr.Max() && ids.Count <= k);\n        for (int i
    = 0; i < ids.Count; i++) {\n            results.Add(arr[ids[i]]);\n        }\n
    \       return results;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl7bokzsc.cs(35,42): error CS0019: Operator ''<='' cannot be applied to
    operands of type ''method group'' and ''long''

    /tmp/tmpl7bokzsc.cs(36,25): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long nums[] = new long[k];\n        int count = 0;\n        long max =
    0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = 0;
    j < k; j++) {\n                max = Math.Max(max, arr[i]);\n            }\n            nums[j]
    = max;\n            if (max > arr[i]) {\n                result.Add(max);\n            }\n
    \           max = 0;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx6ml4_q8.cs(26,18): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1660016049
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long[] arr = arr.ToArray();\n        long
    max = arr[0];\n        long min = 0;\n        for (int i = 1; i < arr.Length;
    i++) {\n            max = Math.Max(max, arr[i]);\n            min = Math.Min(min,
    arr[i]);\n        }\n        long[] tmp = new long[k];\n        int i = 0;\n        while
    (tmp.Length - 1 < k) {\n            if (max < k) {\n                for (int j
    = i; j < arr.Length && arr[j] <= k; j++) {\n                    tmp[tmp.Length
    - 1] = arr[j];\n                }\n                i++;\n            } else {\n
    \               for (int j = i; j < arr.Length && arr[j] > k; j++) {\n                    tmp[tmp.Length
    - 1] = arr[j];\n                }\n                i++;\n            }\n        }\n
    \       if (tmp.Length > k) {\n            tmp[k] = Math.Max(tmp[k], max);\n            max
    = tmp[k];\n        }\n        if (min > 0) {\n            tmp[k] = Math.Max(tmp[k],
    min);\n        }\n        if (tmp.Length > 0) {\n            List<long> res =
    new List<long>(tmp);\n            return res;\n        } else {\n            return
    new List<long>();\n        }\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpex5rgur8.cs(25,16): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpex5rgur8.cs(28,18): error CS0136: A local or parameter named ''i'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpex5rgur8.cs(25,22): error CS0165: Use of unassigned local variable ''arr''

    '
  timestamp: 1660016050
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\n
    \       if (k > arr.Count) return result;\n\n        List<long> list = new List<long>();\n\n
    \       for (int i = 0; i < arr.Count; i++) {\n            list.Add(arr[i]);\n
    \           if (list.Count == k) break;\n        }\n\n        for (int i = 0;
    i < list.Count - 1; i++) {\n            if (list[i] > list[i + 1]) {\n                long
    temp = list[i];\n                list[i] = list[i + 1];\n                list[i
    + 1] = temp;\n            }\n        }\n\n        result.AddRange(list);\n\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c19d7ef0a994cf49c86ae9932be0f18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c19d7ef0a994cf49c86ae9932be0f18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(k <= arr.Count);\n        Debug.Assert(k
    >= 0);\n        if (arr.Count == 0) return new List<long>();\n        long sum
    = 0;\n        long min = 0;\n        long max = 0;\n        List<long> res = new
    List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            sum
    += arr[i];\n            if (sum >= k) {\n                max = sum - k;\n                if
    (max > k) {\n                    min = sum - k + 1;\n                } else {\n
    \                   min = sum - k;\n                }\n            }\n            res.Add(max);\n
    \           if (min <= k) {\n                res.Add(min);\n            }\n            sum
    = 0;\n        }\n        if (max > k) {\n            int count = arr.Count - k;\n
    \           long max1 = arr.GetRange(0, k).Max();\n            long max2 = arr.GetRange(k,
    arr.Count).Max();\n            while (max <= k) {\n                if (max1 <
    max2) {\n                    res.Add(max1);\n                    max1 = max2;\n
    \               } else {\n                    res.Add(max2);\n                    max2
    = max1;\n                }\n                max++;\n            }\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpef0qgimi.cs(49,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpef0qgimi.cs(50,41): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpef0qgimi.cs(51,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> ret = new List<long>();\n
    \       if (arr.Count < k) {\n            k = arr.Count;\n        }\n        if
    (k == 0 || arr.Count == 0) {\n            return ret;\n        }\n        Dictionary<long,
    long> dic = new Dictionary<long, long>();\n        List<long> max = new List<long>();\n
    \       int min = 0;\n        for (int i = 0; i < k; i++) {\n            long
    value = arr[i];\n            if (dic.ContainsKey(value)) {\n                value
    = dic[value];\n            }\n            if (max != null && (max[i] < value ||
    max[i] == value && value < min)) {\n                min = value;\n            }\n
    \           if (value == min) {\n                dic.Add(value, value);\n            }
    else {\n                dic.Add(value, min);\n            }\n            max.Add(value);\n
    \       }\n        if (k == max.Count) {\n            ret.AddRange(max);\n        }
    else {\n            ret.AddRange(max);\n            ret.AddRange(Maximum(ret,
    k - 1));\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkn_02wvn.cs(41,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       if (k > arr.Count || k < 1) {\n            Console.WriteLine(\"Error\");\n
    \           return res;\n        }\n        var max_num = arr[k - 1];\n        var
    max_idx = k;\n        foreach (var i in arr.Skip(1).Take(k - 1))\n        {\n
    \           if (i > max_num)\n            {\n                max_num = i;\n                max_idx
    = k - 1;\n            }\n        }\n        res.Add(max_num);\n        Console.WriteLine(res.Count);\n
    \       if (k <= max_idx)\n            return res;\n        return Maximum(arr,
    max_idx - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2jykc86_.cs(30,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2jykc86_.cs(32,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < k)\n            return
    arr;\n        if (k == 0)\n            return arr;\n        long ans = arr[0];\n
    \       bool needMore = k > 0;\n        List<long> ansList = new List<long>();\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr.Count > 0)\n
    \               ans = Math.Max(ans, arr[i]);\n            else\n                ans
    = Math.Max(ans, arr[i] % k);\n            if (needMore && ans > ansList[k - 1])\n
    \               ansList.Add(ans);\n            ans = Math.Max(ans, k - ans);\n
    \           needMore = ans > ansList[k - 1];\n        }\n        return ansList;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprjeodn5x.cs(37,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmprjeodn5x.cs(40,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) return arr;\n        long
    max = 0;\n        long ans = 0;\n        if (arr.Count > k) {\n            max
    = arr.ElementAtOrDefault(arr.Count - k);\n            ans = arr.Take(arr.Count
    - k).Max().Value;\n            arr = arr.Skip(arr.Count - k).ToList();\n        }\n
    \       return arr.OrderByDescending(x => x).Take(Math.Abs(ans)).Concat(new List<long>()
    { max }).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkgj1u4re.cs(29,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpkgj1u4re.cs(30,28): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpkgj1u4re.cs(31,28): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpkgj1u4re.cs(33,51): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var max = new List<long>(arr);\n        var
    n = new List<long>(new long[] { -1000, 1000 });\n        // Find out the maximum
    number in arr\n        long maxn = Math.Max(arr.First(), arr.Last());\n        for
    (int i = 0; i < arr.Count; i++) {\n            int index = maxn - arr[i];\n            if
    (index < 0)\n                index = (index + 1000) % (1000 - k);\n            else
    if (index > 1000)\n                index = (index - 1000 + k) % (1000 - k);\n
    \           max.Insert(i, index);\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppnm7yy0k.cs(30,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmppnm7yy0k.cs(32,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmppnm7yy0k.cs(34,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int n = arr.Count;\n        if (k >
    n) {\n            throw new ArgumentException(\"k is greater than the length of
    arr.\");\n        }\n        long[] ans = new long[k];\n        int maxIndex =
    k - 1;\n        for (int i = 0; i < n; ++i) {\n            ans[maxIndex--] = arr[i];\n
    \       }\n        if (k == n) {\n            return arr;\n        }\n        Array.Sort(ans);\n
    \       List<long> result = new List<long>(ans);\n        for (int i = k - 1,
    j = n - 1, maxIndex = 0; i >= 0 || j >= 0 || maxIndex < k - 1; --i, --j, ++maxIndex)
    {\n            if (i > 0 || j > 0 || maxIndex < k - 1) {\n                if (ans[maxIndex]
    > ans[j]) {\n                    result.Insert(maxIndex, ans[j]);\n                    j
    = j - 1;\n                } else {\n                    result.Insert(maxIndex,
    ans[i]);\n                    i = i - 1;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpujnzlhgm.cs(30,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpujnzlhgm.cs(39,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpujnzlhgm.cs(39,40): error CS0136: A local or parameter named ''maxIndex''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = arr.ElementAt(0);\n        arr.Remove(arr.First());\n
    \       var list = new List<long>();\n        list.Add(max);\n        foreach
    (var num in arr)\n        {\n            if (num > max)\n            {\n                max
    = num;\n            }\n            list.Add(num);\n        }\n        list = list.OrderByDescending(i
    => i).Take(k).ToList();\n        return list;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggfv7lu9.cs(37,52): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(k <= arr.Count);\n        List<long>
    result = new List<long>();\n        for (int i = 0; i < k; i++)\n            result.Add(arr.Max());\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69abf617fff47ad81ffbefb2d6af784>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69abf617fff47ad81ffbefb2d6af784>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var res = new List<long>();\n        var
    length = arr.Count;\n        if (length == 0) {\n            return res;\n        }\n
    \       Array.Sort(arr);\n        var maxIndex = -1;\n        var maxValue = arr[0];\n
    \       for (var i = 1; i < length; i++) {\n            var curValue = arr[i];\n
    \           if (curValue > maxValue) {\n                maxIndex = i;\n                maxValue
    = curValue;\n            }\n        }\n        var result = new List<long>();\n
    \       if (maxIndex - k >= 0) {\n            result.AddRange(arr.Take(maxIndex
    - k));\n        }\n        if (maxIndex + k <= length) {\n            result.AddRange(arr.Skip(maxIndex
    + k));\n        }\n        res.AddRange(result);\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph0j8ifsw.cs(30,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmph0j8ifsw.cs(42,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmph0j8ifsw.cs(45,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(k > 0 && k <= arr.Count);\n
    \       long[] arr = arr.ToArray();\n        var results = new List<long>();\n
    \       int[] visited = new int[k];\n        for (int i = 0; i < arr.Length; i++)
    {\n            if (visited[i] != 0) {\n                for (int j = i; j < arr.Length;
    j++) {\n                    if (visited[j] != 0) break;\n                    if
    (arr[j] > arr[i]) break;\n                    if (arr[j] == arr[i]) results.Add(arr[j]);\n
    \               }\n                for (int j = i; j < arr.Length; j++) {\n                    if
    (visited[j] != 0) break;\n                    if (arr[j] < arr[i]) break;\n                    if
    (arr[j] == arr[i]) results.Add(arr[j]);\n                }\n            }\n        }\n
    \       return results.Count > k ? results.Take(k) : results;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpolooe42z.cs(25,36): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpolooe42z.cs(25,31): error CS0019: Operator ''<='' cannot be applied to
    operands of type ''long'' and ''method group''

    /tmp/tmpolooe42z.cs(26,16): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpolooe42z.cs(43,49): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr == null || arr.Count < 1 ||
    k <= 0) return null;\n        long s = arr.Max();\n        long t = 0;\n        var
    res = new List<long>(k);\n        var arr2 = arr.Select((x,i) => new { x, i }).GroupBy(x
    => x.x).Select(g => new { key = g.Key, values = g.Select(x => x.x) });\n        foreach
    (var item in arr2) {\n            t = Math.Max(t, item.values.Max());\n            long
    i = (long)Math.Floor(item.keys.Max() / s);\n            while (t < item.values.Max()
    && i >= 0) {\n                res.Add(item.values[i]);\n                i--;\n
    \           }\n        }\n        return res.Where(x => x != 0).ToList();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsxmf0vyy.cs(28,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpsxmf0vyy.cs(32,44): error CS1061: ''<anonymous type: long key, IEnumerable<long>
    values>'' does not contain a definition for ''keys'' and no accessible extension
    method ''keys'' accepting a first argument of type ''<anonymous type: long key,
    IEnumerable<long> values>'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpsxmf0vyy.cs(34,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IEnumerable<long>''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       int num = 0;\n        for (long i = 0; i < arr.Count; i++) {\n            if
    (num == k) {\n                break;\n            }\n            if (arr[i] >
    arr[num]) {\n                num++;\n                res.Add(arr[i]);\n            }
    else {\n                res.Add(arr[num]);\n                num++;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpag1w9n4i.cs(31,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpag1w9n4i.cs(33,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        var
    m = arr.Count;\n        Debug.Assert(k > 0 && k <= m, \"k should be greater than
    0 and less than or equal to arr count\");\n        long kMax = k - 1;\n        for
    (int i = 0; i < m; i++) {\n            long currMax = arr[i];\n            long
    maxNum = i;\n            for (int j = i + 1; j < m; j++) {\n                if
    (arr[j] > currMax) {\n                    currMax = arr[j];\n                    maxNum
    = j;\n                }\n            }\n            if (maxNum != i) {\n                result.Add(arr[maxNum]);\n
    \           }\n        }\n        if (k == 1) {\n            return result;\n
    \       }\n        // Sort after popping off the first element\n        result.Sort(Comparer.Default);\n
    \       for (int i = 1; i < kMax; i++) {\n            k = k - 1;\n            if
    (k == 0) {\n                break;\n            }\n            k = k / 2;\n            long
    midVal = result[k];\n            int k2 = k;\n            for (int j = 0; j <
    m; j++) {\n                if (result[j] > midVal) {\n                    result[k2]
    = result[j];\n                    k2 = j;\n                }\n            }\n
    \           result[k2] = midVal;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3n7qhh_g.cs(39,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp3n7qhh_g.cs(46,21): error CS0305: Using the generic type ''Comparer<T>''
    requires 1 type arguments

    /tmp/tmp3n7qhh_g.cs(53,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp3n7qhh_g.cs(54,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long num = arr.Count;\n        var
    arr = arr.OrderByDescending(x => x).ToList();\n        if (k > num)\n            return
    arr.Take(1);\n        else if (k == num)\n            return arr;\n        else
    if (k < num)\n            return arr.Take(k).ToList();\n        else\n            return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdzty5s5w.cs(25,20): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpdzty5s5w.cs(25,24): error CS0428: Cannot convert method group ''Count''
    to non-delegate type ''long''. Did you intend to invoke the method?

    /tmp/tmpdzty5s5w.cs(26,13): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpdzty5s5w.cs(26,19): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(arr.Count >= k);\n        Debug.Assert(0
    <= k);\n        Debug.Assert(k <= arr.Count);\n        Debug.Assert(arr.All(x
    => x >= -1000L) && (arr.All(x => x <= 1000L)));\n        var sorted = arr.OrderByDescending(x
    => x).Take(k).ToList();\n        Debug.Assert(sorted.Count > 0);\n        return
    sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzvdjk4wk.cs(29,57): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpzvdjk4wk.cs(30,22): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660016050
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var n = arr.Count;\n        if (n ==
    0 || k <= 0) return arr;\n\n        var res = new List<long>();\n        var tmp
    = new List<long>();\n        var m = 0;\n        var a = 0;\n        var b = 0;\n
    \       var max = 0;\n\n        while (true) {\n            tmp = new List<long>(arr.Count);\n
    \           tmp.AddRange(arr);\n            max = tmp.Count;\n            for
    (a = 0; a < max; a++)\n                tmp.RemoveAt(tmp.Count - 1);\n\n            if
    (tmp.Count < k) break;\n            for (b = 0; b < k; b++) {\n                var
    x = tmp.Take(b).Max();\n                tmp.Remove(x);\n                tmp.Insert(tmp.Count
    - 1, x);\n            }\n            tmp.Remove(max);\n            tmp.Insert(0,
    max);\n            tmp.Insert(tmp.Count - 1, max);\n            for (b = 0; b
    < max; b++)\n                tmp.Insert(tmp.Count - 1, max);\n            tmp.Remove(max);\n
    \           for (a = 0; a < k; a++)\n                if (tmp.Contains(a))\n                    res.Add(a);\n
    \               else\n                    res.Add(0L);\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e1a1b682d4142e686766072149bc4d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e1a1b682d4142e686766072149bc4d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016050
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            sum
    += arr[i];\n            if (sum > k)\n                result.Add(sum - k);\n            else\n
    \               result.Add(arr[i]);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23b600ffaa6f481ebb87868cd3c8fd26>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23b600ffaa6f481ebb87868cd3c8fd26>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\n
    \       long[] arr = arr.ToArray();\n\n        Array.Sort(arr);\n\n        for
    (int i = 0; i < k; i++) {\n            res.Add(arr[i]);\n        }\n\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpznttu_ol.cs(27,16): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpznttu_ol.cs(27,22): error CS0165: Use of unassigned local variable ''arr''

    '
  timestamp: 1660016050
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int low = 0;\n        int high = arr.Count
    - 1;\n        List<long> result = new List<long>();\n        while (high > low)
    {\n            int mid = (low + high) / 2;\n            if (arr[mid] > k) {\n
    \               high = mid - 1;\n            } else if (arr[mid] < k) {\n                low
    = mid + 1;\n            } else {\n                result.Add(arr[mid]);\n                low
    = mid + 1;\n                high = mid - 1;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13bd29cc5488494fab2034fbd3190ed2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13bd29cc5488494fab2034fbd3190ed2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0)\n            return arr;\n
    \       var s = new Stack<long>();\n        var ret = new List<long>();\n        for
    (int i = 0; i < arr.Count; ++i) {\n            if (s.Count < k)\n                s.Push(arr[i]);\n
    \           else {\n                if (arr[i] > s.Peek())\n                    ret.Add(s.Pop());\n
    \               ret.Add(arr[i]);\n            }\n        }\n        if (s.Count
    > 0)\n            ret.AddRange(s.Pop());\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl6kwpvb_.cs(39,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1660016050
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Write your code here\n        if(arr.Count>k)\n
    \       {\n            var max = new List<long>();\n            int count=0;\n
    \           foreach (var a in arr)\n            {\n                count++;\n
    \               if(count==k)\n                {\n                    max.Add(a);\n
    \                   count--;\n                }\n                else if(count>k)\n
    \               {\n                    break;\n                }\n            }\n
    \           return max;\n        }\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <424e66ce2c3b4a1095df75cf9f01d17a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <424e66ce2c3b4a1095df75cf9f01d17a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Array.Sort(arr);\n\n        var max
    = new List<long>();\n        var maxCount = 1;\n\n        foreach (var x in arr)
    {\n            long cnt = 0;\n            long y = x;\n\n            while (y
    != 0) {\n                cnt += y % 10;\n                y /= 10;\n            }\n\n
    \           if (cnt > maxCount) {\n                maxCount = cnt;\n                max
    = new[] { x };\n            } else if (cnt == maxCount) {\n                max.Add(x);\n
    \           }\n        }\n\n        if (max.Count < k) {\n            var tmp
    = Maximum(max, k);\n            max.AddRange(tmp);\n        }\n\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwt1hg7k1.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpwt1hg7k1.cs(40,28): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpwt1hg7k1.cs(41,23): error CS0029: Cannot implicitly convert type ''long[]''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < 1 || k < 1 || k > arr.Count)
    {\n            throw new ArgumentOutOfRangeException(\"k\");\n        }\n        List<long>
    result = new List<long>();\n        long max = 0;\n        long min = arr[0];\n
    \       foreach (long num in arr) {\n            if (num > max) {\n                max
    = num;\n            }\n            if (num < min) {\n                min = num;\n
    \           }\n        }\n        if (max >= k) {\n            result.AddRange(arr.Take(max));\n
    \       }\n        if (min >= k) {\n            result.AddRange(arr.Skip(min).Take(k
    - min + 1));\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqzjfe41q.cs(40,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpqzjfe41q.cs(43,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> ans = new List<long>();\n
    \       List<long> max = new List<long>();\n        long num = 0;\n        if
    (k == 0) {\n            for (int i = 0; i < arr.Count; i++) {\n                if
    (arr[i] > num) {\n                    num = arr[i];\n                }\n            }\n
    \           max.Add(num);\n            return max;\n        }\n        long curr
    = arr[0];\n        long max = 0;\n        for (int i = 1; i < arr.Count; i++)
    {\n            if (arr[i] > curr) {\n                curr = arr[i];\n            }\n
    \           max = Math.Max(max, curr);\n        }\n        num = curr;\n        max.Add(num);\n
    \       foreach (var n in max)\n            ans.Add(n);\n        foreach (var
    n in arr)\n            ans.Add(n);\n        return ans;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7wakkrtl.cs(38,14): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    /tmp/tmp7wakkrtl.cs(43,28): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''byte''

    /tmp/tmp7wakkrtl.cs(43,33): error CS1503: Argument 2: cannot convert from ''long''
    to ''byte''

    /tmp/tmp7wakkrtl.cs(38,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k <= 0 || k > arr.Count)\n            return
    new List<long>();\n\n        Array.Sort(arr);\n\n        Array.Sort(arr.Take(arr.Count
    - k).ToArray());\n\n        return arr.Take(arr.Count - k).ToList();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiof2m3z9.cs(28,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpiof2m3z9.cs(30,29): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpiof2m3z9.cs(32,25): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016050
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long n = arr.Count;\n        long s = 0;\n        long max = 0;\n        long
    i;\n        // Find max number\n        foreach(long a in arr) {\n            max
    = Math.Max(max, a);\n        }\n        s -= max;\n        if (k == 0) return
    arr.ToList();\n        long d = k;\n        while (d > 0) {\n            n /=
    d;\n            d -= 1;\n        }\n        for (i = 0; i < n; i++) {\n            long
    a = arr[i];\n            long b = 0;\n            while (a != 0) {\n                b
    ^= a;\n                a /= 10;\n            }\n            s -= b;\n            result.Add(b);\n
    \       }\n        while (k > 0) {\n            result.Add(0);\n            k
    /= 10;\n        }\n        result.Sort();\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe3b_i0ts.cs(42,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Write your code here\n        long[]
    res = new long[k];\n        List<long> ans = new List<long>();\n        var max
    = new List<long>();\n        int index = 0;\n        arr.Sort();\n        for
    (int i = 0; i < arr.Length; i++) {\n            res[i] = arr[i];\n            if
    (res[i] > max.Count) {\n                max = res;\n                index = i;\n
    \           }\n        }\n        ans.Add(max[index]);\n        for (int i = index;
    i < k; i++) {\n            if (res[i] > res[i - 1])\n                ans.Add(res[i]);\n
    \       }\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprd20a4pg.cs(31,33): error CS1061: ''List<long>'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''List<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmprd20a4pg.cs(34,23): error CS0029: Cannot implicitly convert type ''long[]''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1660016051
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Write your code here\n        if
    (arr.Count == 0) {\n            return new List<long>();\n        }\n        int
    low = 0;\n        int high = arr.Count - 1;\n        while (low < high) {\n            int
    mid = (low + high) / 2;\n            if (arr[mid] >= k) {\n                low
    = mid + 1;\n            } else {\n                high = mid;\n            }\n
    \       }\n        return arr.Skip(low).Take(high - low).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83e8ca48f2fd4022b56b926615019bbc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83e8ca48f2fd4022b56b926615019bbc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016051
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        long
    max = 0;\n        long min = 0;\n        long sum = 0;\n        foreach (var item
    in arr)\n        {\n            if (sum == 0) sum += item;\n            else if
    (sum < 0) sum -= item;\n            else if (sum > 0) sum += item;\n            max
    = Math.Max(max, item);\n            min = Math.Min(min, item);\n            sum
    += item;\n        }\n        if (k < min)\n        {\n            k = min - 1;\n
    \       }\n        long temp;\n        long cur = k;\n        long sum1 = 0;\n
    \       long sum2 = 0;\n        while (cur > 0)\n        {\n            temp =
    sum2;\n            sum2 = sum1;\n            sum1 = sum;\n            sum += temp;\n
    \           cur--;\n            if (sum == sum1 && sum1 == sum2) result.Add(temp);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f6335c58ffd4be489c5ff0c66825007>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f6335c58ffd4be489c5ff0c66825007>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count == 0 || k > arr.Count
    || k < 1) {\n            throw new ArgumentException();\n        }\n        List<long>
    max = new List<long>(arr.Count);\n        long curMax = -1000000000L;\n        int
    index = 0;\n        bool isNegative = false;\n        for (int i = 0; i < arr.Count
    && k > 0; i++) {\n            isNegative = arr[i] < 0;\n            long cur =
    arr[i];\n            if (isNegative) {\n                cur = -cur;\n            }\n
    \           if (cur > curMax) {\n                curMax = cur;\n                max[index++]
    = cur;\n                k--;\n            } else if (cur == curMax) {\n                max[index++]
    = cur;\n            }\n        }\n        if (k == 0 && max[index - 1] < 1000000000)
    {\n            max.Add(1000000000);\n        } else if (k == 1) {\n            max.Add(curMax);\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32
    index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00079] in <1a97a4cc88e44f1bb5502fcff1e3552e>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <1a97a4cc88e44f1bb5502fcff1e3552e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32
    index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00079] in <1a97a4cc88e44f1bb5502fcff1e3552e>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <1a97a4cc88e44f1bb5502fcff1e3552e>:0
    \n"
  stdout: ''
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < 1 || k < 1 || k > arr.Count)
    {\n            throw new ArgumentException();\n        }\n        List<long> result
    = new List<long>();\n        arr.Sort();\n        for (int i = 0; i < k; i++)
    {\n            result.Add(arr[i]);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ca607807bbd484b9601711cb547bb1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ca607807bbd484b9601711cb547bb1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016051
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> maxs = new List<long>();\n
    \       long max = 0;\n        foreach (long i in arr) {\n            if (i >=
    max && maxs.Count < k) {\n                max = i;\n                maxs.Clear();\n
    \               maxs.Add(i);\n            }\n            if (i >= max) {\n                maxs.Add(i);\n
    \           }\n        }\n        long last = maxs[maxs.Count - 1];\n        for
    (int i = maxs.Count - 1; i >= 0; i--) {\n            if (maxs[i] > last + 1) {\n
    \               long a = maxs[i];\n                maxs[i] = last + 1;\n                maxs[i
    - 1] = max;\n                last = maxs[i - 1];\n                max = a;\n            }
    else {\n                last += 1;\n            }\n        }\n        return maxs;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d8296d1bde54e4bad1afd0ebd0314e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d8296d1bde54e4bad1afd0ebd0314e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int len1 = arr.Count - 1; \n        int
    len2 = k - len1;\n        List<long> lst = new List<long>();\n        long max1
    = arr[0], max2 = max1;\n        for (int i = 0; i < len1; i++) {\n            if
    (arr[i] > max1) {\n                max1 = arr[i];\n            }\n        }\n
    \       long cur1 = max1, cur2 = max1;\n        for (int i = len1; i < len2; i++)
    {\n            if (arr[i] > cur2) {\n                cur2 = cur1;\n            }\n
    \           cur1 = arr[i];\n        }\n        lst = new List<long>() { max2,
    cur2 };\n        if (cur1 > max2) {\n            lst.Add(cur1);\n        }\n        return
    lst;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjw6kiyu2.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < k)\n            throw
    new ArgumentOutOfRangeException(\"k\");\n        if (k > arr.Count)\n            throw
    new ArgumentException(\"k out of range\");\n        var maximums = new List<long>();\n
    \       long temp = -9223372036854775808L;\n        long[] max = new long[arr.Count];\n
    \       int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] > temp) {\n                temp = (arr[i] + temp) / (2.0 + i);\n                maximums.Add((long)temp);\n
    \               count++;\n                max[i] = arr[i];\n            }\n        }\n
    \       if (count == k) {\n            maximums.AddRange(max);\n        } else
    if (count == k - 1) {\n            maximums.Add(temp);\n        }\n        return
    maximums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm535vb5p.cs(35,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n            k
    = arr.Count;\n        }\n        long[] max = new long[k];\n        Array.Sort(arr.ToArray(),
    max);\n        var result = new List<long>();\n        for (int i = 0; i < k;
    i++) {\n            result.Add(max[i]);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7befed138b0c4246a0de1cf7c73314eb>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Offset and length were out
    of bounds for the array or count is greater than the number of elements from index
    to the end of the source collection.\n  at System.Array.Sort[TKey,TValue] (TKey[]
    keys, TValue[] items, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1[T]
    comparer) [0x00044] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Array.Sort[TKey,TValue]
    (TKey[] keys, TValue[] items) [0x0000e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64
    k) [0x00028] in <7befed138b0c4246a0de1cf7c73314eb>:0 \n  at Problem.Main (System.String[]
    args) [0x00055] in <7befed138b0c4246a0de1cf7c73314eb>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentException: Offset and length were out of bounds for
    the array or count is greater than the number of elements from index to the end
    of the source collection.\n  at System.Array.Sort[TKey,TValue] (TKey[] keys, TValue[]
    items, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1[T]
    comparer) [0x00044] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Array.Sort[TKey,TValu"
  stdout: ''
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        long maxSoFar
    = 0;\n        List<long> maximum = new List<long>();\n        for (int i = 0;
    i < arr.Count; i++) {\n            if (maxSoFar < arr[i]) {\n                maxSoFar
    = arr[i];\n            }\n        }\n        long[] tempList = new long[k];\n
    \       maximum.Add(maxSoFar);\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (maxSoFar <= arr[i]) {\n                tempList[i] = maxSoFar;\n
    \           }\n            if (arr[i] < maxSoFar) {\n                tempList[i]
    = arr[i];\n                maxSoFar = arr[i];\n            }\n        }\n        Array.Reverse(tempList);\n
    \       Array.Reverse(maximum);\n        for (int i = 0; i < k; i++) {\n            maximum.Add(tempList[i]);\n
    \       }\n        return maximum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6nxvebv8.cs(45,23): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) {\n            return arr;\n
    \       }\n\n        var result = new List<long>();\n        long best = 0;\n\n
    \       for (int i = 0; i < k; i++) {\n            best = Math.Max(best, arr[i]);\n
    \       }\n\n        for (int i = k; i < arr.Count; i++) {\n            best =
    Math.Max(best, Math.Max(arr[i], best));\n            result.Add(best);\n        }\n\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf5hzlfn2.cs(36,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016051
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) return new List<long>();\n
    \       if (arr.Count <= k) return arr;\n        if (arr.Count == k) return arr.OrderByDescending(x
    => x).ToList();\n\n        var ans = new List<long>();\n        var max = new
    long[arr.Count];\n        long curMax = 0;\n        for (int i = 0; i < arr.Count;
    i++) {\n            max[i] = Math.Max(max[i], arr[i]);\n            if (max[i]
    > curMax) \n                ans.Add(max[i]);\n        }\n        for (int i =
    arr.Count; i < k; i++) {\n            ans.Add(max[i]);\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82cbe129546d411d903cbe24608c7822>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82cbe129546d411d903cbe24608c7822>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int n = arr.Count;\n        long max
    = 0;\n        long maxPos = 0;\n        List<long> ans = new List<long>();\n        for(int
    i = 0; i < n; i++) {\n            if(max < arr[i]) {\n                max = arr[i];\n
    \               maxPos = i;\n            }\n        }\n        for(int i = 0;
    i < n; i++) {\n            if(i == maxPos) continue;\n            if(max < arr[i])
    {\n                ans.Add(arr[i]);\n                max++;\n            }\n        }\n
    \       if(ans.Count < k) {\n            ans.Add(arr[maxPos]);\n            ans.RemoveRange(max+1,
    k - ans.Count);\n        }\n        return ans;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnbreng0s.cs(43,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnbreng0s.cs(44,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnbreng0s.cs(44,36): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < 1 || k < 1 || k > arr.Count)
    return null;\n        List<long> res = new List<long>();\n        long max = arr[0];\n
    \       long maxIndex = arr.Count - 1;\n        long minIndex = 0;\n        while
    (maxIndex - minIndex > 1) {\n            long mid = (maxIndex + minIndex) / 2;\n
    \           if (arr[mid] > max) {\n                max = arr[mid];\n                maxIndex
    = mid;\n            }\n            else {\n                minIndex = mid + 1;\n
    \           }\n        }\n        res.Add(max);\n        long left = 0;\n        long
    right = 0;\n        for (long i = maxIndex - 1; i >= minIndex; i--) {\n            if
    (arr[i] > arr[i + 1])\n                left = arr[i];\n            else\n                right
    = arr[i];\n            if (left > max)\n                max = left;\n            else\n
    \               max = right;\n        }\n        res.Add(max);\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw7sipmj4.cs(32,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpw7sipmj4.cs(33,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpw7sipmj4.cs(44,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpw7sipmj4.cs(44,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpw7sipmj4.cs(45,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpw7sipmj4.cs(47,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k <= 0 || k >= arr.Count) return
    new List<long>();\n        var list = new List<long>(arr.Count);\n        arr.Sort();\n
    \       var max = arr[0];\n        for (var i = 1; i < arr.Count; i++) {\n            if
    (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        var
    result = new List<long>();\n        for (var i = k - 1; i >= 0; i--) {\n            if
    (max < arr[i]) {\n                list.Add(arr[i]);\n                max = Math.Max(max,
    arr[i]);\n            } else {\n                break;\n            }\n        }\n
    \       if (result.Count > 0) list.Add(max);\n        return list;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_i15iyt0.cs(36,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_i15iyt0.cs(37,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_i15iyt0.cs(38,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k <= 0 || k > arr.Count) return
    null;\n        long maxValue = (long)int.MaxValue;\n        List<long> ans = new
    List<long>(arr.Count);\n        for (int i = 0; i < arr.Count && maxValue < k;
    i++) {\n            maxValue = Math.Max(maxValue, arr[i]);\n            ans.Add(maxValue);\n
    \       }\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4beb711859c440cebca37cb0a5be387d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4beb711859c440cebca37cb0a5be387d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016051
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var arrMax = new List<long>();\n        long
    max = arr[0];\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]
    > max) {\n                max = arr[i];\n            }\n        }\n        for
    (long i = 0; i < max; i++) {\n            arrMax.Add(i);\n        }\n        long
    max2 = arr[0];\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] >= max2) {\n                arrMax.Add(arr[i]);\n            }\n        }\n
    \       var tmp = new int[k];\n        for (int i = 0; i < k; i++) {\n            int
    index = 0;\n            for (int j = 0; j < arr.Count; j++) {\n                if
    (arr[j] == tmp[i]) {\n                    index++;\n                    if (index
    >= arrMax.Count) {\n                        arrMax.Add(arr[j]);\n                        index
    = 0;\n                    }\n                    break;\n                }\n            }\n
    \       }\n        return arrMax;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29a124b1d8084118be11761bcd0b1d29>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29a124b1d8084118be11761bcd0b1d29>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Dictionary<long, List<long>> dic =
    new Dictionary<long, List<long>>();\n\n        foreach(var item in arr) {\n            long
    curKey = item.ToString(CultureInfo.InvariantCulture).PadLeft(32, '0');\n            List<long>
    list = dic.TryGetValue(curKey, out List<long> list) ? list : new List<long>();\n
    \           list.Add(item);\n            dic[curKey] = list;\n        }\n\n        var
    curKey = arr.Last().ToString(CultureInfo.InvariantCulture).PadLeft(32, '0');\n
    \       List<long> list = dic.TryGetValue(curKey, out List<long> list) ? list
    : new List<long>();\n        list.Add(arr.Last());\n        dic[curKey] = list;\n\n
    \       var ret = Enumerable.Range(1, k + 1)\n            .Select(i => (long)i)\n
    \           .ToList()\n            .Select(x => arr[x])\n            .OrderByDescending(x
    => x)\n            .Take(k);\n\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4putkc_z.cs(28,18): error CS0136: A local or parameter named ''curKey''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp4putkc_z.cs(28,41): error CS0103: The name ''CultureInfo'' does not exist
    in the current context

    /tmp/tmp4putkc_z.cs(29,24): error CS0136: A local or parameter named ''list''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp4putkc_z.cs(29,70): error CS0128: A local variable or function named ''list''
    is already defined in this scope

    /tmp/tmp4putkc_z.cs(34,42): error CS0103: The name ''CultureInfo'' does not exist
    in the current context

    /tmp/tmp4putkc_z.cs(35,66): error CS0128: A local variable or function named ''list''
    is already defined in this scope

    /tmp/tmp4putkc_z.cs(35,43): error CS1503: Argument 1: cannot convert from ''string''
    to ''long''

    /tmp/tmp4putkc_z.cs(37,13): error CS1503: Argument 1: cannot convert from ''string''
    to ''long''

    /tmp/tmp4putkc_z.cs(39,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp4putkc_z.cs(42,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4putkc_z.cs(29,78): error CS0165: Use of unassigned local variable ''list''

    /tmp/tmp4putkc_z.cs(35,74): error CS0165: Use of unassigned local variable ''list''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n            k
    = arr.Count;\n        }\n        List<long> result = new List<long>(k);\n        long
    maxValue = 0;\n        for (int i = 0; i < k; i++) {\n            long currentValue
    = arr[i];\n            while (currentValue > maxValue) {\n                maxValue
    = currentValue;\n                int index = result.FindIndex(x => x == maxValue);\n
    \               if (index >= 0) {\n                    result.RemoveAt(index);\n
    \               }\n                else {\n                    result.Insert(i,
    maxValue);\n                }\n                currentValue = arr[++i];\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbt9h0lqv.cs(28,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       HashSet<long> hs = new HashSet<long>();\n        List<long> res = new
    List<long>();\n        long m = 0;\n        int start = 0;\n        foreach (long
    num in arr) {\n            hs.Add(num);\n            if (hs.Count > m) {\n                m
    = hs.Count;\n                start = hs.Count - k;\n            }\n        }\n
    \       List<long> newArray = arr.Take(start).Concat(arr.Skip(start + m)).ToList();\n
    \       long max = newArray.Min();\n        foreach (long num in newArray) {\n
    \           if (num > max) {\n                max = num;\n            }\n        }\n
    \       while (m < k) {\n            hs.Add(max);\n            m += 1;\n            long
    max = newArray.Min();\n            foreach (long num in newArray) {\n                if
    (num > max) {\n                    max = num;\n                }\n            }\n
    \           newArray.Add(max);\n        }\n        foreach (long num in newArray)
    {\n            res.Add(num);\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6hifrwqi.cs(34,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6hifrwqi.cs(37,63): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp6hifrwqi.cs(45,20): error CS0841: Cannot use local variable ''max'' before
    it is declared

    /tmp/tmp6hifrwqi.cs(47,18): error CS0136: A local or parameter named ''max'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count || k == 0) {\n            return
    new List<long>();\n        }\n        List<long> res = new List<long>();\n        if
    (arr.Count > 1) {\n            Array.Sort(arr, arr.GetLowerBound(0), arr.GetUpperBound(0));\n
    \           List<long> res = new List<long>();\n            long maxval = arr[0];\n
    \           for (long i = 0; i < arr.Count - 1; ++i) {\n                if (maxval
    < arr[i + 1]) {\n                    maxval = arr[i + 1];\n                    res.Add(maxval);\n
    \               }\n            }\n            return res;\n        } else {\n
    \           List<long> res = new List<long>();\n            long maxval = arr.First();\n
    \           for (long i = 0; i < arr.Count - 1; ++i) {\n                if (maxval
    < arr[i + 1]) {\n                    maxval = arr[i + 1];\n                    res.Add(maxval);\n
    \               }\n            }\n            return res;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptiup8qkc.cs(30,33): error CS1061: ''List<long>'' does not contain a definition
    for ''GetLowerBound'' and no accessible extension method ''GetLowerBound'' accepting
    a first argument of type ''List<long>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmptiup8qkc.cs(30,55): error CS1061: ''List<long>'' does not contain a definition
    for ''GetUpperBound'' and no accessible extension method ''GetUpperBound'' accepting
    a first argument of type ''List<long>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmptiup8qkc.cs(31,24): error CS0136: A local or parameter named ''res'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmptiup8qkc.cs(34,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptiup8qkc.cs(35,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptiup8qkc.cs(41,24): error CS0136: A local or parameter named ''res'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmptiup8qkc.cs(44,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptiup8qkc.cs(45,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(k > 0 && k < arr.Count,
    $\"The length of k should be > 0 & < the length of arr.\");\n        Debug.Assert(arr.All(i
    => i >= -1000 && i < 1000), $\"The elements in the list should be in range [-1000,
    1000]\");\n\n        int N = arr.Count;\n        long maxVal = -1000 * N;\n        List<long>
    maxArr = new List<long>(k);\n        long[] arrVals = new long[N];\n        for
    (int i = 0; i < k; i++) {\n            arrVals[i] = arr[i];\n        }\n\n        Array.Sort(arrVals);\n
    \       for (int i = 0; i < N; i++) {\n            if (arrVals[i] >= maxVal) {\n
    \               maxVal = arrVals[i];\n                maxArr.Clear();\n                for
    (int j = i; j < N; j++)\n                    if (arrVals[j] >= maxVal)\n                        maxArr.Add(arrVals[j]);\n
    \           }\n        }\n\n        return maxArr;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu0ake_uc.cs(30,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Solution 1:\n        // Find the
    k largest elements using heap \n        Array.Sort(arr.OrderByDescending(x =>
    x).Take(k));\n\n        // Solution 2:\n        // Find the k largest elements
    using heap \n        // List<long> arr = new List<long>(arr.OrderByDescending(x
    => x).Take(k));\n\n        // Solution 3:\n        // Sort the array and take
    the first k elements.\n        // List<long> arr = new List<long>(arr.OrderByDescending(x
    => x).Take(k));\n\n        // Solution 4:\n        // Sort the array and find
    the index of the k largest elements\n        // List<long> arr = new List<long>(arr.OrderByDescending(x
    => x).Take(k));\n\n        // Solution 5:\n        // Sort the array and return
    the k largest elements\n        // List<long> arr = new List<long>(arr.OrderByDescending(x
    => x).Take(k));\n\n        // Solution 6:\n        // Sort the array and return
    the k largest elements\n        // var arr = arr.OrderByDescending(x => x).Take(k);\n\n
    \       // Solution 7:\n        // Sort the array and find the index of the k
    largest elements\n        // var arr = arr.OrderByDescending(x => x).Take(k);\n\n
    \       // Solution 8:\n        // Sort the array and return the k largest elements\n
    \       // var arr = arr.OrderByDescending(x => x).Take(k);\n        return arr;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpee2592bt.cs(27,55): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        \n        List<long> res = new List<long>();\n
    \       \n        long max = 0;\n        \n        for (int i = 0; i <= k; i++)
    {\n            max = arr[i]>max?arr[i]:max;\n        }\n        \n        for
    (int i = 0; i < k; i++) {\n            max = Math.Max(max, arr[i]);\n        }\n
    \       \n        Array.Sort(arr);\n        \n        for (int i = 0; i < k; i++)
    {\n            \n            res.Add(arr[i]);\n            \n            if (arr[i]
    > max)\n                max = arr[i];\n        }\n        \n        for (int i
    = k; i < arr.Count; i++) {\n            \n            res.Add(arr[i]);\n            \n
    \           if (arr[i] > max)\n                max = arr[i];\n        }\n        \n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj1fm_cyf.cs(38,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpj1fm_cyf.cs(48,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> list = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        foreach (long i in arr)\n
    \           if (max < i) {\n                max = i;\n                current
    = i;\n            }\n        while (current < max && list.Count < k) {\n            list.Add(current);\n
    \           current++;\n        }\n        if (list.Count > k)\n            list
    = list.Take(k).ToList();\n        return list;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpibzbuc0s.cs(38,30): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // initialize result\n        var result
    = new List<long>();\n        // set first element as max, add it to result\n        result.Add(arr[0]);\n
    \       // set initial length\n        var length = arr.Count;\n        // loop
    until length is less than k\n        while (result.Count < k) {\n            //
    loop until length >= k\n            while (length >= k) {\n                //
    loop until first element is greater than or equal to maximum element\n                while
    (arr.FirstOrDefault() > result.LastOrDefault()) {\n                    // remove
    first element\n                    result.RemoveAt(0);\n                    //
    decrease length\n                    length--;\n                }\n                //
    add last element\n                result.Add(arr[length]);\n                //
    increase length\n                length++;\n            }\n        }\n        //
    return result\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00044] in <88c51f2c7b4f46e9b19d4cf3fdfec658>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <88c51f2c7b4f46e9b19d4cf3fdfec658>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00044] in <88c51f2c7b4f46e9b19d4cf3fdfec658>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <88c51f2c7b4f46e9b19d4cf3fdfec658>:0
    \n"
  stdout: ''
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       var len = arr.Count;\n        // sort all elements in descending order
    \n        arr.Sort((x, y) => y.CompareTo(x));\n        long max = 0;\n        for
    (int i = 0; i < len; ++i) {\n            // get max number in the list \n            if
    (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        //
    get k numbers greater than max number \n        List<long> res1 = arr.Where(x
    => x > max).Take(k).ToList();\n        // sort k numbers greater than max number
    \n        res1.Sort((x, y) => y.CompareTo(max));\n        // insert max number
    at the end of the list \n        result.Insert(0, max);\n        // merge k numbers
    greater than max number to result list \n        int startIndex = 1;\n        result.AddRange(res1);\n
    \       while (startIndex + 1 < res1.Count) {\n            long x = res1[startIndex];\n
    \           long y = res1[startIndex + 1];\n            if (x > y) {\n                result.Add(x);\n
    \               ++startIndex;\n            } else {\n                result.Add(y);\n
    \               ++startIndex;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpknihx91b.cs(37,56): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(k <= arr.Count && k >
    0, \"k must be positive and k must be greater than zero.\");\n        long temp
    = 0L;\n        List<long> result = new List<long>();\n        while (k >= temp)
    {\n            temp = temp.Max();\n            result.Add(temp);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqa1bxpqn.cs(29,20): error CS1929: ''long'' does not contain a definition
    for ''Max'' and the best extension method overload ''ParallelEnumerable.Max(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // write your code here\n        if
    (k > arr.Count) k = arr.Count;\n        Array.Sort(arr);\n        if (arr.Count
    > k) {\n            arr.RemoveRange(0, arr.Count - k);\n        }\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpybtdfxz2.cs(27,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpybtdfxz2.cs(29,32): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(arr.Count > 0);\n        Debug.Assert(0
    <= k && k <= arr.Count);\n        Array.Sort(arr);\n        Array.Sort(arr.Take(k));\n
    \       return arr.Take(k);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl8byw3p4.cs(27,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpl8byw3p4.cs(28,29): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpl8byw3p4.cs(29,25): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count == 0)\n            return
    new List<long>();\n        if (k > arr.Count)\n            return Maximum(arr,
    arr.Count - 1);\n        if (k == 0)\n            return new List<long>(arr.OrderByDescending(o
    => o).Take(arr.Count));\n\n        // find the maximum element in the list\n        var
    max = arr.OrderByDescending(o => o).First();\n        var maxIndex = 0;\n\n        //
    iterate over remaining list\n        for (var i = 1; i < k; i++) {\n            if
    (arr[i] > max)\n                max = arr[i];\n            if (arr[i] == max)\n
    \               maxIndex = i;\n        }\n\n        // replace all the elements
    with the maximum number\n        var newArray = arr.Where(o => o != max).ToArray();\n
    \       var newList = Maximum(newArray, maxIndex + 1);\n\n        return newList.Concat(newArray.Take(maxIndex)).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4w9z9n6y.cs(46,31): error CS1503: Argument 1: cannot convert from ''long[]''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> ret = new List<long>();\n\n
    \       if (k > arr.Count) throw new ArgumentOutOfRangeException(\"k\", \"k can't
    be greater or equal than arr.Count\");\n        if (k > arr.Count) return ret;\n
    \       // sort the arr\n        long[] arr = arr.OrderBy(o => o).ToArray();\n\n
    \       // find max k\n        long max = arr[k-1];\n        long index = 0;\n
    \       while (index < k) {\n            if (arr[index] > max)\n                max
    = arr[index];\n            index++;\n        }\n        ret.Add(max);\n\n        //
    find the k-1 element with max value\n        max = arr[index-1];\n        index
    = 1;\n        while (index < k) {\n            if (arr[index] > max)\n                max
    = arr[index];\n            index++;\n        }\n        ret.Add(max);\n\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_q16qlr5.cs(27,17): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmp_q16qlr5.cs(27,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''long'' and ''method group''

    /tmp/tmp_q16qlr5.cs(28,17): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmp_q16qlr5.cs(28,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''long'' and ''method group''

    /tmp/tmp_q16qlr5.cs(30,16): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k <= 0 || arr.Count == 0 || k >
    arr.Count || arr.Count < 2)\n            return arr;\n        List<long> result
    = new List<long>(k);\n        long max_value = 0;\n        for (int i = 0; i <
    arr.Count; ++i) {\n            if (arr[i] > max_value) {\n                max_value
    = arr[i];\n            }\n        }\n        for (int i = 0; i < k; ++i) {\n            result.Add(max_value);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxpyf6qiu.cs(27,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        bool sorted = true;\n        List<long>
    results = new List<long>();\n        foreach (long num in arr) {\n            if
    (sorted) {\n                long maxnum = results.Max();\n                if (num
    > maxnum) {\n                    maxnum = num;\n                }\n                results.Add(maxnum);\n
    \           } else {\n                if (num > results.Max()) {\n                    results.Add(num);\n
    \               }\n            }\n            sorted = true;\n        }\n        List<long>
    resarry = new List<long>();\n        foreach (long x in results) {\n            resarry.Add(x);\n
    \       }\n        if (k > resarry.Count) {\n            k = resarry.Count;\n
    \       }\n        resarry = resarry.OrderBy(x => x).Take(k).ToList();\n        return
    resarry;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplx_0hlp6.cs(48,48): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n            return
    null;\n        }\n        long n = arr.Count;\n        long maxValue = arr[0];\n
    \       List<long> result = new List<long>();\n        List<long> sorted = new
    List<long>();\n        for (long i = 1; i < n; i++) {\n            if (arr[i]
    > maxValue) {\n                maxValue = arr[i];\n            }\n        }\n
    \       maxValue = maxValue * (long) Math.Pow(2, k);\n        while (true) {\n
    \           long maxLong = maxValue;\n            if (maxValue > long.MaxValue)
    {\n                maxValue = maxValue >> 1;\n            } else {\n                break;\n
    \           }\n        }\n        while (maxValue / 2L > long.MaxValue) {\n            maxValue
    >>= 1L;\n        }\n        for (int i = 0; i < k; i++) {\n            long tmpMaxValue
    = 0;\n            while (maxValue >= tmpMaxValue) {\n                maxValue
    -= tmpMaxValue;\n                maxLong += tmpMaxValue;\n                if (maxLong
    > long.MaxValue) {\n                    tmpMaxValue = maxLong >> 1;\n                }\n
    \           }\n            result.Add(tmpMaxValue);\n        }\n        bool flag
    = false;\n        foreach (var item in result) {\n            if (item < n * (long)
    Math.Pow(2, k)) {\n                sorted.Add(item);\n            }\n        }\n
    \       foreach (var item in sorted) {\n            result.Remove(item);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4n2h1oyy.cs(33,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4n2h1oyy.cs(34,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4n2h1oyy.cs(47,13): error CS0019: Operator ''>>='' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmp4n2h1oyy.cs(53,17): error CS0103: The name ''maxLong'' does not exist
    in the current context

    /tmp/tmp4n2h1oyy.cs(54,21): error CS0103: The name ''maxLong'' does not exist
    in the current context

    /tmp/tmp4n2h1oyy.cs(55,35): error CS0103: The name ''maxLong'' does not exist
    in the current context

    /tmp/tmp4n2h1oyy.cs(60,14): warning CS0219: The variable ''flag'' is assigned
    but its value is never used

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long count = 0;\n        long max =
    arr[0];\n        List<long> result = new List<long>(k);\n        foreach (long
    num in arr) {\n            if (count >= k) {\n                break;\n            }\n
    \           else if (num > max) {\n                max = num;\n            }\n
    \           count++;\n        }\n        if (count < k) {\n            for (long
    i = k; i < count; i++) {\n                result.Add(max);\n            }\n        }\n
    \       else {\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcmwdrakp.cs(27,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int m = arr.Count;\n        List<long>
    temp = new List<long>();\n        arr.Sort();\n        // Find the first k elements
    that have bigger than the largest k.\n        for (int i = 0; i < k; i++) {\n
    \           if (arr[i] > temp[temp.Count - 1]) {\n                temp.Add(arr[i]);\n
    \           }\n        }\n        Array.Reverse(temp);\n        List<long> returnList
    = new List<long>();\n        if (k == 1) {\n            returnList = temp;\n        }\n
    \       else if (k == 2) {\n            returnList = temp;\n            if (arr[1]
    > arr[2]) {\n                returnList.Insert(0, arr[1]);\n            }\n            else
    if (arr[2] > arr[1]) {\n                returnList.Insert(0, arr[2]);\n            }\n
    \       }\n        else if (k == 3) {\n            returnList = temp;\n            if
    (arr[1] > arr[2]) {\n                if (arr[1] > arr[3]) {\n                    if
    (arr[1] > arr[4]) {\n                        if (arr[1] > arr[5]) {\n                            if
    (arr[1] > arr[6]) {\n                                returnList.Insert(0, arr[1]);\n
    \                           }\n                            else if (arr[2] > arr[4])
    {\n                                returnList.Insert(0, arr[2]);\n                            }\n
    \                           else if (arr[3] > arr[4]) {\n                                returnList.Insert(0,
    arr[3]);\n                            }\n                            else if (arr[4]
    > arr[3]) {\n                                returnList.Insert(0, arr[4]);\n                            }\n
    \                           else if (arr[5] > arr[4]) {\n                                returnList.Insert(0,
    arr[5]);\n                            }\n                            else if (arr[6]
    > arr[5]) {\n                                returnList.Insert(0, arr[6]);\n                            }\n
    \                       }\n                        else if (arr[2] > arr[3]) {\n
    \                           if (arr[2] > arr[4]) {\n                                if
    (arr[2] > arr[5]) {\n                                    if (arr[2] > arr[6])
    {\n                                        returnList.Insert(0, arr[2]);\n                                    }\n
    \                                   else if (arr[3] > arr[5]) {\n                                        returnList.Insert(0,
    arr[3]);\n                                    }\n                                    else
    if (arr[4] > arr[5]) {\n                                        returnList.Insert(0,
    arr[4]);\n                                    }\n                                    else
    if (arr[6] > arr[5]) {\n                                        returnList.Insert(0,
    arr[6]);\n                                    }\n                                }\n
    \                               else if (arr[3] > arr[4]) {\n                                    if
    (arr[3] > arr[5]) {\n                                        if (arr[3] > arr[6])
    {\n                                            returnList.Insert(0, arr[3]);\n
    \                                       }\n                                        else
    if (arr[4] > arr[5]) {\n                                            returnList.Insert(0,
    arr[4]);\n                                        }\n                                        else
    if (arr[6] > arr[5]) {\n                                            returnList.Insert(0,
    arr[6]);\n                                        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt1zkbxgy.cs(101,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpt1zkbxgy.cs(115,2): error CS1513: } expected

    '
  timestamp: 1660016051
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Write your code here\n        List<long>
    max = new List<long>();\n        if (arr.Count <= 0) return max;\n        if (k
    <= 0) { return max; }\n        int count = 0;\n        int i = 0;\n        while
    (i < arr.Count && count < k) {\n            long curr = arr[i];\n            if
    (curr > (max[count])) max[count] = curr;\n            count++;\n            i++;\n
    \       }\n        if (count == k) {\n            List<long> copy = new List<long>(max);\n
    \           copy.Add(arr[arr.Count - 1]);\n            max = copy;\n        }\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00043] in <6161dbc0b6b54fe286d03c02e688a554>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <6161dbc0b6b54fe286d03c02e688a554>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00043] in <6161dbc0b6b54fe286d03c02e688a554>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <6161dbc0b6b54fe286d03c02e688a554>:0
    \n"
  stdout: ''
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int k1 = (int)k;\n        List<long>
    result = new List<long>(k1);\n        List<long> tmp = new List<long>(k1);\n        long
    max = 0;\n        long tmp2 = 0;\n        bool flag = true;\n        for (int
    i = 0; i < arr.Count; i++) {\n            if (i < k1) flag = false;\n            tmp
    = arr.Skip(i).Take(k1).ToList();\n            max = Math.Max(max, tmp[0]);\n            long
    tmp3 = tmp[0];\n            if (flag) {\n                if (tmp2 == max) {\n
    \                   result.Add(tmp2);\n                } else {\n                    if
    (tmp2 > max) {\n                        result.Add(tmp2);\n                    }\n
    \                   result.Add(max);\n                }\n                max =
    tmp3;\n                tmp2 = 0;\n            }\n            tmp2 = tmp3;\n        }\n
    \       if (tmp2 > max) {\n            result.Add(tmp2);\n        } else {\n            if
    (tmp2 > max) {\n                result.Add(tmp2);\n            }\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51a72c55dff34c6bbc5305ce5911ee19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51a72c55dff34c6bbc5305ce5911ee19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n
    \       int k1 = k == 0 ? 1 : k;\n        if (k1 > arr.Count)\n            return
    Maximum(arr, k1);\n        List<long> result = new List<long>();\n        bool
    change = false;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            long
    max1 = arr[i];\n            long max2 = arr[i + 1];\n            if (max1 > max2)
    {\n                if (max1 > 0 && max2 > 0)\n                    max1 = (long)Math.Max(max1,
    max2);\n                else\n                    max2 = (long)Math.Max(max1,
    max2);\n            } else if (max1 < max2) {\n                max1 = (long)Math.Min(max1,
    max2);\n            } else {\n                max1 = (long)Math.Max(max1, max2);\n
    \               max2 = (long)Math.Max(max1, max2);\n            }\n            if
    (max1 != max2) {\n                change = true;\n                result.Add(max1);\n
    \               result.Add(max2);\n            } else {\n                result.Add(max1);\n
    \           }\n        }\n        if (change && !result.Contains(arr[result.Count
    - 1]))\n            result.Add(arr[result.Count - 1]);\n        if (k > result.Count)\n
    \           return Maximum(result, k);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3isqbt38.cs(26,18): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016052
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long[] vals = arr.ToArray();\n        Array.Sort(vals);\n
    \       List<long> result = new List<long>();\n        for (int i = 0; i < k;
    i++) {\n            result.Add(vals[i]);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ddefd5aa7af643d5978f1ae732d8e384>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ddefd5aa7af643d5978f1ae732d8e384>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var ans = new List<long>();\n        var
    arr = arr.OrderByDescending(x=>x);\n        \n        int m = arr.Count;\n        int
    n = arr.Min(a => a);\n        int k1 = arr.Min(a => a) - n;\n        int k2 =
    arr.Min(a => a) - n;\n        int k3 = arr.Min(a => a) - n;\n        int k4 =
    arr.Min(a => a) - n;\n        \n        \n        \n        //Console.WriteLine(\"k1:
    \" + k1 + \", k2: \" + k2 + \", k3: \" + k3 + \", k4: \" + k4);\n        \n        if
    (k1 == 0)\n            ans.Add(arr.Min(a => a));\n        else if (k2 == 0)\n
    \           ans.Add(arr.Min(a => a));\n        else if (k3 == 0)\n            ans.Add(arr.Min(a
    => a));\n        else if (k4 == 0)\n            ans.Add(arr.Min(a => a));\n        else\n
    \       {\n            //int ki = arr.Min(a => a) - n;\n            //int mi =
    k1 + k2 + k3 + k4;\n            //int j = (k1 * k2) + (k3 * k4) + (ki * k4);\n
    \           //Console.WriteLine(\"k1: \" + k1 + \", k2: \" + k2 + \", k3: \" +
    k3 + \", k4: \" + k4);\n            //Console.WriteLine(\"mi: \" + mi + \", j:
    \" + j);\n            int mi = k1 + k2 + k3 + k4;\n            int j = (k1 * k2)
    + (k3 * k4);\n            if (j >= mi)\n            {\n                ans.Add(arr.Min(a
    => a));\n            }\n            else\n            {\n                //Console.WriteLine(\"mi:
    \" + mi + \", j: \" + j);\n                \n                if (j < mi)\n                {\n
    \                   ans.Add(arr.Min(a => a));\n                    \n                    int
    ki = arr.Min(a => a) - n;\n                    ans.Add(arr.Min(a => a));\n                    \n
    \                   ans.Add(arr.Min(a => a));\n                }\n                else\n
    \               {\n                    int ki = arr.Min(a => a) - n;\n                    ans.Add(arr.Min(a
    => a));\n                    \n                    ans.Add(arr.Min(a => a));\n
    \                   \n                    ans.Add(arr.Min(a => a));\n                    \n
    \               }\n                \n            }\n        }\n        \n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr4ctpoy2.cs(26,13): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpr4ctpoy2.cs(26,19): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpr4ctpoy2.cs(28,21): error CS0428: Cannot convert method group ''Count''
    to non-delegate type ''int''. Did you intend to invoke the method?

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n            return
    arr.Take(k).ToList();\n        }\n        List<long> result = new List<long>();\n
    \       long max = arr.Max();\n        long n = arr.Count;\n        long min =
    arr.Min();\n        long middle = max / 2;\n        long sum = 0;\n        long
    cnt = 0;\n        foreach (long i in arr) {\n            if (i < middle) {\n                if
    (cnt < k) {\n                    cnt = cnt + 1;\n                    sum++;\n
    \               }\n                result.Add(i);\n            }\n            else
    {\n                sum = sum - Math.Abs(i - middle);\n                if (sum
    > 0) {\n                    result.Add(i);\n                }\n            }\n
    \       }\n        if (sum > 0) {\n            result.Add(max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplvszpoqf.cs(26,29): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < 1 || k > arr.Count)
    {\n            throw new ArgumentOutOfRangeException(\"arr or k is out of range\");\n
    \       }\n        long max = arr.Max();\n        long[] nums = arr.ToArray();\n
    \       int n = nums.Length;\n        long[] ans = new long[k];\n        for (int
    i = 1; i < n; i++) {\n            for (int j = 0; j < k - 1; j++) {\n                if
    (nums[j] > max) {\n                    ans[j] = nums[j];\n                    break;\n
    \               }\n            }\n            if (j == k - 1) {\n                ans[j]
    = nums[j];\n            }\n        }\n        return ans.ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa8oll3re.cs(39,17): error CS0103: The name ''j'' does not exist in the
    current context

    /tmp/tmpa8oll3re.cs(40,21): error CS0103: The name ''j'' does not exist in the
    current context

    /tmp/tmpa8oll3re.cs(40,31): error CS0103: The name ''j'' does not exist in the
    current context

    '
  timestamp: 1660016052
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int start = 0;\n        int end = arr.Count
    - 1;\n\n        while (start <= end) {\n            int mid = (start + end) /
    2;\n            if (arr[mid] > k)\n                end = mid - 1;\n            else
    if (arr[mid] < k)\n                start = mid + 1;\n            else\n                return
    arr.Take(mid).ToList();\n        }\n        return arr.Take(start).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9607b408f65e436d8a14ab3ab387bee3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9607b408f65e436d8a14ab3ab387bee3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Write your code here\n        var
    resultList = new List<long>();\n        for (int i = 1; i <= k; i++) {\n            long
    maxElement = arr.Min();\n            for (int j = i; j <= arr.Count; j++) {\n
    \               if (arr[j] > maxElement) {\n                    maxElement = arr[j];\n
    \               }\n            }\n            resultList.Add(maxElement);\n        }\n
    \       return resultList;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00018] in <1bce9b4c5b9f445ebd7992abb1048d03>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <1bce9b4c5b9f445ebd7992abb1048d03>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00018] in <1bce9b4c5b9f445ebd7992abb1048d03>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <1bce9b4c5b9f445ebd7992abb1048d03>:0
    \n"
  stdout: ''
  timestamp: 1660016052
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 1) {\n            return arr;\n
    \       }\n        if (k > arr.Count) {\n            k = arr.Count;\n        }\n\n
    \       List<long> ret = new List<long>();\n\n        for (int i = 0; i < k; i++)
    {\n            long maxValue = arr.Max();\n            if (maxValue == 0) {\n
    \               maxValue = -1L;\n            }\n            ret.Add(maxValue);\n
    \           arr = arr.OrderByDescending(x => x).ToList();\n            if (arr.Count
    == 0) {\n                break;\n            }\n        }\n        return ret;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad4914f81e264addb222fd29f53864be>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad4914f81e264addb222fd29f53864be>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // write your code here\n        return
    arr.OrderByDescending(a => a).Take(k).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxgjb4azu.cs(26,51): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       List<long> arr = arr.OrderBy(c => (int)c).ToList();\n        // For each
    element, check if it exceeds k. If yes, add the element to the result.\n        foreach
    (long element in arr) {\n            if (k > element) {\n                result.Add(element);\n
    \               k -= element;\n            }\n            if (k <= 0) {\n                break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsg_1fyzv.cs(26,20): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpsg_1fyzv.cs(26,26): error CS0165: Use of unassigned local variable ''arr''

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       Array.Sort(arr, (x, y) => {\n            long xMax = x;\n            long
    yMax = y;\n            if(xMax < yMax) {\n                return -1;\n            }\n
    \           return 1;\n        });\n        for(int i = 0; i <= k; i++) {\n            if(i
    < arr.Count) {\n                res.Add(arr[i]);\n            }\n            else
    if(arr.Count == 0) {\n                break;\n            }\n            else
    {\n                long tempMax = arr[0];\n                for(int j = 1; j <
    arr.Count; j++) {\n                    if(arr[j] > tempMax) {\n                        tempMax
    = arr[j];\n                    }\n                }\n                res.Add(tempMax);\n
    \               arr.RemoveAt(0);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr9ii8i80.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpr9ii8i80.cs(26,25): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       for (int i = 0; i < k; i++) {\n            result.Add(0);\n        }\n
    \       long maxValue = arr[0]; // Initialize max value with first element in
    the list.\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]
    > maxValue) {\n                maxValue = arr[i];\n            }\n            result[i]
    = maxValue;\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84be3b4086694ca1b32808fc2a248a62>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32
    index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x0004d] in <84be3b4086694ca1b32808fc2a248a62>:0
    \n  at Problem.Main (System.String[] args) [0x00055] in <84be3b4086694ca1b32808fc2a248a62>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32
    index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x0004d] in <84be3b4086694ca1b32808fc2a248a62>:0
    \n  at Problem.Main (System.String[] args) [0x00055] in <84be3b4086694ca1b32808fc2a248a62>:0
    \n"
  stdout: ''
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n            k
    = arr.Count;\n        }\n        List<long> result = new List<long>(k);\n        result.AddRange(arr.OrderByDescending(n
    => n).Take(k));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6aptxsat.cs(28,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6aptxsat.cs(29,60): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // init arr pointer\n        long max
    = arr[0];\n        long index = 1;\n        while (index < arr.Count) {\n            if
    (max < arr[index]) {\n                max = arr[index];\n            }\n            index++;\n
    \       }\n        // copy arr to return arr\n        List<long> ret = new List<long>();\n
    \       while (index > 0) {\n            ret.Add(max);\n            index--;\n
    \           max = arr[index];\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp026yb7yj.cs(29,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp026yb7yj.cs(30,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp026yb7yj.cs(39,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long[] num = new long[k];\n        long
    m = 0;\n        long max = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (m == 0) {\n                m = arr[i];\n                max =
    arr[i];\n            }\n            if (arr[i] > max) {\n                m = arr[i];\n
    \               max = arr[i];\n            }\n        }\n        if (m == 0) {\n
    \           num[0] = max;\n        } else {\n            int j = 0;\n            while
    (j < k) {\n                num[j] = max;\n                if (max > num[j]) {\n
    \                   j++;\n                } else {\n                    break;\n
    \               }\n            }\n        }\n        return num.OrderByDescending().ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0o46niz1.cs(51,20): error CS1501: No overload for method ''OrderByDescending''
    takes 0 arguments

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long ans = 0;\n        List<long> result
    = new List<long>();\n\n        if (k > arr.Count || k == 0) {\n            return
    result;\n        }\n\n        if (k == arr.Count) {\n            ans = arr.Last();\n
    \           return result;\n        }\n\n        double maxValue = 0;\n        for
    (int i = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n            if
    (x > maxValue) {\n                maxValue = x;\n            }\n        }\n        ans
    = maxValue;\n\n        for (int i = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n
    \           if (x > maxValue) {\n                maxValue = x;\n            }\n
    \       }\n        ans = maxValue;\n\n        for (int i = 0; i < k; i++) {\n
    \           double x = arr.ElementAt(i);\n            if (x > maxValue) {\n                maxValue
    = x;\n            }\n        }\n        ans = maxValue;\n\n        for (int i
    = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n            if (x
    > maxValue) {\n                maxValue = x;\n            }\n        }\n        ans
    = maxValue;\n\n        for (int i = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n
    \           if (x > maxValue) {\n                maxValue = x;\n            }\n
    \       }\n        ans = maxValue;\n\n        for (int i = 0; i < k; i++) {\n
    \           double x = arr.ElementAt(i);\n            if (x > maxValue) {\n                maxValue
    = x;\n            }\n        }\n        ans = maxValue;\n\n        for (int i
    = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n            if (x
    > maxValue) {\n                maxValue = x;\n            }\n        }\n        ans
    = maxValue;\n\n        for (int i = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n
    \           if (x > maxValue) {\n                maxValue = x;\n            }\n
    \       }\n        ans = maxValue;\n\n        for (int i = 0; i < k; i++) {\n
    \           double x = arr.ElementAt(i);\n            if (x > maxValue) {\n                maxValue
    = x;\n            }\n        }\n        ans = maxValue;\n\n        for (int i
    = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n            if (x
    > maxValue) {\n                maxValue = x;\n            }\n        }\n        ans
    = maxValue;\n\n        for (int i = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n
    \           if (x > maxValue) {\n                maxValue = x;\n            }\n
    \       }\n        ans = maxValue;\n\n        for (int i = 0; i < k; i++) {\n
    \           double x = arr.ElementAt(i);\n            if (x > maxValue) {\n                maxValue
    = x;\n            }\n        }\n        ans = maxValue;\n\n        for (int i
    = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n            if (x
    > maxValue) {\n                maxValue = x;\n            }\n        }\n        ans
    = maxValue;\n\n        for (int i = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n
    \           if (x > \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2wpwnv2i.cs(144,20): error CS1525: Invalid expression term ''}''

    /tmp/tmp2wpwnv2i.cs(144,20): error CS1026: ) expected

    /tmp/tmp2wpwnv2i.cs(144,20): error CS1002: ; expected

    /tmp/tmp2wpwnv2i.cs(146,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp2wpwnv2i.cs(160,2): error CS1513: } expected

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // sort arr\n        Array.Sort(arr);\n
    \       // construct kth number list\n        List<long> kth = new List<long>();\n
    \       for (int i = k; i > 0; i--)\n            kth.Add(arr[i - 1]);\n        //
    reverse kth list\n        for (int i = k; i > 0; i--)\n            kth[i - 1]
    *= -1;\n        // copy all elements except kth number\n        List<long> res
    = new List<long>();\n        for (int i = 0; i < arr.Length - k + 1; i++)\n            res.Add(arr[i]);\n
    \       // reverse the result list\n        res.Reverse();\n        // return
    the result\n        return kth;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ffu3e7a.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp3ffu3e7a.cs(29,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp3ffu3e7a.cs(32,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp3ffu3e7a.cs(36,33): error CS1061: ''List<long>'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''List<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1660016052
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count == 0) return null;\n
    \       long min = arr.Min();\n        long max = arr.Max();\n        if (min
    == max) return arr;\n        List<long> results = new List<long>();\n        List<long>
    newArr = new List<long>();\n        bool isAllGreaterThanMin = true;\n        bool
    isAllLessThanMax = true;\n        bool isAllEqual = true;\n        foreach (long
    num in arr) {\n            if (num > min) {\n                newArr.Add(num);\n
    \               if (num <= max) isAllGreaterThanMin = false;\n            } else
    {\n                if (num >= min) {\n                    newArr.Add(num);\n                    if
    (num >= max) isAllLessThanMax = false;\n                } else {\n                    isAllEqual
    = false;\n                }\n            }\n        }\n        bool isGreaterThanMax
    = k <= arr.Max();\n        bool isLessThanMin = k <= arr.Min();\n        if (!isGreaterThanMax
    && !isLessThanMin) return arr;\n        if (isAllGreaterThanMin && isAllLessThanMax)
    {\n            return newArr;\n        }\n        if (isAllEqual) return newArr;\n
    \       if (isGreaterThanMax) {\n            foreach (long num in newArr) {\n
    \               if (num <= max) results.Add(num);\n            }\n        } else
    {\n            foreach (long num in newArr) {\n                if (num >= min)
    results.Add(num);\n            }\n        }\n        return results.ToArray().OrderByDescending(num
    => num).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aed5252644dc49049fe19edf2b5cc1bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aed5252644dc49049fe19edf2b5cc1bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016053
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count || k < 0) return
    null;\n        List<long> maximums = new List<long>();\n        long max = 0;\n
    \       foreach (long num in arr) {\n            if (num > max) {\n                max
    = num;\n            }\n        }\n        foreach (long num in arr) {\n            if
    (num == max) {\n                maximums.Add(num);\n                if (maximums.Count
    > k) {\n                    maximums.RemoveAt(0);\n                }\n            }\n
    \       }\n        return maximums;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3482d49e26d4a1fafca2024a9bb8502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3482d49e26d4a1fafca2024a9bb8502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var ans = new List<long>();\n        var
    max = new List<long>();\n        var count = new Dictionary<long, int>();\n        \n
    \       foreach(var num in arr) {\n            if(!count.ContainsKey(num)) {\n
    \               count.Add(num, 0);\n            }\n            \n            var
    count = count[num];\n            if(count > 1) {\n                count.Value++;\n
    \           } else {\n                count = 1;\n            }\n            count[num]
    = count;\n            \n            if(count > max[maxIndex]) {\n                maxIndex
    = maxIndex == -1 ? 0 : maxIndex;\n                max[maxIndex] = num;\n            }\n
    \       }\n        \n        for(var i = 0; i < maxIndex; i++) {\n            ans.Add(max[i]);\n
    \       }\n        \n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo785z9_m.cs(30,17): error CS0841: Cannot use local variable ''count''
    before it is declared

    /tmp/tmpo785z9_m.cs(31,17): error CS0841: Cannot use local variable ''count''
    before it is declared

    /tmp/tmpo785z9_m.cs(34,17): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpo785z9_m.cs(34,25): error CS0841: Cannot use local variable ''count''
    before it is declared

    /tmp/tmpo785z9_m.cs(42,28): error CS0103: The name ''maxIndex'' does not exist
    in the current context

    /tmp/tmpo785z9_m.cs(43,17): error CS0103: The name ''maxIndex'' does not exist
    in the current context

    /tmp/tmpo785z9_m.cs(43,28): error CS0103: The name ''maxIndex'' does not exist
    in the current context

    /tmp/tmpo785z9_m.cs(43,49): error CS0103: The name ''maxIndex'' does not exist
    in the current context

    /tmp/tmpo785z9_m.cs(44,21): error CS0103: The name ''maxIndex'' does not exist
    in the current context

    /tmp/tmpo785z9_m.cs(48,28): error CS0103: The name ''maxIndex'' does not exist
    in the current context

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Dictionary<long, long> nums = new Dictionary<long,
    long>();\n        foreach (var item in arr) {\n            if (nums.ContainsKey(item))
    {\n                nums[item] += 1;\n            } else {\n                nums.Add(item,
    1L);\n            }\n        }\n        List<long> res = new List<long>();\n        var
    maxCount = 0;\n        foreach (var num in nums) {\n            var count = nums[num];\n
    \           if (count > maxCount) {\n                maxCount = count;\n                res.Clear();\n
    \               res.Add(num);\n            } else if (count == maxCount) {\n                res.Add(num);\n
    \           }\n        }\n        return res.Take(k).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42nr7df7.cs(36,30): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.KeyValuePair<long,
    long>'' to ''long''

    /tmp/tmp42nr7df7.cs(38,28): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp42nr7df7.cs(40,25): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.KeyValuePair<long,
    long>'' to ''long''

    /tmp/tmp42nr7df7.cs(42,25): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.KeyValuePair<long,
    long>'' to ''long''

    /tmp/tmp42nr7df7.cs(45,25): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long N = arr.Count;\n        if (N
    < 1) return new List<long>();\n        long max = arr[0];\n        for (int i
    = 1; i < N; i++) {\n            long curr = arr[i];\n            if (max < curr)
    {\n                max = curr;\n            }\n        }\n        return new List<long>(arr.Take(k).ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpptl5sbzk.cs(34,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016052
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = arr[0].ToLong();\n        List<long>
    result = new List<long>(k);\n        long max = arr[0].ToLong();\n        for
    (int i = 0; i < arr.Count; ++i) {\n            if (arr[i].ToLong() > max) {\n
    \               max = arr[i].ToLong();\n            }\n            if (arr[i].ToLong()
    == max) {\n                result.Add(arr[i].ToLong());\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_yfujfey.cs(25,27): error CS1061: ''long'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp_yfujfey.cs(26,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_yfujfey.cs(27,14): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    /tmp/tmp_yfujfey.cs(27,27): error CS1061: ''long'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp_yfujfey.cs(29,24): error CS1061: ''long'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp_yfujfey.cs(30,30): error CS1061: ''long'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp_yfujfey.cs(32,24): error CS1061: ''long'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp_yfujfey.cs(33,35): error CS1061: ''long'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int n = arr.Count;\n        long[]
    arr = arr.OrderByDescending(x => x).ToArray();\n        List<long> max = new List<long>(k);\n
    \       long max_num = arr[0];\n        for (int i = 0; i < k; i++) {\n            if
    (max_num < arr[i]) {\n                max_num = arr[i];\n            }\n        }\n
    \       max.Add(max_num);\n        long[] result_arr = max.OrderByDescending(x
    => x).ToArray();\n        return new List<long>(result_arr);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpryb7elt2.cs(25,17): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpryb7elt2.cs(25,21): error CS0428: Cannot convert method group ''Count''
    to non-delegate type ''int''. Did you intend to invoke the method?

    /tmp/tmpryb7elt2.cs(26,16): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpryb7elt2.cs(27,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count == 0) {\n            return
    new List<long>();\n        }\n        int len = arr.Count;\n        List<long>
    result = new List<long>();\n        Array.Sort(arr);\n        if (k > arr.Count)
    {\n            k = arr.Count;\n        }\n        if (k == 0) {\n            return
    arr;\n        }\n        while (k != 0) {\n            int i = 0;\n            long
    maxVal = arr[i];\n            for (int j = 0; j < k; j++) {\n                if
    (maxVal > arr[i]) {\n                    maxVal = arr[i];\n                }\n
    \               i++;\n            }\n            result.Add(maxVal);\n            k--;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnc0wo75.cs(30,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var list = new List<long>();\n        var
    length = arr.Count;\n        long max = 0;\n        long min = long.MaxValue;\n
    \       foreach (var num in arr) {\n            long cur = num;\n            while
    (list.Contains(cur)) {\n                cur++;\n            }\n            list.Add(cur);\n
    \           if (cur > max) {\n                max = cur;\n            }\n            if
    (cur < min) {\n                min = cur;\n            }\n        }\n        if
    (min == long.MinValue && max == long.MaxValue) {\n            list.Add(1);\n        }\n
    \       if (length == 0) {\n            list.Add(1);\n        }\n        if (length
    == 1) {\n            list.Add(1);\n        }\n        if (length == 2) {\n            list.Add(1);\n
    \       }\n        if (length == 3) {\n            list.Add(1);\n        }\n        if
    (length == 4) {\n            list.Add(1);\n        }\n        if (length == 5)
    {\n            list.Add(1);\n        }\n        if (length == 6) {\n            list.Add(1);\n
    \       }\n        if (length == 7) {\n            list.Add(1);\n        }\n        if
    (length == 8) {\n            list.Add(1);\n        }\n        if (length == 9)
    {\n            list.Add(1);\n        }\n        if (length == 10) {\n            list.Add(1);\n
    \       }\n        if (length == 11) {\n            list.Add(1);\n        }\n
    \       if (length == 12) {\n            list.Add(1);\n        }\n        if (length
    == 13) {\n            list.Add(1);\n        }\n        if (length == 14) {\n            list.Add(1);\n
    \       }\n        if (length == 15) {\n            list.Add(1);\n        }\n
    \       if (length == 16) {\n            list.Add(1);\n        }\n        if (length
    == 17) {\n            list.Add(1);\n        }\n        if (length == 18) {\n            list.Add(1);\n
    \       }\n        if (length == 19) {\n            list.Add(1);\n        }\n
    \       if (length == 20) {\n            list.Add(1);\n        }\n        if (length
    == 21) {\n            list.Add(1);\n        }\n        if (length == 22) {\n            list.Add(1);\n
    \       }\n        if (length == 23) {\n            list.Add(1);\n        }\n
    \       if (length == 24) {\n            list.Add(1);\n        }\n        if (length
    == 25) {\n            list.Add(1);\n        }\n        if (length == 26) {\n            list.Add(1);\n
    \       }\n        if (length == 27) {\n            list.Add(1);\n        }\n
    \       if (length == 28) {\n            list.Add(1);\n        }\n        if (length
    == 29) {\n            list.Add(1);\n        }\n        if (length == 30) {\n            list.Add(1);\n
    \       }\n        if (length == 31) {\n            list.Add(1);\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpste3j1vv.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       Array.Sort(arr);\n        int current = 0;\n        while (current < arr.Count
    && current + k > arr.Count) {\n            result.Add(arr[arr.Count - 1]);\n            result.Add(arr[current]);\n
    \           current++;\n        }\n        if (current < arr.Count) {\n            for
    (int i = current; i < arr.Count && i + k < arr.Count; i++) {\n                result.Add(arr[i]);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2l64pqle.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(arr.Count > 0);\n        Debug.Assert(k
    <= arr.Count);\n        Debug.Assert(k <= 1000);\n        long sum = 0;\n        var
    rec = new List<long>();\n        for (long i = 0; i < arr.Count; ++i) {\n            sum
    += arr[i];\n            if (sum > k) {\n                sum -= k;\n                Debug.Assert(sum
    >= 0);\n                rec.Add(k - sum);\n                k = sum;\n            }\n
    \           if (sum < k) {\n                rec.Add(arr[i]);\n                k
    = sum;\n            }\n        }\n        Debug.Assert(k == sum);\n        return
    rec;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2esxm3j6.cs(31,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2esxm3j6.cs(39,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max = Math.Max(arr.FirstOrDefault(),
    arr[0]);\n        var res = new List<long>(k);\n        for (int i = 1; i < k;
    i++) {\n            var c = Math.Abs(arr[i] - max);\n            if (c > 0) res.Add(max);\n
    \           max = Math.Max(max, arr[i]);\n        }\n        res.Add(max);\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfcfjw24i.cs(26,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // initialize a list to store the maximum
    k elements\n        List<long> maxK = new List<long>();\n        // initialize
    a variable to store the maximum element in the input list\n        long maxElement
    = arr[0];\n        // traverse the list\n        foreach (long element in arr)
    {\n            // compare the element with the max element in the list\n            if
    (element > maxElement) {\n                // if the max element in the list is
    greater than the current element\n                // update the max element in
    the list with the current element\n                maxElement = element;\n            }\n
    \           // if the current element in the list is equal to the max element
    in the list\n            // add the current element to the max list \n            if
    (maxK.Count() == k && maxK[maxK.Count() - 1] == maxElement) {\n                maxK.Add(element);\n
    \           }\n        }\n        return maxK;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a8c4e6718754a639cfcd5be6aa14831>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a8c4e6718754a639cfcd5be6aa14831>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016053
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n            throw
    new ArgumentException(\"Array length is shorter than k\");\n        }\n\n        List<long>
    res = new List<long>(arr.Count);\n\n        for (int i = 0; i < k; i++) {\n            long
    max = 0;\n            for (int j = 0; j < arr.Count; j++) {\n                if
    (arr[j] > max) {\n                    max = arr[j];\n                }\n            }\n\n
    \           res.Add(max);\n        }\n\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dcfda091f7ad43f3a8912014d8a3858b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dcfda091f7ad43f3a8912014d8a3858b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       List<long> tmp = new List<long>();\n        long m = 0, max = 0;\n        //
    find the max of arr\n        foreach (long i in arr) {\n            if (i >= 0)
    {\n                max = Math.Max(max, i);\n            }\n        }\n        if
    (max > 0) {\n            // reserve k items to put in res\n            while (k
    > 0) {\n                tmp.Add(0);\n                k--;\n            }\n            //
    calculate the max number of this k max numbers\n            for (int i = 0; i
    < arr.Count; i++) {\n                long count = arr.ElementAt(i);\n                tmp[m++]
    = count;\n                for (int j = k - m; j > 0; j--) {\n                    if
    (count > tmp[m]) {\n                        tmp[m] = count;\n                        m++;\n
    \                   }\n                    else {\n                        break;\n
    \                   }\n                }\n            }\n            // put res
    to the res\n            for (int i = 0; i < tmp.Count; i++) {\n                long
    count = tmp.ElementAt(i);\n                for (int j = m; j > 0; j--) {\n                    if
    (count > tmp.ElementAt(j)) {\n                        break;\n                    }\n
    \                   else {\n                        tmp.RemoveAt(j);\n                        m--;\n
    \                   }\n                }\n                res.Add(count);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnn06j_3_.cs(43,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnn06j_3_.cs(44,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnn06j_3_.cs(45,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnn06j_3_.cs(46,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnn06j_3_.cs(57,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016053
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\n
    \       // Using Sedgewick's Algorithm\n        // 1. Sort the array using quick
    sort\n        arr = arr.OrderByDescending(x => x).ToList();\n\n        // 2. Take
    the first k numbers from the sorted array\n        for (int i = 0; i < k; i++)\n
    \           res.Add(arr[0]);\n\n        // 3. Continue to take numbers from the
    sorted array \n        // until the length of the sorted array is less than k.\n
    \       for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > arr[i
    - 1]) {\n                res.Add(arr[i - 1]);\n            }\n            else\n
    \               break;\n        }\n\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31235862395a4601abd947fd122c0326>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31235862395a4601abd947fd122c0326>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long maxValue = 0;\n        List<long>
    result = new List<long>();\n        int l = arr.Count;\n        long arrSum =
    0;\n        long[] a = new long[l];\n        for (int i = 0; i < l; i++) {\n            arrSum
    += arr[i];\n            a[i] = arr[i] / arrSum;\n        }\n        for (int i
    = 0; i < l; i++) {\n            long curr = a[i];\n            long max = 0;\n
    \           if (curr > maxValue) {\n                maxValue = curr;\n                max
    = a[i];\n            }\n            long next = 0;\n            for (int j = i
    + 1; j < l; j++) {\n                next = curr;\n                curr = curr
    * arr[j];\n                if (curr > max) {\n                    max = curr;\n
    \               }\n            }\n            result.Add(max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dee7b0c9a9df4d8f9932d2db14979885>:0
    \n\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide by
    zero.\n  at Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64
    k) [0x00039] in <dee7b0c9a9df4d8f9932d2db14979885>:0 \n  at Problem.Main (System.String[]
    args) [0x00055] in <dee7b0c9a9df4d8f9932d2db14979885>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.DivideByZeroException: Attempted to divide by zero.\n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00039] in <dee7b0c9a9df4d8f9932d2db14979885>:0
    \n  at Problem.Main (System.String[] args) [0x00055] in <dee7b0c9a9df4d8f9932d2db14979885>:0
    \n"
  stdout: ''
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n            throw
    new ArgumentException(\"k\", \"k must be greater than or equal to length of arr\");\n
    \       }\n        int[] nums = new int[k];\n        int count = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > nums[count]) {\n                nums[count]
    = arr[i];\n                count++;\n            }\n        }\n        List<long>
    res = new List<long>();\n        for (int i = 0; i < nums.Length; i++) {\n            if
    (nums[i] != 0) {\n                res.Add(nums[i]);\n            }\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8qatf_s0.cs(32,31): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n            throw
    new ArgumentException(\"k should be less than arr.Count\");\n        }\n        List<long>
    result = new List<long>();\n        long maxNum = arr[k - 1];\n        for (int
    i = k; i < arr.Count; i++) {\n            long num = arr[i];\n            if (num
    > maxNum) {\n                maxNum = num;\n            }\n            else if
    (num < maxNum) {\n                result.Add(maxNum);\n                maxNum
    = num;\n            }\n            else {\n                result.Add(num);\n
    \           }\n        }\n        result.Add(maxNum);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp29p08o6f.cs(29,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp29p08o6f.cs(30,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long[] ints = arr.ToArray();\n        ints.sort(new
    Comparison<int>() { \n            // comparer\n            public int Compare(long
    x, long y) {\n                long c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != 0)\n                    return
    c;\n                c = x - y;\n                if (c != \n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi3cputv5.cs(26,42): error CS1513: } expected

    /tmp/tmpi3cputv5.cs(26,42): error CS1026: ) expected

    /tmp/tmpi3cputv5.cs(26,42): error CS1002: ; expected

    /tmp/tmpi3cputv5.cs(28,13): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpi3cputv5.cs(138,25): error CS1525: Invalid expression term ''}''

    /tmp/tmpi3cputv5.cs(138,25): error CS1026: ) expected

    /tmp/tmpi3cputv5.cs(138,25): error CS1002: ; expected

    /tmp/tmpi3cputv5.cs(140,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpi3cputv5.cs(154,2): error CS1513: } expected

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long max = long.MinValue;\n        long min = long.MaxValue;\n        for
    (int i = 0; i < k; i++) {\n            if (arr[i] > max) max = arr[i];\n            if
    (arr[i] < min) min = arr[i];\n        }\n        bool isAscending = max - min
    < 0;\n        while (isAscending) {\n            for (int i = 0; i < k; i++) {\n
    \               if (arr[i] > max) max = arr[i];\n                if (arr[i] <
    min) min = arr[i];\n            }\n            isAscending = max - min < 0;\n
    \       }\n        result.Add(max);\n        for (int i = k - 1; i >= 0; i--)
    {\n            bool isDescending = arr[i] < max;\n            while (isDescending)
    {\n                for (int j = k - 1; j > i; j--) {\n                    if (arr[j]
    < max) max = arr[j];\n                }\n                isDescending = arr[i]
    < max;\n            }\n            result.Add(arr[i]);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpogb1tf9q.cs(41,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpogb1tf9q.cs(44,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count > k) {\n            List<long>
    res = _Maximum(arr, k, Enumerable.Range(0, arr.Count).Select(x => 0));\n            Array.Sort(res.ToArray(),
    (x, y) => x - y);\n            return res;\n        } else {\n            return
    arr;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo8wdwawp.cs(26,30): error CS0103: The name ''_Maximum'' does not exist
    in the current context

    /tmp/tmpo8wdwawp.cs(27,49): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpo8wdwawp.cs(27,49): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count || k < 0) {\n            throw
    new ArgumentException(\"k\");\n        }\n        var answer = new List<long>(arr.Count);\n
    \       var max = arr.Max();\n        answer.Add(max);\n        foreach (var num
    in arr.Skip(1)) {\n            if (num > max) {\n                max = num;\n
    \               answer.Add(max);\n            } else {\n                answer.Add(num);\n
    \           }\n        }\n        return answer.Take(k);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf4p3iyh4.cs(39,28): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(k <= arr.Count);\n        if
    (k == 0) {\n            return arr;\n        }\n        List<long> maxK = new
    List<long>();\n        Array.Sort(arr);\n        List<long> remaining = arr.Take(k).ToList();\n
    \       for (int i = 0; i < k; ++i) {\n            foreach (long number in maxK)
    {\n                long maxNumber = Math.Abs(number - remaining.Sum());\n                if
    (maxNumber >= arr[i]) {\n                    maxK.Add(arr[i]);\n                    remaining.Remove(arr[i]);\n
    \                   break;\n                }\n            }\n        }\n        return
    maxK;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptj5a85xf.cs(30,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmptj5a85xf.cs(31,41): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       if (k <= arr.Count) {\n            result.AddRange(arr.Take(arr.Count
    - k));\n            for (int i = 0; i < k - result.Count; i++) {\n                result.Add(0);\n
    \           }\n            result.AddRange(arr.Skip(arr.Count - k));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvrmkl40s.cs(27,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpvrmkl40s.cs(31,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016053
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        var
    buffer = new List<long>();\n        var pos = -1;\n        foreach (var item in
    arr) {\n            if (pos == -1) pos = 0;\n            buffer.Add(item);\n            if
    (buffer.Count == k) {\n                buffer.Sort();\n                var max
    = buffer.First();\n                for (int i = 1; i < buffer.Count; i++) {\n
    \                   if (max == buffer[i]) continue;\n                    buffer.RemoveAt(i);\n
    \                   pos = i;\n                    break;\n                }\n
    \               result.Add(max);\n                buffer.Clear();\n            }\n
    \       }\n        if (buffer.Count > 0) buffer.Sort();\n        for (int i =
    0; i < buffer.Count; i++) result.Add(buffer[i]);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8e2b17e4b06486798221c4b85271e37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8e2b17e4b06486798221c4b85271e37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr == null || arr.Count == 0)\n
    \           throw new ArgumentNullException(\"arr\");\n        if (k <= 0)\n            throw
    new ArgumentOutOfRangeException(\"k\");\n        if (k > arr.Count)\n            throw
    new ArgumentOutOfRangeException(\"k\");\n\n        long l = Math.Min(arr.Count,
    k);\n        var ret = new List<long>(l);\n        int j = 0;\n        for (int
    i = 0; i < arr.Count && j < k; ++i)\n            if (arr[i] > arr[j]) {\n                ret.Add(arr[i]);\n
    \               ++j;\n            }\n            else if (arr[i] < arr[j]) {\n
    \               ++j;\n            }\n            else\n                ;\n        if
    (j == k) {\n            ret.AddRange(arr.Take(j));\n            return ret;\n
    \       }\n        else {\n            for (int i = 0; i < l; ++i) {\n                ret.Add(arr[i]);\n
    \           }\n            return ret;\n        }\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2nugfymf.cs(33,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2nugfymf.cs(44,17): warning CS0642: Possible mistaken empty statement

    '
  timestamp: 1660016053
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       if (arr.Count > 0) {\n            for (int i = 0; i < k; i++) {\n                long
    max = arr[0];\n                for (int j = 1; j < arr.Count; j++) {\n                    if
    (max < arr[j]) {\n                        max = arr[j];\n                    }\n
    \               }\n                result.Add(max);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <34474084f5144e4c82d2e0c5061f8a47>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <34474084f5144e4c82d2e0c5061f8a47>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0 || arr.Count == 0) {\n            return
    new List<long>();\n        }\n        if (k >= arr.Count) {\n            return
    new List<long>();\n        }\n        var max_item = arr.OrderByDescending(i =>
    i).Take(k).ToList();\n        if (max_item.Count == 0) {\n            return new
    List<long>();\n        }\n        return max_item;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwg2sc0nn.cs(31,59): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpwg2sc0nn.cs(32,13): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) return new List<long>(arr);\n
    \       if (k > arr.Count) return new List<long>(arr.Take(k).ToArray());\n        var
    l = new List<long>(arr.Take(k).ToArray());\n        var m = l.Count;\n        if
    (arr.Count % k != 0) {\n            m = m + 1;\n            l.Add(arr.Last());\n
    \       }\n        long m = Long.MinValue + 1;\n        long best = 0;\n        long
    min = 1;\n        foreach (var i in arr) {\n            long n = m - m * i / k;\n
    \           if (n >= min) {\n                best = n;\n            }\n            if
    (n > best) {\n                m = n;\n                best = i;\n            }\n
    \           min = Math.Min(Math.Abs(m), best);\n        }\n        l.Add(best);\n
    \       return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmb4t5ljh.cs(26,59): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpmb4t5ljh.cs(27,41): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpmb4t5ljh.cs(33,14): error CS0128: A local variable or function named ''m''
    is already defined in this scope

    /tmp/tmpmb4t5ljh.cs(33,18): error CS0103: The name ''Long'' does not exist in
    the current context

    /tmp/tmpmb4t5ljh.cs(42,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016053
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var list = new List<long>();\n        var
    max = arr.Min();\n        foreach (var item in arr) {\n            if (item >
    max) {\n                max = item;\n            }\n        }\n        var length
    = max - arr.Min();\n        List<long> ret = new List<long>();\n        if (k
    > length) k = length;\n        long minDiff = arr.Min() - k;\n        for (int
    i = 0; i < k; i++) {\n            long next = arr.Min() + i;\n            if (k
    - i < minDiff) {\n                minDiff = k - i;\n            }\n            if
    (next < k) {\n                ret.Add(next);\n            } else {\n                ret.Add(k);\n
    \           }\n        }\n        if (k > minDiff) ret.Add(k);\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <911149d52cf845eab051767719ace05c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <911149d52cf845eab051767719ace05c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long[] list = new long[k];\n        for
    (int i = 0; i < k; i++)\n            list[i] = -1000 + i;\n        int[] arr =
    new int[k];\n        for (int i = 0; i < k; i++)\n            arr[i] = i;\n        List<long>
    result = new List<long>();\n        for (long i : arr) {\n            for (long
    j : list) {\n                if (j < i)\n                    continue;\n                long
    a = i + j;\n                long b = Math.Max(i, j);\n                if (b ==
    a)\n                    continue;\n                long c = j - a; // the smaller
    number\n                if (c > 0) // if c is positive, the number is greater
    than the current maximum\n                    continue;\n                // if
    a is greater than b, then a is smaller than current maximum, we can just add j
    to the result\n                if (a > b)\n                    result.Add(j);\n
    \           }\n        }\n        return result.OrderByDescending(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo7qxsr78.cs(32,21): error CS1002: ; expected

    /tmp/tmpo7qxsr78.cs(32,21): error CS1525: Invalid expression term '':''

    /tmp/tmpo7qxsr78.cs(32,21): error CS1001: Identifier expected

    /tmp/tmpo7qxsr78.cs(33,25): error CS1002: ; expected

    /tmp/tmpo7qxsr78.cs(33,25): error CS1525: Invalid expression term '':''

    /tmp/tmpo7qxsr78.cs(33,25): error CS1001: Identifier expected

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       long ans = long.MinValue;\n        foreach (long num in arr) {\n            if
    (k < num) {\n                k = num;\n            }\n            if (k == ans)
    {\n                break;\n            }\n            ans = k;\n            int
    j = arr.IndexOf(num);\n            arr.RemoveAt(j);\n            while (j >= 0
    && arr.Count == 1) {\n                j--;\n                long temp = arr.ElementAt(0);\n
    \               result.Add(temp);\n                arr.RemoveAt(0);\n            }\n
    \           if (j >= 0 && arr.Count > 0) {\n                k = j;\n            }\n
    \       }\n        result.Add(ans);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Collection was
    modified; enumeration operation may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare
    () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext
    () [0x0004a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum (System.Collections.Generic.List`1[T]
    arr, System.Int64 k) [0x000b1] in <0d15eba6d85c4e0da1d8c836a7382427>:0 \n  at
    Problem.Main (System.String[] args) [0x00017] in <0d15eba6d85c4e0da1d8c836a7382427>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Collection
    was modified; enumeration operation may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare
    () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext
    () [0x0004a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum (System.Collections.Generic.List`1[T]
    arr, System.Int64 k) [0x000b1] in <0d15eba6d85c4e0da1d8c836a7382427>:0 \n  at
    Problem.Main (System.String[] args) [0x00017] in <0d15eba6d85c4e0da1d8c836a7382427>:0
    \n"
  stdout: ''
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var m = arr.Count - 1;\n        if
    (k > m) {\n            return new List<long>();\n        }\n        var max =
    new List<long>();\n        long[] p = new long[k];\n        int m = k;\n        Array.Sort(arr,
    (p1, p2) => { if (p1 > p2) return 1; else if (p1 < p2) return -1; else return
    0; });\n        for (int i = 0; i < p[k] - k + 1 && !m; ++i) {\n            max
    = max.Concat(arr.GetRange(i + k, k)).ToList();\n        }\n        if (m) {\n
    \           var newArr = arr.GetRange(m, k);\n            max = max.Concat(newArr).ToList();\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb51mu0rq.cs(31,13): error CS0128: A local variable or function named ''m''
    is already defined in this scope

    /tmp/tmpb51mu0rq.cs(31,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpb51mu0rq.cs(32,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpb51mu0rq.cs(32,25): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    /tmp/tmpb51mu0rq.cs(33,45): error CS0023: Operator ''!'' cannot be applied to
    operand of type ''int''

    /tmp/tmpb51mu0rq.cs(34,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpb51mu0rq.cs(34,50): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpb51mu0rq.cs(36,13): error CS0029: Cannot implicitly convert type ''int''
    to ''bool''

    /tmp/tmpb51mu0rq.cs(37,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016053
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int n = arr.Count;\n        long[]
    sum = new long[n];\n        long max = 0;\n        for (int i = 0; i < n; i++)
    {\n            sum[i] = arr[i];\n        }\n        for (int i = 0; i < n - k
    + 1; i++) {\n            long sumMax = max;\n            for (int j = i; j < i
    + k; j++) {\n                sumMax = Math.Max(sumMax, sum[j]);\n            }\n
    \           max = Math.Max(sumMax, max);\n        }\n        List<long> result
    = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (i
    == 0)\n                result.Add(sum[0]);\n            else if (i == max)\n                result.Add(max);\n
    \           else\n                result.Add(sum[i]);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37c665f2e69742ab92eb7c78a3921080>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37c665f2e69742ab92eb7c78a3921080>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Dictionary<long, long> dict = new Dictionary<long,
    long>();\n        int maxLen = 0;\n        for (long cur : arr) {\n            if
    (dict.ContainsKey(cur)) {\n                dict[cur]++;\n                if (dict[cur]
    > maxLen) {\n                    maxLen = dict[cur];\n                }\n            }
    else {\n                dict.Add(cur, 1);\n                if (dict.Count > maxLen)
    {\n                    maxLen = dict.Count;\n                }\n            }\n
    \       }\n        List<long> result = new List<long>();\n        foreach (long
    key in dict.Keys) {\n            long value = dict[key];\n            for (int
    i = 0; i < value; i++) {\n                result.Add(key);\n            }\n        }\n
    \       result.RemoveAt(result.Count - 1);\n        if (result.Count > k) {\n
    \           return result.Take(k).ToList();\n        } else {\n            return
    result;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptk467ed0.cs(27,23): error CS1002: ; expected

    /tmp/tmptk467ed0.cs(27,23): error CS1525: Invalid expression term '':''

    /tmp/tmptk467ed0.cs(27,23): error CS1001: Identifier expected

    '
  timestamp: 1660016053
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Dictionary<long, long> d = new Dictionary<long,
    long>();\n        for (int i = 0; i < arr.Count; i++) {\n            long num
    = arr[i];\n            long cnt = 0;\n            if (d.TryGetValue(num, out cnt))
    {\n                d[num] = d[num] + 1;\n            }\n            else {\n                d.Add(num,
    1);\n            }\n            if (cnt == k) {\n                return arr.Take(i).OrderByDescending(v
    => v).ToList();\n            }\n        }\n        throw new Exception(\"No solution
    found\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Exception: No solution found\n  at Problem.Maximum
    (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x000a1] in <bac08b2bb3df4ace8eb11f404e3c5425>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <bac08b2bb3df4ace8eb11f404e3c5425>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: No solution found\n  at
    Problem.Maximum (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x000a1]
    in <bac08b2bb3df4ace8eb11f404e3c5425>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <bac08b2bb3df4ace8eb11f404e3c5425>:0 \n"
  stdout: ''
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k <= 0 || arr.Count <= 0) {\n            return
    new List<long>();\n        }\n        // 1. Initialize a dictionary to store the
    position of each element\n        Dictionary<long, int> dic;\n        dic = arr.ToDictionary(e
    => e, e => arr.IndexOf(e));\n        // 2. Initialize a stack to store element\n
    \       Stack<long> st = new Stack<long>();\n        // 3. Get k numbers from
    the stack and put them in the dictionary\n        for (int i = 0; i < k; i++)
    {\n            st.Push(st.Peek());\n        }\n        dic = st.ToDictionary(e
    => e, e => st.IndexOf(e));\n        // 4. Initialize an empty list for return\n
    \       List<long> result = new List<long>();\n        // 5. Pop k numbers one
    by one from the dictionary\n        while (st.Count > 0) {\n            long temp
    = st.Pop();\n            result.Add(dic[temp]);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoljshvfv.cs(37,44): error CS1929: ''Stack<long>'' does not contain a definition
    for ''IndexOf'' and the best extension method overload ''MemoryExtensions.IndexOf<long>(Span<long>,
    long)'' requires a receiver of type ''Span<long>''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // write your code here\n        List<long>
    list = new List<long>();\n        if (arr.Count > 0)\n        {\n            List<long>
    list = new List<long>();\n            list.AddRange(arr.Take(k));\n            list.Sort();\n
    \           list.AddRange(arr.Skip(k));\n            list.Sort();\n            list
    = list.Distinct().ToList();\n        }\n        return list;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw3l1pm6c.cs(29,24): error CS0136: A local or parameter named ''list''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpw3l1pm6c.cs(30,36): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpw3l1pm6c.cs(32,36): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(k <= arr.Count);\n        List<long>
    res = new List<long>();\n        Dictionary<long, List<long>> cache = new Dictionary<long,
    List<long>>();\n        foreach (long n in arr) {\n            if (!cache.ContainsKey(n))
    {\n                cache.Add(n, new List<long>());\n            }\n            List<long>
    list = cache[n];\n            if (list.Count <= k) {\n                list.Add(n);\n
    \           }\n            else {\n                long max = 0;\n                foreach
    (long m in list) {\n                    if (m > max) {\n                        max
    = m;\n                    }\n                }\n                list.Add(max);\n
    \           }\n        }\n        long max = 0;\n        foreach (KeyValuePair<long,
    List<long>> pair in cache) {\n            if (pair.Value.Count > k) {\n                max
    = pair.Key;\n            }\n        }\n        if (k == max)\n            return
    res;\n        long nextmax = Maximum(cache[k], k - 1).Max();\n        if (nextmax
    <= k)\n            return res;\n        while (true) {\n            List<long>
    list = new List<long>(cache.Values.Where(a => a.Count > k).Select(a => a[k]));\n
    \           if (list.Count <= k)\n                break;\n            long max
    = 0;\n            foreach (long m in list)\n                if (m > max)\n                    max
    = m;\n            list.Add(max);\n            cache.Remove(max);\n            res.AddRange(list);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3v0wh_ec.cs(37,22): error CS0136: A local or parameter named ''max'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp3v0wh_ec.cs(58,97): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp3v0wh_ec.cs(61,18): error CS0136: A local or parameter named ''max'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> list = new List<long>();\n
    \       arr.Sort();\n        while (arr.Count > 0) {\n            long tempMax
    = arr.First();\n            List<long> tempList = new List<long>();\n            foreach
    (long num in arr)\n                if (num > tempMax)\n                    tempMax
    = num;\n                else if (num == tempMax)\n                    tempList.Add(num);\n
    \           list.AddRange(tempList);\n            arr = tempList;\n        }\n
    \       list.Sort(new Comparison<long>((x, y) => x > y));\n        list.Reverse();\n
    \       return list.Take(k).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy8gqbdx2.cs(38,50): error CS0029: Cannot implicitly convert type ''bool''
    to ''int''

    /tmp/tmpy8gqbdx2.cs(38,50): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmpy8gqbdx2.cs(40,26): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> results = new List<long>();\n
    \       if (arr.Count > k) {\n            List<long> tmp = new List<long>(k);\n
    \           tmp.AddRange(arr);\n            tmp.Sort();\n            tmp.Sort();\n
    \           results.AddRange(tmp.Take(k));\n        }\n        else {\n            results.AddRange(arr.Take(k));\n
    \       }\n        return results;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwjhr2by2.cs(27,45): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpwjhr2by2.cs(31,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpwjhr2by2.cs(34,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       long max;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (i == 0) {\n                max = arr[i];\n                res.Add(max);\n                continue;\n
    \           }\n            if (arr[i] > max)\n                max = arr[i];\n
    \       }\n        long rest = arr.Count - k;\n        if (rest > 0) {\n            while
    (arr.Count > k) {\n                for (int i = 0; i < arr.Count; i++) {\n                    if
    (i == 0)\n                        max = arr[i];\n                    if (arr[i]
    > max)\n                        max = arr[i];\n                }\n                res.Add(max);\n
    \               max -= 1;\n            }\n            for (int i = 0; i < arr.Count;
    i++)\n                arr[i] = arr[i] - 1;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7_xb3rws.cs(33,26): error CS0165: Use of unassigned local variable ''max''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long largest = arr[0];\n        long
    temp = 0;\n        List<long> list = new List<long>();\n        foreach (long
    i in arr) {\n            temp = i;\n            if (temp > largest) {\n                list.Add(temp);\n
    \               largest = temp;\n            }\n        }\n\n        list.Add(largest);\n
    \       if (list.Count != k) return list;\n\n        // Move all items in the
    list from the front \n        // of the list to the end of the list \n        while
    (list.Count > k) {\n            temp = list[k - 1];\n            list[k - 1] =
    list[list.Count - 1];\n            list[list.Count - 1] = temp;\n            list.RemoveAt(list.Count
    - 1);\n            k--;\n        }\n\n        return list;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp5gvtzcs.cs(42,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpp5gvtzcs.cs(43,18): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < 1) return arr;\n\n
    \       if (k < 1) return arr;\n\n        List<long> list = new List<long>(k);\n
    \       bool flag = false;\n        long max = arr.Max();\n        long min =
    arr.Min();\n        int count = 0;\n\n        for (int i = 0; i < k; i++) {\n
    \           if (arr[i] < min) {\n                list.Add(min);\n                flag
    = true;\n            }\n            else if (arr[i] > max) {\n                list.Add(max);\n
    \               flag = true;\n            }\n            else {\n                if
    (flag) {\n                    list.Add(arr[count]);\n                }\n                else
    {\n                    list.Add(arr[i]);\n                }\n                count++;\n
    \           }\n        }\n\n        return list;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptndzmb5n.cs(29,42): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < k)\n            throw
    new ArgumentException(\"k > arr.Count\");\n        long[] largest = arr.OrderByDescending(n
    => n).Take(k).ToArray();\n        return new List<long>(largest);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpximvp_0y.cs(27,61): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // write your code here\n        List<long>
    ret = new List<long>();\n        int len = arr.Count;\n        long[] ans = new
    long[len];\n        long[] arr0 = new long[len];\n        List<long> tmp = new
    List<long>();\n        long max = 0L;\n        long num = 0L;\n        long sum
    = 0L;\n        int k0 = k;\n        while (true) {\n            if (k0 == 0 ||
    k0 == len) {\n                ret.Add(max);\n                for (int i = 0; i
    < len; i++) {\n                    ans[i] = arr[i];\n                }\n                return
    ret;\n            }\n            if (k0 % 2 == 0) {\n                k0--;\n            }
    else {\n                k0++;\n            }\n            max = arr[k0];\n            if
    (max > sum) {\n                num = max - sum;\n                for (int i =
    k0 - 1; i >= 0; i--) {\n                    arr0[i] = num + ans[i];\n                }\n
    \               for (int i = k0; i < len; i++) {\n                    arr0[i]
    = arr[i];\n                }\n                for (int i = 0; i < len; i++) {\n
    \                   ans[i] = arr0[i];\n                }\n                for
    (int i = 0; i < len; i++) {\n                    sum += ans[i];\n                }\n
    \               k0 = k0 / 2;\n                tmp = Maximum(arr0, k0);\n                ret.AddRange(tmp);\n
    \               ret.Add(max);\n                for (int i = 0; i < len; i++) {\n
    \                   ans[i] = arr0[i];\n                }\n                for
    (int i = 0; i < len; i++) {\n                    sum += ans[i];\n                }\n
    \               k0--;\n                continue;\n            }\n            k
    = k0 - 1;\n            tmp = Maximum(arr, k);\n            ret.AddRange(tmp);\n
    \           ret.Add(max);\n            for (int i = 0; i < len; i++) {\n                ans[i]
    = arr[i];\n            }\n            max = sum;\n            for (int i = k0;
    i < len; i++) {\n                arr0[i] = arr[i];\n            }\n            for
    (int i = 0; i < len; i++) {\n                ans[i] = arr0[i];\n            }\n
    \           sum -= ans[k0];\n            sum = sum + ans[k0];\n            k0--;\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuxf0enze.cs(34,18): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpuxf0enze.cs(64,31): error CS1503: Argument 1: cannot convert from ''long[]''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // write your code here\n        return
    arr.Take(k)\n                  .OrderByDescending(x => x)\n                  .ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9wweno4t.cs(26,25): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var max = new List<long>();\n        var
    min = new List<long>();\n        List<long> res = new List<long>();\n        arr.Sort();\n
    \       min = arr.Take(arr.Count - k).OrderBy(n => n).ToList();\n        max =
    arr.Skip(arr.Count - k).Take(k).OrderByDescending(n => n).ToList();\n        max
    = max.Concat(max).Concat(max).Concat(max).Concat(max).Concat(max).ToList();\n
    \       res = min;\n        foreach (var n in max)\n        {\n            if
    (res.IndexOf(n) != res.Count - 1)\n                res.Insert(res.IndexOf(n) +
    1, n);\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp010smrt4.cs(29,24): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp010smrt4.cs(30,24): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count <= k) {\n            return
    arr;\n        }\n\n        var result = new List<long>();\n        var maxElement
    = arr[0];\n        var minElement = arr[0];\n\n        // find the max element
    in the list\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]
    > maxElement) {\n                maxElement = arr[i];\n            }\n        }\n\n
    \       // find the min element in the list\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] < minElement) {\n                minElement = arr[i];\n
    \           }\n        }\n\n        var maxRange = maxElement - minElement;\n
    \       var minRange = (long) Math.Ceiling((double) maxRange * k / arr.Count);\n\n
    \       if (minRange >= arr.Count) {\n            return arr;\n        }\n\n        var
    maxIndex = arr.Count - 1;\n        var minIndex = arr.Count - 1;\n\n        //
    find the max index between min index and max index\n        while (minIndex >=
    minIndex - minRange) {\n            minIndex--;\n        }\n\n        while (maxIndex
    <= maxIndex + minRange) {\n            maxIndex++;\n        }\n\n        // find
    the max index between min index and max index\n        while (maxIndex <= maxIndex
    + minRange) {\n            maxIndex++;\n        }\n\n        // find the min index
    between min index and max index\n        while (minIndex >= minIndex - minRange)
    {\n            minIndex--;\n        }\n\n        // find the max element in arr\n
    \       for (int i = minIndex; i <= maxIndex; i++) {\n            if (arr[i] >
    maxElement) {\n                maxElement = arr[i];\n            }\n        }\n\n
    \       // find the min element in arr\n        for (int i = minIndex; i <= maxIndex;
    i++) {\n            if (arr[i] < minElement) {\n                minElement = arr[i];\n
    \           }\n        }\n\n        long maxRange1 = maxElement - minElement;\n
    \       long maxRange2 = (long)Math.Ceiling((double) maxRange1 * k / arr.Count);\n\n
    \       if (maxRange2 >= arr.Count) {\n            return arr;\n        }\n\n
    \       var rangeIndex = new List<int>();\n\n        rangeIndex.AddRange(Enumerable.Range(maxIndex
    - maxRange, maxRange));\n        rangeIndex.AddRange(Enumerable.Range(minIndex,
    maxRange));\n\n        var resultArray = new List<long>();\n\n        for (int
    i = 0; i < arr.Count; i++) {\n            for (int j = 0; j < rangeIndex.Count;
    j++) {\n                if (arr[i + j] >= maxElement) {\n                    if
    (rangeIndex.Contains(j)) {\n                        resultArray.Add(arr[i + j]);\n
    \                       break;\n                    }\n                }\n            }\n
    \       }\n\n        List<long> result = new List<long>();\n        result.AddRange(arr.Except(resultArray).ToList());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5qc_rr6p.cs(99,46): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5qc_rr6p.cs(99,67): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp5qc_rr6p.cs(100,56): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp5qc_rr6p.cs(115,20): error CS0128: A local variable or function named
    ''result'' is already defined in this scope

    /tmp/tmp5qc_rr6p.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n
    \       if (k > arr.Count) {\n            k = arr.Count;\n        }\n        long
    maxNum = arr[0];\n        foreach (long i in arr) {\n            if (i > maxNum)
    {\n                maxNum = i;\n            }\n        }\n        long start =
    0;\n        for (long i = 0; i < k; i++) {\n            int index = maxNum - i;\n
    \           int j = start;\n            long max = 0;\n            while (j <
    arr.Count && index < arr.Count) {\n                max = Math.Max(max, arr[j]);\n
    \               j++;\n                index++;\n            }\n            while
    (j < arr.Count) {\n                max = Math.Max(max, arr[j]);\n                j++;\n
    \           }\n            max = Math.Max(max, maxNum);\n            res.Add(max);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpej_kjx7l.cs(37,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpej_kjx7l.cs(38,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) return new List<long>();\n
    \       if (k <= 0) return new List<long>();\n        \n        var arr = arr.OrderByDescending(t
    => t).ToList();\n        \n        var arr = new List<long>();\n        arr.Add(0L);\n
    \       var max = new List<long>();\n        var curr = new List<long>();\n        var
    curr_max = new List<long>();\n        var curr_max_size = 0;\n        \n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > curr[curr.Count -
    1]) {\n                curr.Add(arr[i]);\n                if (curr.Count > curr_max_size)
    {\n                    curr_max = curr;\n                    curr_max_size = curr.Count;\n
    \               }\n            }\n            else {\n                if (curr.Count
    > curr_max_size) {\n                    curr_max = curr;\n                    curr_max_size
    = curr.Count;\n                }\n                if (curr.Count == curr_max_size)
    {\n                    if (k > curr_max_size) k -= curr_max_size;\n                    max
    = curr_max.Where(t => t != 0L).Take(k).ToList();\n                    max = max.Concat(max.Where(t
    => t != 0L).Skip(curr_max_size - k).Take(curr_max_size - 1).ToList());\n                    max
    = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size - 1).ToList());\n                    max
    = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size - 2).ToList());\n                    max
    = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size - 3).ToList());\n                    max
    = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size - 4).ToList());\n                    max
    = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size - 5).ToList());\n                    max
    = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size - 6).ToList());\n                    max
    = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size - 7).ToList());\n                    max
    = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size - 8).ToList());\n                    max
    = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size - 9).ToList());\n                    max
    = max.Concat(max.Where(t => t != 0L).Skip\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8zixiqb5.cs(63,66): error CS1026: ) expected

    /tmp/tmp8zixiqb5.cs(63,66): error CS1002: ; expected

    /tmp/tmp8zixiqb5.cs(65,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp8zixiqb5.cs(79,2): error CS1513: } expected

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int n = arr.Count;\n        List<long>
    max = new List<long>();\n        int low = 0;\n        long maxVal = arr[0];\n
    \       for (int i = 0; i < n; i++) {\n            if (maxVal < arr[i]) {\n                maxVal
    = arr[i];\n                low.Set(0, i);\n            }\n        }\n        for
    (int i = n-1; i >= k; i--) {\n            if (arr[low] > arr[i]) {\n                maxVal
    = arr[i];\n                for (int j = i+1; j < n; j++) {\n                    if
    (maxVal < arr[j]) {\n                        maxVal = arr[j];\n                        low
    = i;\n                    }\n                }\n            }\n        }\n        max.AddRange(arr.GetRange(low,
    k-1));\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf7r1kt7w.cs(32,21): error CS1061: ''int'' does not contain a definition
    for ''Set'' and no accessible extension method ''Set'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpf7r1kt7w.cs(46,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0 || arr.Count == 0) {\n            return
    new List<long>();\n        }\n        long maxVal = 0;\n        long maxIndex
    = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long num = arr[i];\n
    \           if (num > maxVal) {\n                maxVal = num;\n                maxIndex
    = i;\n            }\n        }\n        List<long> res = new List<long>();\n        for
    (int i = 0; i < k; i++) {\n            res.Add(arr[maxIndex]);\n            maxIndex++;\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphg7cm7gg.cs(39,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Write your code here\n        long
    max = 0;\n        List<long> result = new List<long>();\n        bool flag = false;\n
    \       if (k > arr.Count) {\n            result.AddRange(arr.OrderByDescending(x
    => x).Take(arr.Count).ToList());\n        } else if (k == arr.Count) {\n            flag
    = true;\n            result.AddRange(arr);\n        } else if (k < arr.Count)
    {\n            max = arr.OrderByDescending(x => x).Take(k).Select(x => x).Sum();\n
    \           arr.RemoveAll(x => x == max);\n            flag = true;\n        }\n
    \       if (flag) {\n            int len = arr.Count;\n            while (len
    > 0) {\n                long sum = arr.Take(len).Sum();\n                if (sum
    > max) {\n                    max = sum;\n                    result.AddRange(arr.Take(len));\n
    \               }\n                len--;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxjvj0dve.cs(35,54): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count <= k) {\n            return
    arr;\n        }\n\n        List<long> maximums = new List<long>(k);\n\n        long
    maxElem = arr.Max();\n\n        foreach (var item in arr.Skip(k)) {\n            if
    (item > maxElem) {\n                maximums.Add(maxElem);\n                maxElem
    = item;\n            }\n        }\n\n        maximums.Add(maxElem);\n\n        return
    maximums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0wvo9gwa.cs(29,46): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0wvo9gwa.cs(33,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count || k < 0) return
    new List<long>();\n        var result = new List<long>();\n        // sort the
    array (O(n log n), n times)\n        var arr = arr.OrderBy(v => v).ToArray();\n
    \       var num = 0;\n        // calculate the max k numbers in the array\n        foreach
    (var v in arr) {\n            num ^= v;\n            if (num > k) {\n                result.Add(v);\n
    \               num -= v;\n            }\n            if (num > k) break;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpksrzhknl.cs(25,17): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpksrzhknl.cs(25,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''long'' and ''method group''

    /tmp/tmpksrzhknl.cs(28,13): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpksrzhknl.cs(28,19): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long n = arr.Count;\n        long m
    = k - 1;\n        List<long> max = new List<long>();\n        if (n == 0 || m
    == 0) return max;\n\n        bool flag = arr.FirstOrDefault() >= 0;\n        long
    min = arr.FirstOrDefault();\n        long max = arr.FirstOrDefault();\n        foreach
    (long i in arr) {\n            if (i > max) {\n                max = i;\n                flag
    = true;\n            }\n            if (i <= min) flag = false;\n        }\n        long
    temp = max;\n        max = k;\n        while (flag) {\n            max = k;\n
    \           if (k == n - 1) {\n                while (temp < arr[0]) max++;\n
    \               break;\n            }\n            int i = (int)Math.Floor(k /
    2);\n            temp.Add(max);\n            max = arr[i];\n            k = k
    - i;\n        }\n        foreach (long i in temp) {\n            max.Add(i);\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn36k4wpa.cs(32,14): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    /tmp/tmpn36k4wpa.cs(34,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    /tmp/tmpn36k4wpa.cs(35,23): error CS0029: Cannot implicitly convert type ''long''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpn36k4wpa.cs(40,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpn36k4wpa.cs(41,15): error CS0029: Cannot implicitly convert type ''long''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpn36k4wpa.cs(43,19): error CS0029: Cannot implicitly convert type ''long''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpn36k4wpa.cs(45,39): error CS0023: Operator ''++'' cannot be applied to
    operand of type ''List<long>''

    /tmp/tmpn36k4wpa.cs(48,31): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    /tmp/tmpn36k4wpa.cs(49,18): error CS1061: ''long'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpn36k4wpa.cs(50,19): error CS0029: Cannot implicitly convert type ''long''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpn36k4wpa.cs(53,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var arr = arr.OrderByDescending(x =>
    x);\n        var temp = arr.Take(k);\n        return new List<long>(temp.OrderByDescending(x
    => x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6mgazw2.cs(25,13): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpr6mgazw2.cs(25,19): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    '
  timestamp: 1660016054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) k--;\n        List<long>
    res = new List<long>();\n        if (k > 0) res.Add(arr[0]);\n        for (int
    i = 1; i < k; i++) {\n            res.Add(Math.Max(arr[i], arr[i-1]));\n        }\n
    \       if (k < arr.Count) res.Add(arr[arr.Count-1]);\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c56b263b0b0840d594f16f034ee23625>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c56b263b0b0840d594f16f034ee23625>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        var sorted
    = arr.OrderByDescending(x => x).Take(k);\n        return sorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq_fizm_n.cs(26,57): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        var list
    = new List<long>();\n        foreach (var number in arr.Skip(k))\n        {\n
    \           list.Add(number);\n        }\n        list.Sort();\n        return
    list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6mnpujll.cs(27,41): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < 2)\n            throw
    new ArgumentException(\"Parameter k must be greater than 1\");\n        List<long>
    result = new List<long>();\n        long max = arr[0];\n        for (int i = 0;
    i < arr.Count; i++) {\n            if (arr[i] > max) {\n                max =
    arr[i];\n            }\n        }\n        List<long> maxList = new List<long>();\n
    \       for (int i = 0; i < k; i++) {\n            long curMax = max;\n            List<long>
    nextList = new List<long>();\n            for (int j = i; j < arr.Count && j <
    k; j++) {\n                if (arr[j] > curMax) {\n                    nextList.Add(arr[j]);\n
    \                   curMax = arr[j];\n                }\n            }\n            maxList.Add(curMax);\n
    \           maxList.AddRange(nextList);\n        }\n        return maxList;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f4ca063eda9546fd9d7740254e947788>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f4ca063eda9546fd9d7740254e947788>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k > arr.Count) throw new ArgumentOutOfRangeException(\"k\");\n
    \       List<long> result = new List<long>();\n        var maxElements = new List<long>(arr.Count);\n
    \       var maxCount = 0;\n        var minElements = new List<long>(arr.Count);\n
    \       var minCount = 0;\n        foreach (var element in arr) {\n            maxElements.Add(element);\n
    \           if (maxCount < maxElements.Count) {\n                maxCount = maxElements.Count;\n
    \           }\n            if (minCount < minElements.Count) {\n                minCount
    = minElements.Count;\n            }\n            if (maxElements.Count < minElements.Count)
    {\n                minElements.Clear();\n            }\n            if (maxElements.Count
    < minElements.Count) {\n                maxElements.Clear();\n            }\n
    \           if (maxCount != maxElements.Count || minCount != minElements.Count)
    {\n                maxElements.Clear();\n                maxCount = minElements.Count;\n
    \               minElements.Clear();\n                minCount = minElements.Count;\n
    \           }\n            maxElements.Remove(Math.Max(maxElements.Count, minElements.Count));\n
    \           minElements.Remove(Math.Max(maxElements.Count, minElements.Count));\n
    \       }\n        foreach (var element in arr) {\n            if (maxElements.Count
    <= minElements.Count) {\n                result.Add(element);\n                minElements.Add(element);\n
    \           } else {\n                maxElements.Add(element);\n                if
    (maxElements.Count > maxCount) {\n                    maxCount = maxElements.Count;\n
    \               }\n                if (minElements.Count < minCount) {\n                    minCount
    = minElements.Count;\n                }\n                if (minElements.Count
    > minCount) {\n                    minElements.Clear();\n                }\n                if
    (maxElements.Count < minElements.Count) {\n                    minElements.Clear();\n
    \               }\n                if (maxElements.Count < minElements.Count)
    {\n                    maxElements.Clear();\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a9bc85b8be84bbcada061490a3a4c3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a9bc85b8be84bbcada061490a3a4c3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016055
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int[] indices = new int[k];\n        for
    (int i = 0; i < k; i++) {\n            indices[i] = 0;\n        }\n\n        List<long>
    result = new List<long>();\n        if (arr.Count < k) {\n            result =
    arr;\n            return result;\n        }\n\n        for (int i = 0; i < arr.Count;
    i++) {\n            long left = arr[i];\n            long right = 0;\n            int
    max = 0;\n            for (int j = 0; j < k; j++) {\n                if (indices[j]
    < 0) {\n                    right = arr[j];\n                    indices[j] =
    0;\n                } else {\n                    right = arr[indices[j]];\n                }\n\n
    \               if (left > right) {\n                    max = j;\n                    left
    = right;\n                }\n            }\n            indices.RemoveAt(max);\n
    \           result.Add(left);\n        }\n\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8af0js7c.cs(53,21): error CS1061: ''int[]'' does not contain a definition
    for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting a first
    argument of type ''int[]'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long biggest = 0L;\n        var result
    = new List<long>(k);\n        var counter = new Dictionary<long, int>();\n        foreach
    (var item in arr)\n        {\n            if (counter.ContainsKey(item))\n            {\n
    \               counter[item] = counter[item] + 1;\n                if (counter[item]
    > biggest)\n                {\n                    biggest = counter[item];\n
    \               }\n            }\n            else\n            {\n                counter.Add(item,
    1);\n                if (counter[item] > biggest)\n                {\n                    biggest
    = counter[item];\n                }\n            }\n        }\n        long tmp
    = 0;\n        for (int i = 0; i < k; i++)\n        {\n            if (counter.ContainsKey(biggest))\n
    \           {\n                counter[biggest] = counter[biggest] + 1;\n                if
    (counter[biggest] > biggest)\n                {\n                    biggest =
    counter[biggest];\n                }\n            }\n            else\n            {\n
    \               counter.Add(biggest, 1);\n                if (counter[biggest]
    > biggest)\n                {\n                    biggest = counter[biggest];\n
    \               }\n            }\n        }\n        foreach (var item in counter)\n
    \       {\n            if (item.Value == biggest)\n            {\n                tmp
    = item.Key;\n            }\n        }\n        result.Add(tmp);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5we69twz.cs(26,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // write your code here\n        if(arr.Count()
    < k){\n            return new List<long>();\n        }\n        var result = new
    List<long>();\n        int count = 1;\n        for(int i = 0; i < arr.Count; i++){\n
    \           if(i > k){\n                break;\n            }\n            if(result.Count
    > result.Count - 1){\n                continue;\n            }\n            if(arr[i]
    > result[k]){\n                result.Add(arr[i]);\n                count++;\n
    \           }\n        }\n        if(result.Count > result.Count - 1){\n            result.RemoveAt(result.Count
    - 1);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcre_0bx5.cs(38,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> results = new List<long>();\n
    \       long maxNum = arr[0];\n        long curNum = arr[0];\n        foreach
    (long num in arr) {\n            if (curNum <= k) {\n                if (num >
    maxNum) {\n                    maxNum = num;\n                }\n                curNum++;\n
    \           } else {\n                if (num > maxNum) {\n                    maxNum
    = num;\n                }\n                results.Add(maxNum);\n                maxNum
    = arr[0];\n                curNum++;\n            }\n        }\n        if (maxNum
    > curNum) {\n            results.Add(maxNum);\n        }\n        return results;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0c373a34683484791573d1c66910b04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0c373a34683484791573d1c66910b04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660016055
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Write your code here.\n        var
    max = new List<long>();\n        var max = arr.Take(k).ToList();\n        max.Sort();\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpht10i_f0.cs(27,13): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    /tmp/tmpht10i_f0.cs(27,28): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Debug.Assert(arr.Count > 0);\n        Debug.Assert(k
    > 0);\n        Debug.Assert(arr.Count <= 1000);\n        Debug.Assert(k <= arr.Count);\n
    \       List<long> list = new List<long>(k);\n        Debug.Assert(k == list.Count);\n
    \       if (arr.Count == 1) {\n            list[0] = arr[0];\n            return
    list;\n        }\n        long curMax = arr[0];\n        long maxCount = 1;\n
    \       long minCount = 1;\n        long maxSum = curMax;\n        long minSum
    = curMax;\n        bool found = false;\n        long curSum = 0;\n        long
    curMaxIndex = 0;\n        for (long index = 1; index < arr.Count; index++) {\n
    \           curSum += arr[index];\n            if (found) {\n                if
    (curSum > maxSum) {\n                    maxCount = maxCount + 1;\n                    maxSum
    = curSum;\n                    maxSumIndex = index;\n                }\n                if
    (curSum < minSum) {\n                    minCount = minCount + 1;\n                    minSum
    = curSum;\n                    minSumIndex = index;\n                }\n            }
    else {\n                if (curSum == maxSum) {\n                    maxCount
    = maxCount + 1;\n                    maxSum = curSum;\n                    maxSumIndex
    = index;\n                    found = true;\n                } else if (curSum
    == minSum) {\n                    minCount = minCount + 1;\n                    minSum
    = curSum;\n                    minSumIndex = index;\n                    found
    = true;\n                }\n            }\n            if (k > maxCount) {\n                list.Add(arr[maxSumIndex]);\n
    \               curMax = arr[maxSumIndex];\n                maxCount = 1;\n                maxSum
    = curMax;\n                maxSumIndex = maxSumIndex;\n                minCount
    = 1;\n                minSum = curMax;\n                minSumIndex = minSumIndex;\n
    \           } else if (k < minCount) {\n                list.Add(arr[minSumIndex]);\n
    \               curMax = arr[minSumIndex];\n                maxCount = 1;\n                maxSum
    = curMax;\n                maxSumIndex = maxSumIndex;\n                minCount
    = 1;\n                minSum = curMax;\n                minSumIndex = minSumIndex;\n
    \           } else {\n                list.Add(arr[maxSumIndex]);\n                curMax
    = arr[maxSumIndex];\n                maxCount = 1;\n                maxSum = curMax;\n
    \               maxSumIndex = maxSumIndex;\n                minCount = 1;\n                minSum
    = curMax;\n                minSumIndex = minSumIndex;\n            }\n        }\n
    \       return list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpst0of_y9.cs(29,42): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpst0of_y9.cs(44,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpst0of_y9.cs(49,21): error CS0103: The name ''maxSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(54,21): error CS0103: The name ''minSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(60,21): error CS0103: The name ''maxSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(65,21): error CS0103: The name ''minSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(70,30): error CS0103: The name ''maxSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(71,30): error CS0103: The name ''maxSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(74,17): error CS0103: The name ''maxSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(74,31): error CS0103: The name ''maxSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(77,17): error CS0103: The name ''minSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(77,31): error CS0103: The name ''minSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(79,30): error CS0103: The name ''minSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(80,30): error CS0103: The name ''minSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(83,17): error CS0103: The name ''maxSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(83,31): error CS0103: The name ''maxSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(86,17): error CS0103: The name ''minSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(86,31): error CS0103: The name ''minSumIndex'' does not exist
    in the current context

    /tmp/tmpst0of_y9.cs(88,30): error CS0103: The name ''maxSumIndex'' does not exist
    in the curren'
  timestamp: 1660016054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (arr.Count < 1)\n            return
    arr;\n        if (arr.Count > 1000)\n            arr = arr.Take(1000).Concat(arr.Skip(999)).ToList();\n
    \       if (k <= 0 || k > arr.Count)\n            throw new ArgumentOutOfRangeException(\"k\",
    \n                                                    \"k should be less than
    or equal to \" +\n                                                    \"the length
    of arr.\");\n        long min = arr[0];\n        long max = arr[0];\n        int
    i = 0;\n        List<long> res = new List<long>(k);\n        do {\n            max
    = Math.Max(max, arr[i]);\n            min = Math.Min(min, arr[i]);\n            if
    (++i >= arr.Count) {\n                break;\n            }\n        } while (max
    >= min);\n        for (int j = (k - 1); j >= 0; j--) {\n            long el =
    arr[j];\n            if (el >= max && el > min) {\n                res.Add(el);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptc5swdbt.cs(36,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptc5swdbt.cs(44,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660016055
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        Dictionary<long, List<long>> dict =
    new Dictionary<long, List<long>>();\n\n        var len = arr.Count;\n\n        for(var
    i = 0; i < len; i++) {\n            var value = arr[i];\n\n            if (dict.ContainsKey(value))
    {\n                dict[value].Add(i);\n            } else {\n                var
    list = new List<long> {i};\n                dict.Add(value, list);\n            }\n
    \       }\n\n        List<long> max = new List<long>();\n        long index =
    0;\n        long maxValue = 0;\n\n        foreach (var value in dict) {\n            if
    (dict[key].Count > maxValue) {\n                maxValue = dict[key].Count;\n
    \               max = dict[key];\n                index = dict[key].FirstOrDefault(a
    => a == 0) ?? -1;\n            }\n        }\n\n        if (maxValue > k) {\n            return
    Maximum(max.OrderByDescending(a => a).Take(k), k);\n        } else {\n            return
    max.OrderByDescending(a => a).Take(k);\n        }\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm8x8kwrh.cs(45,22): error CS0103: The name ''key'' does not exist in the
    current context

    /tmp/tmpm8x8kwrh.cs(46,33): error CS0103: The name ''key'' does not exist in the
    current context

    /tmp/tmpm8x8kwrh.cs(47,28): error CS0103: The name ''key'' does not exist in the
    current context

    /tmp/tmpm8x8kwrh.cs(48,30): error CS0103: The name ''key'' does not exist in the
    current context

    /tmp/tmpm8x8kwrh.cs(53,63): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpm8x8kwrh.cs(55,55): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016055
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        long max;\n        List<long> list
    = new List<long>();\n        long[] data = arr.ToArray();\n\n        for(int i
    = 0; i < data.Length; i++) {\n            if (data[i] > max) {\n                max
    = data[i];\n            }\n        }\n\n        if (k > max) {\n            k
    = max;\n        }\n\n        for(int i = 0; k < data.Length && data.Length > i;
    i++) {\n            if (data[i] > data[i + 1]) {\n                list.Add(data[i]);\n
    \               data[data.Length - 1] = data[i];\n            }\n        }\n\n
    \       return list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4nccuc1i.cs(30,27): error CS0165: Use of unassigned local variable ''max''

    '
  timestamp: 1660016055
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int size = arr.Count;\n        List<long>
    res = new List<long>();\n        if (k <= size) return arr;\n        long maxval
    = arr[0];\n        for (int i = 1; i < size; i++) {\n            if (arr[i] >
    maxval) maxval = arr[i];\n        }\n        int m = size / k;\n        for (int
    i = 0; i < k; i++) {\n            long curval = maxval;\n            for (int
    j = 0; j < m; j++) {\n                long pos = curval % size;\n                curval
    = (curval / size) - arr[pos];\n                if (curval > 0) {\n                    res.Add(curval);\n
    \               }\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp405gpn0v.cs(32,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp405gpn0v.cs(37,48): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660016055
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in
    the range of [1, 1000].\n    // 2. The elements in the list will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        int[] count = new int[k];\n        List<long>
    result = new List<long>();\n        long cur = 0;\n        for (long i : arr)
    {\n            count[i - cur]++;\n            cur = i;\n        }\n        int
    maxCount = 0;\n        long maxNum = arr[0];\n        for (int i = 0; i < k; i++)
    {\n            maxCount = Math.Max(maxCount, count[i]);\n            if (count[i]
    > maxCount) {\n                maxCount = count[i];\n                maxNum =
    arr[i];\n            }\n        }\n        result.Add(maxNum);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptslm3_uw.cs(28,21): error CS1002: ; expected

    /tmp/tmptslm3_uw.cs(28,21): error CS1525: Invalid expression term '':''

    /tmp/tmptslm3_uw.cs(28,21): error CS1001: Identifier expected

    '
  timestamp: 1660016054
