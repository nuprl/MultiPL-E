language: cs
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var ret = new List<long>();\n        if (n == 0 || n ==
    1L) return ret;\n        var triRes = Tri(n);\n        if (n % 2 == 0) {\n            ret.AddRange(triRes.Take(n));\n
    \           ret.Add(n + 1);\n        }\n        else {\n            ret.AddRange(triRes);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1_sao8yk.cs(30,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0)\n            return new List<long>();\n        if
    (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n
    % 2 == 0)\n            return Tri(n - 1) + Tri(n - 2);\n        else\n            return
    Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6tx84lj5.cs(31,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp6tx84lj5.cs(33,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long n2;\n        if (n <= 2L) {\n            return new
    List<long>{3L};\n        } else if (n <= 4L) {\n            return new List<long>{1L,
    (long)n};\n        } else {\n            n2 = n - 2L;\n            return new
    List<long> {\n                (long)n2 + 1L,\n                (long)n2,\n                (long)n2
    + 1L\n            };\n        }\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7e86ef0d6af47aa9132e919f41f865a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7e86ef0d6af47aa9132e919f41f865a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        Tri(n, result);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqidgbnsq.cs(27,9): error CS1501: No overload for method ''Tri'' takes
    2 arguments

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 3) {\n            return new List<long>();\n        }\n
    \       if (n % 2 == 0) {\n            return new List<long>() { n / 2 };\n        }\n
    \       var list = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        return list.Take(n
    / 2).Concat(list);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj0fyxz2d.cs(32,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 0) return null;\n        if (n == 1) return new
    List<long> { 1 };\n        if (n % 2 == 0) return Tri(n - 1).Concat(Tri(n - 2));\n
    \       else return Tri(n - 1).Concat(Tri(n - 2)).Concat(Tri(n - 3));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppp2jayjp.cs(28,32): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    /tmp/tmppp2jayjp.cs(29,21): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 1)\n            return new List<long>(new long[]
    { 1, 3 });\n        if (n <= 2)\n            return new List<long>(new long[]
    { 2, 3 });\n        return new List<long>(new long[] {\n                1 + Tri(n
    - 1) + Tri(n - 2) + Tri(n - 3),\n                Tri(n - 1) + Tri(n - 2) + Tri(n
    - 3)\n            });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwyt25eag.cs(31,17): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''int'' and ''List<long>''

    /tmp/tmpwyt25eag.cs(32,17): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // write your code here\n        long prev = 1L;\n        long
    next = 2L;\n        long result = 1L;\n        List<long> ret = new List<long>();\n
    \       if (n == 1L) {\n            ret.Add(prev);\n            return ret;\n
    \       }\n        while (true) {\n            ret.Add(prev);\n            prev
    = next;\n            next = result + next;\n            if (next % 2L == 0) {\n
    \               result += next;\n            } else {\n                result
    += next;\n                result += prev;\n            }\n            result %=
    2L;\n            if (result < 2L) {\n                break;\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3954b639812e41a9b1459b35d5ed1dba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3954b639812e41a9b1459b35d5ed1dba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0)\n            return new List<long>();\n        else
    if (n % 2 == 0)\n            return new List<long> { 1 + n / 2, Tri(n - 1) };\n
    \       else\n            return new List<long> { Tri(n - 1) + Tri(n - 2) + Tri(n
    - 3), Tri(n - 1) + Tri(n - 2) + Tri(n - 3) };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxz_8nvvg.cs(29,48): error CS1950: The best overloaded Add method ''List<long>.Add(long)''
    for the collection initializer has some invalid arguments

    /tmp/tmpxz_8nvvg.cs(29,48): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxz_8nvvg.cs(31,37): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpxz_8nvvg.cs(31,75): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return Enumerable.Range(0, n).Select(x => (x % 2 == 0)
    ? Tri(x - 1) + Tri(x - 2) + Tri(x + 1) : Tri(x - 1) + Tri(x - 2) + Tri(x + 1)).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b3wadyt.cs(26,36): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp1b3wadyt.cs(26,66): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1b3wadyt.cs(26,105): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Tribonacci sequence definition\n        long result
    = 3L;\n        while (n > 0) {\n            result += n / 2L;\n            n &=
    (n - 1L) + 1L;\n        }\n        return result.ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgh5d9qut.cs(32,23): error CS1061: ''long'' does not contain a definition
    for ''ToList'' and no accessible extension method ''ToList'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var fib = new List<long>() { 1L, 2L, 3L };\n        return
    fib.Take(n / 2).Concat(fib).Take(n % 2).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9xid0yu5.cs(27,25): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 1) throw new ArgumentOutOfRangeException(\"n\",
    \"n must be greater than 0\");\n        var result = new List<long>();\n        var
    first = (n == 1 || n == 2) ? 1 : Tri(n - 1) + Tri(n - 2);\n        result.Add(first);\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeqe0xcfm.cs(28,46): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpeqe0xcfm.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>(new long[] { 3 });\n
    \       if (n % 2 == 0) {\n            long tmp = ((n + 1) >> 1) * 3;\n            while
    (tmp != 0) result.Add(tmp);\n            tmp = tmp - tmp + tmp + 1;\n            while
    (tmp != 0) result.Add(tmp);\n        } else {\n            long tmp = ((n + 1)
    >> 1) * 3 + 1;\n            while (tmp != 0) result.Add(tmp);\n            tmp
    = tmp - tmp + tmp + 1;\n            while (tmp != 0) result.Add(tmp);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // base cases: 0 and 1 are base numbers. We need to return
    them here.\n        if (n == 0 || n == 1) {\n            return new List<long>(new
    long[]{(long)nL});\n        }\n\n        // recursive case: tri(n) is the sum
    of two numbers:\n        // tri(n - 1) + tri(n - 2) + tri(n + 1)\n        var
    first = Tri(n - 1) + Tri(n - 2);\n        var second = Tri(n + 1);\n        return
    first.Concat(second).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe01i1o2f.cs(28,52): error CS0103: The name ''nL'' does not exist in the
    current context

    /tmp/tmpe01i1o2f.cs(33,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long tri = 3;\n        if (n <= 2L) {\n            return
    new List<long>(new long[]{tri, tri, n});\n        }\n        if (n % 2L == 0L)
    {\n            return new List<long>(new long[]{tri, tri, n});\n        }\n        int
    evenTri = Tri(n / 2L);\n        long sum = evenTri.Sum();\n        evenTri.ForEach(item
    => sum += item);\n        evenTri.Add(n);\n        return new List<long>(new long[]{sum,
    tri, evenTri});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1oryyina.cs(33,23): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''int''

    /tmp/tmp1oryyina.cs(34,20): error CS1929: ''int'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmp1oryyina.cs(35,17): error CS1061: ''int'' does not contain a definition
    for ''ForEach'' and no accessible extension method ''ForEach'' accepting a first
    argument of type ''int'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp1oryyina.cs(36,17): error CS1061: ''int'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0)\n            return new List<long>();\n        if
    (n % 2 == 0) {\n            List<long> result = new List<long>();\n            result.Add((n
    / 2));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return
    result;\n        }\n        return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprzw9cx2a.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprzw9cx2a.cs(34,16): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var nums = new List<long>();\n        var a = 1;\n        var
    b = 2;\n        var c = a + b;\n        var d = b + c;\n        while (n-- > 0)
    {\n            var tmp = c;\n            c = b;\n            b = d;\n            d
    = tmp;\n        }\n        nums.Add(c);\n        nums.Add(d);\n        return
    nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7f7b0acf66546af918b6d375dc12251>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7f7b0acf66546af918b6d375dc12251>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> answer = new List<long>();\n        // Fill
    the list with starting values.\n        answer.Add(1);\n        answer.Add(3);\n
    \       if (n%2 == 0) {\n            // Even\n            answer.Add(n+1);\n            //
    Odd - recurrence\n            answer.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       }\n        return answer;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc3x9j0o1.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // base cases: trivially solved\n        if (n == 0)\n
    \           return new List<long>(new long[] { 1, 3 });\n        if (n == 1)\n
    \           return new List<long>(new long[] { 1 });\n        if (n % 2 == 0)\n
    \           return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        return Tri(n
    - 1) + Tri(n - 2) + Tri(n / 2) + Tri(n / 3) + Tri(n / 5);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1oojopxp.cs(32,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1oojopxp.cs(33,16): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        Debug.Assert(n > 0);\n        List<long> list = new List<long>(new
    long[] {0L, 0L, 0L});\n        long prev1 = 0; long prev2 = 0; long prev3 = 0;\n
    \       bool even = true;\n        do {\n            if (even) {\n                list.Add(prev1
    + prev2 + prev3);\n                prev1 = prev2; prev2 = prev3; prev3 = n;\n
    \           }\n            else {\n                list.Add(prev2 + prev3 + prev1);\n
    \               prev2 = prev2; prev3 = prev1; prev1 = n;\n            }\n            even
    = !even;\n        } while (--n != 0);\n        return list;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91bf6ab4644a4bac9c202602a50f34cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91bf6ab4644a4bac9c202602a50f34cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: None
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var fibs = new List<long>();\n        fibs.Add(0);\n        fibs.Add(1);\n
    \       if ((n % 2) == 0) {\n            fibs.Add(1);\n            fibs.Add(n
    / 2);\n            fibs.Add((fibs.ElementAt(1) + fibs.ElementAt(2)) / 2);\n            fibs.Add(fibs.ElementAt(1)
    + fibs.ElementAt(2));\n        } else {\n            fibs.Add(fibs.ElementAt(1)
    + fibs.ElementAt(2));\n            fibs.Add(fibs.ElementAt(1));\n            fibs.Add(n
    / 2);\n            fibs.Add((fibs.ElementAt(1) + fibs.ElementAt(2)) / 2);\n            fibs.Add(fibs.ElementAt(1)
    + fibs.ElementAt(2));\n        }\n        return fibs;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Linq.Enumerable.ElementAt[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Int32 index) [0x00031]
    in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Tri (System.Int64 n) [0x00075]
    in <40bd9545fa194b6080312f0651c589ec>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <40bd9545fa194b6080312f0651c589ec>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative
    and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item
    (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at
    System.Linq.Enumerable.ElementAt[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Int32 index) [0x00031] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.Tri (System.Int64 n) [0x00075] in <40bd9545fa194b6080312f0651c589ec>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <40bd9545fa194b6080312f0651c589ec>:0
    \n"
  stdout: ''
  timestamp: 1660028378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 1)\n            return new List<long>();\n        List<long>
    result = new List<long>();\n        result.Add((n == 3L ? 1L : (n > 2L ? n / 2L
    : n) + 3L));\n        for (int i = 2; i <= n; i++)\n            result.Add((i
    == n ? (n + 3L) : (n - 1) + i));\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d97a053dd024f24a86c0c1124291ee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d97a053dd024f24a86c0c1124291ee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long>(new long[]{(long)1L,
    (long)1L, (long)1L, (long)1L});\n        }\n        var list = new List<long>();\n
    \       list.Add((long)1L);\n        list.Add((long)1);\n        if (n % 2 ==
    0) {\n            list.Add((long)n);\n        } else {\n            list.Add((long)n);\n
    \           list.Add((long)n + 1);\n        }\n        list.Add((long)1);\n        list.Add((long)1);\n
    \       list.Add((long)1);\n        return list;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3ab28f47f504484e96eb2b1f4dddbcec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3ab28f47f504484e96eb2b1f4dddbcec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 1) throw new ArgumentOutOfRangeException();\n        List<long>
    result = new List<long>();\n        long sum = 1;\n        long a = 2;\n        long
    b = 1;\n        long c = 3;\n        long d = 1;\n        // Summing till tri(n+1)\n
    \       for (int i = 1; i < n + 1; i++) {\n            long tempSum = a + b +
    c + d;\n            a = b;\n            b = c;\n            c = d;\n            d
    = tempSum;\n            result.Add(tempSum);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fd69442fece405c81589dfa6b3f412c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fd69442fece405c81589dfa6b3f412c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 1) {\n            return new List<long>();\n        }\n
    \       List<long> first = new List<long>();\n        first.Add(n);\n        first.Add((n
    + 1) >> 1);\n        if (n == n + 1)\n            return first;\n        List<long>
    second = new List<long>();\n        second.Add(n - 1);\n        second.Add((n
    - 2) >> 1);\n        second.Add((n + 1) >> 1);\n        return first.Concat(second).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2e636b956dc48929541f63636c2e2b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2e636b956dc48929541f63636c2e2b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long>(new long[]
    { 0 });\n        }\n        long sum = 0;\n        long a = 1;\n        long b
    = 1;\n        for (int i = 1; i < n; i++) {\n            sum = a + b + i;\n            a
    += i;\n            b += i - a;\n        }\n        return sum == 0 ?\n            new
    List<long>(new long[] { 1 }) :\n            new List<long>(new long[] { (long)a
    + (long)b + (long)sum });\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1dbe29e827548c6a852a671d4e6ab65>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1dbe29e827548c6a852a671d4e6ab65>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long>();\n        }\n\n
    \       if (n % 2 == 0) {\n            var result = new List<long>();\n            result.Add((long)
    3);\n            return result.AddRange(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       } else {\n            var result = new List<long>();\n            result.Add((long)
    1);\n            result.AddRange(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add((long)
    3);\n            return result;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk79ymy9_.cs(33,36): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpk79ymy9_.cs(37,29): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(n % 2 == 0 ? 3 : 1 + n/2);\n        if (n%2 == 1)\n            result.Add(tri(n-1));\n
    \       else\n            result.Add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4vdlwnzc.cs(30,24): error CS0103: The name ''tri'' does not exist in the
    current context

    /tmp/tmp4vdlwnzc.cs(32,24): error CS0103: The name ''tri'' does not exist in the
    current context

    /tmp/tmp4vdlwnzc.cs(32,37): error CS0103: The name ''tri'' does not exist in the
    current context

    /tmp/tmp4vdlwnzc.cs(32,50): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 3) return new List<long>();\n        var ret =
    Tri(n - 1) + Tri(n - 2) + Tri(n - 3); \n        // A better way to do this is
    to use linq.\n        // ret = new List<long>(ret.Concat(Tri(n - 1)));\n        //
    However, in some languages (like C++), list are unmodifiable, so the \n        //
    above linq code will cause an error.\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpql1w5d3p.cs(27,19): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        if (n == 0 || n
    == 1) {\n            result.Add(n);\n            return result;\n        }\n        result.AddRange(Tri(n
    - 2));\n        result.Add(n);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0231f575c9df430bbe6d273834789729>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0231f575c9df430bbe6d273834789729>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> a = new List<long>();\n        var result =
    new List<long>();\n        var nMinus1 = n - 1;\n        var nMinus2 = nMinus1
    - 1;\n        var nPlus1 = nMinus1 + 1;\n        long next = 1;\n        long
    previous = 0;\n\n        if (n == 0)\n            a.Add((long)3);\n\n        if
    (nMinus2 == 0)\n            a.Add((long)1);\n\n        if (nMinus1 == 0 || nMinus1
    == nPlus1)\n            a.Add((long)3);\n        else if (nMinus1 > 0 && nMinus1
    <= nPlus1)\n            a.Add((long)1);\n        else\n            a.Add((long)2);\n\n
    \       foreach (long x in a) {\n            if (x == (long)1)\n                next
    = previous;\n            else\n                next = x + next;\n            previous
    = x;\n            result.Add(next);\n        }\n\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f86b6700c613429d830a1eaf03a62a23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f86b6700c613429d830a1eaf03a62a23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        Debug.Assert(n > 0);\n        if (n % 2 == 0)\n            return
    new List<long> {(long)1, (long)3};\n        else\n            return new List<long>
    {\n                (long)1,\n                ((long)n%2 > 0 ? ((long)n%2 + 1)
    : (long)((n/2)+1)),\n                (long)Tri(n-1)\n            };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk48hhzoz.cs(33,17): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var sequence = new List<long>();\n        if (n <= 2L)
    \n        {\n            sequence.Add(n);\n            return sequence;\n        }\n
    \       long tri = (long)Math.Sqrt(n); \n        sequence.Add(n);\n        sequence.Add(1);\n
    \       sequence.Add(3);\n        sequence.Add(2);\n        if (n & 1 == 1) \n
    \       {\n            sequence.Add(tri);\n        }\n        else\n        {\n
    \           sequence.Add(tri - 1);\n            sequence.Add(tri - 2);\n            sequence.Add(tri
    + 1);\n        }\n        return sequence;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0e95irwz.cs(37,13): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 1)\n            return new List<long>() { 1 };\n
    \       if (n % 2 == 0)\n            return Tri(n - 1) + Tri(n - 2);\n        else\n
    \           return Tri(n - 1) + Tri(n + 1) + Tri(n);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkk6moaq6.cs(29,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpkk6moaq6.cs(31,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        Tri(result.Count,
    n, result.Add);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdrre8y63.cs(27,9): error CS1501: No overload for method ''Tri'' takes
    3 arguments

    '
  timestamp: 1660028378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // TODO: Add assertions here to ensure that the input is
    a non-negative integer.\n        List<long> result = new List<long>();\n        long
    a = 1;\n        long b = 2;\n        // TODO: Implement the tribonacci sequence
    recurrence.\n        // Example: a = 1, b = 2, n = 3 => tri(1) = 3. \n        //
    Example: a = 1, b = 3, n = 3 => tri(2) = 1 + 1 / 2 = 1.\n        // Example: a
    = 1, b = 5, n = 6 => tri(3) = 1 + 1 / 2 + 2 / 3 = 1.\n        // Example: a =
    1, b = 5, n = 7 => tri(4) = 3 + 2 / 3 + 1 / 4 = 7.\n        while(a < n) {\n            result.Add(b);\n
    \           a = b;\n            b = b + a / 2;\n        }\n        result.Add(n);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9fb364bf3044f72b4cfe458630c7ab9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9fb364bf3044f72b4cfe458630c7ab9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 1) return new List<long>();\n        if (n == 1)
    return new List<long>(new long[] { 3 });\n        if (n % 2 == 0) return Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) +
    Tri(n + 1) + Tri(n + 2);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpytenxyye.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpytenxyye.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Base case\n        if (n == 1L) {\n            return
    new List<long> { 1L };\n        }\n        else if (n == 2L) {\n            return
    new List<long> { (long)1L, (long)3L };\n        }\n        else if (n % 2 == 0)
    {\n            return new List<long> { (long)Math.Pow((double)n + 1L, (double)Math.Floor((double)(n
    / 2L))), (long)((double)(Math.Pow((double)(n + 1L, (double)(Math.Floor((double)n
    + 1L / 2L) + Math.Floor((double)n / 2L)))) - Math.Pow((double)(n + 1L, (double)(Math.Floor((double)n
    + 1L / 2L) + Math.Floor((double)n / 2L)))) + (double)(Math.Pow((double)(n + 1L,
    (double)(Math.Floor((double)n + 1L / 2L) + Math.Floor((double)n / 2L))))) - Math.Pow((double)(n
    + 1L, (double)(Math.Floor((double)n + 1L / 2L) + Math.Floor((double)n / 2L))))
    + (double)(Math.Pow((double)(n + 1L, (double)(Math.Floor((double)n + 1L / 2L)
    + Math.Floor((double)n / 2L))))) - Math.Pow((double)(n + 1L, (double)(Math.Floor((double)n
    + 1L / 2L) + Math.Floor((double)n / 2L))) - (double)((double)Math.Pow((double)(n
    + 1L, (double)(Math.Floor((double)n + 1L / 2L) + Math.Floor((double)n / 2L))))
    - (double)((double)Math.Pow((double)(n + 1L, (double)(Math.Floor((double)n + 1L
    / 2L) + Math.Floor((double)n / 2L)))) - (double)((double)Math.Pow((double)(n +
    1L, (double)(Math.Floor((double)n + 1L / 2L) + Math.Floor((double)n / 2L)))))
    - (double)((double)Math.Pow((double)(n + 1L, (double)(Math.Floor((double)n + 1L
    / 2L) + Math.Floor((double)n / 2L))) - Math.Pow((double)(n + 1L, (double)(Math.Floor((double)n
    + 1L / 2L) + Math.Floor((double)n / 2L)))))), (long)((double)(Math.Pow((double)(n
    + 1L, (double)(Math.Floor((double)n + 1L / 2L) + Math.Floor((double)n \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb9mvf3cz.cs(34,1427): error CS1026: ) expected

    /tmp/tmpb9mvf3cz.cs(35,6): error CS1002: ; expected

    /tmp/tmpb9mvf3cz.cs(36,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpb9mvf3cz.cs(49,2): error CS1513: } expected

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) return new List<long>(new long[]{(long)1L});\n
    \       if (n <= 3) return new List<long>(new long[]{(long)3L});\n        // if
    n is odd, calculate (n - 1) + tri(n - 2) + tri(n - 1)\n        long tri = Tri(n
    - 1);\n        long tri2 = Tri(n - 2);\n        long tri4 = tri2 + tri;\n        return
    new List<long>(new long[]{tri4, tri2, tri});\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmw3yvbhf.cs(29,20): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpmw3yvbhf.cs(30,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 3)\n        {\n            return new List<long>(new
    long[] { (long)3L });\n        }\n\n        // base case 1, return tri(3)\n        if
    (n == 3)\n        {\n            return new List<long>(new long[] { (long)8L });\n
    \       }\n\n        // base case 2, return tri(2) + tri(1)\n        if (n ==
    2)\n        {\n            return new List<long>(new long[] { 2, 1 });\n        }\n\n
    \       // recursive case\n        List<long> left = new List<long>();\n        List<long>
    right = new List<long>();\n\n        left.Add(Tri(n - 1));\n        right.Add(Tri(n
    - 2) + Tri(n - 1));\n\n        return new List<long>(left.Concat(right).Take(n
    + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbr2l2mm0.cs(47,18): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbr2l2mm0.cs(48,19): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbr2l2mm0.cs(50,55): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        Tri(n, result);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqidgbnsq.cs(27,9): error CS1501: No overload for method ''Tri'' takes
    2 arguments

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var list = new List<long>();\n        if (n < 0)\n        {\n
    \           throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if
    (n == 0)\n        {\n            list.Add(0);\n            list.Add(3);\n            list.Add(2);\n
    \           list.Add(8);\n        }\n        else if (n == 1)\n        {\n            list.Add(3);\n
    \           list.Add(8);\n        }\n        else\n        {\n            list.Add(1
    + n / 2);\n            if (n % 2 == 0)\n            {\n                list.Add(3
    + n / 2);\n            }\n            else\n            {\n                list.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            }\n        }\n        return list;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprmkbvvmn.cs(52,26): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        int[] x = new int[n];\n        int i = (n / 2 + 1) * (n
    / 2 + 2) / 2;\n        x[0] = 1;\n        x[1] = 3;\n        for (int j = 2; j
    <= n; j++) {\n            x[j] = x[j - 1] + x[j - 2];\n        }\n        return
    new List<long>(x.ToArray());\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgi1wd_6s.cs(27,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpgi1wd_6s.cs(33,31): error CS1503: Argument 1: cannot convert from ''int[]''
    to ''int''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code here\n        bool isEven = (n % 2L == 0L);\n
    \       long prev1 = 0L;\n        long prev2 = 0L;\n        long next1 = 0L;\n
    \       long next2 = 0L;\n\n        long[] a = new long[n + 3];\n        for (int
    i = 0; i < a.Length; i++) {\n            a[i] = 0L;\n        }\n        a[0] =
    prev1 = 1L;\n        a[1] = prev2 = a[0] + 1L;\n        a[2] = prev2 + a[1] +
    1L;\n        a[3] = next1 + a[2] + 1L;\n        a[4] = next2 + a[3] + 1L;\n        if
    (n == 0L) {\n            return new List<long>();\n        }\n        if (n ==
    1L) {\n            return new List<long>(new long[] {a[0]});\n        }\n        if
    (isEven) {\n            a[0] = a[0] + prev2 + a[1] + next2 + 1L;\n            a[1]
    = prev2 + a[0] + next1;\n            a[2] = next1;\n            a[3] = prev2 +
    a[1] + next1 + a[2] + 1L;\n            a[4] = prev2 + a[0] + next1 + a[2] + 1L
    + next2 + 1L;\n        }\n        else\n        {\n            a[0] = prev1;\n
    \           a[1] = prev2;\n            a[2] = prev2 + a[1];\n            a[3]
    = next1;\n            a[4] = next2;\n        }\n        return a;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpforrs30d.cs(63,16): error CS0029: Cannot implicitly convert type ''long[]''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long>();\n        }\n
    \       if (n == 1) {\n            return new List<long>() { 1 };\n        }\n
    \       return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjlzxltge.cs(32,16): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long>();\n        }\n
    \       if (n == 1) {\n            return new List<long>(new long[]{1});\n        }\n
    \       if (n % 2 == 0) {\n            return Tri(n - 1) + Tri(n - 2) + Tri(n
    - 3) + Tri(n - 4) + Tri(n + 1) + Tri(n + 2) + Tri(n + 3) + Tri(n + 4);\n        }\n
    \       else {\n            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n
    + 2) + Tri(n + 3);\n        }\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplf1cqfky.cs(33,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmplf1cqfky.cs(36,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Base case\n        if (n <= 1L) return (List<long>)new[]{1L};\n\n
    \       // Compute Fibonacci sequence by using a recursive function\n        //
    The recurrence relation is:\n        // f(n) = f(n-1) + f(n-2) \n        List<long>
    result = new List<long>();\n        Func<long, long> fib = Func<long, long>((n1,
    n2) => n1 + n2);\n        for (int i = 1; i < n; ++i)\n            result.Add(fib(i));\n\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6zx99jeo.cs(27,29): error CS0030: Cannot convert type ''long[]'' to ''System.Collections.Generic.List<long>''

    /tmp/tmp6zx99jeo.cs(33,32): error CS1955: Non-invocable member ''Func<T, TResult>''
    cannot be used like a method.

    '
  timestamp: 1660028379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>(new long[n + 1]);\n        long
    first = 0;\n        long second = 1;\n        long third = 1;\n        long sum;\n\n
    \       list.Add((first = (third = first)));\n        for (int i = 1; i < n +
    1; i++)\n        {\n            list.Add(second = (sum = first + second + third));\n
    \           if (i % 2 == 0)\n                first = second;\n            else\n
    \               second = sum;\n        }\n        return list;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81bcc23a76c64529a73cd88496360bb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81bcc23a76c64529a73cd88496360bb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    1)\n            result.Add(3);\n        else if (n % 2 == 0)\n            result.Add(1
    + n / 2);\n        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    - 3));\n        return result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2ts1iafz.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        \n        // Solution 1\n        var lst = new List<long>(new
    long[] { 1, 3, 2 });\n        for (int i = 3; i < n; i++) {\n            lst.Add(lst[i
    - 3] + lst[i - 2] + lst[i - 1]);\n        }\n        \n        // Solution 2\n
    \       // TODO: this can be optimized by using LINQ\n        long sum = 0, three
    = 1, two = 2;\n        var curr = new long[] { one, two, three };\n        bool
    even = false;\n        do {\n            curr[even ? 1 : 2] = curr[even ? 2 :
    3] + curr[even ? 3 : 1] + curr[even ? 1 : 2];\n            sum = curr[even ? 1
    : 2] + sum;\n            even = !even;\n        } while (n < sum);\n        return
    new List<long>(curr.Reverse());\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpig33xmlt.cs(36,33): error CS0103: The name ''one'' does not exist in the
    current context

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        Debug.Assert(n >= 0);\n        if (n == 1L) return new
    List<long>(new long[]{1L});\n        if (n == 2L) return new List<long>(new long[]{3L});\n
    \       Debug.Assert(n % 2L != 0);\n        var tris = Tri(n - 1L);\n        var
    result = new List<long>();\n        foreach (var tri in tris) {\n            foreach
    (var x in tri) {\n                result.Add(x);\n            }\n        }\n        result.Add(tris.Last().Sum()
    + tris.First().Sum());\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp528zgpc.cs(33,31): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpp528zgpc.cs(37,20): error CS1929: ''long'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpp528zgpc.cs(37,40): error CS1929: ''long'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code here\n        List<long> list = new List<long>();\n
    \       if (n <= 1)\n        {\n            list.Add(n);\n            list.Add(n);\n
    \           list.Add(n);\n            return list;\n        }\n\n        int count
    = (int)Math.Floor(Math.Sqrt(n));\n        if (n % 2 == 0)\n        {\n            list.Add(n);\n
    \           list.Add(n + 1);\n            list.Add(n+2);\n        }\n        else\n
    \       {\n            list.Add(n);\n            list.Add(n+1);\n            list.Add(n
    + 2);\n        }\n        for (int i = 0; i < count; i++)\n        {\n            list.Add(list[i-2]
    + list[i-3]);\n        }\n        return list;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00097] in <e8c0329933484ecb84986ef95fa221db>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <e8c0329933484ecb84986ef95fa221db>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00097]
    in <e8c0329933484ecb84986ef95fa221db>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <e8c0329933484ecb84986ef95fa221db>:0 \n"
  stdout: ''
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // write your code in C#\n        var result = new List<long>();\n
    \       long n2 = n+1;\n        long n3 = n2+1;\n        long n4 = n3+1;\n        if(n%2==0){\n
    \           if(n2%2==0){\n                if(n3%2==0){\n                    if(n4%2==0){\n
    \                       result.Add((long)n4);\n                    }else{\n                        result.Add((long)n3);\n
    \                       result.Add((long)n4);\n                    }\n                }else{\n
    \                   result.Add((long)n2);\n                    result.Add((long)n3);\n
    \               }\n            }else{\n                result.Add((long)n2);\n
    \           }\n        }else{\n            result.Add((long)n1);\n            result.Add((long)n3);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwctfg67f.cs(48,30): error CS0103: The name ''n1'' does not exist in the
    current context

    '
  timestamp: 1660028379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>();\n        if (n == 0)
    {\n            list.Add(0L);\n            list.Add(1L);\n            return list;\n
    \       }\n        if (n == 1L) {\n            list.Add(0L);\n            return
    list;\n        }\n        if (n == 2L) {\n            list.Add(1L);\n            return
    list;\n        }\n        long sum = 1L;\n        List<long> subSum = Tri(n -
    1);\n        subSum.Add(sum);\n        long subSumSum = subSum.Sum();\n        list.Add(sum);\n
    \       foreach (long item in subSum) {\n            list.Add(item + sum);\n        }\n
    \       list.Add(subSumSum);\n        return list;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37c530b1709145108d1906792a710751>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37c530b1709145108d1906792a710751>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Write your code here.\n        var result = new List<long>();\n
    \       if (n == 0) return result;\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n        }\n
    \       else {\n            result.Add(Tri(n - 1) + Tri(n + 1));\n            result.Add(Tri(n
    - 2) + Tri(n - 1));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9qyw4fnt.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9qyw4fnt.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9qyw4fnt.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9qyw4fnt.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9qyw4fnt.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) \n            return new List<long>(new long[0]);\n
    \       if (n == 1) \n            return new List<long>(new long[]{(long)3L});\n
    \       if (n == 2)\n            return new List<long>(new long[]{(long)1L, (long)3L});\n
    \       long first = ((n + 1L) / 2);\n        List<long> result = Tri(n - 1) +
    Tri(n - 2) + Tri(first);\n        result.AddRange(Tri(first + 1));\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzrfmj33t.cs(33,29): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return RecursiveTri(n);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpke865cve.cs(26,16): error CS0103: The name ''RecursiveTri'' does not exist
    in the current context

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 1) return new List<long>() { n };\n        if
    (n % 2 == 0) return new List<long>() { n, Tri(n - 1) + Tri(n - 2) };\n        return
    new List<long>() { n, Tri(n - 1) + Tri(n - 2) + Tri(n - 3) };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj21khc2s.cs(27,54): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpj21khc2s.cs(28,38): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        Debug.Assert(n >= 0);\n        var fib = new List<long>();\n
    \       fib.Add(1L);\n        fib.Add((n + 1L) / 2);\n        while ((fib[n] >
    0) && (n > 0L)) {\n            fib.Add((fib[n - 1L] + fib[n - 2L] + fib[n + 1L])
    / 3);\n            fib[n--]++;\n        }\n        return fib.Take((n + 1L) +
    1).Select(x => (long) x).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp21znlesa.cs(30,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp21znlesa.cs(31,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp21znlesa.cs(31,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp21znlesa.cs(31,54): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp21znlesa.cs(32,17): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp21znlesa.cs(34,25): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n %
    2 == 0)\n            result.Add(1);\n        else\n            result.Add((n /
    2) + 2);\n        if (n % 2 == 1)\n            result.Add(n);\n        else\n
    \           result.Add(Tri(n / 2) + Tri(n / 2) + Tri(n / 2) + Tri(n / 2));\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplr1k9bd9.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028379
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long>();\n        }\n
    \       if (n == 1) {\n            return new List<long>();\n        }\n\n        var
    firstHalf = (n / 2) + 1;\n        var secondHalf = (n - firstHalf) + 1;\n\n        return
    Tri(firstHalf).Concat(Tri(secondHalf)).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660028385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        var f1 =
    new int[3];\n        var f2 = new int[3];\n        var f3 = new int[3];\n        f1[0]
    = 3; f1[1] = f1[2] = f1[3] = (n / 2) + 1;\n        f2[0] = f1[0] + f1[1]; f2[1]
    = f2[2] = f2[3] = (n - f2[0]) / 2 + f1[1];\n        f3[0] = f2[0] + f2[1] + f2[2];
    f3[1] = f3[2] = f3[3] = (n - f3[0]) / 2 + f2[1] + f2[2] + f2[3];\n        while
    (f1[3] > 3) { f1[3] -= 3; f2[3] -= 3; f3[3] -= 3; }\n        result.Add((n - f3[0])
    / 2 + f3[1] + f3[2]);\n        while (f2[3] > 3) { f2[3] -= 3; f3[3] -= 3; }\n
    \       result.Add((n - f2[0]) / 2 + f2[1] + f2[2] + f2[3]);\n        while (f3[3]
    > 3) { f3[3] -= 3; }\n        result.Add((n - f3[0]) / 2 + f3[1] + f3[2] + f3[3]);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyse3rs6l.cs(30,44): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpyse3rs6l.cs(31,56): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpyse3rs6l.cs(32,64): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660028379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long tri = 1;\n        List<long> results = new List<long>();\n\n
    \       if ((n % 2) == 0) {\n            tri = tri + n / 2;\n        } \n        else
    {\n            tri = tri + (n / 2) + (n / 2) + (n / 2);\n        }\n        results.Add(tri);\n
    \       int i = 2;\n        while(i * i <= n){\n            long k = i * i;\n
    \           tri = tri + ((n / k) + ((n / k) / 2));\n            results.Add(tri);\n
    \           i++;\n        }\n        return results;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5dae0a36dbe94136a5e753f464d21232>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5dae0a36dbe94136a5e753f464d21232>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028379
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long prevTri = 1;\n        long nextTri = 2;\n        long
    curTri = 1;\n        List<long> tri = new List<long>();\n        while(true) {\n
    \           tri.Add(curTri);\n            if(n != 0) {\n                if(n %
    2 == 0) {\n                    nextTri = nextTri + prevTri;\n                }\n
    \               else {\n                    prevTri = prevTri + nextTri;\n                    nextTri
    = nextTri + prevTri;\n                }\n            }\n            else {\n                break;\n
    \           }\n            curTri = curTri + prevTri;\n        }\n        return
    tri;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> l = new List<long>();\n        l.Add(3L);\n
    \       if (n % 2 == 0) {\n            l.Add(Tri(n - 1) + Tri(n - 2) + Tri(n +
    1));\n        }\n        return l;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi5fdufxh.cs(29,19): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 1) {\n            return new List<long>();\n        }\n
    \       if (n % 2 == 0) {\n            return new List<long>() { 1 };\n        }\n
    \       List<long> result = new List<long>();\n        long prev = 0;\n        long
    next = 1;\n        long tri = 2;\n        while (tri < n) {\n            double
    tri = (double)tri + (double)next; //\n            double prevNext = (double)prev
    + (double)next;\n            long prevLong = (long)prev;\n            long nextLong
    = (long)next;\n            result.Add((long)((double)tri + (double)tri));\n            prev
    = prevLong;\n            next = nextLong;\n            tri++;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc394x38o.cs(37,20): error CS0136: A local or parameter named ''tri'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpc394x38o.cs(37,34): error CS0165: Use of unassigned local variable ''tri''

    '
  timestamp: 1660028379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 3) {\n            return new List<long>();\n        }\n
    \       bool even = (n % 2 == 0);\n        List<long> result = new List<long>();\n
    \       result.Add((even ? 1L : n + 1L));\n        result.Add((even ? n + 1L :
    3L));\n        return result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d6d0602f1e74a539fd465cf96bcf112>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d6d0602f1e74a539fd465cf96bcf112>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 3) return new List<long>((new long[]{1L, n}));\n
    \       else if (n % 2 == 0) return new List<long>((new long[]{(long)Tri(n - 1)
    + Tri(n - 2) + Tri(n + 1)}));\n        else return new List<long>((new long[]{(long)Tri(n
    - 1) + Tri(n - 2)}));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf9ei0hm9.cs(27,64): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpf9ei0hm9.cs(28,48): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long p = 3L;\n        if (n == 0) return new List<long>()
    {1L};\n        if (n == 1) return new List<long>() {3L};\n        if (n == 2)
    return new List<long>() {1L, (long)3L, (long)2L, (long)8L};\n        if (n % 2
    == 0) { p = (long)(p * p); }\n        long sum = 0;\n        for (long i = 3L;
    i <= n; i += 2L) {\n            sum += p;\n            p = (long)((p - 1) / (2
    * i) + 1);\n        }\n        return new List<long>() {sum, sum + n, sum + 2
    * n};\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <063e3a1c7bf548e690707cc900ca9e57>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <063e3a1c7bf548e690707cc900ca9e57>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\",
    \"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new
    long[] { 1L, 3L, 2L, 8L });\n        else if (n == 1)\n            return new
    List<long>(new long[] { 1L, 3L, 2L, 8L });\n        else if (n % 2 == 0)\n            return
    new List<long>(new long[] { Tri(n - 1) + Tri(n - 2) + Tri(n + 1) });\n        else\n
    \           return new List<long>(new long[] { Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1), Tri(n - 1) + Tri(n - 2) + Tri(n - 1) });\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc_apj5fb.cs(33,48): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpc_apj5fb.cs(35,48): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpc_apj5fb.cs(35,86): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var fibs = new List<long>();\n        fibs.Add((long) 1);\n
    \       fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        fibs.Add((long) 1);\n        fibs.Add((long)
    1);\n        fibs.Add((long) 1);\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxdszyf_v.cs(25,30): error CS0161: ''Problem.Tri(long)'': not all code
    paths return a value

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        Debug.Assert(n > 0);\n        Debug.Assert(n >= 2);\n        var
    result = new List<long>();\n        result.Add(1);\n        if (n%2 == 0)\n        {\n
    \           var nextTribonacci = Tri(n-1) + Tri(n-2) + Tri(n+1);\n            Debug.Assert(nextTribonacci
    > 0);\n            foreach (var i in nextTribonacci)\n            {\n                result.Add(i);\n
    \           }\n        }\n        else\n        {\n            var nextTribonacci
    = Tri(n-1) + Tri(n-2) + Tri(n+1);\n            Debug.Assert(nextTribonacci >=
    2);\n            foreach (var i in nextTribonacci)\n            {\n                result.Add(i);\n
    \           }\n            int index = result.Count;\n            long j = 0;\n
    \           while (j < n)\n            {\n                var nextTribonacci =
    Tri(n-1) + Tri(n-2) + Tri(n+1);\n                result.Add(nextTribonacci[index++]);\n
    \               j++;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvh_y2_cf.cs(32,34): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpvh_y2_cf.cs(41,34): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpvh_y2_cf.cs(51,21): error CS0136: A local or parameter named ''nextTribonacci''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpvh_y2_cf.cs(51,38): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long[] first = new long[n + 1];\n        long[] second
    = new long[n + 1];\n\n        first[0] = 3;\n        second[0] = first[0];\n        for
    (int i = 1; i < first.Length; i++) {\n            first[i] = second[i - 1] + first[i
    - 2];\n            second[i] = first[i] + second[i - 1];\n        }\n        return
    new List<long>(first.Take(n + 1).ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2x2ax7jx.cs(35,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var list = new List<long>();\n        if (n <= 2) {\n            list.Add(n);\n
    \           return list;\n        }\n        var fibonacci = Fibonacci(n);\n        var
    index = 0;\n        while (index <= fibonacci.Count - 1) {\n            list.Add(fibonacci[index]);\n
    \           index++;\n        }\n        return list;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe2mo9__.cs(31,25): error CS0103: The name ''Fibonacci'' does not exist
    in the current context

    /tmp/tmpfe2mo9__.cs(33,25): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Think about how to represent a number in base 10 and
    then figure out how to \n        // represent a number in base n. Use string representation
    of numbers to simplify \n        // the problem. \n        //\n        // For
    example, base 10 representation is \"11\". The tribonacci sequence is \n        //
    \"112\". You could represent those numbers with base 3 = \"110111\". \n        //
    However, base 3 is limited to 10 digits, hence the use of base 10. \n        //
    \n        // Base 10 representation is \"11\". Convert to base 3 \"110111\"\n
    \       //\n        List<long> result = new List<long>();\n        \n        //
    Base 10 representation is \"11\". Convert to base 3 \"110111\"\n        string
    base10Num = Convert.ToString(n, 3);\n        \n        // Remember, numbers are
    represented as strings in base 10\n        string base3Num = base10Num;\n        \n
    \       // Tribonacci sequence requires 3 numbers, hence the use of Tribonacci
    sequence\n        string firstNum = \"3\";\n        \n        // Remember, numbers
    are represented as strings in base 3\n        string secondNum = \"1\";\n        \n
    \       // Tribonacci sequence requires 3 numbers, hence the use of Tribonacci
    sequence\n        string thirdNum = \"2\";\n        \n        // We need to repeat
    the actions below for 3 more times. \n        // We can use nested for loops,
    but that is too much. Instead, \n        // we could use LINQ and Enumerable.Repeat
    to simplify our code. \n        // \n        // Tribonacci sequence requires 3
    numbers, hence the use of Tribonacci sequence\n        for (int i = 3; i <= n;
    i++) {\n            // Remember, numbers are represented as strings in base 3\n
    \           thirdNum = base3Num;\n            \n            // Remember, numbers
    are represented as strings in base 3\n            secondNum = base3Num;\n            \n
    \           // Remember, numbers are represented as strings in base 3\n            firstNum
    = base3Num;\n            \n            // Add the numbers to the list\n            result.Add(BigInteger.Parse(firstNum).Add(BigInteger.Parse(secondNum)).Add(BigInteger.Parse(thirdNum)).ToInt64());\n
    \       }\n\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnbdyyii4.cs(69,51): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Add(BigInteger, BigInteger)''

    /tmp/tmpnbdyyii4.cs(69,84): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Add(BigInteger, BigInteger)''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long>();\n        }\n
    \       var list = new List<long>();\n        if (n % 2 == 0) {\n            list.Add(3);\n
    \           list.Add(1 + n / 2);\n            list.Add(Tri(n - 1) + Tri(n - 2)
    + Tri(n - 3));\n        }\n        else {\n            list.Add(1 + n / 2);\n
    \           list.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n            list.Add(Tri(n
    - 2) + Tri(n - 3) + Tri(n - 4));\n        }\n        return list;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8zw5pjme.cs(33,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp8zw5pjme.cs(37,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp8zw5pjme.cs(38,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // This is an implementation of a solution I posted on
    SO\n        // https://stackoverflow.com/a/68707876/1655007\n        var list
    = new List<long>();\n        if (n == 0)\n            list.Add(0L);\n        if
    (n == 1)\n            list.Add(1L);\n        if (n == 2)\n            list.Add(1L);\n
    \       if (n % 2 == 0) {\n            list.Add(0L);\n            list.Add(1L);\n
    \       }\n        else {\n            list.Add(0L);\n            list.Add(1L);\n
    \           list.Add(1L);\n        }\n        long a = list.Last();\n        for
    (int i = 3; i <= n; i += 2) {\n            var b = list.Last();\n            var
    c = list.Last();\n            list.Add(a + b + c);\n            a = b;\n            b
    = c;\n        }\n        return list;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ff2b453e6b7462fb4c3c4af508e8a50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ff2b453e6b7462fb4c3c4af508e8a50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        double x = Math.Pow((double)n / 2, (double)2);\n        double
    y = Math.Pow((double)n / 2, (double)3);\n        double z = Math.Pow((double)n,
    (double)1);\n        List<long> ret = new List<long>();\n        ret.Add((long)x);\n
    \       if (n % 2 == 0) {\n            ret.Add((long)y);\n        } else {\n            ret.Add((long)z);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1390087aa6324b63a205c72d2f0ff597>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1390087aa6324b63a205c72d2f0ff597>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        using System;\n        using System.Numerics;\n        using
    System.Diagnostics;\n        using System.Collections.Generic;\n        using
    System.Linq;\n        using System.Text;\n        using System.Security.Cryptography;\n
    \       if (n < 2) {\n            throw new ArgumentException(\"n must be greater
    or equal to 2\");\n        }\n        if (n % 2 == 0) {\n            return new
    List<long> {1, n + 1};\n        }\n        else {\n            List<long> ret
    = new List<long> {1, n + 1};\n            for (long i = 2; i <= n; i++) {\n                ret.Add(ret[ret.Count
    - 1] + ret[ret.Count - 2] + ret[ret.Count - 3]);\n            }\n            return
    ret;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphz3j1lsh.cs(26,21): error CS1001: Identifier expected

    /tmp/tmphz3j1lsh.cs(27,30): error CS1001: Identifier expected

    /tmp/tmphz3j1lsh.cs(28,33): error CS1001: Identifier expected

    /tmp/tmphz3j1lsh.cs(29,41): error CS1001: Identifier expected

    /tmp/tmphz3j1lsh.cs(30,26): error CS1001: Identifier expected

    /tmp/tmphz3j1lsh.cs(31,26): error CS1001: Identifier expected

    /tmp/tmphz3j1lsh.cs(32,43): error CS1001: Identifier expected

    '
  timestamp: 1660028379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if ((n &
    1) == 0) {\n            for (long i = 1; i <= n; i++) {\n                result.Add(i);\n
    \           }\n        } else {\n            while (n > 0) {\n                long
    first = 0;\n                long second = 1;\n                long third = 2;\n
    \               while (n > 0) {\n                    result.Add(third);\n                    first
    = second;\n                    second = third;\n                    third = first
    + second;\n                    n -= 2;\n                }\n                result.Add(first
    + second);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f2fea8f050042bcb087ab2ac2bb05a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f2fea8f050042bcb087ab2ac2bb05a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 3) return new List<long>();\n        if (n % 2
    == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        else return Tri(n
    - 1) + Tri(n - 2) + Tri(n - 2) + Tri(n - 2);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_wziqau4.cs(27,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp_wziqau4.cs(28,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // base case\n        if (n < 3L) {\n            return
    new List<long>();\n        }\n        // recursive case\n        long sum = 0;\n
    \       long sum1 = 0;\n        long sum2 = 0;\n        // base case\n        if
    (n % 2 == 0) {\n            return new List<long>(new long[]{1L, (n + 2L)});\n
    \       }\n        // recursive case\n        long x = Tri((n - 1L));\n        long
    y = Tri((n - 2L));\n        List<long> ret = new List<long>();\n        ret.Add(x.Sum());\n
    \       ret.Add(y.Sum());\n        ret.Add(x.Sum() + y.Sum());\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnq7hbc4y.cs(39,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpnq7hbc4y.cs(40,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpnq7hbc4y.cs(42,17): error CS1929: ''long'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpnq7hbc4y.cs(43,17): error CS1929: ''long'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpnq7hbc4y.cs(44,17): error CS1929: ''long'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpnq7hbc4y.cs(44,27): error CS1929: ''long'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpnq7hbc4y.cs(31,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpnq7hbc4y.cs(32,14): warning CS0219: The variable ''sum1'' is assigned
    but its value is never used

    /tmp/tmpnq7hbc4y.cs(33,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        Debug.Assert(n >= 0);\n        List<long> list = new List<long>();\n
    \       if (n % 2 == 0) {\n            list.Add(Tri(n));\n            list.Add(Tri(n
    + 1));\n        } else {\n            list.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1));\n        }\n        return list;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoeatlda5.cs(29,22): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpoeatlda5.cs(30,22): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpoeatlda5.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 1) {\n            return new List<long>(){1L};\n
    \       }\n        if (n == 2) {\n            return new List<long>(){1L, 3L};\n
    \       }\n        var result = new List<long>();\n        long a = Tri(n-1L);\n
    \       long b = Tri(n-2L);\n        long c = Tri(n+1L);\n        result = result.Union(new
    List<long>(){a}).Union(new List<long>(){b}).Union(new List<long>(){c});\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc__x00_o.cs(33,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpc__x00_o.cs(34,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpc__x00_o.cs(35,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpc__x00_o.cs(36,18): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    '
  timestamp: 1660028380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 2) {\n            return new List<long>(new long[0]);\n
    \       }\n        List<long> a = new List<long>();\n        a.Add((long)3);\n
    \       if ((n & 1) == 1) {\n            a.Add( (long)1 +  (n / 2) );\n        }\n
    \       return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff86023a32814aa0a65d6f29e9765d25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff86023a32814aa0a65d6f29e9765d25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0)\n            return new List<long>();\n        if
    (n == 1)\n            return new List<long>(new long[]{3L});\n        if (n ==
    2)\n            return new List<long>(new long[]{1L, 3L, 2L});\n        var left
    = Tri(n - 1);\n        var right = Tri(n - 2);\n        return left.Concat(right).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8f68dd9827146aea73b23f601e2646f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8f68dd9827146aea73b23f601e2646f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n <
    0) throw new Exception(\"Tribonacci sequence cannot be generated if n <= 0\");\n
    \       else if (n == 0) {\n            result.Add(0L);\n            result.Add(1L);\n
    \           return result;\n        }\n        else if (n == 1) {\n            result.Add(0L);\n
    \           result.Add(1L);\n            return result;\n        }\n        else
    if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n - 3));\n        }\n        else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2) + Tri(n + 3));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpngyyegqi.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpngyyegqi.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpngyyegqi.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpngyyegqi.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var r = new List<long>();\n        var m = 0;\n        //
    base case: first element of the sequence\n        if (n <= 0) return r;\n        //
    recursive case: last element of the sequence\n        if (n & 1 == 0) m = n %
    2 == 0 ? 2 : 3;\n        else              m = n % 2 == 0 ? 3 : 1;\n        r.Add(m);
    n = n - m;\n        // add all n / 2 previous elements\n        while (n > 1)
    {\n            var tmp = m + n;\n            r.Add(tmp);\n            m = n;\n
    \           n = tmp;\n        }\n        // add nth element of the sequence to
    the list\n        r.Add(m);\n        return r;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp44dx8dya.cs(31,13): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmp44dx8dya.cs(38,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660028380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) return new List<long>();\n        if (n ==
    1) return new List<long>() { 0 };\n        List<long> r = new List<long>(new long[]
    { 3 });\n        var t = Tri(n - 1);\n        foreach (var item in t)\n        {\n
    \           r.Add(item + r.Last());\n        }\n        return r;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <307b9c1285cc42a5889ace46e95fbd79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <307b9c1285cc42a5889ace46e95fbd79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 1)\n            return new List<long>();\n\n        if
    (n <= 3)\n            return new List<long>() { n };\n\n        long a1 = (n %
    2 == 0 ? 3 : 1);\n        long a2 = n % 2 == 0 ? 1 : 2;\n        long a3 = n /
    2;\n        long a4 = ((a1 + a2 + a3) % 2 == 1 ? a2 : a1) + a3;\n        long
    a5 = a3 + a4;\n        long a6 = ((a3 + a4) % 2 == 1 ? a4 : a3) + a5;\n        long
    a7 = a5 + a6;\n        long a8 = (a5 + a6) % 2 == 1 ? a6 : a5) + a7;\n\n        return
    new List<long>() { a1, a2, a3, a4, a5, a6, a7, a8 };\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvkybpnkr.cs(39,47): error CS1002: ; expected

    /tmp/tmpvkybpnkr.cs(39,47): error CS1513: } expected

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 2L) {\n            return new List<long>();\n        }\n
    \       return Tri(n - 1L) + Tri(n - 2L) + Tri(n - 3L);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqils26qo.cs(29,16): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>();\n        if (n % 2
    == 0)\n            list.Add(n);\n        else\n            list.Add(Tri(n - 1)
    + Tri(n - 2) + Tri(n - 1));\n        return list;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnfg12yh2.cs(30,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        if (n <= 1) {\n
    \           result.Add(n);\n            return result;\n        }\n        var
    lower = n % 2 == 0 ? 1 : 2;\n        var upper = lower + 1;\n        long triangle;\n
    \       while ((triangle = Tri(lower)) < n) {\n            lower = upper;\n            upper
    = lower + 1;\n        }\n        triangle = Tri(upper);\n        result.Add(triangle);\n
    \       while ((triangle = Tri(upper - 1)) > n) {\n            upper = lower +
    1;\n        }\n        triangle = Tri(upper);\n        result.Add(triangle);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo424xlg1.cs(34,28): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo424xlg1.cs(38,20): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo424xlg1.cs(40,28): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo424xlg1.cs(43,20): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var fib = new List<long>();\n        fib.Add((long)3);\n
    \       var nextFib = (long)1;\n        for (var i = 0; i <= n; i++) {\n            fib.Add(nextFib);\n
    \           if (nextFib == (long)3L) nextFib = (long)2;\n            nextFib =
    nextFib + fib.Last();\n        }\n        fib.Remove(fib.Count);\n        return
    fib;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0aa31ad08fb47d0b8f9dacaddc14bbd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0aa31ad08fb47d0b8f9dacaddc14bbd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 3) return new List<long>();\n        if (n % 2
    == 0) return new List<long>(new long[] { 1, 3 });\n        var result = new List<long>();\n
    \       Tri(n - 1, result);\n        result.Add((n - 3) * 2);\n        Tri(n -
    2, result);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdojc3ld.cs(29,9): error CS1501: No overload for method ''Tri'' takes
    2 arguments

    /tmp/tmpzdojc3ld.cs(31,9): error CS1501: No overload for method ''Tri'' takes
    2 arguments

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long>();\n        }\n
    \       if (n == 1) {\n            return new List<long>(new long[]{(long)3L});\n
    \       }\n        var list = new List<long>();\n        for (int i = 0; i < n;
    ++i) {\n            list.Add( \n                // tri(1) = 3\n                3
    \n                // tri(n) = 1 + n / 2, if n is even.\n                + (n &
    1) \n                // tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is
    odd.\n                + Tri(n - 1) \n                + Tri(n - 2)\n                +
    Tri(n + 1));\n        }\n        return list;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplfpybf63.cs(36,17): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long a = 0, b = 1, c = 1;\n        // We start with the
    first 3 numbers of the Fibonacci sequence.\n        List<long> result = new List<long>();\n
    \       result.Add(a);\n        result.Add(b);\n        result.Add(c);\n        //
    If n is even, add first two numbers of Tribonacci sequence:\n        if (n % 2
    == 0) {\n            result.Add(a + b);\n        }\n        // If n is odd, add
    first three numbers of Tribonacci sequence:\n        else {\n            result.Add(a
    + b + c);\n        }\n        // Return the list with the first n + 1 numbers:\n
    \       return result.Take(n + 1).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9b_mlc53.cs(41,28): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long>(new long[]
    { 1 });\n        }\n        if (n % 2 == 0) {\n            var f = Tri(n - 1);\n
    \           return f.Concat(new long[] { ((n / 2) * f.Last() + f.First()) }).ToList();\n
    \       }\n        var f = Tri(n - 1) + Tri(n - 2);\n        return f.Concat(new
    long[] { f.Last() }).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp66jy__q3.cs(30,17): error CS0136: A local or parameter named ''f'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp66jy__q3.cs(33,17): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        int[] t = new int[n];\n        t[0] = 0;\n        t[1]
    = 1;\n        t[2] = 2;\n        for (int i = 0; i < t.Length - 1; i++) {\n            t[i]
    = t[i - 1] + t[i - 2] + t[i + 1];\n        }\n        List<long> ret = new List<long>();\n
    \       for (int i = 0; i < t.Length - 1; i++) {\n            ret.Add(t[i]);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x0001a] in <3df4905973a04e5291cc698dd2785dc2>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <3df4905973a04e5291cc698dd2785dc2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x0001a]
    in <3df4905973a04e5291cc698dd2785dc2>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <3df4905973a04e5291cc698dd2785dc2>:0 \n"
  stdout: ''
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(3);\n
    \           result.Add(1 + n / 2);\n        } else {\n            result.Add(Tri(n
    - 1));\n            result.Add(Tri(n - 2));\n            result.Add(Tri(n + 1));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpczbehib0.cs(34,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpczbehib0.cs(35,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpczbehib0.cs(36,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 1L)\n            return new List<long>();\n        List<long>
    res = new List<long>();\n        Tri(n - 1, res, 0);\n        Tri(n - 2, res,
    0);\n        Tri(n - 1, res, 1);\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpie_yexop.cs(29,9): error CS1501: No overload for method ''Tri'' takes
    3 arguments

    /tmp/tmpie_yexop.cs(30,9): error CS1501: No overload for method ''Tri'' takes
    3 arguments

    /tmp/tmpie_yexop.cs(31,9): error CS1501: No overload for method ''Tri'' takes
    3 arguments

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        \n        // base
    cases\n        if (n == 0) return new List<long>(new long[] {0L});\n        if
    (n == 1) return new List<long>(new long[] { 1L });\n        \n        // recursive
    cases\n        var firstFibonacciNumber = new BigInteger(\"1\");\n        var
    secondFibonacciNumber = new BigInteger(\"2\");\n        \n        while (n >=
    2) {\n            \n            // tri(n - 1)\n            var firstTribonacciNumber
    = firstFibonacciNumber.Add(secondFibonacciNumber);\n            \n            //
    tri(n - 2)\n            var secondTribonacciNumber = firstTribonacciNumber.Add(secondFibonacciNumber);\n
    \           \n            // tri(n + 1)\n            var thirdTribonacciNumber
    = firstTribonacciNumber.Add(secondTribonacciNumber);\n            \n            //
    add it to the result\n            result.Add(thirdTribonacciNumber);\n            \n
    \           // reset base values\n            firstFibonacciNumber = secondFibonacciNumber;\n
    \           secondFibonacciNumber = thirdTribonacciNumber;\n            \n            n--;\n
    \       }\n        \n        // return the result\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4u9ea7x_.cs(33,51): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmp4u9ea7x_.cs(34,52): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmp4u9ea7x_.cs(39,62): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Add(BigInteger, BigInteger)''

    /tmp/tmp4u9ea7x_.cs(42,64): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Add(BigInteger, BigInteger)''

    /tmp/tmp4u9ea7x_.cs(45,63): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Add(BigInteger, BigInteger)''

    /tmp/tmp4u9ea7x_.cs(48,24): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''long''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var list = new List<long>();\n        if (n == 1) list.Add(1L);\n
    \       else if (n == 2) list.Add(2L);\n        else\n        {\n            list.Add(Tri(n-1)
    + Tri(n-2) + Tri(n+1));\n        }\n        return list;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmstkik2s.cs(31,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        Debug.Assert(n > 0);\n        List<long> result = new List<long>();\n
    \       long tri = 0;\n        if (n % 2 == 0) tri = Tri(n / 2) + Tri(n / 3);\n
    \       else tri = Tri(n / 2) + Tri(3 * n + 1);\n        result.Add((long)tri);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphbba97r2.cs(29,31): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmphbba97r2.cs(30,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n
    \       else\n            result.Add(1);\n        if (n % 2 == 0) {\n            for
    (int i = 1; i <= n; i+= 2)\n                result.Add(i);\n        } else {\n
    \           for (int i = 3; i <= n; i+= 2)\n                result.Add(i);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02fc132beb8748c185bb1394e49990f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02fc132beb8748c185bb1394e49990f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var fib = Fib(n);\n        var results = new List<long>();\n
    \       for (int i = 0; i < n; i++) {\n            results.Add(fib[i] + fib[i
    + 1]);\n        }\n        return results;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1ogjfymg.cs(26,19): error CS0103: The name ''Fib'' does not exist in the
    current context

    '
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        int x = 0, y = 1, z = 2;\n        if (n > 0) {\n            if
    (n % 2 == 0) {\n                x += (n / 2);\n            }\n            else
    {\n                y += (n / 2);\n            }\n            z += (n / 2);\n            n
    -= 1;\n        }\n        return new List<long>(new long[]{x, y, z});\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8x9g9ot3.cs(29,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8x9g9ot3.cs(32,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8x9g9ot3.cs(34,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 2L) {\n            return new List<long>();\n
    \       }\n        var result = new List<long>();\n        for (int i = 1; i <=
    n; i++) {\n            var temp1 = i;\n            var temp2 = i;\n            var
    temp3 = temp1 + temp2;\n            while (temp3 > 0) {\n                result.Add((long)temp1);\n
    \               temp1 += (temp3 % 2L);\n                temp3 /= 2L;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu07bq3mx.cs(36,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpu07bq3mx.cs(37,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660028381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // The base case\n        if (n <= 2L) {\n            return
    new List<long>(new long[] { 1L, 3L, 2L, n });\n        }\n\n        // The recursive
    case\n        long a = 2L;\n        long b = 3L;\n        long c = 1L;\n        List<long>
    result = new List<long>();\n        for (int i = 3; i <= n; i++) {\n            result.Add(a
    + b + c);\n            a = b;\n            b = c;\n            c = a + b + c;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90ca8d86588e4cbfbe0e4df4c2460b34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90ca8d86588e4cbfbe0e4df4c2460b34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long x = 1;\n        long y = 2;\n        List<long> result
    = new List<long>();\n        while ( n > 1 ) {\n            result.Add( x );\n
    \           long sum = x + y;\n            if ( sum < n ) {\n                x
    += y;\n            } else {\n                x -= y;\n                y += sum;\n
    \           }\n            n--;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d5ddd9b3e56457ba843ebf8810c1168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d5ddd9b3e56457ba843ebf8810c1168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 1) return new List<long>(new long[]{1L});\n        if
    (n == 2) return new List<long>(new long[]{3L});\n        List<long> result = new
    List<long>();\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) +
    Tri(n - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n - 3)
    + Tri(n - 2) + Tri(n - 1));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn9n3awur.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpn9n3awur.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long>();\n        }
    else if (n == 1) {\n            return new List<long>(new long[] { (long)3L });\n
    \       } else if (n % 2 == 0) {\n            return new List<long>(new long[]
    { n, (long)((n + 1) * Tri(n - 1L) + Tri(n - 2L) + Tri(n + 1L)) });\n        }
    else {\n            return new List<long>(new long[] { n, (long)((n + 1) * Tri(n
    - 1L) + Tri(n - 2L)) });\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc9y67iqq.cs(31,58): error CS0019: Operator ''*'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    /tmp/tmpc9y67iqq.cs(33,58): error CS0019: Operator ''*'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    '
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) return new List<long>();\n        if (n % 2
    == 0) {\n            return new List<long>(new long[] { Tri(n - 1) + Tri(n - 2)
    + Tri(n + 1), Tri(n - 1) });\n        }\n        return new List<long>(new long[]
    { Tri(n - 1) + Tri(n - 2) + Tri(n + 1), Tri(n - 2), Tri(n + 1) });\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmaerjsei.cs(28,48): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpmaerjsei.cs(28,86): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpmaerjsei.cs(30,44): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpmaerjsei.cs(30,82): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpmaerjsei.cs(30,94): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long[] result = new long[n + 1];\n        result[0] = 3L;\n
    \       if (n % 2 == 0) {\n            result[n] = 1 + n / 2;\n        }\n        else
    {\n            result[n] = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        }\n
    \       return result.Take(n + 1).Select(n => (long)n).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpryjnvdik.cs(32,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpryjnvdik.cs(34,28): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var ret = new List<long>();\n\n        if (n == 1) ret.Add(1);\n
    \       else if (n % 2 == 0) {\n            ret.Add((Tri(n / 2) + Tri(n / 3) +
    Tri(n / 4)));\n        } else {\n            ret.Add((Tri(n / 2) + Tri(n / 3)
    - Tri(n / 4)));\n        }\n\n        return ret;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqg89h3hk.cs(30,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpqg89h3hk.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 0) throw new ArgumentOutOfRangeException(\"n\",
    \"n must be non-negative\");\n        if (n == 0) { return new List<long>(0L);
    }\n        List<long> result = new List<long>();\n        result.Add(0);\n        if
    (n % 2 == 0) result.Add(1);\n        else {\n            int m = (int)Math.Floor(n
    / 2L);\n            long prev = m * m;\n            result.Add(prev);\n            long
    next = (m * m) + (prev + prev);\n            result.Add(next);\n            for
    (int i = 2; i <= n; i++)\n            {\n                prev = next;\n                next
    = (m * i) + (prev + prev);\n                result.Add(next);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp88lge409.cs(27,45): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp88lge409.cs(32,31): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1660028381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Tribonacci sequence is defined by:\n        // tri(1)
    = 3\n        // tri(n) = 1 + n / 2, if n is even.\n        // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n        // \n        // For example:\n
    \       // tri(2) = 1 + (2 / 2) = 2\n        // tri(4) = 3\n        // tri(3)
    = tri(2) + tri(1) + tri(4)\n        // = 2 + 3 + 3 = 8 \n        // \n        //
    You are given a non-negative integer number n, you have to a return a list \n
    \       // of the first n + 1 numbers of the Tribonacci sequence.\n        //
    \n        // Examples:\n        // >>> Tri((3L))\n        // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n        if (n <= 1) {\n            return
    new List<long>(new long[] { n });\n        }\n\n        long[] tab = new long[n
    + 1];\n        tab[0] = 0;\n        tab[1] = 1;\n        tab[2] = n;\n\n        for
    (int i = 2; i <= n; i++) {\n            tab[i] = tab[i - 1] + tab[i - 2];\n        }\n
    \       return new List<long>(tab);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d960e248399a45d8b46d59551f7e587d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d960e248399a45d8b46d59551f7e587d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long a = 1, b = 2, c = 1;\n        List<long> list = new
    List<long>();\n        while(n>0) {\n            if(n%2 == 0) {\n                c
    = a+b+c;\n            }\n            else {\n                c = a+b+c;\n            }\n
    \           list.Add(c);\n            n /= 2;\n            if(n>0) {\n                a
    = b;\n                b = c;\n            }\n        }\n        return list;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d52fd33e43f746b5a56c5ab6819bf383>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d52fd33e43f746b5a56c5ab6819bf383>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var list = new List<long>();\n        if (n == 1) list.Add(1);\n
    \       else if (n <= 2) list.Add(2);\n        else if (n % 2 == 0) list.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        else list.Add(Tri(n - 1) + Tri(n - 2)
    + Tri(n + 1) + Tri(n - 3));\n        return list;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_c8603cb.cs(29,39): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp_c8603cb.cs(30,23): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> ret = new List<long>();\n        if (n <= 1)
    { return new List<long>() { n }; }\n        ret.Add(1);\n        if (n % 2 ==
    0) { ret.Add(n / 2); }\n        else { ret.Add(3); ret.Add(1 + n / 2); }\n        if
    (n <= 3) { ret.Add(n); }\n        else { ret.Add(Tri(n - 2) + Tri(n - 1) + Tri(n
    + 1)); }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph8aqocl3.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> answer = new List<long>();\n        if (n ==
    0) {\n            answer.Add(0);\n            return answer;\n        }\n        long
    a = Tri(n/2).Sum();\n        long b = Tri(n/2).Sum();\n        long c = a + b;\n
    \       if (n % 2 == 1) {\n            answer = new List<long> { c, a };\n        }
    else {\n            answer = new List<long> { c };\n        }\n        return
    answer;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ffc0613eeb34268b62920f0748e3009>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ffc0613eeb34268b62920f0748e3009>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Write your code here.\n        List<long> res = new
    List<long>();\n        if (n == 1) return res;\n        if (n % 2 == 0) {\n            res.Add(1);\n
    \           res.Add(Tri(n / 2)); // this line is wrong, it should be Tri(n / 2)
    instead\n        } else {\n            long n1 = Tri(n - 1) + Tri(n - 2) + Tri(n
    / 2);\n            res.Add(n1);\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpasqql4df.cs(31,21): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpasqql4df.cs(33,23): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028381
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        long tri_sum
    = 0;\n        // tri_sum = 1 + n / 2\n        tri_sum += n / 2;\n        while(n
    > 0) {\n            // tri_sum = 3\n            tri_sum += n / 2;\n            n
    = n % 2;\n        }\n        result.Add(tri_sum);\n        // tri_sum + tri(n
    - 1) + tri(n - 2) + tri(n - 3)\n        tri_sum = tri_sum + tri_sum + tri_sum;\n
    \       while(n > 0) {\n            // tri_sum = tri_sum + tri(n - 1) + tri(n
    - 2) + tri(n - 3)\n            tri_sum += tri_sum + tri_sum + tri_sum;\n            n
    = n % 2;\n        }\n        result.Add(tri_sum);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660028386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var nums = new List<long>();\n        nums.Add(0L);\n        var
    num2 = 1L;\n        while (n > 1L) {\n            var num3 = num2 + num1;\n            if
    (n % 2L == 1L) num3 += num2;\n            nums.Add(num3);\n            num1 =
    num2;\n            num2 = num3;\n            n--;\n        }\n        return nums;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpflywiwx1.cs(30,31): error CS0103: The name ''num1'' does not exist in
    the current context

    /tmp/tmpflywiwx1.cs(33,13): error CS0103: The name ''num1'' does not exist in
    the current context

    '
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var results = new List<long>(new long[n + 1]);\n        results[0]
    = 3L;\n        if (n%2 == 0) \n            results[1] = Tri((n - 1L) + 1) + Tri((n
    - 1L) + 2);\n        else \n            results[1] = Tri((n - 1L) + 2) + Tri((n
    - 1L) + 1);\n        for (int i = 2; i <= n; i++) {\n            results[i + 2]
    = results[i + 1] + results[i]; \n        }\n        return results;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx6fqg5qg.cs(29,26): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpx6fqg5qg.cs(31,26): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 3)\n            throw new ArgumentOutOfRangeException(\"n\");\n
    \       var sequence = new List<long>();\n        sequence.Add(1);\n        if
    (n % 2 == 0)\n            sequence.Add(n + 1);\n        else\n            sequence
    = (sequence.Concat(Sequence(n - 2))).Concat(Sequence(n + 1));\n        return
    sequence;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3b8ecw7.cs(33,41): error CS0103: The name ''Sequence'' does not exist
    in the current context

    /tmp/tmpu3b8ecw7.cs(33,66): error CS0103: The name ''Sequence'' does not exist
    in the current context

    '
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long[] arr1 = new long[] { 1L, 0L, 0L, 0L };\n        long[]
    arr2 = new long[] { 3L, 2L, 1L, 0L };\n        var result = new List<long>();\n\n
    \       long tri1 = arr1[3];\n        if (n % 2 == 0) {\n            tri1 = (arr1[3]
    + arr2[3]) / (double)2;\n        }\n        long tri2 = arr1[n / 2];\n        if
    (n % 2 == 0) {\n            tri2 = (arr1[n / 2] + arr2[n / 2]) / (double)2;\n
    \       }\n\n        result.Add(tri1);\n        if (n % 2 == 0) {\n            result.Add(tri2);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpemd5r4of.cs(32,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpemd5r4of.cs(36,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660028381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var tri = new List<long>(new long[n+1]);\n        var prev
    = new long[n];\n        var next = new long[n];\n        prev[0] = prev[1] = 1;\n
    \       next[1] = next[2] = 2;\n        for(int i=3; i<=n; i++) {\n            var
    p = prev[i];\n            tri[i] = p;\n            prev[i+1] = next[i];\n            next[i+1]
    = p + next;[i]; //p + p / 2\n        }\n        return tri;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpte282o2b.cs(35,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''long'' and ''long[]''

    /tmp/tmpte282o2b.cs(35,34): error CS7014: Attributes are not valid in this context.

    '
  timestamp: 1660028381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long tri = n + 1;\n        tri = tri + (tri / 2);\n        if
    (tri % 2 == 0)\n            return new List<long>(new long[]{ tri, (tri + tri
    / 2)});\n        else\n            return new List<long>(new long[]{ tri, (tri
    + tri / 2), (tri + tri)});\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b0cc3ac2cf34403bc4d1a5340404da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b0cc3ac2cf34403bc4d1a5340404da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>(new long[n + 1]);\n
    \       // first two terms\n        for (int i = 0; i < n; i++)\n            result.Add(i);\n
    \       // the rest terms\n        bool even = true;\n        for (int i = 2;
    i <= n; i++) {\n            if (even)\n                result.Add(result.Last()
    + i);\n            else\n                result.Add(result.Last() - i);\n            even
    = !even;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0804f3912f05472eae8b0fafa76d4d39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0804f3912f05472eae8b0fafa76d4d39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 0)\n            throw new ArgumentException(\"Negative
    number.\");\n        if (n == 0)\n            return new List<long>();\n        if
    (n == 1)\n            return new List<long>() { 3L };\n        var tri = new List<long>();\n
    \       tri.Add(1);\n        tri.Add((long)(Math.Sqrt(5) / Math.Pow(3,n)));\n
    \       int index = tri.Count - 1;\n        List<long> res = new List<long>();\n
    \       if (n & 1 == 1) {\n            tri.Add((long)(Math.Sqrt(5) / Math.Pow(3,n
    - 1)));\n            index--;\n        }\n        tri.Add((long)(Math.Sqrt(5)
    / Math.Pow(3,n - 2)));\n        index--;\n        foreach (var el in tri)\n        {\n
    \           long curr = el;\n            int i;\n            for (i = 0; i <=
    index; i++)\n                res.Add(curr);\n            curr++;\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsd8ha1_o.cs(37,13): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1660028381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        long[] a
    = new long[4] { 1, 1, 2, 3 };\n        long[] b = new long[4];\n        long[]
    c = new long[4];\n        long f = 3;\n        for (int i = 0; i < n; i++) {\n
    \           long f1 = f++;\n            long f2 = f;\n            long f3 = f;\n
    \           for (int j = 0; j < 4; j++) {\n                if (i % 2 == 0) {\n
    \                   f1 *= f;\n                } else {\n                    f2
    *= f;\n                }\n            }\n            for (int j = 0; j < 4; j++)
    {\n                if (i == 0) {\n                    f3 *= f;\n                }
    else {\n                    f3 *= f3;\n                }\n            }\n            result.Add(f1);\n
    \           result.Add(f2);\n            result.Add(f3);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff179106939d4bfd984b9b3718c3a747>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff179106939d4bfd984b9b3718c3a747>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 3) {\n            return new List<long>(new long[]
    { 1 });\n        }\n        if (n % 2 == 1) {\n            return Tri(n - 1).Concat(Tri(n
    - 2)).Concat(Tri(n + 1)).ToList();\n        } else {\n            return Tri(n
    - 1).Concat(Tri(n - 2)).ToList();\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660028387
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 3)\n            return Enumerable.Repeat(new long[]{1L},
    n).ToList();\n        else if (n % 2 == 0)\n            return Tri(n - 1) + Tri(n
    - 2) + Tri(n - 1);\n        else\n            return Tri(n - 1) + Tri(n - 2) +
    Tri(n + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpye_e_90t.cs(27,54): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpye_e_90t.cs(29,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpye_e_90t.cs(31,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // The list of numbers we are going to return.\n        List<long>
    list = new List<long>();\n        // The initial two numbers.\n        long num1
    = 1;\n        long num2 = 2;\n        // Add numbers to list, one at a time.\n
    \       while (n > 0) {\n            // If n is odd, then add it to the list as
    tri(n) - tri(n - 1) + tri(n - 2).\n            // If n is even, then add it to
    the list as tri(n) - tri(n - 1).\n            if (n % 2 == 1) {\n                list.Add(num1);\n
    \           }\n            else {\n                list.Add(num2);\n            }\n
    \           n = n - 1;\n            num2 = num1 + num2;\n            num1 = num2;\n
    \       }\n        return list;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df5e7ec7e5ff4503a18d7d7efb030b7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df5e7ec7e5ff4503a18d7d7efb030b7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long first = 1;\n        long second = 2;\n        List<long>
    result = new List<long>();\n        while (n-- > 0) {\n            result.Add(first);\n
    \           first = second + (first % 2 == 0 ? 1 : 0);\n            second = first;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <919cf93dbad24b30961eeffd0aa05163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <919cf93dbad24b30961eeffd0aa05163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        long tri1
    = 1;\n        long tri2 = 1;\n        long tri3 = 0;\n        while(n > 0) {\n
    \           if(n%2 == 0) {\n                tri3 = tri2 + tri1;\n                result.Add(tri3);\n
    \               tri2 = tri1;\n                tri1 = tri3;\n            } else
    {\n                tri2 = tri1 + tri2;\n                result.Add(tri2);\n                tri1
    = tri2;\n            }\n            n /= 2;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17ea109e7f724ab492e5b5f9a87e383f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17ea109e7f724ab492e5b5f9a87e383f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        long a =
    (long)3;\n        long b = (long)1;\n        long c = (long)1;\n        bool flag
    = true;\n        for (long i = 1; i < n; i++) {\n            if (flag) {\n                result.Add(a);\n
    \               c = a + b;\n                b = c;\n            } else {\n                result.Add(b);\n
    \               a = c + b;\n                c = a;\n            }\n            flag
    = !flag;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ccba4d7ff4464269b7733de9a3418af6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ccba4d7ff4464269b7733de9a3418af6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // base case\n        if (n == 1) return new List<long>
    { 1L };\n        // recursive case\n        if (n % 2 == 0) {\n            List<long>
    result = Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n            return result;\n        }
    else {\n            List<long> result = Tri(n - 2) + Tri(n - 1) + Tri(n - 1);\n
    \           return result;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsy0wkix3.cs(30,33): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpsy0wkix3.cs(33,33): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long[] sequence = new long[n + 1];\n        sequence[0]
    = 0;\n        sequence[1] = 1 + n / 2;\n        sequence[2] = 1 + sequence[1];\n\n
    \       for (int i = 2; i <= n; i++) {\n            sequence[i] = sequence[i -
    1] + sequence[i - 2];\n        }\n\n        return new List<long>(sequence);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9ecfc1e7b00418fbfcecaf6ebc1aff2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9ecfc1e7b00418fbfcecaf6ebc1aff2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0 || n == 1)\n            return new List<long>()
    { n };\n        if (n % 2 == 0)\n            return new List<long>() { n, n +
    1 / 2, n / 2 + 1 };\n        return new List<long>() { n, n, n + 1 };\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <370ea56395024da1b6f8f877d9fe623e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <370ea56395024da1b6f8f877d9fe623e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> nums = new List<long>(new long[n + 1]);\n        nums[0]
    = (long)3;\n        for (int i = 1; i < n; i++)\n            nums[i] = nums[i
    - 1] + nums[i - 2];\n        return nums;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0002a] in <31ba23f80c7c430aa469a8febc424526>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <31ba23f80c7c430aa469a8febc424526>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0002a]
    in <31ba23f80c7c430aa469a8febc424526>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <31ba23f80c7c430aa469a8febc424526>:0 \n"
  stdout: ''
  timestamp: 1660028382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        double tri
    = 1.0;\n        double fib = 0.0;\n        for (int i = 1; i <= n; i++) {\n            tri
    *= (1.0 / i);\n            fib += tri;\n            result.Add((long)Math.Round(fib));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41891382515547759caeb6ab9cb54e67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41891382515547759caeb6ab9cb54e67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long tri1 = 3L;\n        long tri2 = 1L;\n        long
    tri3 = 1L;\n        List<long> result = new List<long>();\n        long k = 0;\n
    \       for (int i = 0; i < n; i++) {\n            k = tri2;\n            tri2
    = tri1;\n            tri1 = tri3;\n            tri3 = k + tri1 + tri2 + tri3;\n
    \           result.Add(tri3);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25899ddccc24a01abf1a1e1e296ef6c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25899ddccc24a01abf1a1e1e296ef6c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        \n        List<long> res = new List<long>();\n\n        if
    (n == 0) res.Add(0L);\n        if (n == 1) res.Add(1L);\n        if (n == 2) res.Add(2L);\n
    \       if (n % 2 == 0) res.Add((n-2) + n / 2);\n        else res.Add((n-1) +
    n);\n        return res;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75035a21b3fc42b28351f79996dc1ce4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75035a21b3fc42b28351f79996dc1ce4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n <
    3L) {\n            result.Add(1L);\n            result.Add(1L);\n            result.Add(1L);\n
    \           result.Add(1L);\n            return result;\n        }\n        bool
    isEven = n % 2 == 0L;\n        long a = 0L;\n        long b = 1L;\n        long
    c = 2L;\n        while (c < n) {\n            if (isEven) {\n                a
    += c;\n            } else {\n                b += c;\n            }\n            if
    (isEven) {\n                a += b;\n            } else {\n                b +=
    a;\n            }\n            result.Add(b);\n            isEven = !isEven;\n
    \           c += 2;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f8cc87db7d6430b93e94cd53e05315c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f8cc87db7d6430b93e94cd53e05315c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> numbers = new List<long>();\n        if (n ==
    0) {\n            numbers.Add(0L);\n            return numbers;\n        }\n        if
    (n % 2 == 0) {\n            numbers.Add(1L);\n            numbers.Add(n);\n            return
    numbers;\n        }\n        numbers.Add(1);\n        numbers = Tri(n - 1) + Tri(n
    - 2) + Tri(n + 1);\n        return numbers;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdanr3c0f.cs(37,19): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        int firstNumber = (n * 2L) + 1;\n        List<long> result
    = new List<long>();\n        result.Add((firstNumber - 1L));\n        firstNumber
    = firstNumber + (n - 1L);\n        result.Add((firstNumber - 1L));\n        firstNumber
    = firstNumber + 1;\n        result.Add((firstNumber - 1L));\n        firstNumber
    = firstNumber + (n - 1L);\n        result.Add((firstNumber - 1L));\n        firstNumber
    = firstNumber + 1;\n        result.Add((firstNumber - 1L));\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9etltdvx.cs(26,27): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9etltdvx.cs(29,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9etltdvx.cs(33,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> ret = new List<long>();\n        if (n == 1L)
    return ret;\n\n        double a = (double)n;\n        double b = 2.0 * n;\n        double
    c = ((double)n) + 1.0;\n\n        // Tribonacci sequence recurrence:\n        //
    tri(1) = 3\n        // tri(n) = 1 + n / 2, if n is even.\n        // tri(n) =
    \ tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n        // For example:\n
    \       // tri(2) = 1 + (2 / 2) = 2\n        // tri(4) = 3\n        // tri(3)
    = tri(2) + tri(1) + tri(4)\n        // = 2 + 3 + 3 = 8 \n        // We are working
    with double precision, so we can\n        // represent tri(3) with double precision\n
    \       double tri = c;\n\n        double triSquare = tri * tri;\n\n        //
    If the number is even, we add its square to the previous square\n        if ((n
    % 2L) == 0)\n            ret.Add(triSquare);\n\n        // If the number is odd,
    we add its square to the last square\n        else\n            ret.Add(triSquare
    + tri);\n\n        // Tribonacci sequence recurrence:\n        // tri(1) = 3\n
    \       // tri(n) = 1 + n / 2, if n is even.\n        // tri(n) =  tri(n - 1)
    + tri(n - 2) + tri(n + 1), if n is odd.\n        // For example:\n        // tri(2)
    = 1 + (2 / 2) = 2\n        // tri(4) = 3\n        // tri(3) = tri(2) + tri(1)
    + tri(4)\n        // = 2 + 3 + 3 = 8 \n        // We are working with double precision,
    so we can\n        // represent tri(3) with double precision\n        c = b;\n
    \       tri = c;\n\n        // If the number is even, we add its square to the
    previous square\n        if ((n % 2L) == 0)\n            ret.Add(triSquare);\n\n
    \       // If the number is odd, we add its square to the last square\n        else\n
    \           ret.Add(triSquare + tri);\n\n        // Tribonacci sequence recurrence:\n
    \       // tri(1) = 3\n        // tri(n) = 1 + n / 2, if n is even.\n        //
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n        // For example:\n
    \       // tri(2) = 1 + (2 / 2) = 2\n        // tri(4) = 3\n        // tri(3)
    = tri(2) + tri(1) + tri(4)\n        // = 2 + 3 + 3 = 8 \n        // We are working
    with double precision, so we can\n        // represent tri(3) with double precision\n
    \       tri = c;\n\n        // If the number is \n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7je_3euo.cs(50,21): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmp7je_3euo.cs(54,21): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmp7je_3euo.cs(72,21): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmp7je_3euo.cs(76,21): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmp7je_3euo.cs(25,30): error CS0161: ''Problem.Tri(long)'': not all code
    paths return a value

    '
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long>();\n        }\n
    \       var first = Tri(n - 1);\n        var second = Tri(n - 2);\n        var
    third = Tri(n - 3);\n        return new List<long>(new long[] {\n            (long)Math.Max(first[0]
    + second[0] + third[0], first[1] + second[1] + third[1], first[2] + second[2]
    + third[2]),\n            (long)Math.Max(first[0] + second[0] + third[0], first[1]
    + second[1] + third[1], first[2] + second[2] + third[2]),\n            (long)Math.Max(first[0]
    + second[0] + third[0], first[1] + second[1] + third[1], first[2] + second[2]
    + third[2])\n        });\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4wlxzc0q.cs(33,24): error CS1501: No overload for method ''Max'' takes
    3 arguments

    /tmp/tmp4wlxzc0q.cs(34,24): error CS1501: No overload for method ''Max'' takes
    3 arguments

    /tmp/tmp4wlxzc0q.cs(35,24): error CS1501: No overload for method ''Max'' takes
    3 arguments

    '
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long[] array = new long[n + 1];\n        long third = (long)Math.Floor(Math.Sqrt(n));\n
    \       array[0] = 3L;\n        for (int i = 1; i < array.Length; i++) {\n            array[i]
    = array[i-1] + array[i - 2] + third;\n        }\n        return new List<long>(array);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x00024] in <f15a49049432424bb4efef322f7cf2fa>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <f15a49049432424bb4efef322f7cf2fa>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x00024]
    in <f15a49049432424bb4efef322f7cf2fa>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <f15a49049432424bb4efef322f7cf2fa>:0 \n"
  stdout: ''
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        if (n < 3)
    {\n            res.Add(1L);\n            res.Add(n); //2\n        }\n        else
    {\n            if (n % 2 == 0) //even\n                res.Add(Tri(n - 1) + Tri(n
    - 2) + Tri(n + 1)); //(1 + 2) / 2 = 2\n            else //odd\n                res.Add(Tri(n
    - 1) + Tri(n - 2)); //(1 + 2) / 3 = 1 + 3 = 3\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdihdlu0n.cs(33,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpdihdlu0n.cs(35,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\",
    \"n should be non-negative.\");\n        }\n        long fibThree = 1;\n        long
    fibTwo = 0;\n        long fibOne = 1;\n        long sum = 0;\n        while (fibTwo
    <= n) {\n            fibThree = fibOne + fibTwo;\n            fibOne = fibTwo;\n
    \           fibTwo = fibThree;\n            sum++;\n        }\n        if (n%2==0)
    {\n            return new List<long>() { fibThree + fibTwo + fibOne };\n        }
    else {\n            return new List<long>() { fibThree + fibTwo + fibOne + 1 };\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cc0d474f2b64582b3fc20f66f80186a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cc0d474f2b64582b3fc20f66f80186a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    1)\n            result.Add(3);\n        else if (n % 2 == 0)\n            result.Add(1);\n
    \       else\n            result.Add((Tri(n - 1) + Tri(n - 2) + Tri(n + 1)));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw0fn1u5g.cs(32,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // I know, I can make it shorter but this is more readable.\n
    \       var a = new List<long>();\n        var tempList = new List<long>();\n
    \       var tempList2 = new List<long>();\n        var tempList3 = new List<long>();\n
    \       var tempList4 = new List<long>();\n        // Base cases\n        if (n
    <= 1) { return new List<long>(); }\n        if (n == 2) { return new List<long>()
    { (long)1 }; }\n        // Recursive case\n        if (n % 2 == 0) {\n            tempList.Add((long)3);\n
    \           return tempList;\n        }\n        else {\n            tempList.Add((long)1);\n
    \           tempList2.Add(n / 2);\n            tempList3.Add((long)Tri(n - 1));\n
    \           tempList4.Add((long)Tri(n - 2));\n            while (tempList.Count
    < n + 1) {\n                tempList.Add(tempList2[tempList.Count] + tempList3[tempList.Count]
    + tempList4[tempList.Count]);\n            }\n            return tempList;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzbqtwmxy.cs(43,27): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzbqtwmxy.cs(44,27): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0)\n            return new List<long>(new long[]
    { 1 });\n        if (n == 1)\n            return new List<long>(new long[] { 3
    });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3
    });\n        if (n % 2 == 0) {\n            int a = 1 + n / 2;\n            int
    b = 2 + n / 2;\n            int c = a + b;\n            return new List<long>(new
    long[] { (long) a, (long) c, (long) b});\n        } else {\n            int a
    = 1 + n / 2;\n            int b = a + 1;\n            int c = b + n;\n            return
    new List<long>(new long[] { (long) a, (long) c, (long) b});\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj_2gs4av.cs(33,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj_2gs4av.cs(34,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj_2gs4av.cs(38,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj_2gs4av.cs(40,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660028383
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long a = 3;\n        long b = 0;\n        long c = 1;\n
    \       var triList = new List<long>();\n        while (b <= n) {\n            triList.Add(b);\n
    \           b = a * c + b;\n            a = c;\n            c = a + b;\n        }\n
    \       return triList;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2851395743ed42c3b63ecd5bcb1cfb73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2851395743ed42c3b63ecd5bcb1cfb73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n <
    2) {\n            result.Add((long)1);\n            result.Add((long)n);\n            result.Add((long)(n
    + 1));\n            return result;\n        }\n        long n2 = n / 2;\n        result.Add((long)Tri(n2));\n
    \       if (n % 2 == 0) {\n            result.Add((long)(n2 + 1));\n            result.Add((long)Tri(n
    - 1));\n        } else {\n            result.Add((long)Tri(n - 1) + Tri(n - 2)
    + Tri(n + 1));\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjqtipfae.cs(34,20): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpjqtipfae.cs(37,24): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpjqtipfae.cs(39,24): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 3L) return Enumerable.Repeat(1L, n + 1).ToList();\n
    \       var rem = n % 2L;\n        if (rem == 0L) return\n            Enumerable.Repeat(\n
    \               ((n == 1L ? 3L : (n % 2L ? 1L : n) + rem),\n                n
    / 2L\n                ).Concat(\n                Tri(n / 2L).Select(\n                    t
    => (n % 2L ? 1L : n) + rem\n                    )\n                ).ToList();\n
    \       else return\n            Tri(n / 2L).Select(\n                t => (n
    % 2L ? 1L : n) + rem\n                ).Concat(\n                Tri(n % 2L ?
    n / 2L : 1L)\n                ).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsj9gcplr.cs(36,27): error CS1026: ) expected

    '
  timestamp: 1660028382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return n < 3\n            ? new List<long>() { n }\n            :
    new List<long>(new long[]{\n                Tri(n - 1) + Tri(n - 2) + Tri(n +
    1), \n                Tri(n - 1) + Tri(n - 2),\n                Tri(n - 1) + Tri(n
    + 1)\n            });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkc_a66og.cs(29,17): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpkc_a66og.cs(30,17): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpkc_a66og.cs(31,17): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028383
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long x = 1;\n        long y = 2;\n        long z = 3;\n
    \       List<long> results = new List<long>();\n\n        while (x < (n + 1))\n
    \       {\n            if (n % (2 * x + 1) != 0)\n            {\n                results.Add(z);\n
    \               z = y + z + x;\n            }\n            else\n            {\n
    \               results.Add(x + y);\n                x = y + x;\n            }\n
    \           y = x;\n        }\n\n        return results;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660028388
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>();\n        if (n == 0)\n
    \       {\n            list.Add((long)1);\n            list.Add((long)3);\n            list.Add((long)2);\n
    \       }\n        else if (n <= 1)\n        {\n            list.Add((long)n);\n
    \       }\n        else\n        {\n            list.Add((long)n);\n            list.Add((long)Tri(n
    - 1));\n            list.Add((long)Tri(n - 2));\n        }\n        return list;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0bzod971.cs(40,22): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0bzod971.cs(41,22): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 1L) {\n            throw new ArgumentOutOfRangeException(\"n\",
    \"n must be > 0\");\n        }\n        if (n == 2L) {\n            return new
    List<long>(new long[]{(long)1L, (long)3L});\n        }\n        if (n == 3L) {\n
    \           return new List<long>(new long[]{(long)1L, (long)2L, (long)3L});\n
    \       }\n        if (n % 2 == 1L) {\n            return new List<long>(new long[]{Tri(n
    - 1L) + Tri(n - 2L) + Tri(n - 3L), Tri(n - 3L)});\n        }\n        return Tri(n
    - 1L) + Tri(n - 2L);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpifsfap39.cs(36,46): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpifsfap39.cs(36,87): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpifsfap39.cs(38,16): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        Debug.Assert(n >= 0);\n        if (n < 3) {\n            throw
    new ArgumentOutOfRangeException(\"n\", \"The input number must be positive.\");\n
    \       }\n        var n2 = n % 2 == 0 ? n / 2 : n - 1;\n        var n3 = n +
    n2;\n        var n4 = n3 + n3;\n        var n5 = n4 + n4;\n        var n6 = n5
    + n5;\n        var n7 = n6 + n6;\n        return new List<long>(n1, n2, n3, n4,
    n5, n6, n7);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnsaywz0.cs(36,31): error CS0103: The name ''n1'' does not exist in the
    current context

    /tmp/tmpjnsaywz0.cs(36,20): error CS1729: ''List<long>'' does not contain a constructor
    that takes 7 arguments

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1)
    + Tri(n - 2) + Tri(n - 1));\n        }\n        else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg3stc5yy.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpg3stc5yy.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 1)\n            return new List<long>() { n };\n
    \       if (n % 2 == 0) {\n            return Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1);\n        }\n        List<long> result = new List<long>();\n        Tri(n
    - 2, ref result, new long[] {n, n});\n        Tri(n - 1, ref result, new long[]
    {n, n, n});\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx0immyja.cs(29,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpx0immyja.cs(32,9): error CS1501: No overload for method ''Tri'' takes
    3 arguments

    /tmp/tmpx0immyja.cs(33,9): error CS1501: No overload for method ''Tri'' takes
    3 arguments

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0 || n == 1)\n            return new List<long>(new
    long[] { 1 });\n        var n2 = n % 2;\n        var list = Tri(n - 1);\n        if
    (n2 == 0)\n            list.Add(list[0] + list[1] + list[2]);\n        else\n
    \           list.Add(list[0] + list[1] + list[2] + list[3]);\n        return list;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00045] in <c1b613b19b2d4986b8a3e2d15c3b7963>:0 \n  at Problem.Tri (System.Int64
    n) [0x00028] in <c1b613b19b2d4986b8a3e2d15c3b7963>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c1b613b19b2d4986b8a3e2d15c3b7963>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00045]
    in <c1b613b19b2d4986b8a3e2d15c3b7963>:0 \n  at Problem.Tri (System.Int64 n) [0x00028]
    in <c1b613b19b2d4986b8a3e2d15c3b7963>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c1b613b19b2d4986b8a3e2d15c3b7963>:0 \n"
  stdout: ''
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 1) {\n            return new List<long>() { 1
    };\n        }\n\n        var tri = new List<long>();\n        var tri2 = Tri(n
    - 1);\n        var tri3 = Tri(n - 2);\n\n        tri.AddRange(tri2.Skip(1));\n
    \       tri.AddRange(tri3.Skip(1));\n\n        if (n % 2 == 0) {\n            tri.Add(tri(n
    - 1) + tri(n - 2) + tri(n + 1));\n        }\n        else {\n            tri.Add(tri(n
    - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n + 2) + tri(n + 3));\n        }\n\n
    \       return tri;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsz04r7_p.cs(38,21): error CS0149: Method name expected

    /tmp/tmpsz04r7_p.cs(38,34): error CS0149: Method name expected

    /tmp/tmpsz04r7_p.cs(38,47): error CS0149: Method name expected

    /tmp/tmpsz04r7_p.cs(41,21): error CS0149: Method name expected

    /tmp/tmpsz04r7_p.cs(41,34): error CS0149: Method name expected

    /tmp/tmpsz04r7_p.cs(41,47): error CS0149: Method name expected

    /tmp/tmpsz04r7_p.cs(41,60): error CS0149: Method name expected

    /tmp/tmpsz04r7_p.cs(41,73): error CS0149: Method name expected

    /tmp/tmpsz04r7_p.cs(41,86): error CS0149: Method name expected

    '
  timestamp: 1660028383
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 3) {\n            return new List<long>();\n        }\n\n
    \       var list = new List<long>();\n\n        var first = 3 + (n / 2);\n        var
    second = first + first;\n        var third = second + second;\n        var fourth
    = third + third;\n\n        list.Add(first);\n        if (n % 2 == 0) {\n            list.Add(second);\n
    \       }\n        else {\n            list.Add(third);\n        }\n        list.Add(fourth);\n\n
    \       return list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b7ca664b0844081a4244f8ebbe4ba24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b7ca664b0844081a4244f8ebbe4ba24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028383
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var triList = new List<long>();\n        // The first two
    elements of the sequence are 1.\n        triList.Add(1L);\n        // If n is
    even, tribonacci sequence is \n        // the sum of two odd numbers.\n        if
    (n % 2 == 0)\n        {\n            // Add two numbers.\n            triList.Add(n
    + n + 1);\n            // If n is odd, add the sum of two even numbers.\n        }\n
    \       else\n        {\n            // Add two numbers.\n            triList.Add(n);\n
    \           // Add an odd number.\n            triList.Add(n + 1);\n            //
    If n is odd, add the sum of two even numbers.\n        }\n        return triList;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06e6b989560d4904ad2b9a38e5b6d056>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06e6b989560d4904ad2b9a38e5b6d056>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 2L) return null;\n        if (n == 2L) return new
    List<long>(new long[] {1L, 3L});\n        return Tri(n - 1L) + Tri(n - 2L) + Tri(n
    - 3L);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpii_mane4.cs(28,16): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 1)\n            return new List<long>(new long[]
    { 1 });\n        if (n % 2 == 0) {\n            var list = new List<long>(new
    long[] { 3 * Tri(n - 2) + Tri(n - 1) });\n            list.AddRange(Tri(n - 1));\n
    \           return list;\n        }\n        else {\n            var list = new
    List<long>(new long[] { Tri(n - 1) + Tri(n - 2) });\n            list.AddRange(Tri(n
    - 2));\n            return list;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdjg2top6.cs(29,52): error CS0019: Operator ''*'' cannot be applied to
    operands of type ''int'' and ''List<long>''

    /tmp/tmpdjg2top6.cs(34,52): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028383
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>(1);\n        long tri1
    = 1L;\n        long tri2 = 2L;\n        while (tri1 <= n) {\n            result.Add(tri1);\n
    \           tri2 = tri1 + tri2;\n            tri1++;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8da9ff0d0c7a453f935bab53af4b8529>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8da9ff0d0c7a453f935bab53af4b8529>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 1L) return new List<long>(new long[]{1L});\n        if
    (n == 2L) return new List<long>(new long[]{2L});\n        if (n % 2L == 0) return
    Tri(n - 1L).Concat(Tri(n - 2L)).Concat(Tri(n + 1L));\n        return Tri(n - 1L).Concat(Tri(n
    - 2L)).Concat(Tri(n + 1L)).Concat(Tri(n - 1L)).Concat(Tri(n + 1L));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp79w03ep8.cs(28,33): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    /tmp/tmp79w03ep8.cs(29,16): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // You can solve it recursively, or iteratively by memoizing
    the computed values.\n        List<long> result = new List<long>();\n        if
    (n <= 1) {\n            result.Add(n);\n            return result;\n        }\n\n
    \       bool even = n % 2 == 0;\n        long first = ((n - 1) + ((n - 2) + (n))
    / 2L);\n        if (even) {\n            result.Add(first);\n        }\n\n        long
    second = Tri(n - 1);\n        if (even) {\n            result.AddRange(second.Select(c
    => (c * 3) + first));\n        }\n        else {\n            result.AddRange(second);\n
    \           result.AddRange(second.Select(c => (c * 3) + first));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9pmeusja.cs(39,23): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9pmeusja.cs(41,36): error CS1061: ''long'' does not contain a definition
    for ''Select'' and no accessible extension method ''Select'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp9pmeusja.cs(44,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp9pmeusja.cs(45,36): error CS1061: ''long'' does not contain a definition
    for ''Select'' and no accessible extension method ''Select'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Write your code here\n        Debug.Assert(n > 0);\n
    \       if (n == 1)\n            return new List<long> { 1 };\n        if (n ==
    2)\n            return new List<long> { 3 };\n        var first = Tri(n - 1);\n
    \       var second = Tri(n - 2);\n        var third = Tri(n - 1) + Tri(n - 2)
    + Tri(n + 1);\n        return first.Concat(second, third);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z4p77co.cs(34,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var resultList = new List<long>();\n        if (n < 3)
    {\n            resultList.Add((long)3);\n            return resultList;\n        }\n\n
    \       var num = (int)Math.Floor(n / 2.0L);\n        var nextNum = (int)Math.Floor(n
    / 3.0L);\n        var result = (long)Math.Pow(num, 2) + (long)Math.Pow(nextNum,
    2);\n        resultList.Add(result);\n        resultList.Add(result + (long)Math.Pow(num,
    3));\n        return resultList;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3yvmc1f0.cs(32,42): error CS1003: Syntax error, '','' expected

    /tmp/tmp3yvmc1f0.cs(33,46): error CS1003: Syntax error, '','' expected

    '
  timestamp: 1660028383
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var tri = new List<long>();\n        var a = 3;\n        var
    b = (a + n) / 2;\n        var c = (a + n + b) / 2;\n        var d = a + 2 * b
    + c;\n        tri.Add(a);\n        if (n % 2 == 0) {\n            tri.Add(b);\n
    \       } else {\n            tri.Add(c);\n        }\n        if (n % 2 == 1)
    {\n            tri.Add(d);\n        } else {\n            tri.Add(a + 2 * b +
    d);\n        }\n        return tri;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b681e8a3d9af465eb9366d0ab72fb784>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b681e8a3d9af465eb9366d0ab72fb784>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        Debug.Assert(n >= 0, \"n must be non-negative long\");\n
    \       var result = new List<long>();\n        if (n <= 1) {\n            result.Add(n);\n
    \           return result;\n        }\n\n        if (n % 2 == 0) {\n            result.Add(n);\n
    \           return result;\n        }\n        var nextTribonacci = Tri(n - 1)
    + Tri(n - 2) + Tri(n + 1);\n        result.AddRange(nextTribonacci);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1t1f8ehj.cs(37,30): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 2)\n            return new List<long>();\n        else
    if (n % 2 == 0)\n            return new List<long> {\n                1 + (n /
    2)\n            };\n        else\n            return new List<long> {\n                Tri(n
    - 1) + (Tri(n - 2) + (Tri(n - 1) + Tri(n + 1))) / 3\n            };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkb9obkx4.cs(34,45): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) return new List<long>();\n        if (n % 2
    == 0) {\n            List<long> res = new List<long>();\n            res.Add(Tri(n
    - 2) + Tri(n - 1));\n            res.Add(Tri(n - 1));\n            return res;\n
    \       } else {\n            List<long> res = new List<long>();\n            res.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            return res;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkrtur5vq.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpkrtur5vq.cs(30,21): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkrtur5vq.cs(34,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 1L) return new List<long>();\n        else if
    (n % 2 == 0) return Tri(n - 1L).Concat(Tri(n - 2L)).Concat(Tri(n + 1L));\n        else
    return Tri(n - 1L).Concat(Tri(n - 1L)).Concat(Tri(n + 1L));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6isqewfv.cs(27,37): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    /tmp/tmp6isqewfv.cs(28,21): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    '
  timestamp: 1660028383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        Debug.Assert(n >= 0);\n\n        List<long> res = new List<long>(new
    long[]{1L});\n        if (n == 0L) {\n            return res;\n        }\n\n        //
    If n is even, recur for odd numbers only.\n        if (n & 1L) {\n            int
    div = n / 2L;\n            List<long> odd = Tri(div);\n            List<long>
    even = Tri(n - div);\n            List<long> res = new List<long>(new long[]{even.First(),
    even.Last() + odd.First(), odd.Last()});\n            return res;\n        }\n\n
    \       // If n is odd, recur for even numbers only.\n        int div = n / 2L;\n
    \       List<long> even = Tri(div);\n        List<long> odd = Tri(n - div);\n
    \       List<long> res = new List<long>(new long[]{even.First(), even.Last() +
    odd.First(), odd.Last()});\n        return res;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpef83i8_j.cs(34,13): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpef83i8_j.cs(35,17): error CS0136: A local or parameter named ''div'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpef83i8_j.cs(35,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpef83i8_j.cs(36,24): error CS0136: A local or parameter named ''odd'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpef83i8_j.cs(37,24): error CS0136: A local or parameter named ''even''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpef83i8_j.cs(38,24): error CS0136: A local or parameter named ''res'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpef83i8_j.cs(43,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpef83i8_j.cs(46,20): error CS0128: A local variable or function named ''res''
    is already defined in this scope

    '
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        switch (n)
    {\n            case 1: result.Add(3L);\n                break;\n            case
    2: result.Add(1L);\n                result.Add(3L);\n                break;\n
    \           case 3: result.Add(1L);\n                result.Add(2L);\n                result.Add(3L);\n
    \               break;\n            default: \n                result.Add(nL);\n
    \               result.Add(n - 1L);\n                result.Add(n + 1L);\n                break;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps5afz5r3.cs(38,28): error CS0103: The name ''nL'' does not exist in the
    current context

    '
  timestamp: 1660028384
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var r = new List<long>();\n        var n1 = Tri(n - 1);\n
    \       var n2 = Tri(n - 2);\n        var n3 = Tri(n - 3);\n        r.AddRange(n1);\n
    \       r.AddRange(n2);\n        r.AddRange(n3);\n        r.Sort();\n        return
    r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660028389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        if (n == 0L)\n
    \           return result;\n        if (n % 2 == 0L) {\n            result.Add(2L);\n
    \           result.Add(Tri(n - 1L));\n            return result;\n        }\n
    \       else {\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n
    - 2L));\n            return result;\n        }\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptt40t5y8.cs(31,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmptt40t5y8.cs(35,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmptt40t5y8.cs(36,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 2) return new List<long>();\n        Tri(num: n);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx6op_oq7.cs(27,13): error CS1739: The best overload for ''Tri'' does not
    have a parameter named ''num''

    /tmp/tmpx6op_oq7.cs(25,30): error CS0161: ''Problem.Tri(long)'': not all code
    paths return a value

    '
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) return new List<long>();\n        if (n ==
    1) return new List<long>() {(long)3L };\n        if (n == 2) return new List<long>()
    { (long)3L, (long)2L };\n        var fib = new int[(int) n];\n        fib[0] =
    0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; ++i) {\n            fib[i]
    = fib[i - 1] + fib[i - 2];\n        }\n        return fib.Skip(1).Take(3).Select(x
    => (long)x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x0006d] in <8badaaec93d4441d82d6c6a0183595d3>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <8badaaec93d4441d82d6c6a0183595d3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x0006d]
    in <8badaaec93d4441d82d6c6a0183595d3>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8badaaec93d4441d82d6c6a0183595d3>:0 \n"
  stdout: ''
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 3) {\n            return new List<long>(); \n        }\n
    \       var l = new List<long>() { 1 };\n        for (int i = 3; i <= n; i +=
    2) {\n            l.Add(l[l.Count - 1] + l[l.Count - 2] + l[l.Count - 3]);\n        }\n
    \       return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0003d] in <46582e02e2ea401ba8c860e8d7a2bf07>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <46582e02e2ea401ba8c860e8d7a2bf07>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0003d]
    in <46582e02e2ea401ba8c860e8d7a2bf07>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <46582e02e2ea401ba8c860e8d7a2bf07>:0 \n"
  stdout: ''
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 1) {\n            return new List<long>(new long[]
    { 1 });\n        }\n        long a = 3, c = 1, b = a + c;\n        List<long>
    result = new List<long>();\n        while (true) {\n            if (n % 2 == 0)
    {\n                long d = Math.Sqrt(n * a - b);\n                result.Add(b);\n
    \               b = c + a;\n                if (d == 0)\n                    break;\n
    \               c = d;\n            }\n            else {\n                long
    d = Math.Sqrt(n * b);\n                result.Add(c);\n                b = a +
    c;\n                if (d == 0)\n                    break;\n                a
    = d;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6isebrlw.cs(33,26): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6isebrlw.cs(41,26): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 3L) {\n            return new List<long>(new long[]{1L,
    3L, 2L, 8L});\n        }\n        var tri = new List<long>(new long[n + 1]);\n
    \       // We start with the tri(3) term:\n        tri[0] = tri[2] = tri[3] =
    3L;\n        // Next, we fill in the rest of the tri terms using \n        //
    the recurrence: \n        tri[1] = tri[n] = 1 + n / 2;\n        if (n % 2 == 0)
    {\n            // n is even, we need to add tri(n - 1) & tri(n - 2) + tri(n +
    1).\n            tri[n + 1] = tri[n + 2] = (tri[n] - 1) + tri[n + 1];\n        }
    else {\n            // n is odd, we need to add tri(n - 1) + tri(n - 2) + tri(n
    + 1).\n            tri[n + 1] = (tri[n] - 2) + tri[n + 1];\n        }\n        return
    tri;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnen6494m.cs(34,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnen6494m.cs(37,17): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnen6494m.cs(37,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnen6494m.cs(37,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnen6494m.cs(37,58): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnen6494m.cs(40,17): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnen6494m.cs(40,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnen6494m.cs(40,45): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        long n =
    n;\n        long nextNumber = n / 2;\n        result.Add((long)nextNumber);\n
    \       nextNumber = n / 2 + nextNumber + 1;\n        result.Add((long)nextNumber);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe5b4kk3w.cs(27,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpe5b4kk3w.cs(27,18): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        int[] a = new int[n];\n        a[0] = 0;\n        a[1]
    = 1;\n        for (int i = 2; i <= n; i++) {\n            a[i] = a[i-1] + a[i
    - 2];\n        }\n        return new List<long>(a);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnfp75qd.cs(32,31): error CS1503: Argument 1: cannot convert from ''int[]''
    to ''int''

    '
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if ((n &
    1) == 1) {\n            for (int i = 1; i <= n; i++) {\n                result.Add((double)i);\n
    \           }\n            return result;\n        }\n        long result = 1;\n
    \       for (int i = 2; i <= n / 2; i++) {\n            result += ((double)i)
    / 2;\n            result.Add((double)i);\n        }\n        long lastTri = result;\n
    \       result.Add(lastTri);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2w97fj3g.cs(29,28): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmp2w97fj3g.cs(33,14): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmp2w97fj3g.cs(35,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''List<long>'' and ''double''

    /tmp/tmp2w97fj3g.cs(36,24): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmp2w97fj3g.cs(38,24): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp2w97fj3g.cs(33,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    '
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n <=
    0) return result;\n        if (n == 1) return new List<long> {n};\n        long
    firstHalf = n / 2;\n        if (n % 2 == 0) {\n            int secondHalf = n
    / 2;\n            result.AddRange(Tri(firstHalf));\n            result.AddRange(Tri(secondHalf));\n
    \       }\n        else {\n            result.AddRange(Tri(firstHalf));\n            result.AddRange(Tri(n
    - firstHalf - 1));\n            result.AddRange(Tri(n - secondHalf - 1));\n            result.AddRange(Tri(n));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd7fvfmp7.cs(31,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpd7fvfmp7.cs(38,37): error CS0103: The name ''secondHalf'' does not exist
    in the current context

    '
  timestamp: 1660028384
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var list = new List<long>();\n        if (n == 0) list.Add(1);\n
    \       if (n == 1) list.Add(2);\n        if (n % 2 == 0) {\n            for (int
    i = 3; i <= n; i += 2) {\n                list.Add(i);\n            }\n        }
    else {\n            for (int i = 3; i <= n; i += 3) {\n                list.Add(i);\n
    \           }\n        }\n        return list;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <692e2226d51b4c019a7d078a93f8a882>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <692e2226d51b4c019a7d078a93f8a882>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 1) {\n            return new List<long>(new long[]{1L});\n
    \       }\n        if (n == 2) {\n            return new List<long>(new long[]{3L});\n
    \       }\n        if (n == 3) {\n            return new List<long>(new long[]{3L,
    2L, 1L});\n        }\n        if (n % 2 == 0) {\n            long a = Tri(n /
    2);\n            long b = Tri((n - 1L) / 2);\n            return new List<long>(new
    long[]{\n                (a[1] + 1L + b[1] + 1L),\n                (a[2] + 1L
    + b[2] + 1L),\n                (a[3] + 1L + b[3] + 1L)\n            });\n        }
    else {\n            long a = Tri((n - 1L) / 2);\n            long b = Tri(n /
    2);\n            return new List<long>(new long[]{\n                (a[1] + 1L
    + b[1] + 1L),\n                (a[2] + 1L + b[2] + 1L),\n                (a[3]
    + 1L + b[3] + 1L)\n            });\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdfl89hcw.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdfl89hcw.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdfl89hcw.cs(39,18): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdfl89hcw.cs(39,30): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdfl89hcw.cs(40,18): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdfl89hcw.cs(40,30): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdfl89hcw.cs(41,18): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdfl89hcw.cs(41,30): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdfl89hcw.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdfl89hcw.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdfl89hcw.cs(47,18): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdfl89hcw.cs(47,30): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdfl89hcw.cs(48,18): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdfl89hcw.cs(48,30): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdfl89hcw.cs(49,18): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdfl89hcw.cs(49,30): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1660028384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 1L) \n            return new List<long> { 1L };\n
    \       if (n & 1L == 0)\n            return new List<long> { 1L };\n        long[]
    a = { 1L }, b = { 3L }, c = { 2L };\n        while ((n -= 2L) > 1L) {\n            a.Add(b[n
    / 2L] + c[n / 2L + 1]);\n            b.Add(a[n / 2L] + c[n / 2L + 1]);\n            c.Add(a[n
    / 2L] + b[n / 2L + 1]);\n        }\n        return new List<long>(a + b + c);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp37vsmlf4.cs(28,13): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmp37vsmlf4.cs(32,15): error CS1061: ''long[]'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''long[]'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp37vsmlf4.cs(33,15): error CS1061: ''long[]'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''long[]'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp37vsmlf4.cs(34,15): error CS1061: ''long[]'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''long[]'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp37vsmlf4.cs(36,31): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''long[]'' and ''long[]''

    '
  timestamp: 1660028384
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var list = new List<long>();\n        if (n < 0) {\n            throw
    new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 3) {\n            list.Add(1);\n
    \           list.Add(3);\n        } else if (n % 2 == 0) {\n            list.Add(n);\n
    \           list.Add(n + 1);\n        } else {\n            var a = Tri(n - 1);\n
    \           list.AddRange(a);\n            var b = Tri(n - 1);\n            list.AddRange(b);\n
    \           list.Add(n);\n        }\n        return list;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4707ff07e484d0bbce9c1beed12470e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4707ff07e484d0bbce9c1beed12470e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028384
